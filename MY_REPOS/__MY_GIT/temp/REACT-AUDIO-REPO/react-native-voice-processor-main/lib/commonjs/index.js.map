{"version":3,"sources":["index.tsx"],"names":["RCTVoiceProcessor","NativeModules","PvVoiceProcessor","BufferEmitter","VoiceProcessor","constructor","frameLength","sampleRate","_frameLength","_sampleRate","_recording","getVoiceProcessor","instance","start","Promise","resolve","stop"],"mappings":";;;;;;;AAWA;;;;AAEA,MAAMA,iBAAiB,GAAGC,2BAAcC,gBAAxC;AAEA,MAAMC,aAAa,GAAGH,iBAAtB;;;AAEA,MAAMI,cAAN,CAAqB;AAOXC,EAAAA,WAAR,CAAoBC,WAApB,EAAyCC,UAAzC,EAA6D;AAAA;;AAAA;;AAAA;;AAC3D,SAAKC,YAAL,GAAoBF,WAApB;AACA,SAAKG,WAAL,GAAmBF,UAAnB;AACA,SAAKG,UAAL,GAAkB,KAAlB;AACD;;AAED,SAAcC,iBAAd,CACEL,WADF,EAEEC,UAFF,EAGkB;AAChB,QAAI,CAACH,cAAc,CAACQ,QAApB,EAA8B;AAC5BR,MAAAA,cAAc,CAACQ,QAAf,GAA0B,IAAIR,cAAJ,CAAmBE,WAAnB,EAAgCC,UAAhC,CAA1B;AACD,KAFD,MAEO;AACLH,MAAAA,cAAc,CAACQ,QAAf,CAAwBJ,YAAxB,GAAuCF,WAAvC;AACAF,MAAAA,cAAc,CAACQ,QAAf,CAAwBH,WAAxB,GAAsCF,UAAtC;AACD;;AAED,WAAOH,cAAc,CAACQ,QAAtB;AACD;;AAED,QAAMC,KAAN,GAAc;AACZ,QAAI,KAAKH,UAAT,EAAqB;AACnB,aAAOI,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,SAAKL,UAAL,GAAkB,IAAlB;AACA,WAAOV,iBAAiB,CAACa,KAAlB,CAAwB,KAAKL,YAA7B,EAA2C,KAAKC,WAAhD,CAAP;AACD;;AAED,QAAMO,IAAN,GAAa;AACX,QAAI,CAAC,KAAKN,UAAV,EAAsB;AACpB,aAAOI,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,SAAKL,UAAL,GAAkB,KAAlB;AACA,WAAOV,iBAAiB,CAACgB,IAAlB,EAAP;AACD;;AA3CkB;;;;gBAAfZ,c","sourcesContent":["//\n// Copyright 2020 Picovoice Inc.\n//\n// You may not use this file except in compliance with the license. A copy of the license is located in the \"LICENSE\"\n// file accompanying this source.\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n// an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n//\n\nimport { NativeModules } from 'react-native';\n\nconst RCTVoiceProcessor = NativeModules.PvVoiceProcessor;\ntype BufferCallbackType = (buffer: number[]) => void;\nconst BufferEmitter = RCTVoiceProcessor;\n\nclass VoiceProcessor {\n  private static instance: VoiceProcessor;\n\n  private _frameLength: number;\n  private _sampleRate: number;\n  private _recording: boolean;\n\n  private constructor(frameLength: number, sampleRate: number) {\n    this._frameLength = frameLength;\n    this._sampleRate = sampleRate;\n    this._recording = false;\n  }\n\n  public static getVoiceProcessor(\n    frameLength: number,\n    sampleRate: number\n  ): VoiceProcessor {\n    if (!VoiceProcessor.instance) {\n      VoiceProcessor.instance = new VoiceProcessor(frameLength, sampleRate);\n    } else {\n      VoiceProcessor.instance._frameLength = frameLength;\n      VoiceProcessor.instance._sampleRate = sampleRate;\n    }\n\n    return VoiceProcessor.instance;\n  }\n\n  async start() {\n    if (this._recording) {\n      return Promise.resolve(true);\n    }\n\n    this._recording = true;\n    return RCTVoiceProcessor.start(this._frameLength, this._sampleRate);\n  }\n\n  async stop() {\n    if (!this._recording) {\n      return Promise.resolve(true);\n    }\n\n    this._recording = false;\n    return RCTVoiceProcessor.stop();\n  }\n}\n\nexport { VoiceProcessor, BufferEmitter, BufferCallbackType };\n"]}