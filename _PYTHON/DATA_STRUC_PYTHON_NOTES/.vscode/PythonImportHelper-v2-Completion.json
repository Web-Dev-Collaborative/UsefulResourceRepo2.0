[
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Vector2",
        "importPath": "pygame.math",
        "description": "pygame.math",
        "isExtraImport": true,
        "detail": "pygame.math",
        "documentation": {}
    },
    {
        "label": "Vector2",
        "importPath": "pygame.math",
        "description": "pygame.math",
        "isExtraImport": true,
        "detail": "pygame.math",
        "documentation": {}
    },
    {
        "label": "Vector2",
        "importPath": "pygame.math",
        "description": "pygame.math",
        "isExtraImport": true,
        "detail": "pygame.math",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ball",
        "description": "ball",
        "isExtraImport": true,
        "detail": "ball",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "block",
        "description": "block",
        "isExtraImport": true,
        "detail": "block",
        "documentation": {}
    },
    {
        "label": "add_to_head",
        "importPath": "guided",
        "description": "guided",
        "isExtraImport": true,
        "detail": "guided",
        "documentation": {}
    },
    {
        "label": "add_to_tail",
        "importPath": "guided",
        "description": "guided",
        "isExtraImport": true,
        "detail": "guided",
        "documentation": {}
    },
    {
        "label": "add_to_next",
        "importPath": "guided",
        "description": "guided",
        "isExtraImport": true,
        "detail": "guided",
        "documentation": {}
    },
    {
        "label": "print_list",
        "importPath": "guided",
        "description": "guided",
        "isExtraImport": true,
        "detail": "guided",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cmp_to_key",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "total_ordering",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "some_function",
        "importPath": "my_module",
        "description": "my_module",
        "isExtraImport": true,
        "detail": "my_module",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "ChainMap",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "maxsize",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "HTMLParser",
        "importPath": "html.parser",
        "description": "html.parser",
        "isExtraImport": true,
        "detail": "html.parser",
        "documentation": {}
    },
    {
        "label": "name2codepoint",
        "importPath": "html.entities",
        "description": "html.entities",
        "isExtraImport": true,
        "detail": "html.entities",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "ParserCreate",
        "importPath": "xml.parsers.expat",
        "description": "xml.parsers.expat",
        "isExtraImport": true,
        "detail": "xml.parsers.expat",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "pdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdb",
        "description": "pdb",
        "detail": "pdb",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "mydict",
        "description": "mydict",
        "isExtraImport": true,
        "detail": "mydict",
        "documentation": {}
    },
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "tkinter.messagebox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.messagebox",
        "description": "tkinter.messagebox",
        "detail": "tkinter.messagebox",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "Parser",
        "importPath": "email.parser",
        "description": "email.parser",
        "isExtraImport": true,
        "detail": "email.parser",
        "documentation": {}
    },
    {
        "label": "decode_header",
        "importPath": "email.header",
        "description": "email.header",
        "isExtraImport": true,
        "detail": "email.header",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "email.header",
        "description": "email.header",
        "isExtraImport": true,
        "detail": "email.header",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "formataddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "poplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "poplib",
        "description": "poplib",
        "detail": "poplib",
        "documentation": {}
    },
    {
        "label": "encoders",
        "importPath": "email",
        "description": "email",
        "isExtraImport": true,
        "detail": "email",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "ev3brick",
        "importPath": "pybricks",
        "description": "pybricks",
        "isExtraImport": true,
        "detail": "pybricks",
        "documentation": {}
    },
    {
        "label": "ev3brick",
        "importPath": "pybricks",
        "description": "pybricks",
        "isExtraImport": true,
        "detail": "pybricks",
        "documentation": {}
    },
    {
        "label": "ev3brick",
        "importPath": "pybricks",
        "description": "pybricks",
        "isExtraImport": true,
        "detail": "pybricks",
        "documentation": {}
    },
    {
        "label": "ev3brick",
        "importPath": "pybricks",
        "description": "pybricks",
        "isExtraImport": true,
        "detail": "pybricks",
        "documentation": {}
    },
    {
        "label": "Motor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "TouchSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "ColorSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "InfraredSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "UltrasonicSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "GyroSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "Motor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "TouchSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "ColorSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "InfraredSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "UltrasonicSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "GyroSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "Motor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "TouchSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "ColorSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "InfraredSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "UltrasonicSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "GyroSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "Motor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "TouchSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "ColorSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "InfraredSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "UltrasonicSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "GyroSensor",
        "importPath": "pybricks.ev3devices",
        "description": "pybricks.ev3devices",
        "isExtraImport": true,
        "detail": "pybricks.ev3devices",
        "documentation": {}
    },
    {
        "label": "Port",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Stop",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Direction",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "SoundFile",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "ImageFile",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Align",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Port",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Stop",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Direction",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "SoundFile",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "ImageFile",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Align",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Port",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Stop",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Direction",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "SoundFile",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "ImageFile",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Align",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Port",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Stop",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Direction",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "SoundFile",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "ImageFile",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "Align",
        "importPath": "pybricks.parameters",
        "description": "pybricks.parameters",
        "isExtraImport": true,
        "detail": "pybricks.parameters",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "wait",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "StopWatch",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "wait",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "StopWatch",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "wait",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "StopWatch",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "wait",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "StopWatch",
        "importPath": "pybricks.tools",
        "description": "pybricks.tools",
        "isExtraImport": true,
        "detail": "pybricks.tools",
        "documentation": {}
    },
    {
        "label": "DriveBase",
        "importPath": "pybricks.robotics",
        "description": "pybricks.robotics",
        "isExtraImport": true,
        "detail": "pybricks.robotics",
        "documentation": {}
    },
    {
        "label": "DriveBase",
        "importPath": "pybricks.robotics",
        "description": "pybricks.robotics",
        "isExtraImport": true,
        "detail": "pybricks.robotics",
        "documentation": {}
    },
    {
        "label": "DriveBase",
        "importPath": "pybricks.robotics",
        "description": "pybricks.robotics",
        "isExtraImport": true,
        "detail": "pybricks.robotics",
        "documentation": {}
    },
    {
        "label": "DriveBase",
        "importPath": "pybricks.robotics",
        "description": "pybricks.robotics",
        "isExtraImport": true,
        "detail": "pybricks.robotics",
        "documentation": {}
    },
    {
        "label": "struct,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct.",
        "description": "struct.",
        "detail": "struct.",
        "documentation": {}
    },
    {
        "label": "detectJoystick",
        "importPath": "devices",
        "description": "devices",
        "isExtraImport": true,
        "detail": "devices",
        "documentation": {}
    },
    {
        "label": "detectJoystick",
        "importPath": "devices",
        "description": "devices",
        "isExtraImport": true,
        "detail": "devices",
        "documentation": {}
    },
    {
        "label": "JoyStick",
        "importPath": "joystick",
        "description": "joystick",
        "isExtraImport": true,
        "detail": "joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_A",
        "importPath": "joystick",
        "description": "joystick",
        "isExtraImport": true,
        "detail": "joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_X",
        "importPath": "joystick",
        "description": "joystick",
        "isExtraImport": true,
        "detail": "joystick",
        "documentation": {}
    },
    {
        "label": "time,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time.",
        "description": "time.",
        "detail": "time.",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "random,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random.",
        "description": "random.",
        "detail": "random.",
        "documentation": {}
    },
    {
        "label": "BaseManager",
        "importPath": "multiprocessing.managers",
        "description": "multiprocessing.managers",
        "isExtraImport": true,
        "detail": "multiprocessing.managers",
        "documentation": {}
    },
    {
        "label": "BaseManager",
        "importPath": "multiprocessing.managers",
        "description": "multiprocessing.managers",
        "isExtraImport": true,
        "detail": "multiprocessing.managers",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "unique",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_server",
        "importPath": "wsgiref.simple_server",
        "description": "wsgiref.simple_server",
        "isExtraImport": true,
        "detail": "wsgiref.simple_server",
        "documentation": {}
    },
    {
        "label": "application",
        "importPath": "hello",
        "description": "hello",
        "isExtraImport": true,
        "detail": "hello",
        "documentation": {}
    },
    {
        "label": "reload",
        "importPath": "imp",
        "description": "imp",
        "isExtraImport": true,
        "detail": "imp",
        "documentation": {}
    },
    {
        "label": "bisect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bisect",
        "description": "bisect",
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapreplace",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "merge",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "mymodule",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mymodule",
        "description": "mymodule",
        "detail": "mymodule",
        "documentation": {}
    },
    {
        "label": "person1",
        "importPath": "mymodule",
        "description": "mymodule",
        "isExtraImport": true,
        "detail": "mymodule",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "string,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string.",
        "description": "string.",
        "detail": "string.",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_letters",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "webbrowser",
        "description": "webbrowser",
        "isExtraImport": true,
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ctime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ctime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "isleap",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "keyword",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyword",
        "description": "keyword",
        "detail": "keyword",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "cx_Freeze",
        "description": "cx_Freeze",
        "isExtraImport": true,
        "detail": "cx_Freeze",
        "documentation": {}
    },
    {
        "label": "Executable",
        "importPath": "cx_Freeze",
        "description": "cx_Freeze",
        "isExtraImport": true,
        "detail": "cx_Freeze",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "debug",
        "importPath": "jedi",
        "description": "jedi",
        "isExtraImport": true,
        "detail": "jedi",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "jedi",
        "description": "jedi",
        "isExtraImport": true,
        "detail": "jedi",
        "documentation": {}
    },
    {
        "label": "recursion",
        "importPath": "jedi.inference",
        "description": "jedi.inference",
        "isExtraImport": true,
        "detail": "jedi.inference",
        "documentation": {}
    },
    {
        "label": "ValueSet",
        "importPath": "jedi.inference.base_value",
        "description": "jedi.inference.base_value",
        "isExtraImport": true,
        "detail": "jedi.inference.base_value",
        "documentation": {}
    },
    {
        "label": "NO_VALUES",
        "importPath": "jedi.inference.base_value",
        "description": "jedi.inference.base_value",
        "isExtraImport": true,
        "detail": "jedi.inference.base_value",
        "documentation": {}
    },
    {
        "label": "HelperValueMixin",
        "importPath": "jedi.inference.base_value",
        "description": "jedi.inference.base_value",
        "isExtraImport": true,
        "detail": "jedi.inference.base_value",
        "documentation": {}
    },
    {
        "label": "ValueWrapper",
        "importPath": "jedi.inference.base_value",
        "description": "jedi.inference.base_value",
        "isExtraImport": true,
        "detail": "jedi.inference.base_value",
        "documentation": {}
    },
    {
        "label": "LazyKnownValues",
        "importPath": "jedi.inference.lazy_value",
        "description": "jedi.inference.lazy_value",
        "isExtraImport": true,
        "detail": "jedi.inference.lazy_value",
        "documentation": {}
    },
    {
        "label": "infer_call_of_leaf",
        "importPath": "jedi.inference.helpers",
        "description": "jedi.inference.helpers",
        "isExtraImport": true,
        "detail": "jedi.inference.helpers",
        "documentation": {}
    },
    {
        "label": "inference_state_method_cache",
        "importPath": "jedi.inference.cache",
        "description": "jedi.inference.cache",
        "isExtraImport": true,
        "detail": "jedi.inference.cache",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "nested_scopes",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "posixpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "posixpath",
        "description": "posixpath",
        "detail": "posixpath",
        "documentation": {}
    },
    {
        "label": "canonicalize_name",
        "importPath": "pip._vendor.packaging.utils",
        "description": "pip._vendor.packaging.utils",
        "isExtraImport": true,
        "detail": "pip._vendor.packaging.utils",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "pip._vendor.six.moves.urllib",
        "description": "pip._vendor.six.moves.urllib",
        "isExtraImport": true,
        "detail": "pip._vendor.six.moves.urllib",
        "documentation": {}
    },
    {
        "label": "PyPI",
        "importPath": "pip._internal.models.index",
        "description": "pip._internal.models.index",
        "isExtraImport": true,
        "detail": "pip._internal.models.index",
        "documentation": {}
    },
    {
        "label": "has_tls",
        "importPath": "pip._internal.utils.compat",
        "description": "pip._internal.utils.compat",
        "isExtraImport": true,
        "detail": "pip._internal.utils.compat",
        "documentation": {}
    },
    {
        "label": "normalize_path",
        "importPath": "pip._internal.utils.misc",
        "description": "pip._internal.utils.misc",
        "isExtraImport": true,
        "detail": "pip._internal.utils.misc",
        "documentation": {}
    },
    {
        "label": "redact_auth_from_url",
        "importPath": "pip._internal.utils.misc",
        "description": "pip._internal.utils.misc",
        "isExtraImport": true,
        "detail": "pip._internal.utils.misc",
        "documentation": {}
    },
    {
        "label": "MYPY_CHECK_RUNNING",
        "importPath": "pip._internal.utils.typing",
        "description": "pip._internal.utils.typing",
        "isExtraImport": true,
        "detail": "pip._internal.utils.typing",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "PriorityQueue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Linter",
        "importPath": "pylama.lint",
        "description": "pylama.lint",
        "isExtraImport": true,
        "detail": "pylama.lint",
        "documentation": {}
    },
    {
        "label": "FileSkipped",
        "importPath": "isort.exceptions",
        "description": "isort.exceptions",
        "isExtraImport": true,
        "detail": "isort.exceptions",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "weakref",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "weakref",
        "description": "weakref",
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "get_global_debugger",
        "importPath": "_pydevd_bundle.pydevd_comm",
        "description": "_pydevd_bundle.pydevd_comm",
        "isExtraImport": true,
        "detail": "_pydevd_bundle.pydevd_comm",
        "documentation": {}
    },
    {
        "label": "call_only_once",
        "importPath": "_pydevd_bundle.pydevd_constants",
        "description": "_pydevd_bundle.pydevd_constants",
        "isExtraImport": true,
        "detail": "_pydevd_bundle.pydevd_constants",
        "documentation": {}
    },
    {
        "label": "dict_items",
        "importPath": "_pydevd_bundle.pydevd_constants",
        "description": "_pydevd_bundle.pydevd_constants",
        "isExtraImport": true,
        "detail": "_pydevd_bundle.pydevd_constants",
        "documentation": {}
    },
    {
        "label": "threading",
        "importPath": "_pydev_imps._pydev_saved_modules",
        "description": "_pydev_imps._pydev_saved_modules",
        "isExtraImport": true,
        "detail": "_pydev_imps._pydev_saved_modules",
        "documentation": {}
    },
    {
        "label": "update_custom_frame",
        "importPath": "_pydevd_bundle.pydevd_custom_frames",
        "description": "_pydevd_bundle.pydevd_custom_frames",
        "isExtraImport": true,
        "detail": "_pydevd_bundle.pydevd_custom_frames",
        "documentation": {}
    },
    {
        "label": "remove_custom_frame",
        "importPath": "_pydevd_bundle.pydevd_custom_frames",
        "description": "_pydevd_bundle.pydevd_custom_frames",
        "isExtraImport": true,
        "detail": "_pydevd_bundle.pydevd_custom_frames",
        "documentation": {}
    },
    {
        "label": "add_custom_frame",
        "importPath": "_pydevd_bundle.pydevd_custom_frames",
        "description": "_pydevd_bundle.pydevd_custom_frames",
        "isExtraImport": true,
        "detail": "_pydevd_bundle.pydevd_custom_frames",
        "documentation": {}
    },
    {
        "label": "stackless",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stackless",
        "description": "stackless",
        "detail": "stackless",
        "documentation": {}
    },
    {
        "label": "pydev_log",
        "importPath": "_pydev_bundle",
        "description": "_pydev_bundle",
        "isExtraImport": true,
        "detail": "_pydev_bundle",
        "documentation": {}
    },
    {
        "label": "fileinput",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fileinput",
        "description": "fileinput",
        "detail": "fileinput",
        "documentation": {}
    },
    {
        "label": "Ball",
        "kind": 6,
        "importPath": "container.Python-OOP-Toy.src.ball",
        "description": "container.Python-OOP-Toy.src.ball",
        "peekOfCode": "class Ball:\n    \"\"\"\n    base class for bouncing objects\n    \"\"\"\n    def __init__(self, bounds, position, velocity, color, radius):\n        self.position = position\n        self.velocity = velocity\n        self.bounds = bounds\n        self.color = color\n        self.radius = radius",
        "detail": "container.Python-OOP-Toy.src.ball",
        "documentation": {}
    },
    {
        "label": "Block",
        "kind": 6,
        "importPath": "container.Python-OOP-Toy.src.block",
        "description": "container.Python-OOP-Toy.src.block",
        "peekOfCode": "class Block:\n    \"\"\"\n    Base class for square or rectangular object\n    \"\"\"\n    def __init__(self, bounds, position, width, height, color):\n        # Create a rectangle centered around the x and y\n        self.bounds = bounds\n        self.position = position\n        self.rectangle = self.set_rectangle(position, width, height)\n        self.color = color",
        "detail": "container.Python-OOP-Toy.src.block",
        "documentation": {}
    },
    {
        "label": "debug_create_balls",
        "kind": 2,
        "importPath": "container.Python-OOP-Toy.src.draw",
        "description": "container.Python-OOP-Toy.src.draw",
        "peekOfCode": "def debug_create_balls(object_list):\n    ball = Ball(SCREEN_SIZE, Vector2(50, 50), Vector2(3, 3), [255, 0, 0], 10)\n    object_list.append(ball)\n    # TODO: Create other ball types for testing\ndef debug_create_blocks(object_list):\n    block = Block(SCREEN_SIZE, Vector2(100, 100), 20, 20, [0, 255, 0])\n    object_list.extend((block,))\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode(SCREEN_SIZE)",
        "detail": "container.Python-OOP-Toy.src.draw",
        "documentation": {}
    },
    {
        "label": "debug_create_blocks",
        "kind": 2,
        "importPath": "container.Python-OOP-Toy.src.draw",
        "description": "container.Python-OOP-Toy.src.draw",
        "peekOfCode": "def debug_create_blocks(object_list):\n    block = Block(SCREEN_SIZE, Vector2(100, 100), 20, 20, [0, 255, 0])\n    object_list.extend((block,))\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode(SCREEN_SIZE)\n    # Used to manage how fast the screen updates\n    clock = pygame.time.Clock()\n    object_list = []  # list of objects of all types in the toy\n    debug_create_balls(object_list)",
        "detail": "container.Python-OOP-Toy.src.draw",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "container.Python-OOP-Toy.src.draw",
        "description": "container.Python-OOP-Toy.src.draw",
        "peekOfCode": "def main():\n    pygame.init()\n    screen = pygame.display.set_mode(SCREEN_SIZE)\n    # Used to manage how fast the screen updates\n    clock = pygame.time.Clock()\n    object_list = []  # list of objects of all types in the toy\n    debug_create_balls(object_list)\n    debug_create_blocks(object_list)\n    while True:  # TODO:  Create more elegant condition for loop\n        for event in pygame.event.get():",
        "detail": "container.Python-OOP-Toy.src.draw",
        "documentation": {}
    },
    {
        "label": "SCREEN_SIZE",
        "kind": 5,
        "importPath": "container.Python-OOP-Toy.src.draw",
        "description": "container.Python-OOP-Toy.src.draw",
        "peekOfCode": "SCREEN_SIZE = [640, 480]\nBACKGROUND_COLOR = [255, 255, 255]\ndef debug_create_balls(object_list):\n    ball = Ball(SCREEN_SIZE, Vector2(50, 50), Vector2(3, 3), [255, 0, 0], 10)\n    object_list.append(ball)\n    # TODO: Create other ball types for testing\ndef debug_create_blocks(object_list):\n    block = Block(SCREEN_SIZE, Vector2(100, 100), 20, 20, [0, 255, 0])\n    object_list.extend((block,))\ndef main():",
        "detail": "container.Python-OOP-Toy.src.draw",
        "documentation": {}
    },
    {
        "label": "BACKGROUND_COLOR",
        "kind": 5,
        "importPath": "container.Python-OOP-Toy.src.draw",
        "description": "container.Python-OOP-Toy.src.draw",
        "peekOfCode": "BACKGROUND_COLOR = [255, 255, 255]\ndef debug_create_balls(object_list):\n    ball = Ball(SCREEN_SIZE, Vector2(50, 50), Vector2(3, 3), [255, 0, 0], 10)\n    object_list.append(ball)\n    # TODO: Create other ball types for testing\ndef debug_create_blocks(object_list):\n    block = Block(SCREEN_SIZE, Vector2(100, 100), 20, 20, [0, 255, 0])\n    object_list.extend((block,))\ndef main():\n    pygame.init()",
        "detail": "container.Python-OOP-Toy.src.draw",
        "documentation": {}
    },
    {
        "label": "pivot_index",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-array-string-manipulation.src.demonstration_1",
        "description": "course-work.cs-guided-project-array-string-manipulation.src.demonstration_1",
        "peekOfCode": "def pivot_index(nums):  # == 2*O(n) = O(n)\n    # Your code here\n    curr = 0\n    l_sum = 0\n    r_sum = sum(nums)  # O(n)\n    for i in range(len(nums)):  # O(n)\n        # l_sum = sum(nums[0:i])   #all in the loop is O(n)\n        # r_sum = sum(nums[i +1:])\n        # remove current value from r_sum\n        r_sum -= nums[i]",
        "detail": "course-work.cs-guided-project-array-string-manipulation.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-array-string-manipulation.src.demonstration_2",
        "description": "course-work.cs-guided-project-array-string-manipulation.src.demonstration_2",
        "peekOfCode": "def plus_one(digits):\n    # Your code here\n    new_string = \"\"\n    for digit in digits:\n        new_digit = str(digit)\n        new_string += new_digit\n    print(new_string)\n    str_tonum = int(new_string)\n    str_tonum = str_tonum + 1\n    str_tonum = str(str_tonum)",
        "detail": "course-work.cs-guided-project-array-string-manipulation.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "schoolGroups",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-array-string-manipulation.src.module2-lastTask",
        "description": "course-work.cs-guided-project-array-string-manipulation.src.module2-lastTask",
        "peekOfCode": "def schoolGroups(years, groups):\n    alphabet = list(map(chr, range(97, 123)))\n    emp_list = []\n    for year in range(1, years + 1):\n        for group in range(0, groups):\n            emp_list.append(f\"{year}{alphabet[group]}\")\n    # print(emp_list)\n    return \", \".join(emp_list)\nprint(schoolGroups(1, 4))\nprint(schoolGroups(6, 7))",
        "detail": "course-work.cs-guided-project-array-string-manipulation.src.module2-lastTask",
        "documentation": {}
    },
    {
        "label": "csAnythingButFive",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-array-string-manipulation.src.module2-projects",
        "description": "course-work.cs-guided-project-array-string-manipulation.src.module2-projects",
        "peekOfCode": "def csAnythingButFive(start, end):\n    count = 0\n    new_list = []\n    for num in range(start, end + 1):\n        str_num = str(num)\n        if \"5\" in str_num:\n            continue\n        count += 1\n    return count\nprint(csAnythingButFive(1, 5))",
        "detail": "course-work.cs-guided-project-array-string-manipulation.src.module2-projects",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-binary-search-trees.src.demonstration_1",
        "description": "course-work.cs-guided-project-binary-search-trees.src.demonstration_1",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef maxDepth(root):\n    # Your code here\n    if root.left is None and root.right is None:\n        # this is a leaf so depth is just 1\n        return 1",
        "detail": "course-work.cs-guided-project-binary-search-trees.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "maxDepth",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-binary-search-trees.src.demonstration_1",
        "description": "course-work.cs-guided-project-binary-search-trees.src.demonstration_1",
        "peekOfCode": "def maxDepth(root):\n    # Your code here\n    if root.left is None and root.right is None:\n        # this is a leaf so depth is just 1\n        return 1\n    left_depth = 0\n    right_depth = 0\n    if root.left:\n        left_depth = maxDepth(root.left)\n    if root.right:",
        "detail": "course-work.cs-guided-project-binary-search-trees.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-binary-search-trees.src.demonstration_2",
        "description": "course-work.cs-guided-project-binary-search-trees.src.demonstration_2",
        "peekOfCode": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef is_valid_BST(root):\n    # Your code here\n    if root is None:\n        return False\n    if root.left is None and root.right is None:",
        "detail": "course-work.cs-guided-project-binary-search-trees.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "is_valid_BST",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-binary-search-trees.src.demonstration_2",
        "description": "course-work.cs-guided-project-binary-search-trees.src.demonstration_2",
        "peekOfCode": "def is_valid_BST(root):\n    # Your code here\n    if root is None:\n        return False\n    if root.left is None and root.right is None:\n        return False\n    if root.left.value < root.value:\n        is_valid_BST(root.left)\n    if root.right.value > root.value:\n        is_valid_BST(root.right)",
        "detail": "course-work.cs-guided-project-binary-search-trees.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-binary-search-trees.src.guided",
        "description": "course-work.cs-guided-project-binary-search-trees.src.guided",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        # create a node for the new value\n        new_node = BSTNode(value)\n        # compare the node value to the self value\n        if (",
        "detail": "course-work.cs-guided-project-binary-search-trees.src.guided",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-binary-search-trees.src.guided",
        "description": "course-work.cs-guided-project-binary-search-trees.src.guided",
        "peekOfCode": "root = BSTNode(10)\n# root.left = BSTNode(6)\n# root.right = BSTNode(12)\nroot.insert(6)\nroot.insert(7)\nroot.insert(12)\nroot.insert(5)\nroot.insert(14)\nroot.insert(8)\nprint(f\"minimum value in tree is: {root.find_minimum_value()}\")",
        "detail": "course-work.cs-guided-project-binary-search-trees.src.guided",
        "documentation": {}
    },
    {
        "label": "GraphNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "peekOfCode": "class GraphNode:\n    def __init__(self, label):\n        self.label = label\n        self.neighbors = set()\n        self.color = None\n# undirected = each of the verts go both ways\n# adjacent in this case = directly connected\ndef color_graph(graph, colors):\n    # Your code here\n    # go over all verts color each vert basted on whatever color is legal",
        "detail": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "color_graph",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "peekOfCode": "def color_graph(graph, colors):\n    # Your code here\n    # go over all verts color each vert basted on whatever color is legal\n    # build legal colors as a set\n    # find all of our neighbors\n    for vertex in graph:\n        used_colors = set(\n            [neighbor.color for neighbor in vertex.neighbors]\n        )  # set of colors that are used by neighbors\n        for color in colors:",
        "detail": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "g1",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "peekOfCode": "g1 = GraphNode(\"G1\")\ng2 = GraphNode(\"G2\")\ng3 = GraphNode(\"G3\")\ng4 = GraphNode(\"G4\")\ng5 = GraphNode(\"G5\")\ng1.neighbors.add(g2)\ng1.neighbors.add(g4)\ng1.neighbors.add(g3)\ng2.neighbors.add(g1)\ng2.neighbors.add(g4)",
        "detail": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "g2",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "peekOfCode": "g2 = GraphNode(\"G2\")\ng3 = GraphNode(\"G3\")\ng4 = GraphNode(\"G4\")\ng5 = GraphNode(\"G5\")\ng1.neighbors.add(g2)\ng1.neighbors.add(g4)\ng1.neighbors.add(g3)\ng2.neighbors.add(g1)\ng2.neighbors.add(g4)\ng2.neighbors.add(g5)",
        "detail": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "g3",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "peekOfCode": "g3 = GraphNode(\"G3\")\ng4 = GraphNode(\"G4\")\ng5 = GraphNode(\"G5\")\ng1.neighbors.add(g2)\ng1.neighbors.add(g4)\ng1.neighbors.add(g3)\ng2.neighbors.add(g1)\ng2.neighbors.add(g4)\ng2.neighbors.add(g5)\ng3.neighbors.add(g1)",
        "detail": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "g4",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "peekOfCode": "g4 = GraphNode(\"G4\")\ng5 = GraphNode(\"G5\")\ng1.neighbors.add(g2)\ng1.neighbors.add(g4)\ng1.neighbors.add(g3)\ng2.neighbors.add(g1)\ng2.neighbors.add(g4)\ng2.neighbors.add(g5)\ng3.neighbors.add(g1)\ng3.neighbors.add(g5)",
        "detail": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "g5",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "peekOfCode": "g5 = GraphNode(\"G5\")\ng1.neighbors.add(g2)\ng1.neighbors.add(g4)\ng1.neighbors.add(g3)\ng2.neighbors.add(g1)\ng2.neighbors.add(g4)\ng2.neighbors.add(g5)\ng3.neighbors.add(g1)\ng3.neighbors.add(g5)\ng3.neighbors.add(g4)",
        "detail": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "peekOfCode": "graph = [g1, g2, g3, g4, g5]\ncolors = set([\"red\", \"blue\", \"green\", \"orange\", \"purple\"])\ncolor_graph(graph, colors)\nfor node in graph:\n    print(node.color)",
        "detail": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "peekOfCode": "colors = set([\"red\", \"blue\", \"green\", \"orange\", \"purple\"])\ncolor_graph(graph, colors)\nfor node in graph:\n    print(node.color)",
        "detail": "course-work.cs-guided-project-graphs-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-graphs-i.src.demonstration_2",
        "description": "course-work.cs-guided-project-graphs-i.src.demonstration_2",
        "peekOfCode": "def find_judge(N, trust):\n    \"\"\"\n    Inputs:\n    N -> int\n    trust -> List[List[int]]\n    Output:\n    int\n    \"\"\"\n    # Your code here",
        "detail": "course-work.cs-guided-project-graphs-i.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "print_graph",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "description": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "peekOfCode": "def print_graph(current_vertex, path):\n    print(current_vertex)\n    new_path = path + [current_vertex]\n    # i have reached the end of my path bc the neighbore set is empty:\n    if len(graph_list[current_vertex]) == 0:\n        all_paths.append(new_path)\n    # recurse on the children\n    for neighbor in graph_list[current_vertex]:\n        print_graph(neighbor, new_path.copy())\nprint_graph(\"a\", [])",
        "detail": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "documentation": {}
    },
    {
        "label": "print_tree_preorder",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "description": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "peekOfCode": "def print_tree_preorder(root):  # preorder traversal\n    print(root.value)\n    # if you can go left, recurse left\n    if root.left:\n        print_tree(root.left)\n    if root.right:\n        print_tree(root.right)",
        "detail": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "description": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "peekOfCode": "graph = [\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0],\n    # a new vertex and all vertexes connect to F\n    # [1, 1, 1, 1, 1]\n]\n# get second vertex and its edges",
        "detail": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "documentation": {}
    },
    {
        "label": "graph[1][4]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "description": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "peekOfCode": "graph[1][4] = 1\n# add a new veterx, append to our graph\n# expensive\ngraph_list = {\n    \"a\": set([\"b\", \"c\", \"d\"]),  # order doesnt matter we get a lot of dictionaries\n    \"b\": set(),\n    \"c\": set([\"e\"]),\n    \"d\": set([\"e\"]),\n    \"e\": set(),\n}",
        "detail": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "documentation": {}
    },
    {
        "label": "graph_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "description": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "peekOfCode": "graph_list = {\n    \"a\": set([\"b\", \"c\", \"d\"]),  # order doesnt matter we get a lot of dictionaries\n    \"b\": set(),\n    \"c\": set([\"e\"]),\n    \"d\": set([\"e\"]),\n    \"e\": set(),\n}\n# graph_list.key()\n# find out if c connects to e:\nprint(\"e\" in graph_list[\"c\"])",
        "detail": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "documentation": {}
    },
    {
        "label": "all_paths",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "description": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "peekOfCode": "all_paths = []\ndef print_graph(current_vertex, path):\n    print(current_vertex)\n    new_path = path + [current_vertex]\n    # i have reached the end of my path bc the neighbore set is empty:\n    if len(graph_list[current_vertex]) == 0:\n        all_paths.append(new_path)\n    # recurse on the children\n    for neighbor in graph_list[current_vertex]:\n        print_graph(neighbor, new_path.copy())",
        "detail": "course-work.cs-guided-project-graphs-i.src.guided-graphs",
        "documentation": {}
    },
    {
        "label": "flood_fill",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-graphs-ii.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-ii.src.demonstration_1",
        "peekOfCode": "def flood_fill(image, sr, sc, new_color):\n    \"\"\"\n    Inputs:\n    image -> List[List[int]]\n    sr -> int\n    sc -> int\n    new_color -> int\n    Output:\n    List[List[int]]\n    \"\"\"",
        "detail": "course-work.cs-guided-project-graphs-ii.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-ii.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-ii.src.demonstration_1",
        "peekOfCode": "image = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```",
        "detail": "course-work.cs-guided-project-graphs-ii.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "sr",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-graphs-ii.src.demonstration_1",
        "description": "course-work.cs-guided-project-graphs-ii.src.demonstration_1",
        "peekOfCode": "sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```\nNotes:",
        "detail": "course-work.cs-guided-project-graphs-ii.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "numIslands",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-graphs-ii.src.demonstration_2",
        "description": "course-work.cs-guided-project-graphs-ii.src.demonstration_2",
        "peekOfCode": "def numIslands(grid):\n    # Your code here",
        "detail": "course-work.cs-guided-project-graphs-ii.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-hash-tables-i.src.demonstration_1",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n    # Your code here\n    def put(self, key, value):",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-hash-tables-i.src.demonstration_1",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n    # Your code here\n    def put(self, key, value):\n        # Your code here\n    def get(self, key):\n        # Your code here\n    def remove(self, key: int) -> None:\n        # Your code here",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.demonstration_1",
        "description": "course-work.cs-guided-project-hash-tables-i.src.demonstration_1",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "are_words_sorted",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.demonstration_2",
        "description": "course-work.cs-guided-project-hash-tables-i.src.demonstration_2",
        "peekOfCode": "def are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here\n    order_dict = {}",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "description": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "peekOfCode": "class Dict:\n    def __init__(self, capacity):\n        self.storage = [None] * capacity\n        self.capacity = capacity\n    def hash_func(self, key):\n        byte_str = key.encode()\n        num = 0\n        for byte in byte_str:\n            num += byte\n        return num % self.capacity",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "documentation": {}
    },
    {
        "label": "hash_func",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "description": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "peekOfCode": "def hash_func(string, capacity):\n    # turn into a number representation\n    # turn str into a byte representation encode()\n    byte_str = (\n        string.encode()\n    )  # an array of numbers the ascii representation of all the characters\n    print(byte_str)\n    print(type(byte_str))\n    num = 0\n    for byte in byte_str:",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "description": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "peekOfCode": "storage = [None] * 8  # has a size of 8/ static array\ndef hash_func(string, capacity):\n    # turn into a number representation\n    # turn str into a byte representation encode()\n    byte_str = (\n        string.encode()\n    )  # an array of numbers the ascii representation of all the characters\n    print(byte_str)\n    print(type(byte_str))\n    num = 0",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "description": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "peekOfCode": "index = hash_func(\"apple\", 8)\nprint(f\"Apple hashed to {index}, store it there in storage\")\n# hash() is slower main purpose is for security less luckly to be decoded\nclass Dict:\n    def __init__(self, capacity):\n        self.storage = [None] * capacity\n        self.capacity = capacity\n    def hash_func(self, key):\n        byte_str = key.encode()\n        num = 0",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "description": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "peekOfCode": "d = Dict(8)\n# print(d.storage)\n# d.insert(\"apple\", \"is a fruit\")\n# d['apple'] = 'is a fruit' TypeError: 'Dict' object does not support item assignment cause of the set item fucntion that uses the insert value\nd[\"apple\"] = \"is a fruit\"\nd[\"banana\"] = \"also is a fruit\"\nd[\"grapes\"] = \"still a fruit\"\nd[\"mango\"] = \"is a fruit\"\nprint(d.storage)\nprint(d[\"apple\"])",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "documentation": {}
    },
    {
        "label": "d[\"apple\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "description": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "peekOfCode": "d[\"apple\"] = \"is a fruit\"\nd[\"banana\"] = \"also is a fruit\"\nd[\"grapes\"] = \"still a fruit\"\nd[\"mango\"] = \"is a fruit\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "documentation": {}
    },
    {
        "label": "d[\"banana\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "description": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "peekOfCode": "d[\"banana\"] = \"also is a fruit\"\nd[\"grapes\"] = \"still a fruit\"\nd[\"mango\"] = \"is a fruit\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "documentation": {}
    },
    {
        "label": "d[\"grapes\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "description": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "peekOfCode": "d[\"grapes\"] = \"still a fruit\"\nd[\"mango\"] = \"is a fruit\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "documentation": {}
    },
    {
        "label": "d[\"mango\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "description": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "peekOfCode": "d[\"mango\"] = \"is a fruit\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])",
        "detail": "course-work.cs-guided-project-hash-tables-i.src.guided",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # Your code here\n    new_map = {}",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_2",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_2",
        "peekOfCode": "def frequency_sort(s):\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n     \"\"\"\n    # Your code here\n    freq_dict = {}\n    for ch in s:",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "class Dict:\n    def __init__(self, capacity):\n        self.storage = [None] * capacity\n        self.capacity = capacity\n        self.item_count = 0\n    def get_load_factor(self):\n        # number_of_slots = len(self.storage)\n        return self.item_count / self.capacity\n    def hash_func(self, key):\n        byte_str = key.encode()",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "hash_func",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "def hash_func(string, capacity):\n    # turn into a number representation\n    # turn str into a byte representation encode()\n    byte_str = (\n        string.encode()\n    )  # an array of numbers the ascii representation of all the characters\n    print(byte_str)\n    print(type(byte_str))\n    num = 0\n    for byte in byte_str:",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "storage = [None] * 8  # has a size of 8/ static array\ndef hash_func(string, capacity):\n    # turn into a number representation\n    # turn str into a byte representation encode()\n    byte_str = (\n        string.encode()\n    )  # an array of numbers the ascii representation of all the characters\n    print(byte_str)\n    print(type(byte_str))\n    num = 0",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "index = hash_func(\"apple\", 8)\nprint(f\"Apple hashed to {index}, store it there in storage\")\n# hash() is slower main purpose is for security less luckly to be decoded\nclass Dict:\n    def __init__(self, capacity):\n        self.storage = [None] * capacity\n        self.capacity = capacity\n        self.item_count = 0\n    def get_load_factor(self):\n        # number_of_slots = len(self.storage)",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d = Dict(8)\n# print(d.storage)\n# d.insert(\"apple\", \"is a fruit\")\n# d['apple'] = 'is a fruit' TypeError: 'Dict' object does not support item assignment cause of the set item fucntion that uses the insert value\nd[\"apple\"] = \"is an apple\"\nd[\"banana\"] = \"also is a fruit\"\nd[\"grapes\"] = \"still a fruit\"\nd[\"mango\"] = \"is a mango\"\nd[\"berries\"] = \"is a fruit\"\nd[\"pear\"] = \"is a fruit\"",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"apple\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"apple\"] = \"is an apple\"\nd[\"banana\"] = \"also is a fruit\"\nd[\"grapes\"] = \"still a fruit\"\nd[\"mango\"] = \"is a mango\"\nd[\"berries\"] = \"is a fruit\"\nd[\"pear\"] = \"is a fruit\"\nd[\"milk\"] = \"is milk\"\nd[\"bread\"] = \"is just bread\"\nd[\"oj\"] = \"is a not a fruit\"\nd[\"juice\"] = \"is just juice\"",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"banana\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"banana\"] = \"also is a fruit\"\nd[\"grapes\"] = \"still a fruit\"\nd[\"mango\"] = \"is a mango\"\nd[\"berries\"] = \"is a fruit\"\nd[\"pear\"] = \"is a fruit\"\nd[\"milk\"] = \"is milk\"\nd[\"bread\"] = \"is just bread\"\nd[\"oj\"] = \"is a not a fruit\"\nd[\"juice\"] = \"is just juice\"\nd[\"eggs\"] = \"is a not milk\"",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"grapes\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"grapes\"] = \"still a fruit\"\nd[\"mango\"] = \"is a mango\"\nd[\"berries\"] = \"is a fruit\"\nd[\"pear\"] = \"is a fruit\"\nd[\"milk\"] = \"is milk\"\nd[\"bread\"] = \"is just bread\"\nd[\"oj\"] = \"is a not a fruit\"\nd[\"juice\"] = \"is just juice\"\nd[\"eggs\"] = \"is a not milk\"\nprint(d.storage)",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"mango\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"mango\"] = \"is a mango\"\nd[\"berries\"] = \"is a fruit\"\nd[\"pear\"] = \"is a fruit\"\nd[\"milk\"] = \"is milk\"\nd[\"bread\"] = \"is just bread\"\nd[\"oj\"] = \"is a not a fruit\"\nd[\"juice\"] = \"is just juice\"\nd[\"eggs\"] = \"is a not milk\"\nprint(d.storage)\nprint(d[\"apple\"])",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"berries\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"berries\"] = \"is a fruit\"\nd[\"pear\"] = \"is a fruit\"\nd[\"milk\"] = \"is milk\"\nd[\"bread\"] = \"is just bread\"\nd[\"oj\"] = \"is a not a fruit\"\nd[\"juice\"] = \"is just juice\"\nd[\"eggs\"] = \"is a not milk\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"pear\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"pear\"] = \"is a fruit\"\nd[\"milk\"] = \"is milk\"\nd[\"bread\"] = \"is just bread\"\nd[\"oj\"] = \"is a not a fruit\"\nd[\"juice\"] = \"is just juice\"\nd[\"eggs\"] = \"is a not milk\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])\nprint(d[\"grapes\"])",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"milk\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"milk\"] = \"is milk\"\nd[\"bread\"] = \"is just bread\"\nd[\"oj\"] = \"is a not a fruit\"\nd[\"juice\"] = \"is just juice\"\nd[\"eggs\"] = \"is a not milk\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])\nprint(d[\"grapes\"])\nprint(d.storage)",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"bread\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"bread\"] = \"is just bread\"\nd[\"oj\"] = \"is a not a fruit\"\nd[\"juice\"] = \"is just juice\"\nd[\"eggs\"] = \"is a not milk\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])\nprint(d[\"grapes\"])\nprint(d.storage)\n# load factor = number of items / number od slots",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"oj\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"oj\"] = \"is a not a fruit\"\nd[\"juice\"] = \"is just juice\"\nd[\"eggs\"] = \"is a not milk\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])\nprint(d[\"grapes\"])\nprint(d.storage)\n# load factor = number of items / number od slots",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"juice\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"juice\"] = \"is just juice\"\nd[\"eggs\"] = \"is a not milk\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])\nprint(d[\"grapes\"])\nprint(d.storage)\n# load factor = number of items / number od slots",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "d[\"eggs\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "description": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "peekOfCode": "d[\"eggs\"] = \"is a not milk\"\nprint(d.storage)\nprint(d[\"apple\"])\nprint(d[\"banana\"])\nprint(d[\"grapes\"])\nprint(d.storage)\n# load factor = number of items / number od slots",
        "detail": "course-work.cs-guided-project-hash-tables-ii.src.hash_tables",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(delete_this_node):\n    # Your code here\n    temp = delete_this_node.next\n    delete_this_node.value = None\n    delete_this_node.next = temp.next\ndef printList(node):",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "delete_node",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "def delete_node(delete_this_node):\n    # Your code here\n    temp = delete_this_node.next\n    delete_this_node.value = None\n    delete_this_node.next = temp.next\ndef printList(node):\n    temp = node\n    while temp != None:\n        print(temp.value, end=\" \")\n        temp = temp.next",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "printList",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "def printList(node):\n    temp = node\n    while temp != None:\n        print(temp.value, end=\" \")\n        temp = temp.next\nx = LinkedListNode(\"X\")\ny = LinkedListNode(\"Y\")\nz = LinkedListNode(\"Z\")\nx.next = y\ny.next = z",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):\n        self.value = value",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "x.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "y.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(delete_this_node):",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "x = LinkedListNode(\"X\")\ny = LinkedListNode(\"Y\")\nz = LinkedListNode(\"Z\")\nx.next = y\ny.next = z\ndelete_node(y)\nprintList(x)  # output: \"X\" with x.next is None\nprintList(y)  # output: None\nprintList(z)  # output: \"Z\"",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "y = LinkedListNode(\"Y\")\nz = LinkedListNode(\"Z\")\nx.next = y\ny.next = z\ndelete_node(y)\nprintList(x)  # output: \"X\" with x.next is None\nprintList(y)  # output: None\nprintList(z)  # output: \"Z\"",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "z = LinkedListNode(\"Z\")\nx.next = y\ny.next = z\ndelete_node(y)\nprintList(x)  # output: \"X\" with x.next is None\nprintList(y)  # output: None\nprintList(z)  # output: \"Z\"",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "x.next = y\ny.next = z\ndelete_node(y)\nprintList(x)  # output: \"X\" with x.next is None\nprintList(y)  # output: None\nprintList(z)  # output: \"Z\"",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "peekOfCode": "y.next = z\ndelete_node(y)\nprintList(x)  # output: \"X\" with x.next is None\nprintList(y)  # output: None\nprintList(z)  # output: \"Z\"",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef reverse(head_of_list):\n    # Your code here\n    curr_node = head_of_list\n    prev_node = None\n    new_node = curr_node.next\n    while curr_node is not None:",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "def reverse(head_of_list):\n    # Your code here\n    curr_node = head_of_list\n    prev_node = None\n    new_node = curr_node.next\n    while curr_node is not None:\n        # lets make sure our node refs are correct\n        next_node = curr_node.next\n        # point current node backwards\n        curr_node.next = prev_node",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "linked_list = LinkedListNode(\n    3\n)  # or head also this is a new instance of the class LinkedListNode\ntail = linked_list\nlinked_list = add_to_head(linked_list, 2)\nlinked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "tail",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "tail = linked_list\nlinked_list = add_to_head(linked_list, 2)\nlinked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nreverse_list = reverse(linked_list)\nprint(reverse_list)\nprint(\"--------\")",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "linked_list = add_to_head(linked_list, 2)\nlinked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nreverse_list = reverse(linked_list)\nprint(reverse_list)\nprint(\"--------\")\nprint(linked_list)",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "linked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nreverse_list = reverse(linked_list)\nprint(reverse_list)\nprint(\"--------\")\nprint(linked_list)",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "middle",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "middle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nreverse_list = reverse(linked_list)\nprint(reverse_list)\nprint(\"--------\")\nprint(linked_list)",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "linked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nreverse_list = reverse(linked_list)\nprint(reverse_list)\nprint(\"--------\")\nprint(linked_list)",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "linked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nreverse_list = reverse(linked_list)\nprint(reverse_list)\nprint(\"--------\")\nprint(linked_list)",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "linked_list = add_to_head(linked_list, 2)\nreverse_list = reverse(linked_list)\nprint(reverse_list)\nprint(\"--------\")\nprint(linked_list)",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "reverse_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "description": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "peekOfCode": "reverse_list = reverse(linked_list)\nprint(reverse_list)\nprint(\"--------\")\nprint(linked_list)",
        "detail": "course-work.cs-guided-project-linked-lists.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = (\n            None\n        )  # a variable to call to the next node/pointer/another instance of this class\ndef add_to_head(head, value):\n    # create the new node\n    new_node = LinkedListNode(value)\n    # link up the nodes",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "add_to_head",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "def add_to_head(head, value):\n    # create the new node\n    new_node = LinkedListNode(value)\n    # link up the nodes\n    new_node.next = head\n    return new_node  # the start of the linked list/the first node now\ndef add_to_next(current_node, value):\n    # create new node\n    new_node = LinkedListNode(value)\n    next_node = current_node.next",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "add_to_next",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "def add_to_next(current_node, value):\n    # create new node\n    new_node = LinkedListNode(value)\n    next_node = current_node.next\n    # current node points to new node\n    current_node.next = new_node\n    new_node.next = next_node\ndef add_to_tail(tail, value):\n    # create new node\n    new_node = LinkedListNode(value)",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "add_to_tail",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "def add_to_tail(tail, value):\n    # create new node\n    new_node = LinkedListNode(value)\n    # linked the new node to the tail\n    tail.next = new_node\n    return new_node  # the end of the linked list\n# def print_list(start_node):\n#     if start_node is None:\n#         return\n#     print(start_node.value)",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "print_list",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "def print_list(start_node):\n    curr_node = start_node\n    while curr_node is not None:\n        print(curr_node.value)\n        # update curent node to next\n        curr_node = curr_node.next\nlinked_list = LinkedListNode(\n    3\n)  # or head also this is a new instance of the class LinkedListNode\ntail = linked_list",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "linked_list = LinkedListNode(\n    3\n)  # or head also this is a new instance of the class LinkedListNode\ntail = linked_list\nlinked_list = add_to_head(linked_list, 2)\nlinked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "tail",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "tail = linked_list\nlinked_list = add_to_head(linked_list, 2)\nlinked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "linked_list = add_to_head(linked_list, 2)\nlinked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "linked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))\nadd_to_next(middle, 7)",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "middle",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "middle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))\nadd_to_next(middle, 7)\n# print(middle.value)",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "linked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))\nadd_to_next(middle, 7)\n# print(middle.value)\n# print(tail.value)",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "linked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))\nadd_to_next(middle, 7)\n# print(middle.value)\n# print(tail.value)\nprint_list(linked_list)",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-linked-lists.src.guided",
        "description": "course-work.cs-guided-project-linked-lists.src.guided",
        "peekOfCode": "linked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))\nadd_to_next(middle, 7)\n# print(middle.value)\n# print(tail.value)\nprint_list(linked_list)",
        "detail": "course-work.cs-guided-project-linked-lists.src.guided",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-i.src.demonstration_01",
        "description": "course-work.cs-guided-project-python-i.src.demonstration_01",
        "peekOfCode": "def addition(a, b):\n    # Your code here\n    print(\"i am inside the function\")\n    return a + b\nprint(\"this lives outside the function\")\nprint(addition(-3, -1))",
        "detail": "course-work.cs-guided-project-python-i.src.demonstration_01",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-i.src.demonstration_02",
        "description": "course-work.cs-guided-project-python-i.src.demonstration_02",
        "peekOfCode": "def convert(minutes):\n    # Your code here\n    seconds = minutes * 60\n    return seconds\nprint(convert(5))",
        "detail": "course-work.cs-guided-project-python-i.src.demonstration_02",
        "documentation": {}
    },
    {
        "label": "string_int",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-i.src.demonstration_03",
        "description": "course-work.cs-guided-project-python-i.src.demonstration_03",
        "peekOfCode": "def string_int(txt):\n    # Your code here\n    return int(txt)\nprint(string_int(\"1000\"))\nprint(type(string_int(\"100\")))",
        "detail": "course-work.cs-guided-project-python-i.src.demonstration_03",
        "documentation": {}
    },
    {
        "label": "find_perimeter",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-i.src.demonstration_04",
        "description": "course-work.cs-guided-project-python-i.src.demonstration_04",
        "peekOfCode": "def find_perimeter(length, width):\n    # Your code here\n    return 2 * length + 2 * width",
        "detail": "course-work.cs-guided-project-python-i.src.demonstration_04",
        "documentation": {}
    },
    {
        "label": "sort_by_length",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-i.src.demonstration_05",
        "description": "course-work.cs-guided-project-python-i.src.demonstration_05",
        "peekOfCode": "def sort_by_length(lst):\n    # Your code here\n    # sorted_list = sorted(lst, key=lambda str_item: len(str_item))\n    return sorted(lst, key=len)\nprint(sort_by_length([\"a\", \"ccc\", \"dddd\", \"bb\"]))\n# .sort() it changes the original array\n# sorted() creates a copy of the original array and changes it",
        "detail": "course-work.cs-guided-project-python-i.src.demonstration_05",
        "documentation": {}
    },
    {
        "label": "XO",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-i.src.demonstration_06",
        "description": "course-work.cs-guided-project-python-i.src.demonstration_06",
        "peekOfCode": "def XO(txt):\n    # Your code here\n    txt = txt.lower()\n    num_x = txt.count(\"x\")\n    num_o = txt.count(\"o\")\n    if num_o == num_x:\n        return True\n    elif num_x == num_o == 0:\n        return True\n    else:",
        "detail": "course-work.cs-guided-project-python-i.src.demonstration_06",
        "documentation": {}
    },
    {
        "label": "nth_smallest",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-i.src.demonstration_07",
        "description": "course-work.cs-guided-project-python-i.src.demonstration_07",
        "peekOfCode": "def nth_smallest(lst, n):\n    # Your code here\n    if len(lst) >= n:\n        sorted_list = sorted(lst)  # sorts the array accendetly\n        return sorted_list[n - 1]\nprint(nth_smallest([7, 5, 3, 1], 1))\nprint(nth_smallest([1, 3, 5, 7], 5))",
        "detail": "course-work.cs-guided-project-python-i.src.demonstration_07",
        "documentation": {}
    },
    {
        "label": "num_args",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-i.src.demonstration_08",
        "description": "course-work.cs-guided-project-python-i.src.demonstration_08",
        "peekOfCode": "def num_args(*args):\n    # Your code here\n    return len(args)\nprint(num_args())\nprint(num_args(\"foo\"))\nprint(num_args(\"foo\", \"bar\"))\nprint(num_args(True, False))\nprint(num_args({}))",
        "detail": "course-work.cs-guided-project-python-i.src.demonstration_08",
        "documentation": {}
    },
    {
        "label": "mapping",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-i.src.demonstration_09",
        "description": "course-work.cs-guided-project-python-i.src.demonstration_09",
        "peekOfCode": "def mapping(letters):\n    # Your code here\n    new_dictionary = {}\n    for value in letters:\n        new_value = value.upper()\n        new_dictionary[value] = new_value\n    return new_dictionary\nprint(mapping([\"p\", \"s\"]))\nprint(mapping([\"a\", \"b\", \"c\"]))\nprint(mapping([\"a\", \"v\", \"y\", \"z\"]))",
        "detail": "course-work.cs-guided-project-python-i.src.demonstration_09",
        "documentation": {}
    },
    {
        "label": "get_discounts",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-i.src.demonstration_10",
        "description": "course-work.cs-guided-project-python-i.src.demonstration_10",
        "peekOfCode": "def get_discounts(nums, percentage):\n    # Your code here\n    new_percentage = list(percentage)\n    discount_str = int(new_percentage[0] + new_percentage[1])\n    discount = int(discount_str) / 100\n    print(discount)\n    d = []\n    for num in nums:\n        num = discount * num\n        s = str(num)",
        "detail": "course-work.cs-guided-project-python-i.src.demonstration_10",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-python-ii.src.class",
        "description": "course-work.cs-guided-project-python-ii.src.class",
        "peekOfCode": "class Animal:\n    def __init__(self, kind, color, name):\n        # constructor method/a new instance of animal\n        # slef is like this from JS\n        self.kind = kind\n        self.name = name\n        self.color = color\n    def description(self):\n        print(\"%s is a %s with color %s\" % (self.name, self.kind, self.color))\n        # or f\"{self.name} is a {self.kind} with a color {self.color}\"",
        "detail": "course-work.cs-guided-project-python-ii.src.class",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-python-ii.src.class",
        "description": "course-work.cs-guided-project-python-ii.src.class",
        "peekOfCode": "cat = Animal(\"cat\", \"orange\", \"CAty\")\ndog = Animal(\"dog\", \"black\", \"HIM\")\nprint(cat.kind)\nprint(dog.color)\ncat.description()",
        "detail": "course-work.cs-guided-project-python-ii.src.class",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-python-ii.src.class",
        "description": "course-work.cs-guided-project-python-ii.src.class",
        "peekOfCode": "dog = Animal(\"dog\", \"black\", \"HIM\")\nprint(cat.kind)\nprint(dog.color)\ncat.description()",
        "detail": "course-work.cs-guided-project-python-ii.src.class",
        "documentation": {}
    },
    {
        "label": "last",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.demonstration_01",
        "description": "course-work.cs-guided-project-python-ii.src.demonstration_01",
        "peekOfCode": "def last(a, n):\n    # Your code here\n    if n > len(a):\n        return \"invalid\"\n    elif n == 0:\n        return []\n    else:\n        return a[-n:]  # the last 3/n elements\nprint(last([1, 2, 3, 4, 5], 1))",
        "detail": "course-work.cs-guided-project-python-ii.src.demonstration_01",
        "documentation": {}
    },
    {
        "label": "add_indexes",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.demonstration_02",
        "description": "course-work.cs-guided-project-python-ii.src.demonstration_02",
        "peekOfCode": "def add_indexes(numbers):\n    # Your code here\n    new_list = []\n    for index, value in enumerate(numbers):\n        sum = index + value\n        new_list.append(sum)\n    return new_list\nenumerate(my_list)  # tuples of the index and the value of the list\nlist(enumerate(a_list))  # and makes it into an array\nfor item in enumerate(a_list):",
        "detail": "course-work.cs-guided-project-python-ii.src.demonstration_02",
        "documentation": {}
    },
    {
        "label": "multiply_nums",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.demonstration_03",
        "description": "course-work.cs-guided-project-python-ii.src.demonstration_03",
        "peekOfCode": "def multiply_nums(nums):\n    # Your code here\n    # nums = \"2, 4, 6\"\n    integer_list = []\n    new_list = list(nums)\n    sliced_list = new_list[0::3]\n    print(sliced_list)\n    for elem in sliced_list:\n        int_elem = int(elem)\n        integer_list.append(int_elem)",
        "detail": "course-work.cs-guided-project-python-ii.src.demonstration_03",
        "documentation": {}
    },
    {
        "label": "emotify",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.demonstration_04",
        "description": "course-work.cs-guided-project-python-ii.src.demonstration_04",
        "peekOfCode": "def emotify(txt):\n    # Your code here\n    # ````another option```\n    # new = txt.split(' ')\n    # print(new)\n    # ````````````\n    new_list = list(txt)\n    # print(new_list)\n    sliced_list = new_list[8:]\n    emotion = \"\".join(sliced_list)",
        "detail": "course-work.cs-guided-project-python-ii.src.demonstration_04",
        "documentation": {}
    },
    {
        "label": "data_type",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.demonstration_05",
        "description": "course-work.cs-guided-project-python-ii.src.demonstration_05",
        "peekOfCode": "def data_type(value):\n    # Your code here\n    date = datetime.date\n    if type(value) is int:\n        return \"integer\"\n    elif type(value) is str:\n        return \"string\"\n    elif type(value) is list:\n        return \"list\"\n    elif type(value) is dict:",
        "detail": "course-work.cs-guided-project-python-ii.src.demonstration_05",
        "documentation": {}
    },
    {
        "label": "get_count",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.demonstration_06",
        "description": "course-work.cs-guided-project-python-ii.src.demonstration_06",
        "peekOfCode": "def get_count(input_str):\n    # Your code here\n    vowel_counts = {}  # this is a dictionary to store the vowels\n    for vowel in \"aeiou\":\n        count = input_str.count(vowel)\n        vowel_counts[vowel] = count\n        print(vowel_counts)\n        counts = vowel_counts.values()\n    return sum(counts)\nprint(get_count(\"adela are mere\"))",
        "detail": "course-work.cs-guided-project-python-ii.src.demonstration_06",
        "documentation": {}
    },
    {
        "label": "repeat_it",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.demonstration_07",
        "description": "course-work.cs-guided-project-python-ii.src.demonstration_07",
        "peekOfCode": "def repeat_it(input_str):\n    # Your code here\n    new_list = list(input_str)\n    empty = []\n    for index, letter in enumerate(new_list):\n        letter = \"-\" + letter.upper() + (index * letter).lower()\n        empty.append(letter)\n        new_str = \"\".join(empty)\n        transformed = list(new_str)\n        good_string = transformed[1:]",
        "detail": "course-work.cs-guided-project-python-ii.src.demonstration_07",
        "documentation": {}
    },
    {
        "label": "parity",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.demonstration_08",
        "description": "course-work.cs-guided-project-python-ii.src.demonstration_08",
        "peekOfCode": "def parity(input_int):\n    # Your code here\n    if input_int % 2 is 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\nprint(parity(0))\nprint(parity(1))\nprint(parity(2))",
        "detail": "course-work.cs-guided-project-python-ii.src.demonstration_08",
        "documentation": {}
    },
    {
        "label": "get_middle",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.demonstration_09",
        "description": "course-work.cs-guided-project-python-ii.src.demonstration_09",
        "peekOfCode": "def get_middle(input_str):\n    # Your code here\n    return input_str[(len(input_str) - 1) // 2 : (len(input_str) + 2) // 2]\nprint(get_middle(\"test\"))\nprint(get_middle(\"testing\"))\nprint(get_middle(\"middle\"))\nprint(get_middle(\"A\"))\nprint(get_middle(\"beyoudre\"))\nprint(get_middle(\"you\"))",
        "detail": "course-work.cs-guided-project-python-ii.src.demonstration_09",
        "documentation": {}
    },
    {
        "label": "max_and_min",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.demonstration_10",
        "description": "course-work.cs-guided-project-python-ii.src.demonstration_10",
        "peekOfCode": "def max_and_min(input_str):\n    # Your code here\n    new_list = list(map(int, input_str.split()))\n    new_string = str(max(new_list)) + \" \" + str(min(new_list))\n    print(type(new_string))\n    return new_string\nprint(max_and_min(\"1 2 3 4 5\"))\nprint(max_and_min(\"1 2 -3 4 5\"))\nprint(max_and_min(\"1 9 3 4 -5\"))",
        "detail": "course-work.cs-guided-project-python-ii.src.demonstration_10",
        "documentation": {}
    },
    {
        "label": "some_functio",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-ii.src.my_module",
        "description": "course-work.cs-guided-project-python-ii.src.my_module",
        "peekOfCode": "def some_function :\n    print(\"im in some function\")",
        "detail": "course-work.cs-guided-project-python-ii.src.my_module",
        "documentation": {}
    },
    {
        "label": "two_sum",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-iii.src.demonstration_01",
        "description": "course-work.cs-guided-project-python-iii.src.demonstration_01",
        "peekOfCode": "def two_sum(numbers, target):\n    # Your code here\n    target_nums = []\n    for num1 in numbers:\n        for num2 in numbers:\n            if num1 == num2:\n                continue\n            elif num1 + num2 == target:\n                target_nums.append(numbers.index(num1))\n                # target_nums.append(numbers.index(num2))",
        "detail": "course-work.cs-guided-project-python-iii.src.demonstration_01",
        "documentation": {}
    },
    {
        "label": "single_number",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-iii.src.demonstration_02",
        "description": "course-work.cs-guided-project-python-iii.src.demonstration_02",
        "peekOfCode": "def single_number(nums):\n    # Your code here\n    counts = {}\n    for num in nums:\n        if num not in counts:\n            counts[num] = 1\n        else:\n            counts[num] += 1\n    print(counts)\n    # loop over the dict",
        "detail": "course-work.cs-guided-project-python-iii.src.demonstration_02",
        "documentation": {}
    },
    {
        "label": "phonebook",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-python-iii.src.dictionary",
        "description": "course-work.cs-guided-project-python-iii.src.dictionary",
        "peekOfCode": "phonebook = {\"ADela\": 832723, \"Tyler\": 28362}\nif \"Herb\" in phonebook:\n    print(\"Yes\")\nelse:\n    print(\"no\")\nphonebook[\"Herb\"] = 6783512873\nphonebook[\"ADela\"] = 2222222\ndel phonebook[\"Tyler\"]\nprint(phonebook.keys())\nfor k in phonebook.keys():",
        "detail": "course-work.cs-guided-project-python-iii.src.dictionary",
        "documentation": {}
    },
    {
        "label": "phonebook[\"Herb\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-python-iii.src.dictionary",
        "description": "course-work.cs-guided-project-python-iii.src.dictionary",
        "peekOfCode": "phonebook[\"Herb\"] = 6783512873\nphonebook[\"ADela\"] = 2222222\ndel phonebook[\"Tyler\"]\nprint(phonebook.keys())\nfor k in phonebook.keys():\n    print(k)\nprint(phonebook.items())\nprint(phonebook.values())\nfor key, value in phonebook.items():\n    print(key)",
        "detail": "course-work.cs-guided-project-python-iii.src.dictionary",
        "documentation": {}
    },
    {
        "label": "phonebook[\"ADela\"]",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-python-iii.src.dictionary",
        "description": "course-work.cs-guided-project-python-iii.src.dictionary",
        "peekOfCode": "phonebook[\"ADela\"] = 2222222\ndel phonebook[\"Tyler\"]\nprint(phonebook.keys())\nfor k in phonebook.keys():\n    print(k)\nprint(phonebook.items())\nprint(phonebook.values())\nfor key, value in phonebook.items():\n    print(key)\n    print(value)",
        "detail": "course-work.cs-guided-project-python-iii.src.dictionary",
        "documentation": {}
    },
    {
        "label": "print_one_item",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "description": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "peekOfCode": "def print_one_item(items):\n    print(items[0])\n# liniar O(n)\ndef print_every_item(items):\n    for item in items:\n        print(item)\n# n = number of steps\n# quadratic O(n^2)\ndef print_pairs(items):\n    for item_one in items:",
        "detail": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "documentation": {}
    },
    {
        "label": "print_every_item",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "description": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "peekOfCode": "def print_every_item(items):\n    for item in items:\n        print(item)\n# n = number of steps\n# quadratic O(n^2)\ndef print_pairs(items):\n    for item_one in items:\n        for item_two in items:\n            print(item_one, item_two)\ndef do_a_bunch_of_stuff(items):",
        "detail": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "documentation": {}
    },
    {
        "label": "print_pairs",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "description": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "peekOfCode": "def print_pairs(items):\n    for item_one in items:\n        for item_two in items:\n            print(item_one, item_two)\ndef do_a_bunch_of_stuff(items):\n    last_idx = len(items) - 1  # O(1)\n    middle_idx = len(items) / 2  # O(1)\n    idx = 0  # O(1)\n    for item in items:\n        print(item)  # O(1)",
        "detail": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "documentation": {}
    },
    {
        "label": "do_a_bunch_of_stuff",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "description": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "peekOfCode": "def do_a_bunch_of_stuff(items):\n    last_idx = len(items) - 1  # O(1)\n    middle_idx = len(items) / 2  # O(1)\n    idx = 0  # O(1)\n    for item in items:\n        print(item)  # O(1)\n    for item in items:\n        for item in items:\n            print(item, item)\n    while idx < middle_idx:  # O(n/2) = O(1/2 * n) = O(n)",
        "detail": "course-work.cs-guided-project-python-iii.src.time_complexity",
        "documentation": {}
    },
    {
        "label": "to_lower_case",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-iv.src.demonstration_1",
        "description": "course-work.cs-guided-project-python-iv.src.demonstration_1",
        "peekOfCode": "def to_lower_case(string):\n    # Your code here",
        "detail": "course-work.cs-guided-project-python-iv.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "hamming_weight",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-python-iv.src.demonstration_2",
        "description": "course-work.cs-guided-project-python-iv.src.demonstration_2",
        "peekOfCode": "def hamming_weight(n):\n    # Your code here\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\nprint(hamming_weight(n=0o00000000000000000000001000000011))\nprint(hamming_weight(n=0o00000000000000000000000000001000))\nprint(hamming_weight(n=0o11111111111111111111111111111011))",
        "detail": "course-work.cs-guided-project-python-iv.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.demonstration_1",
        "description": "course-work.cs-guided-project-queues-stacks.src.demonstration_1",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": "course-work.cs-guided-project-queues-stacks.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.demonstration_1",
        "description": "course-work.cs-guided-project-queues-stacks.src.demonstration_1",
        "peekOfCode": "class MaxStack:\n    def __init__(self):\n        # Your code here\n        self.max_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        self.max_stack.push(item)\n    def pop(self):\n        \"\"\"Remove and return the top item from our stack.\"\"\"",
        "detail": "course-work.cs-guided-project-queues-stacks.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "my_stack",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.demonstration_1",
        "description": "course-work.cs-guided-project-queues-stacks.src.demonstration_1",
        "peekOfCode": "my_stack = MaxStack()\nmy_stack.push(2)\nmy_stack.push(3)\nmy_stack.push(4)\nmy_stack.push(7)\nprint(my_stack.max_stack.items)\nmy_stack.pop()\nmy_stack.pop()\nmy_stack.pop()\nmy_stack.pop()",
        "detail": "course-work.cs-guided-project-queues-stacks.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.demonstration_2",
        "description": "course-work.cs-guided-project-queues-stacks.src.demonstration_2",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(\n            item\n        )  # if we dicide that the array we work with has the top at the end so we can use appand and pop build in\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()",
        "detail": "course-work.cs-guided-project-queues-stacks.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.demonstration_2",
        "description": "course-work.cs-guided-project-queues-stacks.src.demonstration_2",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.in_stack = Stack()\n        self.out_stack = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.in_stack.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": "course-work.cs-guided-project-queues-stacks.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.demonstration_2",
        "description": "course-work.cs-guided-project-queues-stacks.src.demonstration_2",
        "peekOfCode": "queue = QueueTwoStacks()\nqueue.enqueue(\"A\")\nqueue.enqueue(\"B\")\nqueue.enqueue(\"C\")\nqueue.enqueue(\"D\")",
        "detail": "course-work.cs-guided-project-queues-stacks.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.queue_guided",
        "description": "course-work.cs-guided-project-queues-stacks.src.queue_guided",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.value = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.head = None\n        self.end = None\n    def enqueue(self, value):  # insert at the end\n        new_node = LinkedListNode(value)",
        "detail": "course-work.cs-guided-project-queues-stacks.src.queue_guided",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.queue_guided",
        "description": "course-work.cs-guided-project-queues-stacks.src.queue_guided",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.head = None\n        self.end = None\n    def enqueue(self, value):  # insert at the end\n        new_node = LinkedListNode(value)\n        # is the list empty?\n        if self.head is None and self.end is None:\n            self.head = new_node\n            self.end = new_node",
        "detail": "course-work.cs-guided-project-queues-stacks.src.queue_guided",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.queue_guided",
        "description": "course-work.cs-guided-project-queues-stacks.src.queue_guided",
        "peekOfCode": "q = Queue()\nq.enqueue(3)\nq.enqueue(34)\nq.enqueue(35)\nq.enqueue(6)\nprint(q.tail.value)",
        "detail": "course-work.cs-guided-project-queues-stacks.src.queue_guided",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.stack_copy",
        "description": "course-work.cs-guided-project-queues-stacks.src.stack_copy",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.value = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.head = None\n        self.end = None\n    def push(self, value):  # for stacks we insert at the head\n        new_node = LinkedListNode(value)",
        "detail": "course-work.cs-guided-project-queues-stacks.src.stack_copy",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.stack_copy",
        "description": "course-work.cs-guided-project-queues-stacks.src.stack_copy",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.head = None\n        self.end = None\n    def push(self, value):  # for stacks we insert at the head\n        new_node = LinkedListNode(value)\n        # is the list empty?\n        if self.head is None and self.end is None:\n            self.head = new_node\n            self.end = new_node",
        "detail": "course-work.cs-guided-project-queues-stacks.src.stack_copy",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-queues-stacks.src.stack_copy",
        "description": "course-work.cs-guided-project-queues-stacks.src.stack_copy",
        "peekOfCode": "q = Stack()\nq.push(3)\nq.push(34)\nq.push(35)\nq.push(6)\nprint(q.tail.value)",
        "detail": "course-work.cs-guided-project-queues-stacks.src.stack_copy",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-searching-recursion.src.binary_search",
        "description": "course-work.cs-guided-project-searching-recursion.src.binary_search",
        "peekOfCode": "def binary_search(arr, target):\n    # find the middle of the array\n    start = 0  # start index\n    end = len(arr) - 1\n    while start <= end:\n        # first fint the middle\n        guess_index = (end + start) // 2\n        # check if the guess/middle is the target\n        if arr[guess_index] == target:\n            return guess_index",
        "detail": "course-work.cs-guided-project-searching-recursion.src.binary_search",
        "documentation": {}
    },
    {
        "label": "binary_search_to_recursive",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-searching-recursion.src.binary_search",
        "description": "course-work.cs-guided-project-searching-recursion.src.binary_search",
        "peekOfCode": "def binary_search_to_recursive(arr, target):  # or is number in middle\n    if len(arr) == 0:\n        return False\n    guess = (len(arr) - 1) // 2\n    if arr[guess] == target:\n        return True\n    if arr[guess] < target:\n        # look to the right\n        return binary_search(arr[guess + 1 :], target)\n    elif arr[guess] > target:",
        "detail": "course-work.cs-guided-project-searching-recursion.src.binary_search",
        "documentation": {}
    },
    {
        "label": "our_list",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-searching-recursion.src.binary_search",
        "description": "course-work.cs-guided-project-searching-recursion.src.binary_search",
        "peekOfCode": "our_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 17]\nprint(binary_search([1, 23, 454, 667, 84, 4, 6, 8], 4))\nprint(binary_search(our_list, 4))\n# to chnage to recursive\n# is the item in the middle\n# return true\n# if arr empty return false\n# if bigger or smaller\n# repeat on either side\ndef binary_search_to_recursive(arr, target):  # or is number in middle",
        "detail": "course-work.cs-guided-project-searching-recursion.src.binary_search",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-searching-recursion.src.demonstration_1",
        "description": "course-work.cs-guided-project-searching-recursion.src.demonstration_1",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here",
        "detail": "course-work.cs-guided-project-searching-recursion.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-searching-recursion.src.demonstration_1",
        "description": "course-work.cs-guided-project-searching-recursion.src.demonstration_1",
        "peekOfCode": "surnames = [\n    'liu',\n    'mcdowell',\n    'nixon',\n    'sparks',\n    'zhang',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',",
        "detail": "course-work.cs-guided-project-searching-recursion.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "firstDraftWithTypo",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-searching-recursion.src.demonstration_2",
        "description": "course-work.cs-guided-project-searching-recursion.src.demonstration_2",
        "peekOfCode": "def firstDraftWithTypo(n):\n    # Your code here",
        "detail": "course-work.cs-guided-project-searching-recursion.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.demonstration_1",
        "description": "course-work.cs-guided-project-tree-traversal.src.demonstration_1",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef inorder_traversal(root):\n    # Your code here",
        "detail": "course-work.cs-guided-project-tree-traversal.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.demonstration_1",
        "description": "course-work.cs-guided-project-tree-traversal.src.demonstration_1",
        "peekOfCode": "def inorder_traversal(root):\n    # Your code here",
        "detail": "course-work.cs-guided-project-tree-traversal.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "description": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # Your code here",
        "detail": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "description": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "peekOfCode": "def build_tree(preorder, inorder):\n    # Your code here",
        "detail": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "description": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n\"\"\"\n# Definition for a binary tree node.",
        "detail": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "description": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:",
        "detail": "course-work.cs-guided-project-tree-traversal.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.guided",
        "description": "course-work.cs-guided-project-tree-traversal.src.guided",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value <= self.value:\n            # the new value must go left\n            if self.left is None:\n                # create a new node as a left child of the current node",
        "detail": "course-work.cs-guided-project-tree-traversal.src.guided",
        "documentation": {}
    },
    {
        "label": "print_tree_preorder",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.guided",
        "description": "course-work.cs-guided-project-tree-traversal.src.guided",
        "peekOfCode": "def print_tree_preorder(root):  # preorder traversal\n    print(root.value)\n    # if you can go left, recurse left\n    if root.left:\n        print_tree(root.left)\n    if root.right:\n        print_tree(root.right)\ndef print_tree_inorder(root):  # inorder traversal\n    # if you can go left, recurse left\n    if root.left:",
        "detail": "course-work.cs-guided-project-tree-traversal.src.guided",
        "documentation": {}
    },
    {
        "label": "print_tree_inorder",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.guided",
        "description": "course-work.cs-guided-project-tree-traversal.src.guided",
        "peekOfCode": "def print_tree_inorder(root):  # inorder traversal\n    # if you can go left, recurse left\n    if root.left:\n        print_tree(root.left)\n    print(root.value)\n    if root.right:\n        print_tree(root.right)\ndef print_tree_postorder(root):  # postorder traversal\n    # if you can go left, recurse left\n    if root.left:",
        "detail": "course-work.cs-guided-project-tree-traversal.src.guided",
        "documentation": {}
    },
    {
        "label": "print_tree_postorder",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.guided",
        "description": "course-work.cs-guided-project-tree-traversal.src.guided",
        "peekOfCode": "def print_tree_postorder(root):  # postorder traversal\n    # if you can go left, recurse left\n    if root.left:\n        print_tree(root.left)\n    if root.right:\n        print_tree(root.right)\n    print(root.value)\ndef breadth_first_traversal(root):\n    queue = []\n    # result = [] or append",
        "detail": "course-work.cs-guided-project-tree-traversal.src.guided",
        "documentation": {}
    },
    {
        "label": "breadth_first_traversal",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.guided",
        "description": "course-work.cs-guided-project-tree-traversal.src.guided",
        "peekOfCode": "def breadth_first_traversal(root):\n    queue = []\n    # result = [] or append\n    # add the first item to the queue\n    queue.append(root)\n    # loop and process items in the queue\n    while len(queue) > 0:\n        # dequeue an item\n        node = queue.pop(0)\n        # print the node",
        "detail": "course-work.cs-guided-project-tree-traversal.src.guided",
        "documentation": {}
    },
    {
        "label": "depth_first_traversal",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.guided",
        "description": "course-work.cs-guided-project-tree-traversal.src.guided",
        "peekOfCode": "def depth_first_traversal(root):\n    # non recursive\n    stack = []  # setup\n    stack.append(root)\n    while len(stack) > 0:  # loop until items are out\n        # dequeue an item\n        node = stack.pop()  # pop\n        # print the node your own code\n        print(node.value)\n        if node.right:  # get to the next nodes",
        "detail": "course-work.cs-guided-project-tree-traversal.src.guided",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.guided",
        "description": "course-work.cs-guided-project-tree-traversal.src.guided",
        "peekOfCode": "root = BSTNode(8)\nroot.insert(5)\nroot.insert(4)\nroot.insert(7)\nroot.insert(12)\nroot.insert(11)\nroot.insert(13)\nprint(depth_first_traversal(root))",
        "detail": "course-work.cs-guided-project-tree-traversal.src.guided",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.paths",
        "description": "course-work.cs-guided-project-tree-traversal.src.paths",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value <= self.value:\n            # the new value must go left\n            if self.left is None:\n                # create a new node as a left child of the current node",
        "detail": "course-work.cs-guided-project-tree-traversal.src.paths",
        "documentation": {}
    },
    {
        "label": "get_paths_root",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.paths",
        "description": "course-work.cs-guided-project-tree-traversal.src.paths",
        "peekOfCode": "def get_paths_root(root, array):  # in pre order\n    paths_array = []\n    def print_paths(root, path):  # helper function to get to every node\n        new_path = path + [root.value]\n        print(new_path)\n        # if you can go left, recurse left\n        if not root.left and not root.right:\n            paths_array.append(new_path)\n        if root.left:\n            get_paths_root(root.left, new_path.copy())",
        "detail": "course-work.cs-guided-project-tree-traversal.src.paths",
        "documentation": {}
    },
    {
        "label": "depth_first_traversal",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.paths",
        "description": "course-work.cs-guided-project-tree-traversal.src.paths",
        "peekOfCode": "def depth_first_traversal(root):\n    # non recursive\n    paths_array = []\n    stack = []  # setup\n    stack.append((root, []))  # pass a tuple\n    while len(stack) > 0:  # loop until items are out\n        # dequeue an item\n        node, path = stack.pop()  # pop\n        # generate and print the path\n        new_path = path + [node.value]",
        "detail": "course-work.cs-guided-project-tree-traversal.src.paths",
        "documentation": {}
    },
    {
        "label": "beadth_first_traversal",
        "kind": 2,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.paths",
        "description": "course-work.cs-guided-project-tree-traversal.src.paths",
        "peekOfCode": "def beadth_first_traversal(root):\n    # non recursive and using a queue\n    paths_array = []\n    queue = []  # setup\n    queue.append((root, []))  # pass a tuple\n    while len(queue) > 0:  # loop until items are out\n        # dequeue an item\n        node, path = queue.pop(0)  # pop\n        # generate and print the path\n        new_path = path + [node.value]",
        "detail": "course-work.cs-guided-project-tree-traversal.src.paths",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "course-work.cs-guided-project-tree-traversal.src.paths",
        "description": "course-work.cs-guided-project-tree-traversal.src.paths",
        "peekOfCode": "root = BSTNode(8)\nroot.insert(5)\nroot.insert(4)\nroot.insert(7)\nroot.insert(12)\nroot.insert(11)\nroot.insert(13)\ndepth_first_traversal(root)",
        "detail": "course-work.cs-guided-project-tree-traversal.src.paths",
        "documentation": {}
    },
    {
        "label": "csSearchRotatedSortedArray",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.search.indexOfTarget",
        "description": "course-work.Python-Brain-Teasers.search.indexOfTarget",
        "peekOfCode": "def csSearchRotatedSortedArray(nums, target):\n    # O(1) run time:\n    if target in nums:\n        return nums.index(target)\n    # O(n) run time:\n    # for idx in range(len(nums)):\n    #     if nums[idx] == target:\n    #         return idx\n    return -1",
        "detail": "course-work.Python-Brain-Teasers.search.indexOfTarget",
        "documentation": {}
    },
    {
        "label": "csBinarySearch",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.binarySearch",
        "description": "course-work.Python-Brain-Teasers.binarySearch",
        "peekOfCode": "def csBinarySearch(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[guess] < target:\n            min = guess + 1\n        else:",
        "detail": "course-work.Python-Brain-Teasers.binarySearch",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.checkBlanagrams",
        "description": "course-work.Python-Brain-Teasers.checkBlanagrams",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    if sorted(word1) == sorted(word2):\n        return False\n    return True",
        "detail": "course-work.Python-Brain-Teasers.checkBlanagrams",
        "documentation": {}
    },
    {
        "label": "binarySearch",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.findValueInShiftedArray",
        "description": "course-work.Python-Brain-Teasers.findValueInShiftedArray",
        "peekOfCode": "def binarySearch(arr, key):\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if key == arr[guess]:\n            return arr[guess]\n        elif key > arr[guess]:\n            min = guess + 1\n        else:",
        "detail": "course-work.Python-Brain-Teasers.findValueInShiftedArray",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.findValueInShiftedArray",
        "description": "course-work.Python-Brain-Teasers.findValueInShiftedArray",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    pivot = 3\n    if nums[pivot] == target:\n        return pivot\n    if nums[pivot] >= target:\n        value = binarySearch(nums[pivot + 1 :], target)\n        print(value)\n        if value == target:\n            return nums.index(value)",
        "detail": "course-work.Python-Brain-Teasers.findValueInShiftedArray",
        "documentation": {}
    },
    {
        "label": "findJudge",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.find_the_judge",
        "description": "course-work.Python-Brain-Teasers.find_the_judge",
        "peekOfCode": "def findJudge(self, N: int, trusts: List[List[int]]) -> int:\n        # Build our dict\n        trust_dict = {}\n        # Add the keys\n        for i in range(1, N+1):\n            trust_dict[i] = [0, 0]\n        # Add the in/out degrees\n        for trust in trusts:\n            a = trust[0]\n            b = trust[1]",
        "detail": "course-work.Python-Brain-Teasers.find_the_judge",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.finid_town_judge",
        "description": "course-work.Python-Brain-Teasers.finid_town_judge",
        "peekOfCode": "def find_judge(trust):\n    people = set()\n    trusters = set()\n    for truster, trustee in trust:\n        people.add(truster)\n        people.add(trustee)\n        trusters.add(truster)\n    # Criterion #1: Who trusts no one?\n    # Who is in people but not in trusters?\n    # With set operations:",
        "detail": "course-work.Python-Brain-Teasers.finid_town_judge",
        "documentation": {}
    },
    {
        "label": "edge_matrix",
        "kind": 5,
        "importPath": "course-work.Python-Brain-Teasers.finid_town_judge",
        "description": "course-work.Python-Brain-Teasers.finid_town_judge",
        "peekOfCode": "edge_matrix = [\n    [0, 0, 1, 1],\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n]\n# Is a node connected to another?\n# if edge_matrix[from][to] != 0:\n#     print(\"They're connected!\")\nhttps://colab.research.google.com/drive/1aMM4MP9SCSu4tNXd8C3pJ30O909GJHYJ?usp=sharing#scrollTo=pdvs2MJ4a_zX",
        "detail": "course-work.Python-Brain-Teasers.finid_town_judge",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.firstUniqueCharacterInString",
        "description": "course-work.Python-Brain-Teasers.firstUniqueCharacterInString",
        "peekOfCode": "def first_not_repeating_character(s):\n    count = Counter(s)\n    for char in s:\n        if count[char] == 1:\n            return char\n    return \"_\"",
        "detail": "course-work.Python-Brain-Teasers.firstUniqueCharacterInString",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.frequency_sort",
        "description": "course-work.Python-Brain-Teasers.frequency_sort",
        "peekOfCode": "def frequency_sort(s):\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n     \"\"\"\n    # Your code here\n    freq_dict = {}\n    for ch in s:",
        "detail": "course-work.Python-Brain-Teasers.frequency_sort",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.friendsCircle",
        "description": "course-work.Python-Brain-Teasers.friendsCircle",
        "peekOfCode": "def dfs(row, friends, visited_arr):\n    visited_arr.add(row)\n    for neighbor in range(len(friends[row])):\n        if friends[row][neighbor] == 1 and neighbor not in visited_arr:\n            dfs(neighbor, friends, visited_arr)\n    return visited_arr\ndef csFriendCircles(friendships):\n    count = 0\n    visited = set()\n    if friendships is None or len(friendships) == 0:",
        "detail": "course-work.Python-Brain-Teasers.friendsCircle",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.friendsCircle",
        "description": "course-work.Python-Brain-Teasers.friendsCircle",
        "peekOfCode": "def csFriendCircles(friendships):\n    count = 0\n    visited = set()\n    if friendships is None or len(friendships) == 0:\n        return 0\n    for row in range(len(friendships)):\n        if friendships[row][row] == 1 and row not in visited:\n            count += 1\n            visited = dfs(row, friendships, visited)\n    return count",
        "detail": "course-work.Python-Brain-Teasers.friendsCircle",
        "documentation": {}
    },
    {
        "label": "csGroupAnagrams",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.groupAnagrams",
        "description": "course-work.Python-Brain-Teasers.groupAnagrams",
        "peekOfCode": "def csGroupAnagrams(strs):\n    new_list = []\n    groups = {}\n    for word in strs:\n        sorted_word = \"\".join(sorted(word))\n        if sorted_word in groups:\n            groups[sorted_word].append(word)\n        else:\n            groups[sorted_word] = [word]\n    for key, value in groups.items():",
        "detail": "course-work.Python-Brain-Teasers.groupAnagrams",
        "documentation": {}
    },
    {
        "label": "hamming_weight",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.hamming_weight",
        "description": "course-work.Python-Brain-Teasers.hamming_weight",
        "peekOfCode": "def hamming_weight(n):\n    # Your code here\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\nprint(hamming_weight(n=0o00000000000000000000001000000011))\nprint(hamming_weight(n=0o00000000000000000000000000001000))\nprint(hamming_weight(n=0o11111111111111111111111111111011))",
        "detail": "course-work.Python-Brain-Teasers.hamming_weight",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.insertValueIntoSortedLinkedList",
        "description": "course-work.Python-Brain-Teasers.insertValueIntoSortedLinkedList",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    head = l\n    new_item = ListNode(value)\n    if head is None:\n        new_item.next = head\n        head = new_item\n        return head\n    elif head.value >= new_item.value:\n        new_item.next = head\n        head = new_item",
        "detail": "course-work.Python-Brain-Teasers.insertValueIntoSortedLinkedList",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.invertBinaryTree",
        "description": "course-work.Python-Brain-Teasers.invertBinaryTree",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    if root is None:\n        return\n    else:\n        temp = root\n        csBinaryTreeInvert(root.left)\n        csBinaryTreeInvert(root.right)\n        temp = root.left\n        root.left = root.right\n        root.right = temp",
        "detail": "course-work.Python-Brain-Teasers.invertBinaryTree",
        "documentation": {}
    },
    {
        "label": "csIsomorphicStrings",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.isisomorphicStrings",
        "description": "course-work.Python-Brain-Teasers.isisomorphicStrings",
        "peekOfCode": "def csIsomorphicStrings(a, b):\n    max_chars = 256\n    m = len(a)\n    n = len(b)\n    if m != n:\n        return False\n    marked = [False] * max_chars\n    map = [-1] * max_chars\n    for i in range(n):\n        if map[ord(a[i])] == -1:",
        "detail": "course-work.Python-Brain-Teasers.isisomorphicStrings",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.mergeTwoLinkedLists",
        "description": "course-work.Python-Brain-Teasers.mergeTwoLinkedLists",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    em = None\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.value <= l2.value:\n        startNode = ListNode(l1.value)\n        l1 = l1.next\n    else:",
        "detail": "course-work.Python-Brain-Teasers.mergeTwoLinkedLists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "course-work.Python-Brain-Teasers.mergeTwoLists",
        "description": "course-work.Python-Brain-Teasers.mergeTwoLists",
        "peekOfCode": "class Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        new_list = ListNode()\n        if l1 is None:\n            return l2\n        if l2 is None:\n            return l1\n        if l1.val <= l2.val:\n            new_list = l1\n            l1 = l1.next",
        "detail": "course-work.Python-Brain-Teasers.mergeTwoLists",
        "documentation": {}
    },
    {
        "label": "Solutio",
        "kind": 6,
        "importPath": "course-work.Python-Brain-Teasers.merge_2_BST",
        "description": "course-work.Python-Brain-Teasers.merge_2_BST",
        "peekOfCode": "class Solution {\n   def mergeTrees(self,root1: TreeNode, root2: TreeNode) -> TreeNode:\n        #check if either tree is empty\n        if not root1:\n            return root2\n        if not root2:\n            return root1\n        mergeNode = TreeNode(root1.val + root2.val)\n        mergeNode.left = self.mergeTrees(root1.left,  root2.left)        \n        mergeNode.right = self.mergeTrees(root1.right, root2.right)",
        "detail": "course-work.Python-Brain-Teasers.merge_2_BST",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "course-work.Python-Brain-Teasers.queueOnStacks",
        "description": "course-work.Python-Brain-Teasers.queueOnStacks",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\ndef queueOnStacks(requests):",
        "detail": "course-work.Python-Brain-Teasers.queueOnStacks",
        "documentation": {}
    },
    {
        "label": "queueOnStacks",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.queueOnStacks",
        "description": "course-work.Python-Brain-Teasers.queueOnStacks",
        "peekOfCode": "def queueOnStacks(requests):\n    left = Stack()\n    right = Stack()\n    def insert(x):\n        left.push(x)\n    def remove():\n        if not left.isEmpty():\n            right.push(left.items.pop(0))\n            return right.pop()\n    ans = []",
        "detail": "course-work.Python-Brain-Teasers.queueOnStacks",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.sumOfTreeNodesWithinARange",
        "description": "course-work.Python-Brain-Teasers.sumOfTreeNodesWithinARange",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    sum = 0\n    # value = None\n    if root is None:\n        return 0\n    if (\n        root.left is None\n        and root.right is None\n        and root.value in range(lower, upper + 1)\n    ):",
        "detail": "course-work.Python-Brain-Teasers.sumOfTreeNodesWithinARange",
        "documentation": {}
    },
    {
        "label": "csWordPattern",
        "kind": 2,
        "importPath": "course-work.Python-Brain-Teasers.wordPattern",
        "description": "course-work.Python-Brain-Teasers.wordPattern",
        "peekOfCode": "def csWordPattern(pattern, a):\n    mp1 = {}\n    mp2 = {}\n    words = a.split(\" \")\n    if len(words) != len(pattern):\n        return False\n    for word, ch in zip(words, pattern):\n        if word not in mp1 and ch not in mp2:\n            mp1[word] = ch\n            mp2[ch] = word",
        "detail": "course-work.Python-Brain-Teasers.wordPattern",
        "documentation": {}
    },
    {
        "label": "process_dir",
        "kind": 2,
        "importPath": "course-work.dirhtml",
        "description": "course-work.dirhtml",
        "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or \"*\"\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f\"Traversing dir {path_top_dir.absolute()}\")\n    try:\n        index_file = open(index_path, \"w\")",
        "detail": "course-work.dirhtml",
        "documentation": {}
    },
    {
        "label": "pretty_size",
        "kind": 2,
        "importPath": "course-work.dirhtml",
        "description": "course-work.dirhtml",
        "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
        "detail": "course-work.dirhtml",
        "documentation": {}
    },
    {
        "label": "DEFAULT_OUTPUT_FILE",
        "kind": 5,
        "importPath": "course-work.dirhtml",
        "description": "course-work.dirhtml",
        "peekOfCode": "DEFAULT_OUTPUT_FILE = \"index.html\"\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or \"*\"\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f\"Traversing dir {path_top_dir.absolute()}\")\n    try:",
        "detail": "course-work.dirhtml",
        "documentation": {}
    },
    {
        "label": "UNITS_MAPPING",
        "kind": 5,
        "importPath": "course-work.dirhtml",
        "description": "course-work.dirhtml",
        "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, \" PB\"),\n    (1024 ** 4, \" TB\"),\n    (1024 ** 3, \" GB\"),\n    (1024 ** 2, \" MB\"),\n    (1024 ** 1, \" KB\"),\n    (1024 ** 0, (\" byte\", \" bytes\")),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
        "detail": "course-work.dirhtml",
        "documentation": {}
    },
    {
        "label": "lottery",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.additions.test_generators",
        "description": "python-prac.learn-python.src.additions.test_generators",
        "peekOfCode": "def lottery():\n    \"\"\"Generator function example.\n    Here is a simple example of a generator function which returns random integers.\n    This function decides how to generate the random numbers on its own, and executes the yield\n    statements one at a time, pausing in between to yield execution back to the main for loop.\n    \"\"\"\n    # returns first 3 random numbers between 1 and 10\n    # pylint: disable=unused-variable\n    for i in range(3):\n        yield random.randint(1, 10)",
        "detail": "python-prac.learn-python.src.additions.test_generators",
        "documentation": {}
    },
    {
        "label": "test_generators",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.additions.test_generators",
        "description": "python-prac.learn-python.src.additions.test_generators",
        "peekOfCode": "def test_generators():\n    \"\"\"Yield statement\"\"\"\n    for number_index, random_number in enumerate(lottery()):\n        if number_index < 3:\n            assert 0 <= random_number <= 10\n        else:\n            assert 10 <= random_number <= 20",
        "detail": "python-prac.learn-python.src.additions.test_generators",
        "documentation": {}
    },
    {
        "label": "MyEmptyClass",
        "kind": 6,
        "importPath": "python-prac.learn-python.src.additions.test_pass",
        "description": "python-prac.learn-python.src.additions.test_pass",
        "peekOfCode": "class MyEmptyClass:\n    \"\"\"PASS statement in class\n    \"Pass\" is commonly used for creating minimal classes like current one.\n    \"\"\"\n    pass",
        "detail": "python-prac.learn-python.src.additions.test_pass",
        "documentation": {}
    },
    {
        "label": "test_pass_in_function",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.additions.test_pass",
        "description": "python-prac.learn-python.src.additions.test_pass",
        "peekOfCode": "def test_pass_in_function():\n    \"\"\"PASS statement in function\n    \"Pass\" can be used as a place-holder for a function or conditional body when you are working on\n    new code, allowing you to keep thinking at a more abstract level.\n    The pass statement below is silently ignored but it makes current test_pass() function valid.\n    \"\"\"\n    pass\ndef test_pass_in_loop():\n    \"\"\"PASS in loops.\n    \"Pass\" can be used when a statement is required syntactically but the program requires no",
        "detail": "python-prac.learn-python.src.additions.test_pass",
        "documentation": {}
    },
    {
        "label": "test_pass_in_loop",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.additions.test_pass",
        "description": "python-prac.learn-python.src.additions.test_pass",
        "peekOfCode": "def test_pass_in_loop():\n    \"\"\"PASS in loops.\n    \"Pass\" can be used when a statement is required syntactically but the program requires no\n    action. For example:\n    \"\"\"\n    # pylint: disable=unused-variable\n    for number in range(100):\n        # It just don't do anything but for loop is still valid.\n        pass\n    # Example above is quite useless but it was given just for illustration of the idea.",
        "detail": "python-prac.learn-python.src.additions.test_pass",
        "documentation": {}
    },
    {
        "label": "test_class_and_instance_variables",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.classes.test_class_and_instance_variables",
        "description": "python-prac.learn-python.src.classes.test_class_and_instance_variables",
        "peekOfCode": "def test_class_and_instance_variables():\n    \"\"\"Class and Instance Variables.\"\"\"\n    # pylint: disable=too-few-public-methods\n    class Dog:\n        \"\"\"Dog class example\"\"\"\n        kind = \"canine\"  # Class variable shared by all instances.\n        def __init__(self, name):\n            self.name = name  # Instance variable unique to each instance.\n    fido = Dog(\"Fido\")\n    buddy = Dog(\"Buddy\")",
        "detail": "python-prac.learn-python.src.classes.test_class_and_instance_variables",
        "documentation": {}
    },
    {
        "label": "test_class_definition",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.classes.test_class_definition",
        "description": "python-prac.learn-python.src.classes.test_class_definition",
        "peekOfCode": "def test_class_definition():\n    \"\"\"Class definition.\"\"\"\n    # Class definitions, like function definitions (def statements) must be executed before they\n    # have any effect. (You could conceivably place a class definition in a branch of an if\n    # statement, or inside a function.)\n    class GreetingClass:\n        \"\"\"Example of the class definition\n        This class contains two public methods and doesn't contain constructor.\n        \"\"\"\n        name = \"user\"",
        "detail": "python-prac.learn-python.src.classes.test_class_definition",
        "documentation": {}
    },
    {
        "label": "test_class_objects",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.classes.test_class_objects",
        "description": "python-prac.learn-python.src.classes.test_class_objects",
        "peekOfCode": "def test_class_objects():\n    \"\"\"Class Objects.\n    Class objects support two kinds of operations:\n    - attribute references\n    - instantiation.\n    \"\"\"\n    # ATTRIBUTE REFERENCES use the standard syntax used for all attribute references in\n    # Python: obj.name. Valid attribute names are all the names that were in the class’s namespace\n    # when the class object was created. For class MyCounter the following references are valid\n    # attribute references:",
        "detail": "python-prac.learn-python.src.classes.test_class_objects",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "python-prac.learn-python.src.classes.test_inheritance",
        "description": "python-prac.learn-python.src.classes.test_inheritance",
        "peekOfCode": "class Person:\n    \"\"\"Example of the base class\"\"\"\n    def __init__(self, name):\n        self.name = name\n    def get_name(self):\n        \"\"\"Get person name\"\"\"\n        return self.name\n# The syntax for a derived class definition looks like this.\n# pylint: disable=too-few-public-methods\nclass Employee(Person):",
        "detail": "python-prac.learn-python.src.classes.test_inheritance",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "python-prac.learn-python.src.classes.test_inheritance",
        "description": "python-prac.learn-python.src.classes.test_inheritance",
        "peekOfCode": "class Employee(Person):\n    \"\"\"Example of the derived class\n    The Base Class (in our case Person) must be defined in a scope containing the derived class\n    definition. In place of a base class name, other arbitrary expressions are also allowed.\n    Derived classes may override methods of their base classes. Because methods have no special\n    privileges when calling other methods of the same object, a method of a base class that calls\n    another method defined in the same base class may end up calling a method of a derived class\n    that overrides it.\n    An overriding method in a derived class may in fact want to extend rather than simply replace\n    the base class method of the same name. There is a simple way to call the base class method",
        "detail": "python-prac.learn-python.src.classes.test_inheritance",
        "documentation": {}
    },
    {
        "label": "test_inheritance",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.classes.test_inheritance",
        "description": "python-prac.learn-python.src.classes.test_inheritance",
        "peekOfCode": "def test_inheritance():\n    \"\"\"Inheritance.\"\"\"\n    # There’s nothing special about instantiation of derived classes: DerivedClassName() creates a\n    # new instance of the class. Method references are resolved as follows: the corresponding class\n    # attribute is searched, descending down the chain of base classes if necessary, and the method\n    # reference is valid if this yields a function object.\n    person = Person(\"Bill\")\n    employee = Employee(\"John\", \"A23\")\n    assert person.get_name() == \"Bill\"\n    assert employee.get_name() == \"John\"",
        "detail": "python-prac.learn-python.src.classes.test_inheritance",
        "documentation": {}
    },
    {
        "label": "test_instance_objects",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.classes.test_instance_objects",
        "description": "python-prac.learn-python.src.classes.test_instance_objects",
        "peekOfCode": "def test_instance_objects():\n    \"\"\"Instance Objects.\n    Now what can we do with instance objects? The only operations understood by instance objects\n    are attribute references. There are two kinds of valid attribute names:\n    - data attributes\n    - methods.\n    \"\"\"\n    # DATA ATTRIBUTES need not be declared; like local variables, they spring into existence when\n    # they are first assigned to. For example, if x is the instance of MyCounter created above,\n    # the following piece of code will print the value 16, without leaving a trace.",
        "detail": "python-prac.learn-python.src.classes.test_instance_objects",
        "documentation": {}
    },
    {
        "label": "MyCounter",
        "kind": 6,
        "importPath": "python-prac.learn-python.src.classes.test_method_objects",
        "description": "python-prac.learn-python.src.classes.test_method_objects",
        "peekOfCode": "class MyCounter:\n    \"\"\"A simple example of the counter class\"\"\"\n    counter = 10\n    def get_counter(self):\n        \"\"\"Return the counter\"\"\"\n        return self.counter\n    def increment_counter(self):\n        \"\"\"Increment the counter\"\"\"\n        self.counter += 1\n        return self.counter",
        "detail": "python-prac.learn-python.src.classes.test_method_objects",
        "documentation": {}
    },
    {
        "label": "test_method_objects",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.classes.test_method_objects",
        "description": "python-prac.learn-python.src.classes.test_method_objects",
        "peekOfCode": "def test_method_objects():\n    \"\"\"Method Objects.\"\"\"\n    # The other kind of instance attribute reference is a method. A method is a function that\n    # “belongs to” an object. (In Python, the term method is not unique to class instances: other\n    # object types can have methods as well. For example, list objects have methods called append,\n    # insert, remove, sort, and so on. However, in the following discussion, we’ll use the term\n    # method exclusively to mean methods of class instance objects, unless explicitly stated\n    # otherwise.)\n    # But be aware that counter.get_counter() is not the same thing as MyCounter.get_counter() —\n    # it is a method object, not a function object.",
        "detail": "python-prac.learn-python.src.classes.test_method_objects",
        "documentation": {}
    },
    {
        "label": "test_multiple_inheritance",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.classes.test_multiple_inheritance",
        "description": "python-prac.learn-python.src.classes.test_multiple_inheritance",
        "peekOfCode": "def test_multiple_inheritance():\n    \"\"\"Multiple Inheritance\"\"\"\n    # pylint: disable=too-few-public-methods\n    class Clock:\n        \"\"\"Clock class\"\"\"\n        time = \"11:23 PM\"\n        def get_time(self):\n            \"\"\"Get current time\n            Method is hardcoded just for multiple inheritance illustration.\n            \"\"\"",
        "detail": "python-prac.learn-python.src.classes.test_multiple_inheritance",
        "documentation": {}
    },
    {
        "label": "test_break_statement",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.control_flow.test_break",
        "description": "python-prac.learn-python.src.control_flow.test_break",
        "peekOfCode": "def test_break_statement():\n    \"\"\"BREAK statement\"\"\"\n    # Let's terminate the loop in case if we've found the number we need in a range from 0 to 100.\n    number_to_be_found = 42\n    # This variable will record how many time we've entered the \"for\" loop.\n    number_of_iterations = 0\n    for number in range(100):\n        if number == number_to_be_found:\n            # Break here and don't continue the loop.\n            break",
        "detail": "python-prac.learn-python.src.control_flow.test_break",
        "documentation": {}
    },
    {
        "label": "test_continue_statement",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.control_flow.test_continue",
        "description": "python-prac.learn-python.src.control_flow.test_continue",
        "peekOfCode": "def test_continue_statement():\n    \"\"\"CONTINUE statement in FOR loop\"\"\"\n    # Let's\n    # This list will contain only even numbers from the range.\n    even_numbers = []\n    # This list will contain every other numbers (in this case - ods).\n    rest_of_the_numbers = []\n    for number in range(0, 10):\n        # Check if remainder after division is zero (which would mean that number is even).\n        if number % 2 == 0:",
        "detail": "python-prac.learn-python.src.control_flow.test_continue",
        "documentation": {}
    },
    {
        "label": "test_for_statement",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.control_flow.test_for",
        "description": "python-prac.learn-python.src.control_flow.test_for",
        "peekOfCode": "def test_for_statement():\n    \"\"\"FOR statement\"\"\"\n    # Measure some strings:\n    words = [\"cat\", \"window\", \"defenestrate\"]\n    words_length = 0\n    for word in words:\n        words_length += len(word)\n    # \"cat\" length is 3\n    # \"window\" length is 6\n    # \"defenestrate\" length is 12",
        "detail": "python-prac.learn-python.src.control_flow.test_for",
        "documentation": {}
    },
    {
        "label": "test_range_function",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.control_flow.test_for",
        "description": "python-prac.learn-python.src.control_flow.test_for",
        "peekOfCode": "def test_range_function():\n    \"\"\"Range function\n    If you do need to iterate over a sequence of numbers, the built-in function range() comes in\n    handy. It generates arithmetic progressions.\n    In many ways the object returned by range() behaves as if it is a list, but in fact it isn’t.\n    It is an object which returns the successive items of the desired sequence when you iterate\n    over it, but it doesn’t really make the list, thus saving space.\n    We say such an object is iterable, that is, suitable as a target for functions and constructs\n    that expect something from which they can obtain successive items until the supply is exhausted.\n    We have seen that the for statement is such an iterator. The function list() is another; it",
        "detail": "python-prac.learn-python.src.control_flow.test_for",
        "documentation": {}
    },
    {
        "label": "test_if_statement",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.control_flow.test_if",
        "description": "python-prac.learn-python.src.control_flow.test_if",
        "peekOfCode": "def test_if_statement():\n    \"\"\"IF statement\"\"\"\n    number = 15\n    conclusion = \"\"\n    if number < 0:\n        conclusion = \"Number is less than zero\"\n    elif number == 0:\n        conclusion = \"Number equals to zero\"\n    elif number < 1:\n        conclusion = \"Number is greater than zero but less than one\"",
        "detail": "python-prac.learn-python.src.control_flow.test_if",
        "documentation": {}
    },
    {
        "label": "test_try",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.control_flow.test_try",
        "description": "python-prac.learn-python.src.control_flow.test_try",
        "peekOfCode": "def test_try():\n    \"\"\"TRY statement\"\"\"\n    # The try block will generate an error, because x is not defined:\n    exception_has_been_caught = False\n    try:\n        # pylint: disable=undefined-variable\n        print(not_existing_variable)\n    except NameError:\n        exception_has_been_caught = True\n    assert exception_has_been_caught",
        "detail": "python-prac.learn-python.src.control_flow.test_try",
        "documentation": {}
    },
    {
        "label": "test_while_statement",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.control_flow.test_while",
        "description": "python-prac.learn-python.src.control_flow.test_while",
        "peekOfCode": "def test_while_statement():\n    \"\"\"WHILE statement\"\"\"\n    # Let's raise the number to certain power using while loop.\n    number = 2\n    power = 5\n    result = 1\n    while power > 0:\n        result *= number\n        power -= 1\n    # 2^5 = 32",
        "detail": "python-prac.learn-python.src.control_flow.test_while",
        "documentation": {}
    },
    {
        "label": "test_dictionary",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_dictionaries",
        "description": "python-prac.learn-python.src.data_types.test_dictionaries",
        "peekOfCode": "def test_dictionary():\n    \"\"\"Dictionary\"\"\"\n    fruits_dictionary = {\"cherry\": \"red\", \"apple\": \"green\", \"banana\": \"yellow\"}\n    assert isinstance(fruits_dictionary, dict)\n    # You may access set elements by keys.\n    assert fruits_dictionary[\"apple\"] == \"green\"\n    assert fruits_dictionary[\"banana\"] == \"yellow\"\n    assert fruits_dictionary[\"cherry\"] == \"red\"\n    # To check whether a single key is in the dictionary, use the in keyword.\n    assert \"apple\" in fruits_dictionary",
        "detail": "python-prac.learn-python.src.data_types.test_dictionaries",
        "documentation": {}
    },
    {
        "label": "test_list_type",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_lists",
        "description": "python-prac.learn-python.src.data_types.test_lists",
        "peekOfCode": "def test_list_type():\n    \"\"\"List type.\"\"\"\n    # Lists are very similar to arrays. They can contain any type of variable, and they can contain\n    # as many variables as you wish. Lists can also be iterated over in a very simple manner.\n    # Here is an example of how to build a list.\n    squares = [1, 4, 9, 16, 25]\n    assert isinstance(squares, list)\n    # Like strings (and all other built-in sequence type), lists can be\n    # indexed and sliced:\n    assert squares[0] == 1  # indexing returns the item",
        "detail": "python-prac.learn-python.src.data_types.test_lists",
        "documentation": {}
    },
    {
        "label": "test_list_methods",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_lists",
        "description": "python-prac.learn-python.src.data_types.test_lists",
        "peekOfCode": "def test_list_methods():\n    \"\"\"Test list methods.\"\"\"\n    fruits = [\"orange\", \"apple\", \"pear\", \"banana\", \"kiwi\", \"apple\", \"banana\"]\n    # list.append(x)\n    # Add an item to the end of the list.\n    # Equivalent to a[len(a):] = [x].\n    fruits.append(\"grape\")\n    assert fruits == [\n        \"orange\",\n        \"apple\",",
        "detail": "python-prac.learn-python.src.data_types.test_lists",
        "documentation": {}
    },
    {
        "label": "test_del_statement",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_lists",
        "description": "python-prac.learn-python.src.data_types.test_lists",
        "peekOfCode": "def test_del_statement():\n    \"\"\"The del statement\n    There is a way to remove an item from a list given its index instead of its value: the del\n    statement. This differs from the pop() method which returns a value. The del statement can also\n    be used to remove slices from a list or clear the entire list (which we did earlier by\n    assignment of an empty list to the slice).\n    \"\"\"\n    numbers = [-1, 1, 66.25, 333, 333, 1234.5]\n    del numbers[0]\n    assert numbers == [1, 66.25, 333, 333, 1234.5]",
        "detail": "python-prac.learn-python.src.data_types.test_lists",
        "documentation": {}
    },
    {
        "label": "test_list_comprehensions",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_lists",
        "description": "python-prac.learn-python.src.data_types.test_lists",
        "peekOfCode": "def test_list_comprehensions():\n    \"\"\"List Comprehensions.\n    List comprehensions provide a concise way to create lists. Common applications are to make new\n    lists where each element is the result of some operations applied to each member of another\n    sequence or iterable, or to create a subsequence of those elements that satisfy a certain\n    condition.\n    A list comprehension consists of brackets containing an expression followed by a for clause,\n    then zero or more for or if clauses. The result will be a new list resulting from evaluating\n    the expression in the context of the for and if clauses which follow it.\n    \"\"\"",
        "detail": "python-prac.learn-python.src.data_types.test_lists",
        "documentation": {}
    },
    {
        "label": "test_nested_list_comprehensions",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_lists",
        "description": "python-prac.learn-python.src.data_types.test_lists",
        "peekOfCode": "def test_nested_list_comprehensions():\n    \"\"\"Nested List Comprehensions\n    The initial expression in a list comprehension can be any arbitrary expression, including\n    another list comprehension.\n    \"\"\"\n    # Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4:\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    # The following list comprehension will transpose rows and columns:\n    transposed_matrix = [[row[i] for row in matrix] for i in range(4)]\n    assert transposed_matrix == [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]",
        "detail": "python-prac.learn-python.src.data_types.test_lists",
        "documentation": {}
    },
    {
        "label": "test_integer_numbers",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_numbers",
        "description": "python-prac.learn-python.src.data_types.test_numbers",
        "peekOfCode": "def test_integer_numbers():\n    \"\"\"Integer type\n    Int, or integer, is a whole number, positive or negative,\n    without decimals, of unlimited length.\n    \"\"\"\n    positive_integer = 1\n    negative_integer = -3255522\n    big_integer = 35656222554887711\n    assert isinstance(positive_integer, int)\n    assert isinstance(negative_integer, int)",
        "detail": "python-prac.learn-python.src.data_types.test_numbers",
        "documentation": {}
    },
    {
        "label": "test_booleans",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_numbers",
        "description": "python-prac.learn-python.src.data_types.test_numbers",
        "peekOfCode": "def test_booleans():\n    \"\"\"Boolean\n    Booleans represent the truth values False and True. The two objects representing the values\n    False and True are the only Boolean objects. The Boolean type is a subtype of the integer type,\n    and Boolean values behave like the values 0 and 1, respectively, in almost all contexts, the\n    exception being that when converted to a string, the strings \"False\" or \"True\" are returned,\n    respectively.\n    \"\"\"\n    true_boolean = True\n    false_boolean = False",
        "detail": "python-prac.learn-python.src.data_types.test_numbers",
        "documentation": {}
    },
    {
        "label": "test_float_numbers",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_numbers",
        "description": "python-prac.learn-python.src.data_types.test_numbers",
        "peekOfCode": "def test_float_numbers():\n    \"\"\"Float type\n    Float, or \"floating point number\" is a number, positive or negative,\n    containing one or more decimals.\n    \"\"\"\n    float_number = 7.0\n    # Another way of declaring float is using float() function.\n    float_number_via_function = float(7)\n    float_negative = -35.59\n    assert float_number == float_number_via_function",
        "detail": "python-prac.learn-python.src.data_types.test_numbers",
        "documentation": {}
    },
    {
        "label": "test_complex_numbers",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_numbers",
        "description": "python-prac.learn-python.src.data_types.test_numbers",
        "peekOfCode": "def test_complex_numbers():\n    \"\"\"Complex Type\"\"\"\n    complex_number_1 = 5 + 6j\n    complex_number_2 = 3 - 2j\n    assert isinstance(complex_number_1, complex)\n    assert isinstance(complex_number_2, complex)\n    assert complex_number_1 * complex_number_2 == 27 + 8j\ndef test_number_operators():\n    \"\"\"Basic operations\"\"\"\n    # Addition.",
        "detail": "python-prac.learn-python.src.data_types.test_numbers",
        "documentation": {}
    },
    {
        "label": "test_number_operators",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_numbers",
        "description": "python-prac.learn-python.src.data_types.test_numbers",
        "peekOfCode": "def test_number_operators():\n    \"\"\"Basic operations\"\"\"\n    # Addition.\n    assert 2 + 4 == 6\n    # Multiplication.\n    assert 2 * 4 == 8\n    # Division always returns a floating point number.\n    assert 12 / 3 == 4.0\n    assert 12 / 5 == 2.4\n    assert 17 / 3 == 5.666666666666667",
        "detail": "python-prac.learn-python.src.data_types.test_numbers",
        "documentation": {}
    },
    {
        "label": "test_sets",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_sets",
        "description": "python-prac.learn-python.src.data_types.test_sets",
        "peekOfCode": "def test_sets():\n    \"\"\"Sets\"\"\"\n    fruits_set = {\"apple\", \"banana\", \"cherry\"}\n    assert isinstance(fruits_set, set)\n    # It is also possible to use the set() constructor to make a set.\n    # Note the double round-brackets\n    fruits_set_via_constructor = set((\"apple\", \"banana\", \"cherry\"))\n    assert isinstance(fruits_set_via_constructor, set)\ndef test_set_methods():\n    \"\"\"Set methods\"\"\"",
        "detail": "python-prac.learn-python.src.data_types.test_sets",
        "documentation": {}
    },
    {
        "label": "test_set_methods",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_sets",
        "description": "python-prac.learn-python.src.data_types.test_sets",
        "peekOfCode": "def test_set_methods():\n    \"\"\"Set methods\"\"\"\n    fruits_set = {\"apple\", \"banana\", \"cherry\"}\n    # You may check if the item is in set by using \"in\" statement\n    assert \"apple\" in fruits_set\n    assert \"pineapple\" not in fruits_set\n    # Use the len() method to return the number of items.\n    assert len(fruits_set) == 3\n    # You can use the add() object method to add an item.\n    fruits_set.add(\"pineapple\")",
        "detail": "python-prac.learn-python.src.data_types.test_sets",
        "documentation": {}
    },
    {
        "label": "test_string_type",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_strings",
        "description": "python-prac.learn-python.src.data_types.test_strings",
        "peekOfCode": "def test_string_type():\n    \"\"\"String type\"\"\"\n    # String with double quotes.\n    name_1 = \"John\"\n    # String with single quotes.\n    name_2 = \"John\"\n    # Strings created with different kind of quotes are treated the same.\n    assert name_1 == name_2\n    assert isinstance(name_1, str)\n    assert isinstance(name_2, str)",
        "detail": "python-prac.learn-python.src.data_types.test_strings",
        "documentation": {}
    },
    {
        "label": "test_string_operators",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_strings",
        "description": "python-prac.learn-python.src.data_types.test_strings",
        "peekOfCode": "def test_string_operators():\n    \"\"\"Basic operations\n    Strings can be concatenated (glued together) with the + operator,\n    and repeated with *: 3 times 'un', followed by 'ium'\n    \"\"\"\n    assert 3 * \"un\" + \"ium\" == \"unununium\"\n    # 'Py' 'thon'\n    python = \"Py\" \"thon\"\n    assert python == \"Python\"\n    # This feature is particularly useful when you want to break long strings:",
        "detail": "python-prac.learn-python.src.data_types.test_strings",
        "documentation": {}
    },
    {
        "label": "test_string_methods",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_strings",
        "description": "python-prac.learn-python.src.data_types.test_strings",
        "peekOfCode": "def test_string_methods():\n    \"\"\"String methods\"\"\"\n    hello_world_string = \"Hello, World!\"\n    # The strip() method removes any whitespace from the beginning or the end.\n    string_with_whitespaces = \" Hello, World! \"\n    assert string_with_whitespaces.strip() == \"Hello, World!\"\n    # The len() method returns the length of a string.\n    assert len(hello_world_string) == 13\n    # The lower() method returns the string in lower case.\n    assert hello_world_string.lower() == \"hello, world!\"",
        "detail": "python-prac.learn-python.src.data_types.test_strings",
        "documentation": {}
    },
    {
        "label": "test_string_formatting",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_strings",
        "description": "python-prac.learn-python.src.data_types.test_strings",
        "peekOfCode": "def test_string_formatting():\n    \"\"\"String formatting.\n    Often you’ll want more control over the formatting of your output than simply printing\n    space-separated values. There are several ways to format output\n    \"\"\"\n    # To use formatted string literals, begin a string with f or F before the opening quotation\n    # mark or triple quotation mark. Inside this string, you can write a Python expression\n    # between { and } characters that can refer to variables or literal values.\n    year = 2018\n    event = \"conference\"",
        "detail": "python-prac.learn-python.src.data_types.test_strings",
        "documentation": {}
    },
    {
        "label": "test_tuples",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_tuples",
        "description": "python-prac.learn-python.src.data_types.test_tuples",
        "peekOfCode": "def test_tuples():\n    \"\"\"Tuples\"\"\"\n    fruits_tuple = (\"apple\", \"banana\", \"cherry\")\n    assert isinstance(fruits_tuple, tuple)\n    assert fruits_tuple[0] == \"apple\"\n    assert fruits_tuple[1] == \"banana\"\n    assert fruits_tuple[2] == \"cherry\"\n    # You cannot change values in a tuple.\n    with pytest.raises(Exception):\n        # pylint: disable=unsupported-assignment-operation",
        "detail": "python-prac.learn-python.src.data_types.test_tuples",
        "documentation": {}
    },
    {
        "label": "test_type_casting_to_integer",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_type_casting",
        "description": "python-prac.learn-python.src.data_types.test_type_casting",
        "peekOfCode": "def test_type_casting_to_integer():\n    \"\"\"Type casting to integer\"\"\"\n    assert int(1) == 1\n    assert int(2.8) == 2\n    assert int(\"3\") == 3\ndef test_type_casting_to_float():\n    \"\"\"Type casting to float\"\"\"\n    assert float(1) == 1.0\n    assert float(2.8) == 2.8\n    assert float(\"3\") == 3.0",
        "detail": "python-prac.learn-python.src.data_types.test_type_casting",
        "documentation": {}
    },
    {
        "label": "test_type_casting_to_float",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_type_casting",
        "description": "python-prac.learn-python.src.data_types.test_type_casting",
        "peekOfCode": "def test_type_casting_to_float():\n    \"\"\"Type casting to float\"\"\"\n    assert float(1) == 1.0\n    assert float(2.8) == 2.8\n    assert float(\"3\") == 3.0\n    assert float(\"4.2\") == 4.2\ndef test_type_casting_to_string():\n    \"\"\"Type casting to string\"\"\"\n    assert str(\"s1\") == \"s1\"\n    assert str(2) == \"2\"",
        "detail": "python-prac.learn-python.src.data_types.test_type_casting",
        "documentation": {}
    },
    {
        "label": "test_type_casting_to_string",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.data_types.test_type_casting",
        "description": "python-prac.learn-python.src.data_types.test_type_casting",
        "peekOfCode": "def test_type_casting_to_string():\n    \"\"\"Type casting to string\"\"\"\n    assert str(\"s1\") == \"s1\"\n    assert str(2) == \"2\"\n    assert str(3.0) == \"3.0\"",
        "detail": "python-prac.learn-python.src.data_types.test_type_casting",
        "documentation": {}
    },
    {
        "label": "test_handle_exceptions",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.exceptions.test_handle_exceptions",
        "description": "python-prac.learn-python.src.exceptions.test_handle_exceptions",
        "peekOfCode": "def test_handle_exceptions():\n    \"\"\"Handling of exceptions\n    The try statement works as follows.\n    - First, the try clause (the statement(s) between the try and except keywords) is executed.\n    - If no exception occurs, the except clause is skipped and execution of the try statement\n    is finished.\n    - If an exception occurs during execution of the try clause, the rest of the clause is skipped.\n    Then if its type matches the exception named after the except keyword, the except clause is\n    executed, and then execution continues after the try statement.\n    - If an exception occurs which does not match the exception named in the except clause, it is",
        "detail": "python-prac.learn-python.src.exceptions.test_handle_exceptions",
        "documentation": {}
    },
    {
        "label": "test_raise_exception",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.exceptions.test_raise_exceptions",
        "description": "python-prac.learn-python.src.exceptions.test_raise_exceptions",
        "peekOfCode": "def test_raise_exception():\n    \"\"\"Raising Exceptions.\n    The raise statement allows the programmer to force a specified exception to occur.\n    \"\"\"\n    exception_is_caught = False\n    try:\n        # The sole argument to raise indicates the exception to be raised. This must be either an\n        # exception instance or an exception class (a class that derives from Exception). If an\n        # exception class is passed, it will be implicitly instantiated by calling its constructor\n        # with no arguments",
        "detail": "python-prac.learn-python.src.exceptions.test_raise_exceptions",
        "documentation": {}
    },
    {
        "label": "test_user_defined_exception",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.exceptions.test_raise_exceptions",
        "description": "python-prac.learn-python.src.exceptions.test_raise_exceptions",
        "peekOfCode": "def test_user_defined_exception():\n    \"\"\"User-defined Exceptions\"\"\"\n    # Programs may name their own exceptions by creating a new exception class. Exceptions should\n    # typically be derived from the Exception class, either directly or indirectly.\n    # Most exceptions are defined with names that end in “Error,” similar to the naming of the\n    # standard exceptions. Many standard modules define their own exceptions to report errors\n    # that may occur in functions they define.\n    class MyCustomError(Exception):\n        \"\"\"Example of MyCustomError exception.\"\"\"\n        def __init__(self, message):",
        "detail": "python-prac.learn-python.src.exceptions.test_raise_exceptions",
        "documentation": {}
    },
    {
        "label": "test_file_methods",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.files.test_file_methods",
        "description": "python-prac.learn-python.src.files.test_file_methods",
        "peekOfCode": "def test_file_methods():\n    \"\"\"Methods of File Objects\"\"\"\n    multi_line_file = open(\"src/files/multi_line_file.txt\", \"r\")\n    binary_file = open(\"src/files/binary_file\", \"r\")\n    # To read a file’s contents, call f.read(size), which reads some quantity of data and returns\n    # it as a string (in text mode) or bytes object (in binary mode). size is an optional numeric\n    # argument. When size is omitted or negative, the entire contents of the file will be read and\n    # returned; it’s your problem if the file is twice as large as your machine’s memory. Otherwise,\n    # at most size bytes are read and returned. If the end of the file has been reached, f.read()\n    # will return an empty string ('').",
        "detail": "python-prac.learn-python.src.files.test_file_methods",
        "documentation": {}
    },
    {
        "label": "test_files_open",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.files.test_file_reading",
        "description": "python-prac.learn-python.src.files.test_file_reading",
        "peekOfCode": "def test_files_open():\n    \"\"\"Open files\n    open() returns a file object, and is most commonly used with two arguments:\n    open(filename, mode).\n    The first argument is a string containing the filename. The second argument is another string\n    containing a few characters describing the way in which the file will be used. mode can be:\n    - 'r' when the file will only be read,\n    - 'w' for only writing (an existing file with the same name will be erased),\n    - 'a' opens the file for appending; any data written to the file is automatically added to end.\n    - 'r+' opens the file for both reading and writing.",
        "detail": "python-prac.learn-python.src.files.test_file_reading",
        "documentation": {}
    },
    {
        "label": "breakfast",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_annotations",
        "description": "python-prac.learn-python.src.functions.test_function_annotations",
        "peekOfCode": "def breakfast(ham: str, eggs: str = \"eggs\") -> str:\n    \"\"\"Breakfast creator.\n    This function has a positional argument, a keyword argument, and the return value annotated.\n    \"\"\"\n    return ham + \" and \" + eggs\ndef test_function_annotations():\n    \"\"\"Function Annotations.\"\"\"\n    assert breakfast.__annotations__ == {\"eggs\": str, \"ham\": str, \"return\": str}",
        "detail": "python-prac.learn-python.src.functions.test_function_annotations",
        "documentation": {}
    },
    {
        "label": "test_function_annotations",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_annotations",
        "description": "python-prac.learn-python.src.functions.test_function_annotations",
        "peekOfCode": "def test_function_annotations():\n    \"\"\"Function Annotations.\"\"\"\n    assert breakfast.__annotations__ == {\"eggs\": str, \"ham\": str, \"return\": str}",
        "detail": "python-prac.learn-python.src.functions.test_function_annotations",
        "documentation": {}
    },
    {
        "label": "test_function_arbitrary_arguments",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_arbitrary_arguments",
        "description": "python-prac.learn-python.src.functions.test_function_arbitrary_arguments",
        "peekOfCode": "def test_function_arbitrary_arguments():\n    \"\"\"Arbitrary Argument Lists\"\"\"\n    # When a final formal parameter of the form **name is present, it receives a dictionary\n    # containing all keyword arguments except for those corresponding to a formal parameter.\n    # This may be combined with a formal parameter of the form *name which receives a tuple\n    # containing the positional arguments beyond the formal parameter list.\n    # (*name must occur before **name.) For example, if we define a function like this:\n    def test_function(first_param, *arguments):\n        \"\"\"This function accepts its arguments through \"arguments\" tuple amd keywords dictionary.\"\"\"\n        assert first_param == \"first param\"",
        "detail": "python-prac.learn-python.src.functions.test_function_arbitrary_arguments",
        "documentation": {}
    },
    {
        "label": "test_function_decorators",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_decorators",
        "description": "python-prac.learn-python.src.functions.test_function_decorators",
        "peekOfCode": "def test_function_decorators():\n    \"\"\"Function Decorators.\"\"\"\n    # Function decorators are simply wrappers to existing functions. Putting the ideas mentioned\n    # above together, we can build a decorator. In this example let's consider a function that\n    # wraps the string output of another function by p tags.\n    # This is the function that we want to decorate.\n    def greeting(name):\n        return \"Hello, {0}!\".format(name)\n    # This function decorates another functions output with <p> tag.\n    def decorate_with_p(func):",
        "detail": "python-prac.learn-python.src.functions.test_function_decorators",
        "documentation": {}
    },
    {
        "label": "power_of",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_default_arguments",
        "description": "python-prac.learn-python.src.functions.test_function_default_arguments",
        "peekOfCode": "def power_of(number, power=2):\n    \"\"\" Raises number to specific power.\n    You may notice that by default the function raises number to the power of two.\n    \"\"\"\n    return number ** power\ndef test_default_function_arguments():\n    \"\"\"Test default function arguments\"\"\"\n    # This function power_of can be called in several ways because it has default value for\n    # the second argument. First we may call it omitting the second argument at all.\n    assert power_of(3) == 9",
        "detail": "python-prac.learn-python.src.functions.test_function_default_arguments",
        "documentation": {}
    },
    {
        "label": "test_default_function_arguments",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_default_arguments",
        "description": "python-prac.learn-python.src.functions.test_function_default_arguments",
        "peekOfCode": "def test_default_function_arguments():\n    \"\"\"Test default function arguments\"\"\"\n    # This function power_of can be called in several ways because it has default value for\n    # the second argument. First we may call it omitting the second argument at all.\n    assert power_of(3) == 9\n    # We may also want to override the second argument by using the following function calls.\n    assert power_of(3, 2) == 9\n    assert power_of(3, 3) == 27",
        "detail": "python-prac.learn-python.src.functions.test_function_default_arguments",
        "documentation": {}
    },
    {
        "label": "fibonacci_function_example",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_definition",
        "description": "python-prac.learn-python.src.functions.test_function_definition",
        "peekOfCode": "def fibonacci_function_example(number_limit):\n    \"\"\"Generate a Fibonacci series up to number_limit.\n    The first statement of the function body can optionally be a string literal; this string\n    literal is the function’s documentation string, or docstring. There are tools which use\n    docstrings to automatically produce online or printed documentation, or to let the user\n    interactively browse through code; it’s good practice to include docstrings in code that you\n    write, so make a habit of it.\n    \"\"\"\n    # The execution of a function introduces a new symbol table used for the local variables of the\n    # function. More precisely, all variable assignments in a function store the value in the local",
        "detail": "python-prac.learn-python.src.functions.test_function_definition",
        "documentation": {}
    },
    {
        "label": "test_function_definition",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_definition",
        "description": "python-prac.learn-python.src.functions.test_function_definition",
        "peekOfCode": "def test_function_definition():\n    \"\"\"Function Definition\"\"\"\n    # Now call the function we just defined.\n    assert fibonacci_function_example(300) == [\n        0,\n        1,\n        1,\n        2,\n        3,\n        5,",
        "detail": "python-prac.learn-python.src.functions.test_function_definition",
        "documentation": {}
    },
    {
        "label": "do_nothing",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_documentation_string",
        "description": "python-prac.learn-python.src.functions.test_function_documentation_string",
        "peekOfCode": "def do_nothing():\n    \"\"\"Do nothing, but document it.\n    No, really, it doesn't do anything.\n    \"\"\"\n    pass\ndef test_function_documentation_string():\n    \"\"\"Test documentation string.\"\"\"\n    # The Python parser does not strip indentation from multi-line string literals in Python, so\n    # tools that process documentation have to strip indentation if desired. This is done using the\n    # following convention. The first non-blank line after the first line of the string determines",
        "detail": "python-prac.learn-python.src.functions.test_function_documentation_string",
        "documentation": {}
    },
    {
        "label": "test_function_documentation_string",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_documentation_string",
        "description": "python-prac.learn-python.src.functions.test_function_documentation_string",
        "peekOfCode": "def test_function_documentation_string():\n    \"\"\"Test documentation string.\"\"\"\n    # The Python parser does not strip indentation from multi-line string literals in Python, so\n    # tools that process documentation have to strip indentation if desired. This is done using the\n    # following convention. The first non-blank line after the first line of the string determines\n    # the amount of indentation for the entire documentation string. (We can’t use the first line\n    # since it is generally adjacent to the string’s opening quotes so its indentation is not\n    # apparent in the string literal.) Whitespace “equivalent” to this indentation is then stripped\n    # from the start of all lines of the string. Lines that are indented less should not occur, but\n    # if they occur all their leading whitespace should be stripped. Equivalence of whitespace",
        "detail": "python-prac.learn-python.src.functions.test_function_documentation_string",
        "documentation": {}
    },
    {
        "label": "parrot",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_keyword_arguments",
        "description": "python-prac.learn-python.src.functions.test_function_keyword_arguments",
        "peekOfCode": "def parrot(voltage, state=\"a stiff\", action=\"voom\", parrot_type=\"Norwegian Blue\"):\n    \"\"\"Example of multi-argument function\n    This function accepts one required argument (voltage) and three optional arguments\n    (state, action, and type).\n    \"\"\"\n    message = \"This parrot wouldn't \" + action + \" \"\n    message += \"if you put \" + str(voltage) + \" volts through it. \"\n    message += \"Lovely plumage, the \" + parrot_type + \". \"\n    message += \"It's \" + state + \"!\"\n    return message",
        "detail": "python-prac.learn-python.src.functions.test_function_keyword_arguments",
        "documentation": {}
    },
    {
        "label": "test_function_keyword_arguments",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_keyword_arguments",
        "description": "python-prac.learn-python.src.functions.test_function_keyword_arguments",
        "peekOfCode": "def test_function_keyword_arguments():\n    \"\"\"Test calling function with specifying keyword arguments\"\"\"\n    # The parrot function accepts one required argument (voltage) and three optional arguments\n    # (state, action, and type). This function can be called in any of the following ways:\n    message = (\n        \"This parrot wouldn't voom if you put 1000 volts through it. \"\n        \"Lovely plumage, the Norwegian Blue. \"\n        \"It's a stiff!\"\n    )\n    # 1 positional argument",
        "detail": "python-prac.learn-python.src.functions.test_function_keyword_arguments",
        "documentation": {}
    },
    {
        "label": "test_function_scopes",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_scopes",
        "description": "python-prac.learn-python.src.functions.test_function_scopes",
        "peekOfCode": "def test_function_scopes():\n    \"\"\"Scopes and Namespaces Example\"\"\"\n    # This is an example demonstrating how to reference the different scopes and namespaces, and\n    # how global and nonlocal affect variable binding:\n    # pylint: disable=redefined-outer-name\n    test_variable = \"initial value inside test function\"\n    def do_local():\n        # Create variable that is only accessible inside current do_local() function.\n        # pylint: disable=redefined-outer-name\n        test_variable = \"local value\"",
        "detail": "python-prac.learn-python.src.functions.test_function_scopes",
        "documentation": {}
    },
    {
        "label": "test_global_variable_access",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_scopes",
        "description": "python-prac.learn-python.src.functions.test_function_scopes",
        "peekOfCode": "def test_global_variable_access():\n    \"\"\"Testing global variable access from within a function\"\"\"\n    # Global value of test_variable has been already changed by do_global() function in previous\n    # test so let's check that.\n    # pylint: disable=global-statement\n    global test_variable\n    assert test_variable == \"global value\"\n    # On this example you may see how accessing and changing global variables from within inner\n    # functions might make debugging more difficult and code to be less predictable. Since you\n    # might have expected that test_variable should still be equal to 'initial global value' but",
        "detail": "python-prac.learn-python.src.functions.test_function_scopes",
        "documentation": {}
    },
    {
        "label": "test_variable",
        "kind": 5,
        "importPath": "python-prac.learn-python.src.functions.test_function_scopes",
        "description": "python-prac.learn-python.src.functions.test_function_scopes",
        "peekOfCode": "test_variable = \"initial global value\"\ndef test_function_scopes():\n    \"\"\"Scopes and Namespaces Example\"\"\"\n    # This is an example demonstrating how to reference the different scopes and namespaces, and\n    # how global and nonlocal affect variable binding:\n    # pylint: disable=redefined-outer-name\n    test_variable = \"initial value inside test function\"\n    def do_local():\n        # Create variable that is only accessible inside current do_local() function.\n        # pylint: disable=redefined-outer-name",
        "detail": "python-prac.learn-python.src.functions.test_function_scopes",
        "documentation": {}
    },
    {
        "label": "test_function_unpacking_arguments",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_function_unpacking_arguments",
        "description": "python-prac.learn-python.src.functions.test_function_unpacking_arguments",
        "peekOfCode": "def test_function_unpacking_arguments():\n    \"\"\"Unpacking Argument Lists\"\"\"\n    # The situation may occur when the arguments are already in a list or tuple but need to be\n    # unpacked for a function call requiring separate positional arguments. For instance, the\n    # built-in range() function expects separate start and stop arguments. If they are not\n    # available separately, write the function call with the *-operator to unpack the arguments out\n    # of a list or tuple:\n    # Normal call with separate arguments:\n    assert list(range(3, 6)) == [3, 4, 5]\n    # Call with arguments unpacked from a list.",
        "detail": "python-prac.learn-python.src.functions.test_function_unpacking_arguments",
        "documentation": {}
    },
    {
        "label": "test_lambda_expressions",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.functions.test_lambda_expressions",
        "description": "python-prac.learn-python.src.functions.test_lambda_expressions",
        "peekOfCode": "def test_lambda_expressions():\n    \"\"\"Lambda Expressions\"\"\"\n    # This function returns the sum of its two arguments: lambda a, b: a+b\n    # Like nested function definitions, lambda functions can reference variables from the\n    # containing scope.\n    def make_increment_function(delta):\n        \"\"\"This example uses a lambda expression to return a function\"\"\"\n        return lambda number: number + delta\n    increment_function = make_increment_function(42)\n    assert increment_function(0) == 42",
        "detail": "python-prac.learn-python.src.functions.test_lambda_expressions",
        "documentation": {}
    },
    {
        "label": "test_variables",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.getting_started.test_variables",
        "description": "python-prac.learn-python.src.getting_started.test_variables",
        "peekOfCode": "def test_variables():\n    \"\"\"Test variables\"\"\"\n    integer_variable = 5\n    string_variable = \"John\"\n    assert integer_variable == 5\n    assert string_variable == \"John\"\n    variable_with_changed_type = 4  # x is of type int\n    variable_with_changed_type = \"Sally\"  # x is now of type str\n    assert variable_with_changed_type == \"Sally\"",
        "detail": "python-prac.learn-python.src.getting_started.test_variables",
        "documentation": {}
    },
    {
        "label": "fibonacci_at_position",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.modules.fibonacci_module",
        "description": "python-prac.learn-python.src.modules.fibonacci_module",
        "peekOfCode": "def fibonacci_at_position(position):\n    \"\"\"Return Fibonacci number at specified position\"\"\"\n    current_position = 0\n    previous_number, current_number = 0, 1\n    while current_position < position:\n        current_position += 1\n        previous_number, current_number = (\n            current_number,\n            previous_number + current_number,\n        )",
        "detail": "python-prac.learn-python.src.modules.fibonacci_module",
        "documentation": {}
    },
    {
        "label": "fibonacci_smaller_than",
        "kind": 2,
        "importPath": "python-prac.learn-python.src.modules.fibonacci_module",
        "description": "python-prac.learn-python.src.modules.fibonacci_module",
        "peekOfCode": "def fibonacci_smaller_than(limit):\n    \"\"\"Return Fibonacci series up to limit\"\"\"\n    result = []\n    previous_number, current_number = 0, 1\n    while previous_number < limit:\n        result.append(previous_number)\n        previous_number, current_number = (\n            current_number,\n            previous_number + current_number,\n        )",
        "detail": "python-prac.learn-python.src.modules.fibonacci_module",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "python-prac.learn-python3.advance.do_generator",
        "description": "python-prac.learn-python3.advance.do_generator",
        "peekOfCode": "def fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\n    return \"done\"\nf = fib(10)\nprint(\"fib(10):\", f)\nfor x in f:",
        "detail": "python-prac.learn-python3.advance.do_generator",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.advance.do_generator",
        "description": "python-prac.learn-python3.advance.do_generator",
        "peekOfCode": "s = (x * x for x in range(5))\nprint(s)\nfor x in s:\n    print(x)\ndef fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1",
        "detail": "python-prac.learn-python3.advance.do_generator",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.learn-python3.advance.do_generator",
        "description": "python-prac.learn-python3.advance.do_generator",
        "peekOfCode": "f = fib(10)\nprint(\"fib(10):\", f)\nfor x in f:\n    print(x)\n# call generator manually:\ng = fib(5)\nwhile 1:\n    try:\n        x = next(g)\n        print(\"g:\", x)",
        "detail": "python-prac.learn-python3.advance.do_generator",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-prac.learn-python3.advance.do_generator",
        "description": "python-prac.learn-python3.advance.do_generator",
        "peekOfCode": "g = fib(5)\nwhile 1:\n    try:\n        x = next(g)\n        print(\"g:\", x)\n    except StopIteration as e:\n        print(\"Generator return value:\", e.value)\n        break",
        "detail": "python-prac.learn-python3.advance.do_generator",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "python-prac.learn-python3.advance.do_iter",
        "description": "python-prac.learn-python3.advance.do_iter",
        "peekOfCode": "def g():\n    yield 1\n    yield 2\n    yield 3\nprint(\"Iterable? [1, 2, 3]:\", isinstance([1, 2, 3], Iterable))\nprint(\"Iterable? 'abc':\", isinstance(\"abc\", Iterable))\nprint(\"Iterable? 123:\", isinstance(123, Iterable))\nprint(\"Iterable? g():\", isinstance(g(), Iterable))\nprint(\"Iterator? [1, 2, 3]:\", isinstance([1, 2, 3], Iterator))\nprint(\"Iterator? iter([1, 2, 3]):\", isinstance(iter([1, 2, 3]), Iterator))",
        "detail": "python-prac.learn-python3.advance.do_iter",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "python-prac.learn-python3.advance.do_iter",
        "description": "python-prac.learn-python3.advance.do_iter",
        "peekOfCode": "it = iter([1, 2, 3, 4, 5])\nprint(next(it))\nprint(next(it))\nprint(next(it))\nprint(next(it))\nprint(next(it))\nd = {\"a\": 1, \"b\": 2, \"c\": 3}\n# iter each key:\nprint(\"iter key:\", d)\nfor k in d.keys():",
        "detail": "python-prac.learn-python3.advance.do_iter",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-prac.learn-python3.advance.do_iter",
        "description": "python-prac.learn-python3.advance.do_iter",
        "peekOfCode": "d = {\"a\": 1, \"b\": 2, \"c\": 3}\n# iter each key:\nprint(\"iter key:\", d)\nfor k in d.keys():\n    print(\"key:\", k)\n# iter each value:\nprint(\"iter value:\", d)\nfor v in d.values():\n    print(\"value:\", v)\n# iter both key and value:",
        "detail": "python-prac.learn-python3.advance.do_iter",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-prac.learn-python3.advance.do_listcompr",
        "description": "python-prac.learn-python3.advance.do_listcompr",
        "peekOfCode": "d = {\"x\": \"A\", \"y\": \"B\", \"z\": \"C\"}\nprint([k + \"=\" + v for k, v in d.items()])\nL = [\"Hello\", \"World\", \"IBM\", \"Apple\"]\nprint([s.lower() for s in L])",
        "detail": "python-prac.learn-python3.advance.do_listcompr",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "python-prac.learn-python3.advance.do_listcompr",
        "description": "python-prac.learn-python3.advance.do_listcompr",
        "peekOfCode": "L = [\"Hello\", \"World\", \"IBM\", \"Apple\"]\nprint([s.lower() for s in L])",
        "detail": "python-prac.learn-python3.advance.do_listcompr",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "python-prac.learn-python3.advance.do_slice",
        "description": "python-prac.learn-python3.advance.do_slice",
        "peekOfCode": "L = [\"Michael\", \"Sarah\", \"Tracy\", \"Bob\", \"Jack\"]\nprint(\"L[0:3] =\", L[0:3])\nprint(\"L[:3] =\", L[:3])\nprint(\"L[1:3] =\", L[1:3])\nprint(\"L[-2:] =\", L[-2:])\nR = list(range(100))\nprint(\"R[:10] =\", R[:10])\nprint(\"R[-10:] =\", R[-10:])\nprint(\"R[10:20] =\", R[10:20])\nprint(\"R[:10:2] =\", R[:10:2])",
        "detail": "python-prac.learn-python3.advance.do_slice",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "python-prac.learn-python3.advance.do_slice",
        "description": "python-prac.learn-python3.advance.do_slice",
        "peekOfCode": "R = list(range(100))\nprint(\"R[:10] =\", R[:10])\nprint(\"R[-10:] =\", R[-10:])\nprint(\"R[10:20] =\", R[10:20])\nprint(\"R[:10:2] =\", R[:10:2])\nprint(\"R[::5] =\", R[::5])",
        "detail": "python-prac.learn-python3.advance.do_slice",
        "documentation": {}
    },
    {
        "label": "each_ascii",
        "kind": 2,
        "importPath": "python-prac.learn-python3.advance.do_yield",
        "description": "python-prac.learn-python3.advance.do_yield",
        "peekOfCode": "def each_ascii(s):\n    for ch in s:\n        yield ord(ch)\n    return \"%s chars\" % len(s)\ndef yield_from(s):\n    r = yield from each_ascii(s)\n    print(r)\ndef main():\n    for x in each_ascii(\"abc\"):\n        print(x)  # => 'a', 'b', 'c'",
        "detail": "python-prac.learn-python3.advance.do_yield",
        "documentation": {}
    },
    {
        "label": "yield_from",
        "kind": 2,
        "importPath": "python-prac.learn-python3.advance.do_yield",
        "description": "python-prac.learn-python3.advance.do_yield",
        "peekOfCode": "def yield_from(s):\n    r = yield from each_ascii(s)\n    print(r)\ndef main():\n    for x in each_ascii(\"abc\"):\n        print(x)  # => 'a', 'b', 'c'\n    it = each_ascii(\"xyz\")\n    try:\n        while True:\n            print(next(it))  # => 'x', 'y', 'z'",
        "detail": "python-prac.learn-python3.advance.do_yield",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.learn-python3.advance.do_yield",
        "description": "python-prac.learn-python3.advance.do_yield",
        "peekOfCode": "def main():\n    for x in each_ascii(\"abc\"):\n        print(x)  # => 'a', 'b', 'c'\n    it = each_ascii(\"xyz\")\n    try:\n        while True:\n            print(next(it))  # => 'x', 'y', 'z'\n    except StopIteration as s:\n        print(s.value)  # => '3 chars'\n    # using yield from in main() will change main() from function to generator:",
        "detail": "python-prac.learn-python3.advance.do_yield",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.aio_web",
        "description": "python-prac.learn-python3.async.aio_web",
        "peekOfCode": "__author__ = \"Michael Liao\"\n\"\"\"\nasync web application.\n\"\"\"\nimport asyncio\nfrom aiohttp import web\nasync def index(request):\n    await asyncio.sleep(0.5)\n    return web.Response(body=b\"<h1>Index</h1>\")\nasync def hello(request):",
        "detail": "python-prac.learn-python3.async.aio_web",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.aio_web",
        "description": "python-prac.learn-python3.async.aio_web",
        "peekOfCode": "loop = asyncio.get_event_loop()\nloop.run_until_complete(init(loop))\nloop.run_forever()",
        "detail": "python-prac.learn-python3.async.aio_web",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "python-prac.learn-python3.async.async_hello",
        "description": "python-prac.learn-python3.async.async_hello",
        "peekOfCode": "def hello():\n    print(\"Hello world! (%s)\" % threading.currentThread())\n    yield from asyncio.sleep(1)\n    print(\"Hello again! (%s)\" % threading.currentThread())\nloop = asyncio.get_event_loop()\ntasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "python-prac.learn-python3.async.async_hello",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.async_hello",
        "description": "python-prac.learn-python3.async.async_hello",
        "peekOfCode": "loop = asyncio.get_event_loop()\ntasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "python-prac.learn-python3.async.async_hello",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.async_hello",
        "description": "python-prac.learn-python3.async.async_hello",
        "peekOfCode": "tasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "python-prac.learn-python3.async.async_hello",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.async_hello2",
        "description": "python-prac.learn-python3.async.async_hello2",
        "peekOfCode": "loop = asyncio.get_event_loop()\ntasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "python-prac.learn-python3.async.async_hello2",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.async_hello2",
        "description": "python-prac.learn-python3.async.async_hello2",
        "peekOfCode": "tasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "python-prac.learn-python3.async.async_hello2",
        "documentation": {}
    },
    {
        "label": "wget",
        "kind": 2,
        "importPath": "python-prac.learn-python3.async.async_wget",
        "description": "python-prac.learn-python3.async.async_wget",
        "peekOfCode": "def wget(host):\n    print(\"wget %s...\" % host)\n    connect = asyncio.open_connection(host, 80)\n    reader, writer = yield from connect\n    header = \"GET / HTTP/1.0\\r\\nHost: %s\\r\\n\\r\\n\" % host\n    writer.write(header.encode(\"utf-8\"))\n    yield from writer.drain()\n    while True:\n        line = yield from reader.readline()\n        if line == b\"\\r\\n\":",
        "detail": "python-prac.learn-python3.async.async_wget",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.async_wget",
        "description": "python-prac.learn-python3.async.async_wget",
        "peekOfCode": "loop = asyncio.get_event_loop()\ntasks = [wget(host) for host in [\"www.sina.com.cn\", \"www.sohu.com\", \"www.163.com\"]]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "python-prac.learn-python3.async.async_wget",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.async_wget",
        "description": "python-prac.learn-python3.async.async_wget",
        "peekOfCode": "tasks = [wget(host) for host in [\"www.sina.com.cn\", \"www.sohu.com\", \"www.163.com\"]]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "python-prac.learn-python3.async.async_wget",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.async_wget2",
        "description": "python-prac.learn-python3.async.async_wget2",
        "peekOfCode": "loop = asyncio.get_event_loop()\ntasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "python-prac.learn-python3.async.async_wget2",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.async_wget2",
        "description": "python-prac.learn-python3.async.async_wget2",
        "peekOfCode": "tasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "python-prac.learn-python3.async.async_wget2",
        "documentation": {}
    },
    {
        "label": "consumer",
        "kind": 2,
        "importPath": "python-prac.learn-python3.async.coroutine",
        "description": "python-prac.learn-python3.async.coroutine",
        "peekOfCode": "def consumer():\n    r = \"\"\n    while True:\n        n = yield r\n        if not n:\n            return\n        print(\"[CONSUMER] Consuming %s...\" % n)\n        r = \"200 OK\"\ndef produce(c):\n    c.send(None)",
        "detail": "python-prac.learn-python3.async.coroutine",
        "documentation": {}
    },
    {
        "label": "produce",
        "kind": 2,
        "importPath": "python-prac.learn-python3.async.coroutine",
        "description": "python-prac.learn-python3.async.coroutine",
        "peekOfCode": "def produce(c):\n    c.send(None)\n    n = 0\n    while n < 5:\n        n = n + 1\n        print(\"[PRODUCER] Producing %s...\" % n)\n        r = c.send(n)\n        print(\"[PRODUCER] Consumer return: %s\" % r)\n    c.close()\nc = consumer()",
        "detail": "python-prac.learn-python3.async.coroutine",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.learn-python3.async.coroutine",
        "description": "python-prac.learn-python3.async.coroutine",
        "peekOfCode": "c = consumer()\nproduce(c)",
        "detail": "python-prac.learn-python3.async.coroutine",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.do_for",
        "description": "python-prac.learn-python3.basic.do_for",
        "peekOfCode": "names = [\"Michael\", \"Bob\", \"Tracy\"]\nfor name in names:\n    print(name)\n#  0 - 9\nfor x in range(10):\n    print(x)",
        "detail": "python-prac.learn-python3.basic.do_for",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.do_if",
        "description": "python-prac.learn-python3.basic.do_if",
        "peekOfCode": "age = int(input(\"Input your age: \"))\nif age >= 18:\n    print(\"adult\")\nelif age >= 6:\n    print(\"teenager\")\nelse:\n    print(\"kid\")",
        "detail": "python-prac.learn-python3.basic.do_if",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.do_input",
        "description": "python-prac.learn-python3.basic.do_input",
        "peekOfCode": "name = input()\nprint(\"Hello,\", name)",
        "detail": "python-prac.learn-python3.basic.do_input",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.do_while",
        "description": "python-prac.learn-python3.basic.do_while",
        "peekOfCode": "sum = 0\nn = 1\nwhile n <= 100:\n    sum = sum + n\n    n = n + 1\nprint(sum)\n# 1x2x3x...x100:\nacc = 1\nn = 1\nwhile n <= 100:",
        "detail": "python-prac.learn-python3.basic.do_while",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.do_while",
        "description": "python-prac.learn-python3.basic.do_while",
        "peekOfCode": "n = 1\nwhile n <= 100:\n    sum = sum + n\n    n = n + 1\nprint(sum)\n# 1x2x3x...x100:\nacc = 1\nn = 1\nwhile n <= 100:\n    acc = acc * n",
        "detail": "python-prac.learn-python3.basic.do_while",
        "documentation": {}
    },
    {
        "label": "acc",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.do_while",
        "description": "python-prac.learn-python3.basic.do_while",
        "peekOfCode": "acc = 1\nn = 1\nwhile n <= 100:\n    acc = acc * n\n    n = n + 1\nprint(acc)",
        "detail": "python-prac.learn-python3.basic.do_while",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.do_while",
        "description": "python-prac.learn-python3.basic.do_while",
        "peekOfCode": "n = 1\nwhile n <= 100:\n    acc = acc * n\n    n = n + 1\nprint(acc)",
        "detail": "python-prac.learn-python3.basic.do_while",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.the_dict",
        "description": "python-prac.learn-python3.basic.the_dict",
        "peekOfCode": "d = {\"Michael\": 95, \"Bob\": 75, \"Tracy\": 85}\nprint(\"d['Michael'] =\", d[\"Michael\"])\nprint(\"d['Bob'] =\", d[\"Bob\"])\nprint(\"d['Tracy'] =\", d[\"Tracy\"])\nprint(\"d.get('Thomas', -1) =\", d.get(\"Thomas\", -1))",
        "detail": "python-prac.learn-python3.basic.the_dict",
        "documentation": {}
    },
    {
        "label": "classmates",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.the_list",
        "description": "python-prac.learn-python3.basic.the_list",
        "peekOfCode": "classmates = [\"Michael\", \"Bob\", \"Tracy\"]\nprint(\"classmates =\", classmates)\nprint(\"len(classmates) =\", len(classmates))\nprint(\"classmates[0] =\", classmates[0])\nprint(\"classmates[1] =\", classmates[1])\nprint(\"classmates[2] =\", classmates[2])\nprint(\"classmates[-1] =\", classmates[-1])\nclassmates.pop()\nprint(\"classmates =\", classmates)",
        "detail": "python-prac.learn-python3.basic.the_list",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.the_set",
        "description": "python-prac.learn-python3.basic.the_set",
        "peekOfCode": "s1 = set([1, 1, 2, 2, 3, 3])\nprint(s1)\ns2 = set([2, 3, 4])\nprint(s1 & s2)\nprint(s1 | s2)",
        "detail": "python-prac.learn-python3.basic.the_set",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.the_set",
        "description": "python-prac.learn-python3.basic.the_set",
        "peekOfCode": "s2 = set([2, 3, 4])\nprint(s1 & s2)\nprint(s1 | s2)",
        "detail": "python-prac.learn-python3.basic.the_set",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.the_string",
        "description": "python-prac.learn-python3.basic.the_string",
        "peekOfCode": "s = \"Python-\"\nprint(s)\nb = s.encode(\"utf-8\")\nprint(b)\nprint(b.decode(\"utf-8\"))",
        "detail": "python-prac.learn-python3.basic.the_string",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.the_string",
        "description": "python-prac.learn-python3.basic.the_string",
        "peekOfCode": "b = s.encode(\"utf-8\")\nprint(b)\nprint(b.decode(\"utf-8\"))",
        "detail": "python-prac.learn-python3.basic.the_string",
        "documentation": {}
    },
    {
        "label": "classmates",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.the_tuple",
        "description": "python-prac.learn-python3.basic.the_tuple",
        "peekOfCode": "classmates = (\"Michael\", \"Bob\", \"Tracy\")\nprint(\"classmates =\", classmates)\nprint(\"len(classmates) =\", len(classmates))\nprint(\"classmates[0] =\", classmates[0])\nprint(\"classmates[1] =\", classmates[1])\nprint(\"classmates[2] =\", classmates[2])\nprint(\"classmates[-1] =\", classmates[-1])\n# cannot modify tuple:\nclassmates[0] = \"Adam\"",
        "detail": "python-prac.learn-python3.basic.the_tuple",
        "documentation": {}
    },
    {
        "label": "classmates[0]",
        "kind": 5,
        "importPath": "python-prac.learn-python3.basic.the_tuple",
        "description": "python-prac.learn-python3.basic.the_tuple",
        "peekOfCode": "classmates[0] = \"Adam\"",
        "detail": "python-prac.learn-python3.basic.the_tuple",
        "documentation": {}
    },
    {
        "label": "bmp_header",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.check_bmp",
        "description": "python-prac.learn-python3.commonlib.check_bmp",
        "peekOfCode": "bmp_header = b\"\\x42\\x4d\\x38\\x8c\\x0a\\x00\\x00\\x00\\x00\\x00\\x36\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x80\\x02\\x00\\x00\\x68\\x01\\x00\\x00\\x01\\x00\\x18\\x00\"\nprint(struct.unpack(\"<ccIIIIIIHH\", bmp_header))",
        "detail": "python-prac.learn-python3.commonlib.check_bmp",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.do_base64",
        "description": "python-prac.learn-python3.commonlib.do_base64",
        "peekOfCode": "s = base64.b64encode(\"PythonBASE 64\".encode(\"utf-8\"))\nprint(s)\nd = base64.b64decode(s).decode(\"utf-8\")\nprint(d)\ns = base64.urlsafe_b64encode(\"PythonBASE 64\".encode(\"utf-8\"))\nprint(s)\nd = base64.urlsafe_b64decode(s).decode(\"utf-8\")\nprint(d)",
        "detail": "python-prac.learn-python3.commonlib.do_base64",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.do_base64",
        "description": "python-prac.learn-python3.commonlib.do_base64",
        "peekOfCode": "d = base64.b64decode(s).decode(\"utf-8\")\nprint(d)\ns = base64.urlsafe_b64encode(\"PythonBASE 64\".encode(\"utf-8\"))\nprint(s)\nd = base64.urlsafe_b64decode(s).decode(\"utf-8\")\nprint(d)",
        "detail": "python-prac.learn-python3.commonlib.do_base64",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.do_base64",
        "description": "python-prac.learn-python3.commonlib.do_base64",
        "peekOfCode": "s = base64.urlsafe_b64encode(\"PythonBASE 64\".encode(\"utf-8\"))\nprint(s)\nd = base64.urlsafe_b64decode(s).decode(\"utf-8\")\nprint(d)",
        "detail": "python-prac.learn-python3.commonlib.do_base64",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.do_base64",
        "description": "python-prac.learn-python3.commonlib.do_base64",
        "peekOfCode": "d = base64.urlsafe_b64decode(s).decode(\"utf-8\")\nprint(d)",
        "detail": "python-prac.learn-python3.commonlib.do_base64",
        "documentation": {}
    },
    {
        "label": "defaults",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_chainmap",
        "description": "python-prac.learn-python3.commonlib.use_chainmap",
        "peekOfCode": "defaults = {\"color\": \"red\", \"user\": \"guest\"}\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-u\", \"--user\")\nparser.add_argument(\"-c\", \"--color\")\nnamespace = parser.parse_args()\ncommand_line_args = {k: v for k, v in vars(namespace).items() if v}\ncombined = ChainMap(command_line_args, os.environ, defaults)\nprint(\"color=%s\" % combined[\"color\"])\nprint(\"user=%s\" % combined[\"user\"])",
        "detail": "python-prac.learn-python3.commonlib.use_chainmap",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_chainmap",
        "description": "python-prac.learn-python3.commonlib.use_chainmap",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"-u\", \"--user\")\nparser.add_argument(\"-c\", \"--color\")\nnamespace = parser.parse_args()\ncommand_line_args = {k: v for k, v in vars(namespace).items() if v}\ncombined = ChainMap(command_line_args, os.environ, defaults)\nprint(\"color=%s\" % combined[\"color\"])\nprint(\"user=%s\" % combined[\"user\"])",
        "detail": "python-prac.learn-python3.commonlib.use_chainmap",
        "documentation": {}
    },
    {
        "label": "namespace",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_chainmap",
        "description": "python-prac.learn-python3.commonlib.use_chainmap",
        "peekOfCode": "namespace = parser.parse_args()\ncommand_line_args = {k: v for k, v in vars(namespace).items() if v}\ncombined = ChainMap(command_line_args, os.environ, defaults)\nprint(\"color=%s\" % combined[\"color\"])\nprint(\"user=%s\" % combined[\"user\"])",
        "detail": "python-prac.learn-python3.commonlib.use_chainmap",
        "documentation": {}
    },
    {
        "label": "command_line_args",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_chainmap",
        "description": "python-prac.learn-python3.commonlib.use_chainmap",
        "peekOfCode": "command_line_args = {k: v for k, v in vars(namespace).items() if v}\ncombined = ChainMap(command_line_args, os.environ, defaults)\nprint(\"color=%s\" % combined[\"color\"])\nprint(\"user=%s\" % combined[\"user\"])",
        "detail": "python-prac.learn-python3.commonlib.use_chainmap",
        "documentation": {}
    },
    {
        "label": "combined",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_chainmap",
        "description": "python-prac.learn-python3.commonlib.use_chainmap",
        "peekOfCode": "combined = ChainMap(command_line_args, os.environ, defaults)\nprint(\"color=%s\" % combined[\"color\"])\nprint(\"user=%s\" % combined[\"user\"])",
        "detail": "python-prac.learn-python3.commonlib.use_chainmap",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_collections",
        "description": "python-prac.learn-python3.commonlib.use_collections",
        "peekOfCode": "Point = namedtuple(\"Point\", [\"x\", \"y\"])\np = Point(1, 2)\nprint(\"Point:\", p.x, p.y)\nfrom collections import deque\nq = deque([\"a\", \"b\", \"c\"])\nq.append(\"x\")\nq.appendleft(\"y\")\nprint(q)\nfrom collections import defaultdict\ndd = defaultdict(lambda: \"N/A\")",
        "detail": "python-prac.learn-python3.commonlib.use_collections",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_collections",
        "description": "python-prac.learn-python3.commonlib.use_collections",
        "peekOfCode": "p = Point(1, 2)\nprint(\"Point:\", p.x, p.y)\nfrom collections import deque\nq = deque([\"a\", \"b\", \"c\"])\nq.append(\"x\")\nq.appendleft(\"y\")\nprint(q)\nfrom collections import defaultdict\ndd = defaultdict(lambda: \"N/A\")\ndd[\"key1\"] = \"abc\"",
        "detail": "python-prac.learn-python3.commonlib.use_collections",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_collections",
        "description": "python-prac.learn-python3.commonlib.use_collections",
        "peekOfCode": "q = deque([\"a\", \"b\", \"c\"])\nq.append(\"x\")\nq.appendleft(\"y\")\nprint(q)\nfrom collections import defaultdict\ndd = defaultdict(lambda: \"N/A\")\ndd[\"key1\"] = \"abc\"\nprint(\"dd['key1'] =\", dd[\"key1\"])\nprint(\"dd['key2'] =\", dd[\"key2\"])\nfrom collections import Counter",
        "detail": "python-prac.learn-python3.commonlib.use_collections",
        "documentation": {}
    },
    {
        "label": "dd",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_collections",
        "description": "python-prac.learn-python3.commonlib.use_collections",
        "peekOfCode": "dd = defaultdict(lambda: \"N/A\")\ndd[\"key1\"] = \"abc\"\nprint(\"dd['key1'] =\", dd[\"key1\"])\nprint(\"dd['key2'] =\", dd[\"key2\"])\nfrom collections import Counter\nc = Counter()\nfor ch in \"programming\":\n    c[ch] = c[ch] + 1\nprint(c)",
        "detail": "python-prac.learn-python3.commonlib.use_collections",
        "documentation": {}
    },
    {
        "label": "dd[\"key1\"]",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_collections",
        "description": "python-prac.learn-python3.commonlib.use_collections",
        "peekOfCode": "dd[\"key1\"] = \"abc\"\nprint(\"dd['key1'] =\", dd[\"key1\"])\nprint(\"dd['key2'] =\", dd[\"key2\"])\nfrom collections import Counter\nc = Counter()\nfor ch in \"programming\":\n    c[ch] = c[ch] + 1\nprint(c)",
        "detail": "python-prac.learn-python3.commonlib.use_collections",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_collections",
        "description": "python-prac.learn-python3.commonlib.use_collections",
        "peekOfCode": "c = Counter()\nfor ch in \"programming\":\n    c[ch] = c[ch] + 1\nprint(c)",
        "detail": "python-prac.learn-python3.commonlib.use_collections",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_datetime",
        "description": "python-prac.learn-python3.commonlib.use_datetime",
        "peekOfCode": "now = datetime.now()\nprint(\"now =\", now)\nprint(\"type(now) =\", type(now))\n# datetime:\ndt = datetime(2015, 4, 19, 12, 20)\nprint(\"dt =\", dt)\n# datetimetimestamp:\nprint(\"datetime -> timestamp:\", dt.timestamp())\n# timestampdatetime:\nt = dt.timestamp()",
        "detail": "python-prac.learn-python3.commonlib.use_datetime",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_datetime",
        "description": "python-prac.learn-python3.commonlib.use_datetime",
        "peekOfCode": "dt = datetime(2015, 4, 19, 12, 20)\nprint(\"dt =\", dt)\n# datetimetimestamp:\nprint(\"datetime -> timestamp:\", dt.timestamp())\n# timestampdatetime:\nt = dt.timestamp()\nprint(\"timestamp -> datetime:\", datetime.fromtimestamp(t))\nprint(\"timestamp -> datetime as UTC+0:\", datetime.utcfromtimestamp(t))\n# strdatetime:\ncday = datetime.strptime(\"2015-6-1 18:19:59\", \"%Y-%m-%d %H:%M:%S\")",
        "detail": "python-prac.learn-python3.commonlib.use_datetime",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_datetime",
        "description": "python-prac.learn-python3.commonlib.use_datetime",
        "peekOfCode": "t = dt.timestamp()\nprint(\"timestamp -> datetime:\", datetime.fromtimestamp(t))\nprint(\"timestamp -> datetime as UTC+0:\", datetime.utcfromtimestamp(t))\n# strdatetime:\ncday = datetime.strptime(\"2015-6-1 18:19:59\", \"%Y-%m-%d %H:%M:%S\")\nprint(\"strptime:\", cday)\n# datetime:\nprint(\"strftime:\", cday.strftime(\"%a, %b %d %H:%M\"))\n# :\nprint(\"current datetime =\", cday)",
        "detail": "python-prac.learn-python3.commonlib.use_datetime",
        "documentation": {}
    },
    {
        "label": "cday",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_datetime",
        "description": "python-prac.learn-python3.commonlib.use_datetime",
        "peekOfCode": "cday = datetime.strptime(\"2015-6-1 18:19:59\", \"%Y-%m-%d %H:%M:%S\")\nprint(\"strptime:\", cday)\n# datetime:\nprint(\"strftime:\", cday.strftime(\"%a, %b %d %H:%M\"))\n# :\nprint(\"current datetime =\", cday)\nprint(\"current + 10 hours =\", cday + timedelta(hours=10))\nprint(\"current - 1 day =\", cday - timedelta(days=1))\nprint(\"current + 2.5 days =\", cday + timedelta(days=2, hours=12))\n# UTC+0UTC+8:",
        "detail": "python-prac.learn-python3.commonlib.use_datetime",
        "documentation": {}
    },
    {
        "label": "utc_dt",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_datetime",
        "description": "python-prac.learn-python3.commonlib.use_datetime",
        "peekOfCode": "utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)\nutc8_dt = utc_dt.astimezone(timezone(timedelta(hours=8)))\nprint(\"UTC+0:00 now =\", utc_dt)\nprint(\"UTC+8:00 now =\", utc8_dt)",
        "detail": "python-prac.learn-python3.commonlib.use_datetime",
        "documentation": {}
    },
    {
        "label": "utc8_dt",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_datetime",
        "description": "python-prac.learn-python3.commonlib.use_datetime",
        "peekOfCode": "utc8_dt = utc_dt.astimezone(timezone(timedelta(hours=8)))\nprint(\"UTC+0:00 now =\", utc_dt)\nprint(\"UTC+8:00 now =\", utc8_dt)",
        "detail": "python-prac.learn-python3.commonlib.use_datetime",
        "documentation": {}
    },
    {
        "label": "md5",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_hashlib",
        "description": "python-prac.learn-python3.commonlib.use_hashlib",
        "peekOfCode": "md5 = hashlib.md5()\nmd5.update(\"how to use md5 in python hashlib?\".encode(\"utf-8\"))\nprint(md5.hexdigest())\nsha1 = hashlib.sha1()\nsha1.update(\"how to use sha1 in \".encode(\"utf-8\"))\nsha1.update(\"python hashlib?\".encode(\"utf-8\"))\nprint(sha1.hexdigest())",
        "detail": "python-prac.learn-python3.commonlib.use_hashlib",
        "documentation": {}
    },
    {
        "label": "sha1",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_hashlib",
        "description": "python-prac.learn-python3.commonlib.use_hashlib",
        "peekOfCode": "sha1 = hashlib.sha1()\nsha1.update(\"how to use sha1 in \".encode(\"utf-8\"))\nsha1.update(\"python hashlib?\".encode(\"utf-8\"))\nprint(sha1.hexdigest())",
        "detail": "python-prac.learn-python3.commonlib.use_hashlib",
        "documentation": {}
    },
    {
        "label": "MyHTMLParser",
        "kind": 6,
        "importPath": "python-prac.learn-python3.commonlib.use_htmlparser",
        "description": "python-prac.learn-python3.commonlib.use_htmlparser",
        "peekOfCode": "class MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(\"<%s>\" % tag)\n    def handle_endtag(self, tag):\n        print(\"</%s>\" % tag)\n    def handle_startendtag(self, tag, attrs):\n        print(\"<%s/>\" % tag)\n    def handle_data(self, data):\n        print(data)\n    def handle_comment(self, data):",
        "detail": "python-prac.learn-python3.commonlib.use_htmlparser",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_htmlparser",
        "description": "python-prac.learn-python3.commonlib.use_htmlparser",
        "peekOfCode": "parser = MyHTMLParser()\nparser.feed(\n    \"\"\"<html>\n<head></head>\n<body>\n<!-- test html parser -->\n    <p>Some <a href=\\\"#\\\">html</a> HTML&nbsp;tutorial...<br>END</p>\n</body></html>\"\"\"\n)",
        "detail": "python-prac.learn-python3.commonlib.use_htmlparser",
        "documentation": {}
    },
    {
        "label": "natuals",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_itertools",
        "description": "python-prac.learn-python3.commonlib.use_itertools",
        "peekOfCode": "natuals = itertools.count(1)\nfor n in natuals:\n    print(n)\n    if n >= 100:\n        break\ncs = itertools.cycle(\"ABC\")\nt = 10\nfor c in cs:\n    print(c)\n    t = t - 1",
        "detail": "python-prac.learn-python3.commonlib.use_itertools",
        "documentation": {}
    },
    {
        "label": "cs",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_itertools",
        "description": "python-prac.learn-python3.commonlib.use_itertools",
        "peekOfCode": "cs = itertools.cycle(\"ABC\")\nt = 10\nfor c in cs:\n    print(c)\n    t = t - 1\n    if t == 0:\n        break",
        "detail": "python-prac.learn-python3.commonlib.use_itertools",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_itertools",
        "description": "python-prac.learn-python3.commonlib.use_itertools",
        "peekOfCode": "t = 10\nfor c in cs:\n    print(c)\n    t = t - 1\n    if t == 0:\n        break",
        "detail": "python-prac.learn-python3.commonlib.use_itertools",
        "documentation": {}
    },
    {
        "label": "DefaultSaxHandler",
        "kind": 6,
        "importPath": "python-prac.learn-python3.commonlib.use_sax",
        "description": "python-prac.learn-python3.commonlib.use_sax",
        "peekOfCode": "class DefaultSaxHandler(object):\n    def start_element(self, name, attrs):\n        print(\"sax:start_element: %s, attrs: %s\" % (name, str(attrs)))\n    def end_element(self, name):\n        print(\"sax:end_element: %s\" % name)\n    def char_data(self, text):\n        print(\"sax:char_data: %s\" % text)\nxml = r\"\"\"<?xml version=\"1.0\"?>\n<ol>\n    <li><a href=\"/python\">Python</a></li>",
        "detail": "python-prac.learn-python3.commonlib.use_sax",
        "documentation": {}
    },
    {
        "label": "xml",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_sax",
        "description": "python-prac.learn-python3.commonlib.use_sax",
        "peekOfCode": "xml = r\"\"\"<?xml version=\"1.0\"?>\n<ol>\n    <li><a href=\"/python\">Python</a></li>\n    <li><a href=\"/ruby\">Ruby</a></li>\n</ol>\n\"\"\"\nhandler = DefaultSaxHandler()\nparser = ParserCreate()\nparser.StartElementHandler = handler.start_element\nparser.EndElementHandler = handler.end_element",
        "detail": "python-prac.learn-python3.commonlib.use_sax",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_sax",
        "description": "python-prac.learn-python3.commonlib.use_sax",
        "peekOfCode": "handler = DefaultSaxHandler()\nparser = ParserCreate()\nparser.StartElementHandler = handler.start_element\nparser.EndElementHandler = handler.end_element\nparser.CharacterDataHandler = handler.char_data\nparser.Parse(xml)",
        "detail": "python-prac.learn-python3.commonlib.use_sax",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_sax",
        "description": "python-prac.learn-python3.commonlib.use_sax",
        "peekOfCode": "parser = ParserCreate()\nparser.StartElementHandler = handler.start_element\nparser.EndElementHandler = handler.end_element\nparser.CharacterDataHandler = handler.char_data\nparser.Parse(xml)",
        "detail": "python-prac.learn-python3.commonlib.use_sax",
        "documentation": {}
    },
    {
        "label": "parser.StartElementHandler",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_sax",
        "description": "python-prac.learn-python3.commonlib.use_sax",
        "peekOfCode": "parser.StartElementHandler = handler.start_element\nparser.EndElementHandler = handler.end_element\nparser.CharacterDataHandler = handler.char_data\nparser.Parse(xml)",
        "detail": "python-prac.learn-python3.commonlib.use_sax",
        "documentation": {}
    },
    {
        "label": "parser.EndElementHandler",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_sax",
        "description": "python-prac.learn-python3.commonlib.use_sax",
        "peekOfCode": "parser.EndElementHandler = handler.end_element\nparser.CharacterDataHandler = handler.char_data\nparser.Parse(xml)",
        "detail": "python-prac.learn-python3.commonlib.use_sax",
        "documentation": {}
    },
    {
        "label": "parser.CharacterDataHandler",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_sax",
        "description": "python-prac.learn-python3.commonlib.use_sax",
        "peekOfCode": "parser.CharacterDataHandler = handler.char_data\nparser.Parse(xml)",
        "detail": "python-prac.learn-python3.commonlib.use_sax",
        "documentation": {}
    },
    {
        "label": "req",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_urllib",
        "description": "python-prac.learn-python3.commonlib.use_urllib",
        "peekOfCode": "req = request.Request(\"http://www.douban.com/\")\nreq.add_header(\n    \"User-Agent\",\n    \"Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25\",\n)\nwith request.urlopen(req) as f:\n    print(\"Status:\", f.status, f.reason)\n    for k, v in f.getheaders():\n        print(\"%s: %s\" % (k, v))\n    print(\"Data:\", f.read().decode(\"utf-8\"))",
        "detail": "python-prac.learn-python3.commonlib.use_urllib",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_urllib",
        "description": "python-prac.learn-python3.commonlib.use_urllib",
        "peekOfCode": "email = input(\"Email: \")\npasswd = input(\"Password: \")\nlogin_data = parse.urlencode(\n    [\n        (\"username\", email),\n        (\"password\", passwd),\n        (\"entry\", \"mweibo\"),\n        (\"client_id\", \"\"),\n        (\"savestate\", \"1\"),\n        (\"ec\", \"\"),",
        "detail": "python-prac.learn-python3.commonlib.use_urllib",
        "documentation": {}
    },
    {
        "label": "passwd",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_urllib",
        "description": "python-prac.learn-python3.commonlib.use_urllib",
        "peekOfCode": "passwd = input(\"Password: \")\nlogin_data = parse.urlencode(\n    [\n        (\"username\", email),\n        (\"password\", passwd),\n        (\"entry\", \"mweibo\"),\n        (\"client_id\", \"\"),\n        (\"savestate\", \"1\"),\n        (\"ec\", \"\"),\n        (",
        "detail": "python-prac.learn-python3.commonlib.use_urllib",
        "documentation": {}
    },
    {
        "label": "login_data",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_urllib",
        "description": "python-prac.learn-python3.commonlib.use_urllib",
        "peekOfCode": "login_data = parse.urlencode(\n    [\n        (\"username\", email),\n        (\"password\", passwd),\n        (\"entry\", \"mweibo\"),\n        (\"client_id\", \"\"),\n        (\"savestate\", \"1\"),\n        (\"ec\", \"\"),\n        (\n            \"pagerefer\",",
        "detail": "python-prac.learn-python3.commonlib.use_urllib",
        "documentation": {}
    },
    {
        "label": "req",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_urllib",
        "description": "python-prac.learn-python3.commonlib.use_urllib",
        "peekOfCode": "req = request.Request(\"https://passport.weibo.cn/sso/login\")\nreq.add_header(\"Origin\", \"https://passport.weibo.cn\")\nreq.add_header(\n    \"User-Agent\",\n    \"Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25\",\n)\nreq.add_header(\n    \"Referer\",\n    \"https://passport.weibo.cn/signin/login?entry=mweibo&res=wel&wm=3349&r=http%3A%2F%2Fm.weibo.cn%2F%3Fjumpfrom%3Dweibocom\",\n)",
        "detail": "python-prac.learn-python3.commonlib.use_urllib",
        "documentation": {}
    },
    {
        "label": "proxy_handler",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_urllib",
        "description": "python-prac.learn-python3.commonlib.use_urllib",
        "peekOfCode": "proxy_handler = urllib.request.ProxyHandler({\"http\": \"http://www.example.com:3128/\"})\nproxy_auth_handler = urllib.request.ProxyBasicAuthHandler()\nproxy_auth_handler.add_password(\"realm\", \"host\", \"username\", \"password\")\nopener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)\nwith opener.open(\"http://www.example.com/login.html\") as f:\n    pass",
        "detail": "python-prac.learn-python3.commonlib.use_urllib",
        "documentation": {}
    },
    {
        "label": "proxy_auth_handler",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_urllib",
        "description": "python-prac.learn-python3.commonlib.use_urllib",
        "peekOfCode": "proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()\nproxy_auth_handler.add_password(\"realm\", \"host\", \"username\", \"password\")\nopener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)\nwith opener.open(\"http://www.example.com/login.html\") as f:\n    pass",
        "detail": "python-prac.learn-python3.commonlib.use_urllib",
        "documentation": {}
    },
    {
        "label": "opener",
        "kind": 5,
        "importPath": "python-prac.learn-python3.commonlib.use_urllib",
        "description": "python-prac.learn-python3.commonlib.use_urllib",
        "peekOfCode": "opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)\nwith opener.open(\"http://www.example.com/login.html\") as f:\n    pass",
        "detail": "python-prac.learn-python3.commonlib.use_urllib",
        "documentation": {}
    },
    {
        "label": "closing",
        "kind": 2,
        "importPath": "python-prac.learn-python3.context.do_closing",
        "description": "python-prac.learn-python3.context.do_closing",
        "peekOfCode": "def closing(fname):\n    f = None\n    try:\n        f = open(fname, \"r\")\n        yield f\n    finally:\n        if f:\n            f.close()\nwith closing(\"test.txt\") as f:\n    print(f.read())",
        "detail": "python-prac.learn-python3.context.do_closing",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "python-prac.learn-python3.context.do_with",
        "description": "python-prac.learn-python3.context.do_with",
        "peekOfCode": "def log(name):\n    print(\"[%s] start...\" % name)\n    yield\n    print(\"[%s] end.\" % name)\nwith log(\"DEBUG\"):\n    print(\"Hello, world!\")\n    print(\"Hello, Python!\")",
        "detail": "python-prac.learn-python3.context.do_with",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_mysql",
        "description": "python-prac.learn-python3.db.do_mysql",
        "peekOfCode": "conn = mysql.connector.connect(user=\"root\", password=\"password\", database=\"test\")\ncursor = conn.cursor()\n# user:\ncursor.execute(\"create table user (id varchar(20) primary key, name varchar(20))\")\n# ，MySQL%s:\ncursor.execute(\"insert into user (id, name) values (%s, %s)\", (\"1\", \"Michael\"))\nprint(\"rowcount =\", cursor.rowcount)\n# :\nconn.commit()\ncursor.close()",
        "detail": "python-prac.learn-python3.db.do_mysql",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_mysql",
        "description": "python-prac.learn-python3.db.do_mysql",
        "peekOfCode": "cursor = conn.cursor()\n# user:\ncursor.execute(\"create table user (id varchar(20) primary key, name varchar(20))\")\n# ，MySQL%s:\ncursor.execute(\"insert into user (id, name) values (%s, %s)\", (\"1\", \"Michael\"))\nprint(\"rowcount =\", cursor.rowcount)\n# :\nconn.commit()\ncursor.close()\n# :",
        "detail": "python-prac.learn-python3.db.do_mysql",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_mysql",
        "description": "python-prac.learn-python3.db.do_mysql",
        "peekOfCode": "cursor = conn.cursor()\ncursor.execute(\"select * from user where id = %s\", (\"1\",))\nvalues = cursor.fetchall()\nprint(values)\n# CursorConnection:\ncursor.close()\nconn.close()",
        "detail": "python-prac.learn-python3.db.do_mysql",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_mysql",
        "description": "python-prac.learn-python3.db.do_mysql",
        "peekOfCode": "values = cursor.fetchall()\nprint(values)\n# CursorConnection:\ncursor.close()\nconn.close()",
        "detail": "python-prac.learn-python3.db.do_mysql",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "python-prac.learn-python3.db.do_sqlalchemy",
        "description": "python-prac.learn-python3.db.do_sqlalchemy",
        "peekOfCode": "class User(Base):\n    # :\n    __tablename__ = \"user\"\n    # :\n    id = Column(String(20), primary_key=True)\n    name = Column(String(20))\n# :\nengine = create_engine(\"mysql+mysqlconnector://root:password@localhost:3306/test\")\n# DBSession:\nDBSession = sessionmaker(bind=engine)",
        "detail": "python-prac.learn-python3.db.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlalchemy",
        "description": "python-prac.learn-python3.db.do_sqlalchemy",
        "peekOfCode": "Base = declarative_base()\n# User:\nclass User(Base):\n    # :\n    __tablename__ = \"user\"\n    # :\n    id = Column(String(20), primary_key=True)\n    name = Column(String(20))\n# :\nengine = create_engine(\"mysql+mysqlconnector://root:password@localhost:3306/test\")",
        "detail": "python-prac.learn-python3.db.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlalchemy",
        "description": "python-prac.learn-python3.db.do_sqlalchemy",
        "peekOfCode": "engine = create_engine(\"mysql+mysqlconnector://root:password@localhost:3306/test\")\n# DBSession:\nDBSession = sessionmaker(bind=engine)\n# session:\nsession = DBSession()\n# User:\nnew_user = User(id=\"5\", name=\"Bob\")\n# session:\nsession.add(new_user)\n# :",
        "detail": "python-prac.learn-python3.db.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DBSession",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlalchemy",
        "description": "python-prac.learn-python3.db.do_sqlalchemy",
        "peekOfCode": "DBSession = sessionmaker(bind=engine)\n# session:\nsession = DBSession()\n# User:\nnew_user = User(id=\"5\", name=\"Bob\")\n# session:\nsession.add(new_user)\n# :\nsession.commit()\n# session:",
        "detail": "python-prac.learn-python3.db.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlalchemy",
        "description": "python-prac.learn-python3.db.do_sqlalchemy",
        "peekOfCode": "session = DBSession()\n# User:\nnew_user = User(id=\"5\", name=\"Bob\")\n# session:\nsession.add(new_user)\n# :\nsession.commit()\n# session:\nsession.close()\n# Session:",
        "detail": "python-prac.learn-python3.db.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "new_user",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlalchemy",
        "description": "python-prac.learn-python3.db.do_sqlalchemy",
        "peekOfCode": "new_user = User(id=\"5\", name=\"Bob\")\n# session:\nsession.add(new_user)\n# :\nsession.commit()\n# session:\nsession.close()\n# Session:\nsession = DBSession()\n# Query，filterwhere，one()，:",
        "detail": "python-prac.learn-python3.db.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlalchemy",
        "description": "python-prac.learn-python3.db.do_sqlalchemy",
        "peekOfCode": "session = DBSession()\n# Query，filterwhere，one()，:\nuser = session.query(User).filter(User.id == \"5\").one()\n# name:\nprint(\"type:\", type(user))\nprint(\"name:\", user.name)\n# Session:\nsession.close()",
        "detail": "python-prac.learn-python3.db.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlalchemy",
        "description": "python-prac.learn-python3.db.do_sqlalchemy",
        "peekOfCode": "user = session.query(User).filter(User.id == \"5\").one()\n# name:\nprint(\"type:\", type(user))\nprint(\"name:\", user.name)\n# Session:\nsession.close()",
        "detail": "python-prac.learn-python3.db.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlite",
        "description": "python-prac.learn-python3.db.do_sqlite",
        "peekOfCode": "conn = sqlite3.connect(\"test.db\")\n# Cursor:\ncursor = conn.cursor()\n# SQL，user:\ncursor.execute(\"create table user (id varchar(20) primary key, name varchar(20))\")\n# SQL，:\ncursor.execute(\"insert into user (id, name) values ('1', 'Michael')\")\n# rowcount:\nprint(\"rowcount =\", cursor.rowcount)\n# Cursor:",
        "detail": "python-prac.learn-python3.db.do_sqlite",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlite",
        "description": "python-prac.learn-python3.db.do_sqlite",
        "peekOfCode": "cursor = conn.cursor()\n# SQL，user:\ncursor.execute(\"create table user (id varchar(20) primary key, name varchar(20))\")\n# SQL，:\ncursor.execute(\"insert into user (id, name) values ('1', 'Michael')\")\n# rowcount:\nprint(\"rowcount =\", cursor.rowcount)\n# Cursor:\ncursor.close()\n# :",
        "detail": "python-prac.learn-python3.db.do_sqlite",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlite",
        "description": "python-prac.learn-python3.db.do_sqlite",
        "peekOfCode": "conn = sqlite3.connect(\"test.db\")\ncursor = conn.cursor()\n# :\ncursor.execute(\"select * from user where id=?\", \"1\")\n# :\nvalues = cursor.fetchall()\nprint(values)\ncursor.close()\nconn.close()",
        "detail": "python-prac.learn-python3.db.do_sqlite",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlite",
        "description": "python-prac.learn-python3.db.do_sqlite",
        "peekOfCode": "cursor = conn.cursor()\n# :\ncursor.execute(\"select * from user where id=?\", \"1\")\n# :\nvalues = cursor.fetchall()\nprint(values)\ncursor.close()\nconn.close()",
        "detail": "python-prac.learn-python3.db.do_sqlite",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "python-prac.learn-python3.db.do_sqlite",
        "description": "python-prac.learn-python3.db.do_sqlite",
        "peekOfCode": "values = cursor.fetchall()\nprint(values)\ncursor.close()\nconn.close()",
        "detail": "python-prac.learn-python3.db.do_sqlite",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.do_assert",
        "description": "python-prac.learn-python3.debug.do_assert",
        "peekOfCode": "def foo(s):\n    n = int(s)\n    assert n != 0, \"n is zero!\"\n    return 10 / n\ndef main():\n    foo(\"0\")\nmain()",
        "detail": "python-prac.learn-python3.debug.do_assert",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.do_assert",
        "description": "python-prac.learn-python3.debug.do_assert",
        "peekOfCode": "def main():\n    foo(\"0\")\nmain()",
        "detail": "python-prac.learn-python3.debug.do_assert",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.debug.do_logging",
        "description": "python-prac.learn-python3.debug.do_logging",
        "peekOfCode": "s = \"0\"\nn = int(s)\nlogging.info(\"n = %d\" % n)\nprint(10 / n)",
        "detail": "python-prac.learn-python3.debug.do_logging",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-prac.learn-python3.debug.do_logging",
        "description": "python-prac.learn-python3.debug.do_logging",
        "peekOfCode": "n = int(s)\nlogging.info(\"n = %d\" % n)\nprint(10 / n)",
        "detail": "python-prac.learn-python3.debug.do_logging",
        "documentation": {}
    },
    {
        "label": "logging.info(\"n",
        "kind": 5,
        "importPath": "python-prac.learn-python3.debug.do_logging",
        "description": "python-prac.learn-python3.debug.do_logging",
        "peekOfCode": "logging.info(\"n = %d\" % n)\nprint(10 / n)",
        "detail": "python-prac.learn-python3.debug.do_logging",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.debug.do_pdb",
        "description": "python-prac.learn-python3.debug.do_pdb",
        "peekOfCode": "s = \"0\"\nn = int(s)\npdb.set_trace()  #\nprint(10 / n)",
        "detail": "python-prac.learn-python3.debug.do_pdb",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-prac.learn-python3.debug.do_pdb",
        "description": "python-prac.learn-python3.debug.do_pdb",
        "peekOfCode": "n = int(s)\npdb.set_trace()  #\nprint(10 / n)",
        "detail": "python-prac.learn-python3.debug.do_pdb",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.err",
        "description": "python-prac.learn-python3.debug.err",
        "peekOfCode": "def foo(s):\n    return 10 / int(s)\ndef bar(s):\n    return foo(s) * 2\ndef main():\n    bar(\"0\")\nmain()",
        "detail": "python-prac.learn-python3.debug.err",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.err",
        "description": "python-prac.learn-python3.debug.err",
        "peekOfCode": "def bar(s):\n    return foo(s) * 2\ndef main():\n    bar(\"0\")\nmain()",
        "detail": "python-prac.learn-python3.debug.err",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.err",
        "description": "python-prac.learn-python3.debug.err",
        "peekOfCode": "def main():\n    bar(\"0\")\nmain()",
        "detail": "python-prac.learn-python3.debug.err",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.err_logging",
        "description": "python-prac.learn-python3.debug.err_logging",
        "peekOfCode": "def foo(s):\n    return 10 / int(s)\ndef bar(s):\n    return foo(s) * 2\ndef main():\n    try:\n        bar(\"0\")\n    except Exception as e:\n        logging.exception(e)\nmain()",
        "detail": "python-prac.learn-python3.debug.err_logging",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.err_logging",
        "description": "python-prac.learn-python3.debug.err_logging",
        "peekOfCode": "def bar(s):\n    return foo(s) * 2\ndef main():\n    try:\n        bar(\"0\")\n    except Exception as e:\n        logging.exception(e)\nmain()\nprint(\"END\")",
        "detail": "python-prac.learn-python3.debug.err_logging",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.err_logging",
        "description": "python-prac.learn-python3.debug.err_logging",
        "peekOfCode": "def main():\n    try:\n        bar(\"0\")\n    except Exception as e:\n        logging.exception(e)\nmain()\nprint(\"END\")",
        "detail": "python-prac.learn-python3.debug.err_logging",
        "documentation": {}
    },
    {
        "label": "FooError",
        "kind": 6,
        "importPath": "python-prac.learn-python3.debug.err_raise",
        "description": "python-prac.learn-python3.debug.err_raise",
        "peekOfCode": "class FooError(ValueError):\n    pass\ndef foo(s):\n    n = int(s)\n    if n == 0:\n        raise FooError(\"invalid value: %s\" % s)\n    return 10 / n\nfoo(\"0\")",
        "detail": "python-prac.learn-python3.debug.err_raise",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.err_raise",
        "description": "python-prac.learn-python3.debug.err_raise",
        "peekOfCode": "def foo(s):\n    n = int(s)\n    if n == 0:\n        raise FooError(\"invalid value: %s\" % s)\n    return 10 / n\nfoo(\"0\")",
        "detail": "python-prac.learn-python3.debug.err_raise",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.err_reraise",
        "description": "python-prac.learn-python3.debug.err_reraise",
        "peekOfCode": "def foo(s):\n    n = int(s)\n    if n == 0:\n        raise ValueError(\"invalid value: %s\" % s)\n    return 10 / n\ndef bar():\n    try:\n        foo(\"0\")\n    except ValueError as e:\n        print(\"ValueError!\")",
        "detail": "python-prac.learn-python3.debug.err_reraise",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "python-prac.learn-python3.debug.err_reraise",
        "description": "python-prac.learn-python3.debug.err_reraise",
        "peekOfCode": "def bar():\n    try:\n        foo(\"0\")\n    except ValueError as e:\n        print(\"ValueError!\")\n        raise\nbar()",
        "detail": "python-prac.learn-python3.debug.err_reraise",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 6,
        "importPath": "python-prac.learn-python3.debug.mydict",
        "description": "python-prac.learn-python3.debug.mydict",
        "peekOfCode": "class Dict(dict):\n    def __init__(self, **kw):\n        super().__init__(**kw)\n    def __getattr__(self, key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Dict' object has no attribute '%s'\" % key)\n    def __setattr__(self, key, value):\n        self[key] = value",
        "detail": "python-prac.learn-python3.debug.mydict",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 6,
        "importPath": "python-prac.learn-python3.debug.mydict2",
        "description": "python-prac.learn-python3.debug.mydict2",
        "peekOfCode": "class Dict(dict):\n    \"\"\"\n    Simple dict but also support access as x.y style.\n    >>> d1 = Dict()\n    >>> d1['x'] = 100\n    >>> d1.x\n    100\n    >>> d1.y = 200\n    >>> d1['y']\n    200",
        "detail": "python-prac.learn-python3.debug.mydict2",
        "documentation": {}
    },
    {
        "label": "TestDict",
        "kind": 6,
        "importPath": "python-prac.learn-python3.debug.mydict_test",
        "description": "python-prac.learn-python3.debug.mydict_test",
        "peekOfCode": "class TestDict(unittest.TestCase):\n    def test_init(self):\n        d = Dict(a=1, b=\"test\")\n        self.assertEqual(d.a, 1)\n        self.assertEqual(d.b, \"test\")\n        self.assertTrue(isinstance(d, dict))\n    def test_key(self):\n        d = Dict()\n        d[\"key\"] = \"value\"\n        self.assertEqual(d.key, \"value\")",
        "detail": "python-prac.learn-python3.debug.mydict_test",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.learn-python3.function.call_func",
        "description": "python-prac.learn-python3.function.call_func",
        "peekOfCode": "x = abs(100)\ny = abs(-20)\nprint(x, y)\nprint(\"max(1, 2, 3) =\", max(1, 2, 3))\nprint(\"min(1, 2, 3) =\", min(1, 2, 3))\nprint(\"sum([1, 2, 3]) =\", sum([1, 2, 3]))",
        "detail": "python-prac.learn-python3.function.call_func",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.learn-python3.function.call_func",
        "description": "python-prac.learn-python3.function.call_func",
        "peekOfCode": "y = abs(-20)\nprint(x, y)\nprint(\"max(1, 2, 3) =\", max(1, 2, 3))\nprint(\"min(1, 2, 3) =\", min(1, 2, 3))\nprint(\"sum([1, 2, 3]) =\", sum([1, 2, 3]))",
        "detail": "python-prac.learn-python3.function.call_func",
        "documentation": {}
    },
    {
        "label": "my_abs",
        "kind": 2,
        "importPath": "python-prac.learn-python3.function.def_func",
        "description": "python-prac.learn-python3.function.def_func",
        "peekOfCode": "def my_abs(x):\n    if not isinstance(x, (int, float)):\n        raise TypeError(\"bad operand type\")\n    if x >= 0:\n        return x\n    else:\n        return -x\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)",
        "detail": "python-prac.learn-python3.function.def_func",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "python-prac.learn-python3.function.def_func",
        "description": "python-prac.learn-python3.function.def_func",
        "peekOfCode": "def move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\nn = my_abs(-20)\nprint(n)\nx, y = move(100, 100, 60, math.pi / 6)\nprint(x, y)\n# TypeError: bad operand type:\nmy_abs(\"123\")",
        "detail": "python-prac.learn-python3.function.def_func",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-prac.learn-python3.function.def_func",
        "description": "python-prac.learn-python3.function.def_func",
        "peekOfCode": "n = my_abs(-20)\nprint(n)\nx, y = move(100, 100, 60, math.pi / 6)\nprint(x, y)\n# TypeError: bad operand type:\nmy_abs(\"123\")",
        "detail": "python-prac.learn-python3.function.def_func",
        "documentation": {}
    },
    {
        "label": "print_scores",
        "kind": 2,
        "importPath": "python-prac.learn-python3.function.kw_args",
        "description": "python-prac.learn-python3.function.kw_args",
        "peekOfCode": "def print_scores(**kw):\n    print(\"      Name  Score\")\n    print(\"------------------\")\n    for name, score in kw.items():\n        print(\"%10s  %d\" % (name, score))\n    print()\nprint_scores(Adam=99, Lisa=88, Bart=77)\ndata = {\"Adam Lee\": 99, \"Lisa S\": 88, \"F.Bart\": 77}\nprint_scores(**data)\ndef print_info(name, *, gender, city=\"Beijing\", age):",
        "detail": "python-prac.learn-python3.function.kw_args",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "python-prac.learn-python3.function.kw_args",
        "description": "python-prac.learn-python3.function.kw_args",
        "peekOfCode": "def print_info(name, *, gender, city=\"Beijing\", age):\n    print(\"Personal Info\")\n    print(\"---------------\")\n    print(\"   Name: %s\" % name)\n    print(\" Gender: %s\" % gender)\n    print(\"   City: %s\" % city)\n    print(\"    Age: %s\" % age)\n    print()\nprint_info(\"Bob\", gender=\"male\", age=20)\nprint_info(\"Lisa\", gender=\"female\", city=\"Shanghai\", age=18)",
        "detail": "python-prac.learn-python3.function.kw_args",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-prac.learn-python3.function.kw_args",
        "description": "python-prac.learn-python3.function.kw_args",
        "peekOfCode": "data = {\"Adam Lee\": 99, \"Lisa S\": 88, \"F.Bart\": 77}\nprint_scores(**data)\ndef print_info(name, *, gender, city=\"Beijing\", age):\n    print(\"Personal Info\")\n    print(\"---------------\")\n    print(\"   Name: %s\" % name)\n    print(\" Gender: %s\" % gender)\n    print(\"   City: %s\" % city)\n    print(\"    Age: %s\" % age)\n    print()",
        "detail": "python-prac.learn-python3.function.kw_args",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "python-prac.learn-python3.function.recur",
        "description": "python-prac.learn-python3.function.recur",
        "peekOfCode": "def fact(n):\n    if n == 1:\n        return 1\n    return n * fact(n - 1)\nprint(\"fact(1) =\", fact(1))\nprint(\"fact(5) =\", fact(5))\nprint(\"fact(10) =\", fact(10))\n# :\ndef move(n, a, b, c):\n    if n == 1:",
        "detail": "python-prac.learn-python3.function.recur",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "python-prac.learn-python3.function.recur",
        "description": "python-prac.learn-python3.function.recur",
        "peekOfCode": "def move(n, a, b, c):\n    if n == 1:\n        print(\"move\", a, \"-->\", c)\n    else:\n        move(n - 1, a, c, b)\n        move(1, a, b, c)\n        move(n - 1, b, a, c)\nmove(4, \"A\", \"B\", \"C\")",
        "detail": "python-prac.learn-python3.function.recur",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "python-prac.learn-python3.function.var_args",
        "description": "python-prac.learn-python3.function.var_args",
        "peekOfCode": "def hello(greeting, *args):\n    if len(args) == 0:\n        print(\"%s!\" % greeting)\n    else:\n        print(\"%s, %s!\" % (greeting, \", \".join(args)))\nhello(\"Hi\")  # => greeting='Hi', args=()\nhello(\"Hi\", \"Sarah\")  # => greeting='Hi', args=('Sarah')\nhello(\n    \"Hello\", \"Michael\", \"Bob\", \"Adam\"\n)  # => greeting='Hello', args=('Michael', 'Bob', 'Adam')",
        "detail": "python-prac.learn-python3.function.var_args",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "python-prac.learn-python3.function.var_args",
        "description": "python-prac.learn-python3.function.var_args",
        "peekOfCode": "names = (\"Bart\", \"Lisa\")\nhello(\"Hello\", *names)  # => greeting='Hello', args=('Bart', 'Lisa')",
        "detail": "python-prac.learn-python3.function.var_args",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.decorator",
        "description": "python-prac.learn-python3.functional.decorator",
        "peekOfCode": "def log(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kw):\n        print(\"call %s():\" % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n@log\ndef now():\n    print(\"2015-3-25\")\nnow()",
        "detail": "python-prac.learn-python3.functional.decorator",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.decorator",
        "description": "python-prac.learn-python3.functional.decorator",
        "peekOfCode": "def now():\n    print(\"2015-3-25\")\nnow()\ndef logger(text):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print(\"%s %s():\" % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper",
        "detail": "python-prac.learn-python3.functional.decorator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.decorator",
        "description": "python-prac.learn-python3.functional.decorator",
        "peekOfCode": "def logger(text):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print(\"%s %s():\" % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n@logger(\"DEBUG\")\ndef today():",
        "detail": "python-prac.learn-python3.functional.decorator",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.decorator",
        "description": "python-prac.learn-python3.functional.decorator",
        "peekOfCode": "def today():\n    print(\"2015-3-25\")\ntoday()\nprint(today.__name__)",
        "detail": "python-prac.learn-python3.functional.decorator",
        "documentation": {}
    },
    {
        "label": "is_odd",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.do_filter",
        "description": "python-prac.learn-python3.functional.do_filter",
        "peekOfCode": "def is_odd(n):\n    return n % 2 == 1\nL = range(100)\nprint(list(filter(is_odd, L)))\ndef not_empty(s):\n    return s and s.strip()\nprint(list(filter(not_empty, [\"A\", \"\", \"B\", None, \"C\", \"  \"])))",
        "detail": "python-prac.learn-python3.functional.do_filter",
        "documentation": {}
    },
    {
        "label": "not_empty",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.do_filter",
        "description": "python-prac.learn-python3.functional.do_filter",
        "peekOfCode": "def not_empty(s):\n    return s and s.strip()\nprint(list(filter(not_empty, [\"A\", \"\", \"B\", None, \"C\", \"  \"])))",
        "detail": "python-prac.learn-python3.functional.do_filter",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "python-prac.learn-python3.functional.do_filter",
        "description": "python-prac.learn-python3.functional.do_filter",
        "peekOfCode": "L = range(100)\nprint(list(filter(is_odd, L)))\ndef not_empty(s):\n    return s and s.strip()\nprint(list(filter(not_empty, [\"A\", \"\", \"B\", None, \"C\", \"  \"])))",
        "detail": "python-prac.learn-python3.functional.do_filter",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.do_map",
        "description": "python-prac.learn-python3.functional.do_map",
        "peekOfCode": "def f(x):\n    return x * x\nprint(list(map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])))",
        "detail": "python-prac.learn-python3.functional.do_map",
        "documentation": {}
    },
    {
        "label": "int2",
        "kind": 5,
        "importPath": "python-prac.learn-python3.functional.do_partial",
        "description": "python-prac.learn-python3.functional.do_partial",
        "peekOfCode": "int2 = functools.partial(int, base=2)\nprint(\"1000000 =\", int2(\"1000000\"))\nprint(\"1010101 =\", int2(\"1010101\"))",
        "detail": "python-prac.learn-python3.functional.do_partial",
        "documentation": {}
    },
    {
        "label": "str2int",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.do_reduce",
        "description": "python-prac.learn-python3.functional.do_reduce",
        "peekOfCode": "def str2int(s):\n    ints = map(lambda ch: CHAR_TO_INT[ch], s)\n    return reduce(lambda x, y: x * 10 + y, ints)\nprint(str2int(\"0\"))\nprint(str2int(\"12300\"))\nprint(str2int(\"0012345\"))\nCHAR_TO_FLOAT = {\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,",
        "detail": "python-prac.learn-python3.functional.do_reduce",
        "documentation": {}
    },
    {
        "label": "str2float",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.do_reduce",
        "description": "python-prac.learn-python3.functional.do_reduce",
        "peekOfCode": "def str2float(s):\n    nums = map(lambda ch: CHAR_TO_FLOAT[ch], s)\n    point = 0\n    def to_float(f, n):\n        nonlocal point\n        if n == -1:\n            point = 1\n            return f\n        if point == 0:\n            return f * 10 + n",
        "detail": "python-prac.learn-python3.functional.do_reduce",
        "documentation": {}
    },
    {
        "label": "CHAR_TO_INT",
        "kind": 5,
        "importPath": "python-prac.learn-python3.functional.do_reduce",
        "description": "python-prac.learn-python3.functional.do_reduce",
        "peekOfCode": "CHAR_TO_INT = {\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,",
        "detail": "python-prac.learn-python3.functional.do_reduce",
        "documentation": {}
    },
    {
        "label": "CHAR_TO_FLOAT",
        "kind": 5,
        "importPath": "python-prac.learn-python3.functional.do_reduce",
        "description": "python-prac.learn-python3.functional.do_reduce",
        "peekOfCode": "CHAR_TO_FLOAT = {\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,",
        "detail": "python-prac.learn-python3.functional.do_reduce",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "python-prac.learn-python3.functional.do_sorted",
        "description": "python-prac.learn-python3.functional.do_sorted",
        "peekOfCode": "L = [\"bob\", \"about\", \"Zoo\", \"Credit\"]\nprint(sorted(L))\nprint(sorted(L, key=str.lower))\nstudents = [(\"Bob\", 75), (\"Adam\", 92), (\"Bart\", 66), (\"Lisa\", 88)]\nprint(sorted(students, key=itemgetter(0)))\nprint(sorted(students, key=lambda t: t[1]))\nprint(sorted(students, key=itemgetter(1), reverse=True))",
        "detail": "python-prac.learn-python3.functional.do_sorted",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "python-prac.learn-python3.functional.do_sorted",
        "description": "python-prac.learn-python3.functional.do_sorted",
        "peekOfCode": "students = [(\"Bob\", 75), (\"Adam\", 92), (\"Bart\", 66), (\"Lisa\", 88)]\nprint(sorted(students, key=itemgetter(0)))\nprint(sorted(students, key=lambda t: t[1]))\nprint(sorted(students, key=itemgetter(1), reverse=True))",
        "detail": "python-prac.learn-python3.functional.do_sorted",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.prime_numbers",
        "description": "python-prac.learn-python3.functional.prime_numbers",
        "peekOfCode": "def main():\n    for n in primes():\n        if n < 1000:\n            print(n)\n        else:\n            break\ndef _odd_iter():\n    n = 1\n    while True:\n        n = n + 2",
        "detail": "python-prac.learn-python3.functional.prime_numbers",
        "documentation": {}
    },
    {
        "label": "primes",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.prime_numbers",
        "description": "python-prac.learn-python3.functional.prime_numbers",
        "peekOfCode": "def primes():\n    yield 2\n    it = _odd_iter()\n    while True:\n        n = next(it)\n        yield n\n        it = filter(_not_divisible(n), it)\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-prac.learn-python3.functional.prime_numbers",
        "documentation": {}
    },
    {
        "label": "lazy_sum",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.return_func",
        "description": "python-prac.learn-python3.functional.return_func",
        "peekOfCode": "def lazy_sum(*args):\n    def sum():\n        ax = 0\n        for n in args:\n            ax = ax + n\n        return ax\n    return sum\nf = lazy_sum(1, 2, 4, 5, 7, 8, 9)\nprint(f)\nprint(f())",
        "detail": "python-prac.learn-python3.functional.return_func",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.return_func",
        "description": "python-prac.learn-python3.functional.return_func",
        "peekOfCode": "def count():\n    fs = []\n    for i in range(1, 4):\n        def f():\n            return i * i\n        fs.append(f)\n    return fs\nf1, f2, f3 = count()\nprint(f1())\nprint(f2())",
        "detail": "python-prac.learn-python3.functional.return_func",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "python-prac.learn-python3.functional.return_func",
        "description": "python-prac.learn-python3.functional.return_func",
        "peekOfCode": "def count():\n    fs = []\n    def f(n):\n        def j():\n            return n * n\n        return j\n    for i in range(1, 4):\n        fs.append(f(i))\n    return fs\nf1, f2, f3 = count()",
        "detail": "python-prac.learn-python3.functional.return_func",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.learn-python3.functional.return_func",
        "description": "python-prac.learn-python3.functional.return_func",
        "peekOfCode": "f = lazy_sum(1, 2, 4, 5, 7, 8, 9)\nprint(f)\nprint(f())\n# why f1(), f2(), f3() returns 9, 9, 9 rather than 1, 4, 9?\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f():\n            return i * i\n        fs.append(f)",
        "detail": "python-prac.learn-python3.functional.return_func",
        "documentation": {}
    },
    {
        "label": "drawStar",
        "kind": 2,
        "importPath": "python-prac.learn-python3.gui.turtle.stars",
        "description": "python-prac.learn-python3.gui.turtle.stars",
        "peekOfCode": "def drawStar(x, y):\n    pu()\n    goto(x, y)\n    pd()\n    # set heading: 0\n    seth(0)\n    for i in range(5):\n        fd(40)\n        rt(144)\nfor x in range(0, 250, 50):",
        "detail": "python-prac.learn-python3.gui.turtle.stars",
        "documentation": {}
    },
    {
        "label": "draw_tree",
        "kind": 2,
        "importPath": "python-prac.learn-python3.gui.turtle.tree",
        "description": "python-prac.learn-python3.gui.turtle.tree",
        "peekOfCode": "def draw_tree(l, level):\n    global r, g, b\n    # save the current pen width\n    w = width()\n    # narrow the pen width\n    width(w * 3.0 / 4.0)\n    # set color:\n    r = r + 1\n    g = g + 2\n    b = b + 3",
        "detail": "python-prac.learn-python3.gui.turtle.tree",
        "documentation": {}
    },
    {
        "label": "lv",
        "kind": 5,
        "importPath": "python-prac.learn-python3.gui.turtle.tree",
        "description": "python-prac.learn-python3.gui.turtle.tree",
        "peekOfCode": "lv = 14\nl = 120\ns = 45\nwidth(lv)\nr = 0\ng = 0\nb = 0\npencolor(r, g, b)\npenup()\nbk(l)",
        "detail": "python-prac.learn-python3.gui.turtle.tree",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-prac.learn-python3.gui.turtle.tree",
        "description": "python-prac.learn-python3.gui.turtle.tree",
        "peekOfCode": "l = 120\ns = 45\nwidth(lv)\nr = 0\ng = 0\nb = 0\npencolor(r, g, b)\npenup()\nbk(l)\npendown()",
        "detail": "python-prac.learn-python3.gui.turtle.tree",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.gui.turtle.tree",
        "description": "python-prac.learn-python3.gui.turtle.tree",
        "peekOfCode": "s = 45\nwidth(lv)\nr = 0\ng = 0\nb = 0\npencolor(r, g, b)\npenup()\nbk(l)\npendown()\nfd(l)",
        "detail": "python-prac.learn-python3.gui.turtle.tree",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "python-prac.learn-python3.gui.turtle.tree",
        "description": "python-prac.learn-python3.gui.turtle.tree",
        "peekOfCode": "r = 0\ng = 0\nb = 0\npencolor(r, g, b)\npenup()\nbk(l)\npendown()\nfd(l)\ndef draw_tree(l, level):\n    global r, g, b",
        "detail": "python-prac.learn-python3.gui.turtle.tree",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-prac.learn-python3.gui.turtle.tree",
        "description": "python-prac.learn-python3.gui.turtle.tree",
        "peekOfCode": "g = 0\nb = 0\npencolor(r, g, b)\npenup()\nbk(l)\npendown()\nfd(l)\ndef draw_tree(l, level):\n    global r, g, b\n    # save the current pen width",
        "detail": "python-prac.learn-python3.gui.turtle.tree",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.learn-python3.gui.turtle.tree",
        "description": "python-prac.learn-python3.gui.turtle.tree",
        "peekOfCode": "b = 0\npencolor(r, g, b)\npenup()\nbk(l)\npendown()\nfd(l)\ndef draw_tree(l, level):\n    global r, g, b\n    # save the current pen width\n    w = width()",
        "detail": "python-prac.learn-python3.gui.turtle.tree",
        "documentation": {}
    },
    {
        "label": "Application",
        "kind": 6,
        "importPath": "python-prac.learn-python3.gui.hello_gui",
        "description": "python-prac.learn-python3.gui.hello_gui",
        "peekOfCode": "class Application(Frame):\n    def __init__(self, master=None):\n        Frame.__init__(self, master)\n        self.pack()\n        self.createWidgets()\n    def createWidgets(self):\n        self.nameInput = Entry(self)\n        self.nameInput.pack()\n        self.alertButton = Button(self, text=\"Hello\", command=self.hello)\n        self.alertButton.pack()",
        "detail": "python-prac.learn-python3.gui.hello_gui",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "python-prac.learn-python3.gui.hello_gui",
        "description": "python-prac.learn-python3.gui.hello_gui",
        "peekOfCode": "app = Application()\n# :\napp.master.title(\"Hello World\")\n# :\napp.mainloop()",
        "detail": "python-prac.learn-python3.gui.hello_gui",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.do_bytesio",
        "description": "python-prac.learn-python3.io.do_bytesio",
        "peekOfCode": "f = BytesIO()\nf.write(b\"hello\")\nf.write(b\" \")\nf.write(b\"world!\")\nprint(f.getvalue())\n# read from BytesIO:\ndata = \"，。，。\".encode(\"utf-8\")\nf = BytesIO(data)\nprint(f.read())",
        "detail": "python-prac.learn-python3.io.do_bytesio",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.do_bytesio",
        "description": "python-prac.learn-python3.io.do_bytesio",
        "peekOfCode": "data = \"，。，。\".encode(\"utf-8\")\nf = BytesIO(data)\nprint(f.read())",
        "detail": "python-prac.learn-python3.io.do_bytesio",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.do_bytesio",
        "description": "python-prac.learn-python3.io.do_bytesio",
        "peekOfCode": "f = BytesIO(data)\nprint(f.read())",
        "detail": "python-prac.learn-python3.io.do_bytesio",
        "documentation": {}
    },
    {
        "label": "pwd",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.do_dir",
        "description": "python-prac.learn-python3.io.do_dir",
        "peekOfCode": "pwd = os.path.abspath(\".\")\nprint(\"      Size     Last Modified  Name\")\nprint(\"------------------------------------------------------------\")\nfor f in os.listdir(pwd):\n    fsize = os.path.getsize(f)\n    mtime = datetime.fromtimestamp(os.path.getmtime(f)).strftime(\"%Y-%m-%d %H:%M\")\n    flag = \"/\" if os.path.isdir(f) else \"\"\n    print(\"%10d  %s  %s%s\" % (fsize, mtime, f, flag))",
        "detail": "python-prac.learn-python3.io.do_dir",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.do_stringio",
        "description": "python-prac.learn-python3.io.do_stringio",
        "peekOfCode": "f = StringIO()\nf.write(\"hello\")\nf.write(\" \")\nf.write(\"world!\")\nprint(f.getvalue())\n# read from StringIO:\nf = StringIO(\"，\\n。\\n，\\n。\")\nwhile True:\n    s = f.readline()\n    if s == \"\":",
        "detail": "python-prac.learn-python3.io.do_stringio",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.do_stringio",
        "description": "python-prac.learn-python3.io.do_stringio",
        "peekOfCode": "f = StringIO(\"，\\n。\\n，\\n。\")\nwhile True:\n    s = f.readline()\n    if s == \"\":\n        break\n    print(s.strip())",
        "detail": "python-prac.learn-python3.io.do_stringio",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "python-prac.learn-python3.io.use_json",
        "description": "python-prac.learn-python3.io.use_json",
        "peekOfCode": "class Student(object):\n    def __init__(self, name, age, score):\n        self.name = name\n        self.age = age\n        self.score = score\n    def __str__(self):\n        return \"Student object (%s, %s, %s)\" % (self.name, self.age, self.score)\ns = Student(\"Bob\", 20, 88)\nstd_data = json.dumps(s, default=lambda obj: obj.__dict__)\nprint(\"Dump Student:\", std_data)",
        "detail": "python-prac.learn-python3.io.use_json",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.use_json",
        "description": "python-prac.learn-python3.io.use_json",
        "peekOfCode": "d = dict(name=\"Bob\", age=20, score=88)\ndata = json.dumps(d)\nprint(\"JSON Data is a str:\", data)\nreborn = json.loads(data)\nprint(reborn)\nclass Student(object):\n    def __init__(self, name, age, score):\n        self.name = name\n        self.age = age\n        self.score = score",
        "detail": "python-prac.learn-python3.io.use_json",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.use_json",
        "description": "python-prac.learn-python3.io.use_json",
        "peekOfCode": "data = json.dumps(d)\nprint(\"JSON Data is a str:\", data)\nreborn = json.loads(data)\nprint(reborn)\nclass Student(object):\n    def __init__(self, name, age, score):\n        self.name = name\n        self.age = age\n        self.score = score\n    def __str__(self):",
        "detail": "python-prac.learn-python3.io.use_json",
        "documentation": {}
    },
    {
        "label": "reborn",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.use_json",
        "description": "python-prac.learn-python3.io.use_json",
        "peekOfCode": "reborn = json.loads(data)\nprint(reborn)\nclass Student(object):\n    def __init__(self, name, age, score):\n        self.name = name\n        self.age = age\n        self.score = score\n    def __str__(self):\n        return \"Student object (%s, %s, %s)\" % (self.name, self.age, self.score)\ns = Student(\"Bob\", 20, 88)",
        "detail": "python-prac.learn-python3.io.use_json",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.use_json",
        "description": "python-prac.learn-python3.io.use_json",
        "peekOfCode": "s = Student(\"Bob\", 20, 88)\nstd_data = json.dumps(s, default=lambda obj: obj.__dict__)\nprint(\"Dump Student:\", std_data)\nrebuild = json.loads(\n    std_data, object_hook=lambda d: Student(d[\"name\"], d[\"age\"], d[\"score\"])\n)\nprint(rebuild)",
        "detail": "python-prac.learn-python3.io.use_json",
        "documentation": {}
    },
    {
        "label": "std_data",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.use_json",
        "description": "python-prac.learn-python3.io.use_json",
        "peekOfCode": "std_data = json.dumps(s, default=lambda obj: obj.__dict__)\nprint(\"Dump Student:\", std_data)\nrebuild = json.loads(\n    std_data, object_hook=lambda d: Student(d[\"name\"], d[\"age\"], d[\"score\"])\n)\nprint(rebuild)",
        "detail": "python-prac.learn-python3.io.use_json",
        "documentation": {}
    },
    {
        "label": "rebuild",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.use_json",
        "description": "python-prac.learn-python3.io.use_json",
        "peekOfCode": "rebuild = json.loads(\n    std_data, object_hook=lambda d: Student(d[\"name\"], d[\"age\"], d[\"score\"])\n)\nprint(rebuild)",
        "detail": "python-prac.learn-python3.io.use_json",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.use_pickle",
        "description": "python-prac.learn-python3.io.use_pickle",
        "peekOfCode": "d = dict(name=\"Bob\", age=20, score=88)\ndata = pickle.dumps(d)\nprint(data)\nreborn = pickle.loads(data)\nprint(reborn)",
        "detail": "python-prac.learn-python3.io.use_pickle",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.use_pickle",
        "description": "python-prac.learn-python3.io.use_pickle",
        "peekOfCode": "data = pickle.dumps(d)\nprint(data)\nreborn = pickle.loads(data)\nprint(reborn)",
        "detail": "python-prac.learn-python3.io.use_pickle",
        "documentation": {}
    },
    {
        "label": "reborn",
        "kind": 5,
        "importPath": "python-prac.learn-python3.io.use_pickle",
        "description": "python-prac.learn-python3.io.use_pickle",
        "peekOfCode": "reborn = pickle.loads(data)\nprint(reborn)",
        "detail": "python-prac.learn-python3.io.use_pickle",
        "documentation": {}
    },
    {
        "label": "guess_charset",
        "kind": 2,
        "importPath": "python-prac.learn-python3.mail.fetch_mail",
        "description": "python-prac.learn-python3.mail.fetch_mail",
        "peekOfCode": "def guess_charset(msg):\n    charset = msg.get_charset()\n    if charset is None:\n        content_type = msg.get(\"Content-Type\", \"\").lower()\n        pos = content_type.find(\"charset=\")\n        if pos >= 0:\n            charset = content_type[pos + 8 :].strip()\n    return charset\ndef decode_str(s):\n    value, charset = decode_header(s)[0]",
        "detail": "python-prac.learn-python3.mail.fetch_mail",
        "documentation": {}
    },
    {
        "label": "decode_str",
        "kind": 2,
        "importPath": "python-prac.learn-python3.mail.fetch_mail",
        "description": "python-prac.learn-python3.mail.fetch_mail",
        "peekOfCode": "def decode_str(s):\n    value, charset = decode_header(s)[0]\n    if charset:\n        value = value.decode(charset)\n    return value\ndef print_info(msg, indent=0):\n    if indent == 0:\n        for header in [\"From\", \"To\", \"Subject\"]:\n            value = msg.get(header, \"\")\n            if value:",
        "detail": "python-prac.learn-python3.mail.fetch_mail",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "python-prac.learn-python3.mail.fetch_mail",
        "description": "python-prac.learn-python3.mail.fetch_mail",
        "peekOfCode": "def print_info(msg, indent=0):\n    if indent == 0:\n        for header in [\"From\", \"To\", \"Subject\"]:\n            value = msg.get(header, \"\")\n            if value:\n                if header == \"Subject\":\n                    value = decode_str(value)\n                else:\n                    hdr, addr = parseaddr(value)\n                    name = decode_str(hdr)",
        "detail": "python-prac.learn-python3.mail.fetch_mail",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.fetch_mail",
        "description": "python-prac.learn-python3.mail.fetch_mail",
        "peekOfCode": "email = input(\"Email: \")\npassword = input(\"Password: \")\npop3_server = input(\"POP3 server: \")\ndef guess_charset(msg):\n    charset = msg.get_charset()\n    if charset is None:\n        content_type = msg.get(\"Content-Type\", \"\").lower()\n        pos = content_type.find(\"charset=\")\n        if pos >= 0:\n            charset = content_type[pos + 8 :].strip()",
        "detail": "python-prac.learn-python3.mail.fetch_mail",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.fetch_mail",
        "description": "python-prac.learn-python3.mail.fetch_mail",
        "peekOfCode": "password = input(\"Password: \")\npop3_server = input(\"POP3 server: \")\ndef guess_charset(msg):\n    charset = msg.get_charset()\n    if charset is None:\n        content_type = msg.get(\"Content-Type\", \"\").lower()\n        pos = content_type.find(\"charset=\")\n        if pos >= 0:\n            charset = content_type[pos + 8 :].strip()\n    return charset",
        "detail": "python-prac.learn-python3.mail.fetch_mail",
        "documentation": {}
    },
    {
        "label": "pop3_server",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.fetch_mail",
        "description": "python-prac.learn-python3.mail.fetch_mail",
        "peekOfCode": "pop3_server = input(\"POP3 server: \")\ndef guess_charset(msg):\n    charset = msg.get_charset()\n    if charset is None:\n        content_type = msg.get(\"Content-Type\", \"\").lower()\n        pos = content_type.find(\"charset=\")\n        if pos >= 0:\n            charset = content_type[pos + 8 :].strip()\n    return charset\ndef decode_str(s):",
        "detail": "python-prac.learn-python3.mail.fetch_mail",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.fetch_mail",
        "description": "python-prac.learn-python3.mail.fetch_mail",
        "peekOfCode": "server = poplib.POP3(pop3_server)\n# :\nserver.set_debuglevel(1)\n# :POP3:\nprint(server.getwelcome().decode(\"utf-8\"))\n# :\nserver.user(email)\nserver.pass_(password)\n# stat():\nprint(\"Messages: %s. Size: %s\" % server.stat())",
        "detail": "python-prac.learn-python3.mail.fetch_mail",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.fetch_mail",
        "description": "python-prac.learn-python3.mail.fetch_mail",
        "peekOfCode": "index = len(mails)\nresp, lines, octets = server.retr(index)\n# lines,\n# :\nmsg_content = b\"\\r\\n\".join(lines).decode(\"utf-8\")\n# :\nmsg = Parser().parsestr(msg_content)\nprint_info(msg)\n# :\n# server.dele(index)",
        "detail": "python-prac.learn-python3.mail.fetch_mail",
        "documentation": {}
    },
    {
        "label": "msg_content",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.fetch_mail",
        "description": "python-prac.learn-python3.mail.fetch_mail",
        "peekOfCode": "msg_content = b\"\\r\\n\".join(lines).decode(\"utf-8\")\n# :\nmsg = Parser().parsestr(msg_content)\nprint_info(msg)\n# :\n# server.dele(index)\n# :\nserver.quit()",
        "detail": "python-prac.learn-python3.mail.fetch_mail",
        "documentation": {}
    },
    {
        "label": "msg",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.fetch_mail",
        "description": "python-prac.learn-python3.mail.fetch_mail",
        "peekOfCode": "msg = Parser().parsestr(msg_content)\nprint_info(msg)\n# :\n# server.dele(index)\n# :\nserver.quit()",
        "detail": "python-prac.learn-python3.mail.fetch_mail",
        "documentation": {}
    },
    {
        "label": "from_addr",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.send_mail",
        "description": "python-prac.learn-python3.mail.send_mail",
        "peekOfCode": "from_addr = input(\"From: \")\npassword = input(\"Password: \")\nto_addr = input(\"To: \")\nsmtp_server = input(\"SMTP server: \")\nmsg = MIMEText(\"hello, send by Python...\", \"plain\", \"utf-8\")\nmsg[\"From\"] = _format_addr(\"Python <%s>\" % from_addr)\nmsg[\"To\"] = _format_addr(\" <%s>\" % to_addr)\nmsg[\"Subject\"] = Header(\"SMTP……\", \"utf-8\").encode()\nserver = smtplib.SMTP(smtp_server, 25)\nserver.set_debuglevel(1)",
        "detail": "python-prac.learn-python3.mail.send_mail",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.send_mail",
        "description": "python-prac.learn-python3.mail.send_mail",
        "peekOfCode": "password = input(\"Password: \")\nto_addr = input(\"To: \")\nsmtp_server = input(\"SMTP server: \")\nmsg = MIMEText(\"hello, send by Python...\", \"plain\", \"utf-8\")\nmsg[\"From\"] = _format_addr(\"Python <%s>\" % from_addr)\nmsg[\"To\"] = _format_addr(\" <%s>\" % to_addr)\nmsg[\"Subject\"] = Header(\"SMTP……\", \"utf-8\").encode()\nserver = smtplib.SMTP(smtp_server, 25)\nserver.set_debuglevel(1)\nserver.login(from_addr, password)",
        "detail": "python-prac.learn-python3.mail.send_mail",
        "documentation": {}
    },
    {
        "label": "to_addr",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.send_mail",
        "description": "python-prac.learn-python3.mail.send_mail",
        "peekOfCode": "to_addr = input(\"To: \")\nsmtp_server = input(\"SMTP server: \")\nmsg = MIMEText(\"hello, send by Python...\", \"plain\", \"utf-8\")\nmsg[\"From\"] = _format_addr(\"Python <%s>\" % from_addr)\nmsg[\"To\"] = _format_addr(\" <%s>\" % to_addr)\nmsg[\"Subject\"] = Header(\"SMTP……\", \"utf-8\").encode()\nserver = smtplib.SMTP(smtp_server, 25)\nserver.set_debuglevel(1)\nserver.login(from_addr, password)\nserver.sendmail(from_addr, [to_addr], msg.as_string())",
        "detail": "python-prac.learn-python3.mail.send_mail",
        "documentation": {}
    },
    {
        "label": "smtp_server",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.send_mail",
        "description": "python-prac.learn-python3.mail.send_mail",
        "peekOfCode": "smtp_server = input(\"SMTP server: \")\nmsg = MIMEText(\"hello, send by Python...\", \"plain\", \"utf-8\")\nmsg[\"From\"] = _format_addr(\"Python <%s>\" % from_addr)\nmsg[\"To\"] = _format_addr(\" <%s>\" % to_addr)\nmsg[\"Subject\"] = Header(\"SMTP……\", \"utf-8\").encode()\nserver = smtplib.SMTP(smtp_server, 25)\nserver.set_debuglevel(1)\nserver.login(from_addr, password)\nserver.sendmail(from_addr, [to_addr], msg.as_string())\nserver.quit()",
        "detail": "python-prac.learn-python3.mail.send_mail",
        "documentation": {}
    },
    {
        "label": "msg",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.send_mail",
        "description": "python-prac.learn-python3.mail.send_mail",
        "peekOfCode": "msg = MIMEText(\"hello, send by Python...\", \"plain\", \"utf-8\")\nmsg[\"From\"] = _format_addr(\"Python <%s>\" % from_addr)\nmsg[\"To\"] = _format_addr(\" <%s>\" % to_addr)\nmsg[\"Subject\"] = Header(\"SMTP……\", \"utf-8\").encode()\nserver = smtplib.SMTP(smtp_server, 25)\nserver.set_debuglevel(1)\nserver.login(from_addr, password)\nserver.sendmail(from_addr, [to_addr], msg.as_string())\nserver.quit()",
        "detail": "python-prac.learn-python3.mail.send_mail",
        "documentation": {}
    },
    {
        "label": "msg[\"From\"]",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.send_mail",
        "description": "python-prac.learn-python3.mail.send_mail",
        "peekOfCode": "msg[\"From\"] = _format_addr(\"Python <%s>\" % from_addr)\nmsg[\"To\"] = _format_addr(\" <%s>\" % to_addr)\nmsg[\"Subject\"] = Header(\"SMTP……\", \"utf-8\").encode()\nserver = smtplib.SMTP(smtp_server, 25)\nserver.set_debuglevel(1)\nserver.login(from_addr, password)\nserver.sendmail(from_addr, [to_addr], msg.as_string())\nserver.quit()",
        "detail": "python-prac.learn-python3.mail.send_mail",
        "documentation": {}
    },
    {
        "label": "msg[\"To\"]",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.send_mail",
        "description": "python-prac.learn-python3.mail.send_mail",
        "peekOfCode": "msg[\"To\"] = _format_addr(\" <%s>\" % to_addr)\nmsg[\"Subject\"] = Header(\"SMTP……\", \"utf-8\").encode()\nserver = smtplib.SMTP(smtp_server, 25)\nserver.set_debuglevel(1)\nserver.login(from_addr, password)\nserver.sendmail(from_addr, [to_addr], msg.as_string())\nserver.quit()",
        "detail": "python-prac.learn-python3.mail.send_mail",
        "documentation": {}
    },
    {
        "label": "msg[\"Subject\"]",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.send_mail",
        "description": "python-prac.learn-python3.mail.send_mail",
        "peekOfCode": "msg[\"Subject\"] = Header(\"SMTP……\", \"utf-8\").encode()\nserver = smtplib.SMTP(smtp_server, 25)\nserver.set_debuglevel(1)\nserver.login(from_addr, password)\nserver.sendmail(from_addr, [to_addr], msg.as_string())\nserver.quit()",
        "detail": "python-prac.learn-python3.mail.send_mail",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "python-prac.learn-python3.mail.send_mail",
        "description": "python-prac.learn-python3.mail.send_mail",
        "peekOfCode": "server = smtplib.SMTP(smtp_server, 25)\nserver.set_debuglevel(1)\nserver.login(from_addr, password)\nserver.sendmail(from_addr, [to_addr], msg.as_string())\nserver.quit()",
        "detail": "python-prac.learn-python3.mail.send_mail",
        "documentation": {}
    },
    {
        "label": "InputDevice",
        "kind": 6,
        "importPath": "python-prac.learn-python3.micropython.rccar.devices",
        "description": "python-prac.learn-python3.micropython.rccar.devices",
        "peekOfCode": "class InputDevice:\n    def __init__(self):\n        self.name = \"\"\n        self.handler = \"\"\n    def __str__(self):\n        return \"<Input Device: name=%s, handler=%s>\" % (self.name, self.handler)\n    def setName(self, name):\n        if len(name) >= 2 and name.startswith('\"') and name.endswith('\"'):\n            name = name[1 : len(name) - 1]\n        self.name = name",
        "detail": "python-prac.learn-python3.micropython.rccar.devices",
        "documentation": {}
    },
    {
        "label": "listDevices",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.rccar.devices",
        "description": "python-prac.learn-python3.micropython.rccar.devices",
        "peekOfCode": "def listDevices():\n    devices = []\n    with open(\"/proc/bus/input/devices\", \"r\") as f:\n        device = None\n        while True:\n            s = f.readline()\n            if s == \"\":\n                break\n            s = s.strip()\n            if s == \"\":",
        "detail": "python-prac.learn-python3.micropython.rccar.devices",
        "documentation": {}
    },
    {
        "label": "detectJoystick",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.rccar.devices",
        "description": "python-prac.learn-python3.micropython.rccar.devices",
        "peekOfCode": "def detectJoystick(joystickNames):\n    for device in listDevices():\n        for joystickName in joystickNames:\n            if joystickName in device.name:\n                return \"/dev/input/%s\" % device.handler\n    return None",
        "detail": "python-prac.learn-python3.micropython.rccar.devices",
        "documentation": {}
    },
    {
        "label": "Robot",
        "kind": 6,
        "importPath": "python-prac.learn-python3.micropython.rccar.main",
        "description": "python-prac.learn-python3.micropython.rccar.main",
        "peekOfCode": "class Robot:\n    def __init__(self):\n        self.motor = Motor(Port.B)\n        self.ultrasonic = UltrasonicSensor(Port.S4)\n        self.active = True\n        self.speed = 0\n        self.colors = [None, Color.GREEN, Color.YELLOW, Color.RED]\n    def setSpeed(self, acc):\n        if acc < 0:\n            self.speed = max(-3, self.speed - 1)",
        "detail": "python-prac.learn-python3.micropython.rccar.main",
        "documentation": {}
    },
    {
        "label": "autoStopLoop",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.rccar.main",
        "description": "python-prac.learn-python3.micropython.rccar.main",
        "peekOfCode": "def autoStopLoop(robot):\n    while robot.active:\n        if robot.speed > 0 and robot.ultrasonic.distance() < 200:\n            robot.setSpeed(0)\n        wait(100)\ndef joystickLoop(robot, eventFile):\n    FORMAT = \"llHHI\"\n    EVENT_SIZE = struct.calcsize(FORMAT)\n    with open(eventFile, \"rb\") as infile:\n        while True:",
        "detail": "python-prac.learn-python3.micropython.rccar.main",
        "documentation": {}
    },
    {
        "label": "joystickLoop",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.rccar.main",
        "description": "python-prac.learn-python3.micropython.rccar.main",
        "peekOfCode": "def joystickLoop(robot, eventFile):\n    FORMAT = \"llHHI\"\n    EVENT_SIZE = struct.calcsize(FORMAT)\n    with open(eventFile, \"rb\") as infile:\n        while True:\n            event = infile.read(EVENT_SIZE)\n            _, _, t, c, v = struct.unpack(FORMAT, event)\n            # button A, B:\n            if t == 1 and v == 1:\n                if c == 305:",
        "detail": "python-prac.learn-python3.micropython.rccar.main",
        "documentation": {}
    },
    {
        "label": "buttonLoop",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.rccar.main",
        "description": "python-prac.learn-python3.micropython.rccar.main",
        "peekOfCode": "def buttonLoop(robot):\n    while True:\n        if not any(brick.buttons()):\n            wait(10)\n        else:\n            if Button.LEFT in brick.buttons():\n                robot.setSpeed(-1)\n            elif Button.RIGHT in brick.buttons():\n                robot.setSpeed(1)\n            elif Button.CENTER in brick.buttons():",
        "detail": "python-prac.learn-python3.micropython.rccar.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.rccar.main",
        "description": "python-prac.learn-python3.micropython.rccar.main",
        "peekOfCode": "def main():\n    brick.sound.beep()\n    joystickEvent = detectJoystick([\"Controller\"])\n    robot = Robot()\n    t = threading.Thread(target=autoStopLoop, args=(robot,))\n    t.start()\n    if joystickEvent:\n        joystickLoop(robot, joystickEvent)\n    else:\n        buttonLoop(robot)",
        "detail": "python-prac.learn-python3.micropython.rccar.main",
        "documentation": {}
    },
    {
        "label": "setSpeed",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.smallcar.main",
        "description": "python-prac.learn-python3.micropython.smallcar.main",
        "peekOfCode": "def setSpeed(acc):\n    global speed\n    if acc < 0:\n        speed = max(0, speed - 1)\n    elif acc > 0:\n        speed = min(3, speed + 1)\n    else:\n        speed = 0\n    if speed > 0:\n        motor.run(speed * 90)",
        "detail": "python-prac.learn-python3.micropython.smallcar.main",
        "documentation": {}
    },
    {
        "label": "motor",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.smallcar.main",
        "description": "python-prac.learn-python3.micropython.smallcar.main",
        "peekOfCode": "motor = Motor(Port.B)\nultrasonic = UltrasonicSensor(Port.S4)\nbrick.sound.beep()\nbrick.light(None)\nspeed = 0\ncolors = [None, Color.GREEN, Color.YELLOW, Color.RED]\ndef setSpeed(acc):\n    global speed\n    if acc < 0:\n        speed = max(0, speed - 1)",
        "detail": "python-prac.learn-python3.micropython.smallcar.main",
        "documentation": {}
    },
    {
        "label": "ultrasonic",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.smallcar.main",
        "description": "python-prac.learn-python3.micropython.smallcar.main",
        "peekOfCode": "ultrasonic = UltrasonicSensor(Port.S4)\nbrick.sound.beep()\nbrick.light(None)\nspeed = 0\ncolors = [None, Color.GREEN, Color.YELLOW, Color.RED]\ndef setSpeed(acc):\n    global speed\n    if acc < 0:\n        speed = max(0, speed - 1)\n    elif acc > 0:",
        "detail": "python-prac.learn-python3.micropython.smallcar.main",
        "documentation": {}
    },
    {
        "label": "speed",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.smallcar.main",
        "description": "python-prac.learn-python3.micropython.smallcar.main",
        "peekOfCode": "speed = 0\ncolors = [None, Color.GREEN, Color.YELLOW, Color.RED]\ndef setSpeed(acc):\n    global speed\n    if acc < 0:\n        speed = max(0, speed - 1)\n    elif acc > 0:\n        speed = min(3, speed + 1)\n    else:\n        speed = 0",
        "detail": "python-prac.learn-python3.micropython.smallcar.main",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.smallcar.main",
        "description": "python-prac.learn-python3.micropython.smallcar.main",
        "peekOfCode": "colors = [None, Color.GREEN, Color.YELLOW, Color.RED]\ndef setSpeed(acc):\n    global speed\n    if acc < 0:\n        speed = max(0, speed - 1)\n    elif acc > 0:\n        speed = min(3, speed + 1)\n    else:\n        speed = 0\n    if speed > 0:",
        "detail": "python-prac.learn-python3.micropython.smallcar.main",
        "documentation": {}
    },
    {
        "label": "InputDevice",
        "kind": 6,
        "importPath": "python-prac.learn-python3.micropython.tank.devices",
        "description": "python-prac.learn-python3.micropython.tank.devices",
        "peekOfCode": "class InputDevice:\n    def __init__(self):\n        self.name = \"\"\n        self.handler = \"\"\n    def __str__(self):\n        return \"<Input Device: name=%s, handler=%s>\" % (self.name, self.handler)\n    def setName(self, name):\n        if len(name) >= 2 and name.startswith('\"') and name.endswith('\"'):\n            name = name[1 : len(name) - 1]\n        self.name = name",
        "detail": "python-prac.learn-python3.micropython.tank.devices",
        "documentation": {}
    },
    {
        "label": "listDevices",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.tank.devices",
        "description": "python-prac.learn-python3.micropython.tank.devices",
        "peekOfCode": "def listDevices():\n    devices = []\n    with open(\"/proc/bus/input/devices\", \"r\") as f:\n        device = None\n        while True:\n            s = f.readline()\n            if s == \"\":\n                break\n            s = s.strip()\n            if s == \"\":",
        "detail": "python-prac.learn-python3.micropython.tank.devices",
        "documentation": {}
    },
    {
        "label": "detectJoystick",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.tank.devices",
        "description": "python-prac.learn-python3.micropython.tank.devices",
        "peekOfCode": "def detectJoystick(joystickNames):\n    for device in listDevices():\n        for joystickName in joystickNames:\n            if joystickName in device.name:\n                return \"/dev/input/%s\" % device.handler\n    return None",
        "detail": "python-prac.learn-python3.micropython.tank.devices",
        "documentation": {}
    },
    {
        "label": "JoyStick",
        "kind": 6,
        "importPath": "python-prac.learn-python3.micropython.tank.joystick",
        "description": "python-prac.learn-python3.micropython.tank.joystick",
        "peekOfCode": "class JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None\n        self.joyRightHandler = None\n    def setButtonHandler(self, buttonHandler):\n        self.buttonHandler = buttonHandler\n    def setJoyLeftHandler(self, joyLeftHandler):\n        self.joyLeftHandler = joyLeftHandler",
        "detail": "python-prac.learn-python3.micropython.tank.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_A",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.joystick",
        "description": "python-prac.learn-python3.micropython.tank.joystick",
        "peekOfCode": "BUTTON_A = 305\nBUTTON_B = 304\nBUTTON_X = 307\nBUTTON_Y = 306\nBUTTON_PLUS = 313\nBUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):",
        "detail": "python-prac.learn-python3.micropython.tank.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_B",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.joystick",
        "description": "python-prac.learn-python3.micropython.tank.joystick",
        "peekOfCode": "BUTTON_B = 304\nBUTTON_X = 307\nBUTTON_Y = 306\nBUTTON_PLUS = 313\nBUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile",
        "detail": "python-prac.learn-python3.micropython.tank.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_X",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.joystick",
        "description": "python-prac.learn-python3.micropython.tank.joystick",
        "peekOfCode": "BUTTON_X = 307\nBUTTON_Y = 306\nBUTTON_PLUS = 313\nBUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None",
        "detail": "python-prac.learn-python3.micropython.tank.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_Y",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.joystick",
        "description": "python-prac.learn-python3.micropython.tank.joystick",
        "peekOfCode": "BUTTON_Y = 306\nBUTTON_PLUS = 313\nBUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None",
        "detail": "python-prac.learn-python3.micropython.tank.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_PLUS",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.joystick",
        "description": "python-prac.learn-python3.micropython.tank.joystick",
        "peekOfCode": "BUTTON_PLUS = 313\nBUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None\n        self.joyRightHandler = None",
        "detail": "python-prac.learn-python3.micropython.tank.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_MINUS",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.joystick",
        "description": "python-prac.learn-python3.micropython.tank.joystick",
        "peekOfCode": "BUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None\n        self.joyRightHandler = None\n    def setButtonHandler(self, buttonHandler):",
        "detail": "python-prac.learn-python3.micropython.tank.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_START",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.joystick",
        "description": "python-prac.learn-python3.micropython.tank.joystick",
        "peekOfCode": "BUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None\n        self.joyRightHandler = None\n    def setButtonHandler(self, buttonHandler):\n        self.buttonHandler = buttonHandler",
        "detail": "python-prac.learn-python3.micropython.tank.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_HOME",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.joystick",
        "description": "python-prac.learn-python3.micropython.tank.joystick",
        "peekOfCode": "BUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None\n        self.joyRightHandler = None\n    def setButtonHandler(self, buttonHandler):\n        self.buttonHandler = buttonHandler\n    def setJoyLeftHandler(self, joyLeftHandler):",
        "detail": "python-prac.learn-python3.micropython.tank.joystick",
        "documentation": {}
    },
    {
        "label": "Driver",
        "kind": 6,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "class Driver:\n    def __init__(self, leftMotor, rightMotor, diameter, axle):\n        self.driver = DriveBase(leftMotor, rightMotor, diameter, axle)\n        self.x = 0\n        self.y = 0\n        self.speed = 0\n        self.steering = 0\n    def drive(self, speed, steering):\n        self.speed = speed\n        self.steering = steering",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "Robot",
        "kind": 6,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "class Robot:\n    def __init__(\n        self,\n        leftMotor,\n        rightMotor,\n        topMotor,\n        diameter,\n        axle,\n        maxSpeed=300,\n        maxSteering=180,",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "autoStopLoop",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "def autoStopLoop(robot):\n    while robot.active:\n        if robot.ultrasonic.distance() < 200:\n            robot.drive(0, 0)\n        wait(100)\ndef main():\n    brick.sound.beep()\n    joystickEvent = detectJoystick([\"Controller\"])\n    if joystickEvent:\n        robot = Robot(Motor(Port.D), Motor(Port.A), Motor(Port.B), 55, 200)",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "def main():\n    brick.sound.beep()\n    joystickEvent = detectJoystick([\"Controller\"])\n    if joystickEvent:\n        robot = Robot(Motor(Port.D), Motor(Port.A), Motor(Port.B), 55, 200)\n        t = threading.Thread(target=autoStopLoop, args=(robot,))\n        t.start()\n        def onButtonPressed(code):\n            if code == BUTTON_X:\n                robot.inactive()",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "SPEED",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "SPEED = 100\nSTEERING = 90\nSTATUS_STOPPED = 0\nSTATUS_FORWARD = 1\nSTATUS_BACKWARD = 2\nSTATUS_STEERING = 3\nCOLORS = (None, Color.GREEN, Color.RED, Color.YELLOW)\nclass Driver:\n    def __init__(self, leftMotor, rightMotor, diameter, axle):\n        self.driver = DriveBase(leftMotor, rightMotor, diameter, axle)",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "STEERING",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "STEERING = 90\nSTATUS_STOPPED = 0\nSTATUS_FORWARD = 1\nSTATUS_BACKWARD = 2\nSTATUS_STEERING = 3\nCOLORS = (None, Color.GREEN, Color.RED, Color.YELLOW)\nclass Driver:\n    def __init__(self, leftMotor, rightMotor, diameter, axle):\n        self.driver = DriveBase(leftMotor, rightMotor, diameter, axle)\n        self.x = 0",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "STATUS_STOPPED",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "STATUS_STOPPED = 0\nSTATUS_FORWARD = 1\nSTATUS_BACKWARD = 2\nSTATUS_STEERING = 3\nCOLORS = (None, Color.GREEN, Color.RED, Color.YELLOW)\nclass Driver:\n    def __init__(self, leftMotor, rightMotor, diameter, axle):\n        self.driver = DriveBase(leftMotor, rightMotor, diameter, axle)\n        self.x = 0\n        self.y = 0",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "STATUS_FORWARD",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "STATUS_FORWARD = 1\nSTATUS_BACKWARD = 2\nSTATUS_STEERING = 3\nCOLORS = (None, Color.GREEN, Color.RED, Color.YELLOW)\nclass Driver:\n    def __init__(self, leftMotor, rightMotor, diameter, axle):\n        self.driver = DriveBase(leftMotor, rightMotor, diameter, axle)\n        self.x = 0\n        self.y = 0\n        self.speed = 0",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "STATUS_BACKWARD",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "STATUS_BACKWARD = 2\nSTATUS_STEERING = 3\nCOLORS = (None, Color.GREEN, Color.RED, Color.YELLOW)\nclass Driver:\n    def __init__(self, leftMotor, rightMotor, diameter, axle):\n        self.driver = DriveBase(leftMotor, rightMotor, diameter, axle)\n        self.x = 0\n        self.y = 0\n        self.speed = 0\n        self.steering = 0",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "STATUS_STEERING",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "STATUS_STEERING = 3\nCOLORS = (None, Color.GREEN, Color.RED, Color.YELLOW)\nclass Driver:\n    def __init__(self, leftMotor, rightMotor, diameter, axle):\n        self.driver = DriveBase(leftMotor, rightMotor, diameter, axle)\n        self.x = 0\n        self.y = 0\n        self.speed = 0\n        self.steering = 0\n    def drive(self, speed, steering):",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "python-prac.learn-python3.micropython.tank.main",
        "description": "python-prac.learn-python3.micropython.tank.main",
        "peekOfCode": "COLORS = (None, Color.GREEN, Color.RED, Color.YELLOW)\nclass Driver:\n    def __init__(self, leftMotor, rightMotor, diameter, axle):\n        self.driver = DriveBase(leftMotor, rightMotor, diameter, axle)\n        self.x = 0\n        self.y = 0\n        self.speed = 0\n        self.steering = 0\n    def drive(self, speed, steering):\n        self.speed = speed",
        "detail": "python-prac.learn-python3.micropython.tank.main",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "python-prac.learn-python3.module.hello",
        "description": "python-prac.learn-python3.module.hello",
        "peekOfCode": "def test():\n    args = sys.argv\n    if len(args) == 1:\n        print(\"Hello, world!\")\n    elif len(args) == 2:\n        print(\"Hello, %s!\" % args[1])\n    else:\n        print(\"Too many arguments!\")\nif __name__ == \"__main__\":\n    test()",
        "detail": "python-prac.learn-python3.module.hello",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "python-prac.learn-python3.module.hello",
        "description": "python-prac.learn-python3.module.hello",
        "peekOfCode": "__author__ = \"Michael Liao\"\nimport sys\ndef test():\n    args = sys.argv\n    if len(args) == 1:\n        print(\"Hello, world!\")\n    elif len(args) == 2:\n        print(\"Hello, %s!\" % args[1])\n    else:\n        print(\"Too many arguments!\")",
        "detail": "python-prac.learn-python3.module.hello",
        "documentation": {}
    },
    {
        "label": "pid",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.do_folk",
        "description": "python-prac.learn-python3.multitask.do_folk",
        "peekOfCode": "pid = os.fork()\nif pid == 0:\n    print(\"I am child process (%s) and my parent is %s.\" % (os.getpid(), os.getppid()))\nelse:\n    print(\"I (%s) just created a child process (%s).\" % (os.getpid(), pid))",
        "detail": "python-prac.learn-python3.multitask.do_folk",
        "documentation": {}
    },
    {
        "label": "change_it",
        "kind": 2,
        "importPath": "python-prac.learn-python3.multitask.do_lock",
        "description": "python-prac.learn-python3.multitask.do_lock",
        "peekOfCode": "def change_it(n):\n    # :\n    global balance\n    balance = balance + n\n    balance = balance - n\ndef run_thread(n):\n    for i in range(100000):\n        # :\n        lock.acquire()\n        try:",
        "detail": "python-prac.learn-python3.multitask.do_lock",
        "documentation": {}
    },
    {
        "label": "run_thread",
        "kind": 2,
        "importPath": "python-prac.learn-python3.multitask.do_lock",
        "description": "python-prac.learn-python3.multitask.do_lock",
        "peekOfCode": "def run_thread(n):\n    for i in range(100000):\n        # :\n        lock.acquire()\n        try:\n            # :\n            change_it(n)\n        finally:\n            # :\n            lock.release()",
        "detail": "python-prac.learn-python3.multitask.do_lock",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.do_lock",
        "description": "python-prac.learn-python3.multitask.do_lock",
        "peekOfCode": "balance = 0\nlock = threading.Lock()\ndef change_it(n):\n    # :\n    global balance\n    balance = balance + n\n    balance = balance - n\ndef run_thread(n):\n    for i in range(100000):\n        # :",
        "detail": "python-prac.learn-python3.multitask.do_lock",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.do_lock",
        "description": "python-prac.learn-python3.multitask.do_lock",
        "peekOfCode": "lock = threading.Lock()\ndef change_it(n):\n    # :\n    global balance\n    balance = balance + n\n    balance = balance - n\ndef run_thread(n):\n    for i in range(100000):\n        # :\n        lock.acquire()",
        "detail": "python-prac.learn-python3.multitask.do_lock",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.do_lock",
        "description": "python-prac.learn-python3.multitask.do_lock",
        "peekOfCode": "t1 = threading.Thread(target=run_thread, args=(5,))\nt2 = threading.Thread(target=run_thread, args=(8,))\nt1.start()\nt2.start()\nt1.join()\nt2.join()\nprint(balance)",
        "detail": "python-prac.learn-python3.multitask.do_lock",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.do_lock",
        "description": "python-prac.learn-python3.multitask.do_lock",
        "peekOfCode": "t2 = threading.Thread(target=run_thread, args=(8,))\nt1.start()\nt2.start()\nt1.join()\nt2.join()\nprint(balance)",
        "detail": "python-prac.learn-python3.multitask.do_lock",
        "documentation": {}
    },
    {
        "label": "write",
        "kind": 2,
        "importPath": "python-prac.learn-python3.multitask.do_queue",
        "description": "python-prac.learn-python3.multitask.do_queue",
        "peekOfCode": "def write(q):\n    print(\"Process to write: %s\" % os.getpid())\n    for value in [\"A\", \"B\", \"C\"]:\n        print(\"Put %s to queue...\" % value)\n        q.put(value)\n        time.sleep(random.random())\n# :\ndef read(q):\n    print(\"Process to read: %s\" % os.getpid())\n    while True:",
        "detail": "python-prac.learn-python3.multitask.do_queue",
        "documentation": {}
    },
    {
        "label": "read",
        "kind": 2,
        "importPath": "python-prac.learn-python3.multitask.do_queue",
        "description": "python-prac.learn-python3.multitask.do_queue",
        "peekOfCode": "def read(q):\n    print(\"Process to read: %s\" % os.getpid())\n    while True:\n        value = q.get(True)\n        print(\"Get %s from queue.\" % value)\nif __name__ == \"__main__\":\n    # Queue，：\n    q = Queue()\n    pw = Process(target=write, args=(q,))\n    pr = Process(target=read, args=(q,))",
        "detail": "python-prac.learn-python3.multitask.do_queue",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.do_subprocess",
        "description": "python-prac.learn-python3.multitask.do_subprocess",
        "peekOfCode": "r = subprocess.call([\"nslookup\", \"www.python.org\"])\nprint(\"Exit code:\", r)\nprint(\"$ nslookup\")\np = subprocess.Popen(\n    [\"nslookup\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE\n)\noutput, err = p.communicate(b\"set q=mx\\npython.org\\nexit\\n\")\nprint(output.decode(\"utf-8\"))\nprint(\"Exit code:\", p.returncode)",
        "detail": "python-prac.learn-python3.multitask.do_subprocess",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.do_subprocess",
        "description": "python-prac.learn-python3.multitask.do_subprocess",
        "peekOfCode": "p = subprocess.Popen(\n    [\"nslookup\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE\n)\noutput, err = p.communicate(b\"set q=mx\\npython.org\\nexit\\n\")\nprint(output.decode(\"utf-8\"))\nprint(\"Exit code:\", p.returncode)",
        "detail": "python-prac.learn-python3.multitask.do_subprocess",
        "documentation": {}
    },
    {
        "label": "run_proc",
        "kind": 2,
        "importPath": "python-prac.learn-python3.multitask.multi_processing",
        "description": "python-prac.learn-python3.multitask.multi_processing",
        "peekOfCode": "def run_proc(name):\n    print(\"Run child process %s (%s)...\" % (name, os.getpid()))\nif __name__ == \"__main__\":\n    print(\"Parent process %s.\" % os.getpid())\n    p = Process(target=run_proc, args=(\"test\",))\n    print(\"Child process will start.\")\n    p.start()\n    p.join()\n    print(\"Child process end.\")",
        "detail": "python-prac.learn-python3.multitask.multi_processing",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 2,
        "importPath": "python-prac.learn-python3.multitask.multi_threading",
        "description": "python-prac.learn-python3.multitask.multi_threading",
        "peekOfCode": "def loop():\n    print(\"thread %s is running...\" % threading.current_thread().name)\n    n = 0\n    while n < 5:\n        n = n + 1\n        print(\"thread %s >>> %s\" % (threading.current_thread().name, n))\n        time.sleep(1)\n    print(\"thread %s ended.\" % threading.current_thread().name)\nprint(\"thread %s is running...\" % threading.current_thread().name)\nt = threading.Thread(target=loop, name=\"LoopThread\")",
        "detail": "python-prac.learn-python3.multitask.multi_threading",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.multi_threading",
        "description": "python-prac.learn-python3.multitask.multi_threading",
        "peekOfCode": "t = threading.Thread(target=loop, name=\"LoopThread\")\nt.start()\nt.join()\nprint(\"thread %s ended.\" % threading.current_thread().name)",
        "detail": "python-prac.learn-python3.multitask.multi_threading",
        "documentation": {}
    },
    {
        "label": "long_time_task",
        "kind": 2,
        "importPath": "python-prac.learn-python3.multitask.pooled_processing",
        "description": "python-prac.learn-python3.multitask.pooled_processing",
        "peekOfCode": "def long_time_task(name):\n    print(\"Run task %s (%s)...\" % (name, os.getpid()))\n    start = time.time()\n    time.sleep(random.random() * 3)\n    end = time.time()\n    print(\"Task %s runs %0.2f seconds.\" % (name, (end - start)))\nif __name__ == \"__main__\":\n    print(\"Parent process %s.\" % os.getpid())\n    p = Pool(4)\n    for i in range(5):",
        "detail": "python-prac.learn-python3.multitask.pooled_processing",
        "documentation": {}
    },
    {
        "label": "QueueManager",
        "kind": 6,
        "importPath": "python-prac.learn-python3.multitask.task_master",
        "description": "python-prac.learn-python3.multitask.task_master",
        "peekOfCode": "class QueueManager(BaseManager):\n    pass\n# Queue, callableQueue:\nQueueManager.register(\"get_task_queue\", callable=lambda: task_queue)\nQueueManager.register(\"get_result_queue\", callable=lambda: result_queue)\n# 5000, 'abc':\nmanager = QueueManager(address=(\"\", 5000), authkey=b\"abc\")\n# Queue:\nmanager.start()\n# Queue:",
        "detail": "python-prac.learn-python3.multitask.task_master",
        "documentation": {}
    },
    {
        "label": "task_queue",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.task_master",
        "description": "python-prac.learn-python3.multitask.task_master",
        "peekOfCode": "task_queue = queue.Queue()\n# :\nresult_queue = queue.Queue()\n# BaseManagerQueueManager:\nclass QueueManager(BaseManager):\n    pass\n# Queue, callableQueue:\nQueueManager.register(\"get_task_queue\", callable=lambda: task_queue)\nQueueManager.register(\"get_result_queue\", callable=lambda: result_queue)\n# 5000, 'abc':",
        "detail": "python-prac.learn-python3.multitask.task_master",
        "documentation": {}
    },
    {
        "label": "result_queue",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.task_master",
        "description": "python-prac.learn-python3.multitask.task_master",
        "peekOfCode": "result_queue = queue.Queue()\n# BaseManagerQueueManager:\nclass QueueManager(BaseManager):\n    pass\n# Queue, callableQueue:\nQueueManager.register(\"get_task_queue\", callable=lambda: task_queue)\nQueueManager.register(\"get_result_queue\", callable=lambda: result_queue)\n# 5000, 'abc':\nmanager = QueueManager(address=(\"\", 5000), authkey=b\"abc\")\n# Queue:",
        "detail": "python-prac.learn-python3.multitask.task_master",
        "documentation": {}
    },
    {
        "label": "manager",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.task_master",
        "description": "python-prac.learn-python3.multitask.task_master",
        "peekOfCode": "manager = QueueManager(address=(\"\", 5000), authkey=b\"abc\")\n# Queue:\nmanager.start()\n# Queue:\ntask = manager.get_task_queue()\nresult = manager.get_result_queue()\n# :\nfor i in range(10):\n    n = random.randint(0, 10000)\n    print(\"Put task %d...\" % n)",
        "detail": "python-prac.learn-python3.multitask.task_master",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.task_master",
        "description": "python-prac.learn-python3.multitask.task_master",
        "peekOfCode": "task = manager.get_task_queue()\nresult = manager.get_result_queue()\n# :\nfor i in range(10):\n    n = random.randint(0, 10000)\n    print(\"Put task %d...\" % n)\n    task.put(n)\n# result:\nprint(\"Try get results...\")\nfor i in range(10):",
        "detail": "python-prac.learn-python3.multitask.task_master",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.task_master",
        "description": "python-prac.learn-python3.multitask.task_master",
        "peekOfCode": "result = manager.get_result_queue()\n# :\nfor i in range(10):\n    n = random.randint(0, 10000)\n    print(\"Put task %d...\" % n)\n    task.put(n)\n# result:\nprint(\"Try get results...\")\nfor i in range(10):\n    r = result.get(timeout=10)",
        "detail": "python-prac.learn-python3.multitask.task_master",
        "documentation": {}
    },
    {
        "label": "QueueManager",
        "kind": 6,
        "importPath": "python-prac.learn-python3.multitask.task_worker",
        "description": "python-prac.learn-python3.multitask.task_worker",
        "peekOfCode": "class QueueManager(BaseManager):\n    pass\n# QueueManagerQueue，:\nQueueManager.register(\"get_task_queue\")\nQueueManager.register(\"get_result_queue\")\n# task_master.py:\nserver_addr = \"127.0.0.1\"\nprint(\"Connect to server %s...\" % server_addr)\n# task_master.py:\nm = QueueManager(address=(server_addr, 5000), authkey=b\"abc\")",
        "detail": "python-prac.learn-python3.multitask.task_worker",
        "documentation": {}
    },
    {
        "label": "server_addr",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.task_worker",
        "description": "python-prac.learn-python3.multitask.task_worker",
        "peekOfCode": "server_addr = \"127.0.0.1\"\nprint(\"Connect to server %s...\" % server_addr)\n# task_master.py:\nm = QueueManager(address=(server_addr, 5000), authkey=b\"abc\")\n# :\nm.connect()\n# Queue:\ntask = m.get_task_queue()\nresult = m.get_result_queue()\n# task,result:",
        "detail": "python-prac.learn-python3.multitask.task_worker",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.task_worker",
        "description": "python-prac.learn-python3.multitask.task_worker",
        "peekOfCode": "m = QueueManager(address=(server_addr, 5000), authkey=b\"abc\")\n# :\nm.connect()\n# Queue:\ntask = m.get_task_queue()\nresult = m.get_result_queue()\n# task,result:\nfor i in range(10):\n    try:\n        n = task.get(timeout=1)",
        "detail": "python-prac.learn-python3.multitask.task_worker",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.task_worker",
        "description": "python-prac.learn-python3.multitask.task_worker",
        "peekOfCode": "task = m.get_task_queue()\nresult = m.get_result_queue()\n# task,result:\nfor i in range(10):\n    try:\n        n = task.get(timeout=1)\n        print(\"run task %d * %d...\" % (n, n))\n        r = \"%d * %d = %d\" % (n, n, n * n)\n        time.sleep(1)\n        result.put(r)",
        "detail": "python-prac.learn-python3.multitask.task_worker",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.task_worker",
        "description": "python-prac.learn-python3.multitask.task_worker",
        "peekOfCode": "result = m.get_result_queue()\n# task,result:\nfor i in range(10):\n    try:\n        n = task.get(timeout=1)\n        print(\"run task %d * %d...\" % (n, n))\n        r = \"%d * %d = %d\" % (n, n, n * n)\n        time.sleep(1)\n        result.put(r)\n    except Queue.Empty:",
        "detail": "python-prac.learn-python3.multitask.task_worker",
        "documentation": {}
    },
    {
        "label": "process_student",
        "kind": 2,
        "importPath": "python-prac.learn-python3.multitask.use_threadlocal",
        "description": "python-prac.learn-python3.multitask.use_threadlocal",
        "peekOfCode": "def process_student():\n    # student:\n    std = local_school.student\n    print(\"Hello, %s (in %s)\" % (std, threading.current_thread().name))\ndef process_thread(name):\n    # ThreadLocalstudent:\n    local_school.student = name\n    process_student()\nt1 = threading.Thread(target=process_thread, args=(\"Alice\",), name=\"Thread-A\")\nt2 = threading.Thread(target=process_thread, args=(\"Bob\",), name=\"Thread-B\")",
        "detail": "python-prac.learn-python3.multitask.use_threadlocal",
        "documentation": {}
    },
    {
        "label": "process_thread",
        "kind": 2,
        "importPath": "python-prac.learn-python3.multitask.use_threadlocal",
        "description": "python-prac.learn-python3.multitask.use_threadlocal",
        "peekOfCode": "def process_thread(name):\n    # ThreadLocalstudent:\n    local_school.student = name\n    process_student()\nt1 = threading.Thread(target=process_thread, args=(\"Alice\",), name=\"Thread-A\")\nt2 = threading.Thread(target=process_thread, args=(\"Bob\",), name=\"Thread-B\")\nt1.start()\nt2.start()\nt1.join()\nt2.join()",
        "detail": "python-prac.learn-python3.multitask.use_threadlocal",
        "documentation": {}
    },
    {
        "label": "local_school",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.use_threadlocal",
        "description": "python-prac.learn-python3.multitask.use_threadlocal",
        "peekOfCode": "local_school = threading.local()\ndef process_student():\n    # student:\n    std = local_school.student\n    print(\"Hello, %s (in %s)\" % (std, threading.current_thread().name))\ndef process_thread(name):\n    # ThreadLocalstudent:\n    local_school.student = name\n    process_student()\nt1 = threading.Thread(target=process_thread, args=(\"Alice\",), name=\"Thread-A\")",
        "detail": "python-prac.learn-python3.multitask.use_threadlocal",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.use_threadlocal",
        "description": "python-prac.learn-python3.multitask.use_threadlocal",
        "peekOfCode": "t1 = threading.Thread(target=process_thread, args=(\"Alice\",), name=\"Thread-A\")\nt2 = threading.Thread(target=process_thread, args=(\"Bob\",), name=\"Thread-B\")\nt1.start()\nt2.start()\nt1.join()\nt2.join()",
        "detail": "python-prac.learn-python3.multitask.use_threadlocal",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "python-prac.learn-python3.multitask.use_threadlocal",
        "description": "python-prac.learn-python3.multitask.use_threadlocal",
        "peekOfCode": "t2 = threading.Thread(target=process_thread, args=(\"Bob\",), name=\"Thread-B\")\nt1.start()\nt2.start()\nt1.join()\nt2.join()",
        "detail": "python-prac.learn-python3.multitask.use_threadlocal",
        "documentation": {}
    },
    {
        "label": "fn",
        "kind": 2,
        "importPath": "python-prac.learn-python3.oop_advance.create_class_on_the_fly",
        "description": "python-prac.learn-python3.oop_advance.create_class_on_the_fly",
        "peekOfCode": "def fn(self, name=\"world\"):  #\n    print(\"Hello, %s.\" % name)\nHello = type(\"Hello\", (object,), dict(hello=fn))  # Hello class\nh = Hello()\nprint(\"call h.hello():\")\nh.hello()\nprint(\"type(Hello) =\", type(Hello))\nprint(\"type(h) =\", type(h))",
        "detail": "python-prac.learn-python3.oop_advance.create_class_on_the_fly",
        "documentation": {}
    },
    {
        "label": "Hello",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.create_class_on_the_fly",
        "description": "python-prac.learn-python3.oop_advance.create_class_on_the_fly",
        "peekOfCode": "Hello = type(\"Hello\", (object,), dict(hello=fn))  # Hello class\nh = Hello()\nprint(\"call h.hello():\")\nh.hello()\nprint(\"type(Hello) =\", type(Hello))\nprint(\"type(h) =\", type(h))",
        "detail": "python-prac.learn-python3.oop_advance.create_class_on_the_fly",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.create_class_on_the_fly",
        "description": "python-prac.learn-python3.oop_advance.create_class_on_the_fly",
        "peekOfCode": "h = Hello()\nprint(\"call h.hello():\")\nh.hello()\nprint(\"type(Hello) =\", type(Hello))\nprint(\"type(h) =\", type(h))",
        "detail": "python-prac.learn-python3.oop_advance.create_class_on_the_fly",
        "documentation": {}
    },
    {
        "label": "Field",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.orm",
        "description": "python-prac.learn-python3.oop_advance.orm",
        "peekOfCode": "class Field(object):\n    def __init__(self, name, column_type):\n        self.name = name\n        self.column_type = column_type\n    def __str__(self):\n        return \"<%s:%s>\" % (self.__class__.__name__, self.name)\nclass StringField(Field):\n    def __init__(self, name):\n        super(StringField, self).__init__(name, \"varchar(100)\")\nclass IntegerField(Field):",
        "detail": "python-prac.learn-python3.oop_advance.orm",
        "documentation": {}
    },
    {
        "label": "StringField",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.orm",
        "description": "python-prac.learn-python3.oop_advance.orm",
        "peekOfCode": "class StringField(Field):\n    def __init__(self, name):\n        super(StringField, self).__init__(name, \"varchar(100)\")\nclass IntegerField(Field):\n    def __init__(self, name):\n        super(IntegerField, self).__init__(name, \"bigint\")\nclass ModelMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        if name == \"Model\":\n            return type.__new__(cls, name, bases, attrs)",
        "detail": "python-prac.learn-python3.oop_advance.orm",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.orm",
        "description": "python-prac.learn-python3.oop_advance.orm",
        "peekOfCode": "class IntegerField(Field):\n    def __init__(self, name):\n        super(IntegerField, self).__init__(name, \"bigint\")\nclass ModelMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        if name == \"Model\":\n            return type.__new__(cls, name, bases, attrs)\n        print(\"Found model: %s\" % name)\n        mappings = dict()\n        for k, v in attrs.items():",
        "detail": "python-prac.learn-python3.oop_advance.orm",
        "documentation": {}
    },
    {
        "label": "ModelMetaclass",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.orm",
        "description": "python-prac.learn-python3.oop_advance.orm",
        "peekOfCode": "class ModelMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        if name == \"Model\":\n            return type.__new__(cls, name, bases, attrs)\n        print(\"Found model: %s\" % name)\n        mappings = dict()\n        for k, v in attrs.items():\n            if isinstance(v, Field):\n                print(\"Found mapping: %s ==> %s\" % (k, v))\n                mappings[k] = v",
        "detail": "python-prac.learn-python3.oop_advance.orm",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.orm",
        "description": "python-prac.learn-python3.oop_advance.orm",
        "peekOfCode": "class Model(dict, metaclass=ModelMetaclass):\n    def __init__(self, **kw):\n        super(Model, self).__init__(**kw)\n    def __getattr__(self, key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Model' object has no attribute '%s'\" % key)\n    def __setattr__(self, key, value):\n        self[key] = value",
        "detail": "python-prac.learn-python3.oop_advance.orm",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.orm",
        "description": "python-prac.learn-python3.oop_advance.orm",
        "peekOfCode": "class User(Model):\n    id = IntegerField(\"id\")\n    name = StringField(\"username\")\n    email = StringField(\"email\")\n    password = StringField(\"password\")\nu = User(id=12345, name=\"Michael\", email=\"test@orm.org\", password=\"my-pwd\")\nu.save()",
        "detail": "python-prac.learn-python3.oop_advance.orm",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.orm",
        "description": "python-prac.learn-python3.oop_advance.orm",
        "peekOfCode": "u = User(id=12345, name=\"Michael\", email=\"test@orm.org\", password=\"my-pwd\")\nu.save()",
        "detail": "python-prac.learn-python3.oop_advance.orm",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.special_call",
        "description": "python-prac.learn-python3.oop_advance.special_call",
        "peekOfCode": "class Student(object):\n    def __init__(self, name):\n        self.name = name\n    def __call__(self):\n        print(\"My name is %s.\" % self.name)\ns = Student(\"Michael\")\ns()",
        "detail": "python-prac.learn-python3.oop_advance.special_call",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.special_call",
        "description": "python-prac.learn-python3.oop_advance.special_call",
        "peekOfCode": "s = Student(\"Michael\")\ns()",
        "detail": "python-prac.learn-python3.oop_advance.special_call",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.special_getattr",
        "description": "python-prac.learn-python3.oop_advance.special_getattr",
        "peekOfCode": "class Student(object):\n    def __init__(self):\n        self.name = \"Michael\"\n    def __getattr__(self, attr):\n        if attr == \"score\":\n            return 99\n        if attr == \"age\":\n            return lambda: 25\n        raise AttributeError(\"'Student' object has no attribute '%s'\" % attr)\ns = Student()",
        "detail": "python-prac.learn-python3.oop_advance.special_getattr",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.special_getattr",
        "description": "python-prac.learn-python3.oop_advance.special_getattr",
        "peekOfCode": "s = Student()\nprint(s.name)\nprint(s.score)\nprint(s.age())\n# AttributeError: 'Student' object has no attribute 'grade'\nprint(s.grade)",
        "detail": "python-prac.learn-python3.oop_advance.special_getattr",
        "documentation": {}
    },
    {
        "label": "Fib",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.special_getitem",
        "description": "python-prac.learn-python3.oop_advance.special_getitem",
        "peekOfCode": "class Fib(object):\n    def __getitem__(self, n):\n        if isinstance(n, int):\n            a, b = 1, 1\n            for x in range(n):\n                a, b = b, a + b\n            return a\n        if isinstance(n, slice):\n            start = n.start\n            stop = n.stop",
        "detail": "python-prac.learn-python3.oop_advance.special_getitem",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.special_getitem",
        "description": "python-prac.learn-python3.oop_advance.special_getitem",
        "peekOfCode": "f = Fib()\nprint(f[0])\nprint(f[5])\nprint(f[100])\nprint(f[0:5])\nprint(f[:10])",
        "detail": "python-prac.learn-python3.oop_advance.special_getitem",
        "documentation": {}
    },
    {
        "label": "Fib",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.special_iter",
        "description": "python-prac.learn-python3.oop_advance.special_iter",
        "peekOfCode": "class Fib(object):\n    def __init__(self):\n        self.a, self.b = 0, 1  # a，b\n    def __iter__(self):\n        return self  # ，\n    def __next__(self):\n        self.a, self.b = self.b, self.a + self.b  #\n        if self.a > 100000:  #\n            raise StopIteration()\n        return self.a  #",
        "detail": "python-prac.learn-python3.oop_advance.special_iter",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.special_str",
        "description": "python-prac.learn-python3.oop_advance.special_str",
        "peekOfCode": "class Student(object):\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return \"Student object (name: %s)\" % self.name\n    __repr__ = __str__\nprint(Student(\"Michael\"))",
        "detail": "python-prac.learn-python3.oop_advance.special_str",
        "documentation": {}
    },
    {
        "label": "Weekday",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.use_enum",
        "description": "python-prac.learn-python3.oop_advance.use_enum",
        "peekOfCode": "class Weekday(Enum):\n    Sun = 0\n    Mon = 1\n    Tue = 2\n    Wed = 3\n    Thu = 4\n    Fri = 5\n    Sat = 6\nday1 = Weekday.Mon\nprint(\"day1 =\", day1)",
        "detail": "python-prac.learn-python3.oop_advance.use_enum",
        "documentation": {}
    },
    {
        "label": "day1",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_enum",
        "description": "python-prac.learn-python3.oop_advance.use_enum",
        "peekOfCode": "day1 = Weekday.Mon\nprint(\"day1 =\", day1)\nprint(\"Weekday.Tue =\", Weekday.Tue)\nprint(\"Weekday['Tue'] =\", Weekday[\"Tue\"])\nprint(\"Weekday.Tue.value =\", Weekday.Tue.value)\nprint(\"day1 == Weekday.Mon ?\", day1 == Weekday.Mon)\nprint(\"day1 == Weekday.Tue ?\", day1 == Weekday.Tue)\nprint(\"day1 == Weekday(1) ?\", day1 == Weekday(1))\nfor name, member in Weekday.__members__.items():\n    print(name, \"=>\", member)",
        "detail": "python-prac.learn-python3.oop_advance.use_enum",
        "documentation": {}
    },
    {
        "label": "Month",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_enum",
        "description": "python-prac.learn-python3.oop_advance.use_enum",
        "peekOfCode": "Month = Enum(\n    \"Month\",\n    (\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",",
        "detail": "python-prac.learn-python3.oop_advance.use_enum",
        "documentation": {}
    },
    {
        "label": "ListMetaclass",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.use_metaclass",
        "description": "python-prac.learn-python3.oop_advance.use_metaclass",
        "peekOfCode": "class ListMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        attrs[\"add\"] = lambda self, value: self.append(value)\n        return type.__new__(cls, name, bases, attrs)\n# ListMetaclass\nclass MyList(list, metaclass=ListMetaclass):\n    pass\nL = MyList()\nL.add(1)\nL.add(2)",
        "detail": "python-prac.learn-python3.oop_advance.use_metaclass",
        "documentation": {}
    },
    {
        "label": "MyList",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.use_metaclass",
        "description": "python-prac.learn-python3.oop_advance.use_metaclass",
        "peekOfCode": "class MyList(list, metaclass=ListMetaclass):\n    pass\nL = MyList()\nL.add(1)\nL.add(2)\nL.add(3)\nL.add(\"END\")\nprint(L)",
        "detail": "python-prac.learn-python3.oop_advance.use_metaclass",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_metaclass",
        "description": "python-prac.learn-python3.oop_advance.use_metaclass",
        "peekOfCode": "L = MyList()\nL.add(1)\nL.add(2)\nL.add(3)\nL.add(\"END\")\nprint(L)",
        "detail": "python-prac.learn-python3.oop_advance.use_metaclass",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.use_property",
        "description": "python-prac.learn-python3.oop_advance.use_property",
        "peekOfCode": "class Student(object):\n    @property\n    def score(self):\n        return self._score\n    @score.setter\n    def score(self, value):\n        if not isinstance(value, int):\n            raise ValueError(\"score must be an integer!\")\n        if value < 0 or value > 100:\n            raise ValueError(\"score must between 0 ~ 100!\")",
        "detail": "python-prac.learn-python3.oop_advance.use_property",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_property",
        "description": "python-prac.learn-python3.oop_advance.use_property",
        "peekOfCode": "s = Student()\ns.score = 60\nprint(\"s.score =\", s.score)\n# ValueError: score must between 0 ~ 100!\ns.score = 9999",
        "detail": "python-prac.learn-python3.oop_advance.use_property",
        "documentation": {}
    },
    {
        "label": "s.score",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_property",
        "description": "python-prac.learn-python3.oop_advance.use_property",
        "peekOfCode": "s.score = 60\nprint(\"s.score =\", s.score)\n# ValueError: score must between 0 ~ 100!\ns.score = 9999",
        "detail": "python-prac.learn-python3.oop_advance.use_property",
        "documentation": {}
    },
    {
        "label": "s.score",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_property",
        "description": "python-prac.learn-python3.oop_advance.use_property",
        "peekOfCode": "s.score = 9999",
        "detail": "python-prac.learn-python3.oop_advance.use_property",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.use_slots",
        "description": "python-prac.learn-python3.oop_advance.use_slots",
        "peekOfCode": "class Student(object):\n    __slots__ = (\"name\", \"age\")  # tuple\nclass GraduateStudent(Student):\n    pass\ns = Student()  #\ns.name = \"Michael\"  # 'name'\ns.age = 25  # 'age'\n# ERROR: AttributeError: 'Student' object has no attribute 'score'\ntry:\n    s.score = 99",
        "detail": "python-prac.learn-python3.oop_advance.use_slots",
        "documentation": {}
    },
    {
        "label": "GraduateStudent",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_advance.use_slots",
        "description": "python-prac.learn-python3.oop_advance.use_slots",
        "peekOfCode": "class GraduateStudent(Student):\n    pass\ns = Student()  #\ns.name = \"Michael\"  # 'name'\ns.age = 25  # 'age'\n# ERROR: AttributeError: 'Student' object has no attribute 'score'\ntry:\n    s.score = 99\nexcept AttributeError as e:\n    print(\"AttributeError:\", e)",
        "detail": "python-prac.learn-python3.oop_advance.use_slots",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_slots",
        "description": "python-prac.learn-python3.oop_advance.use_slots",
        "peekOfCode": "s = Student()  #\ns.name = \"Michael\"  # 'name'\ns.age = 25  # 'age'\n# ERROR: AttributeError: 'Student' object has no attribute 'score'\ntry:\n    s.score = 99\nexcept AttributeError as e:\n    print(\"AttributeError:\", e)\ng = GraduateStudent()\ng.score = 99",
        "detail": "python-prac.learn-python3.oop_advance.use_slots",
        "documentation": {}
    },
    {
        "label": "s.name",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_slots",
        "description": "python-prac.learn-python3.oop_advance.use_slots",
        "peekOfCode": "s.name = \"Michael\"  # 'name'\ns.age = 25  # 'age'\n# ERROR: AttributeError: 'Student' object has no attribute 'score'\ntry:\n    s.score = 99\nexcept AttributeError as e:\n    print(\"AttributeError:\", e)\ng = GraduateStudent()\ng.score = 99\nprint(\"g.score =\", g.score)",
        "detail": "python-prac.learn-python3.oop_advance.use_slots",
        "documentation": {}
    },
    {
        "label": "s.age",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_slots",
        "description": "python-prac.learn-python3.oop_advance.use_slots",
        "peekOfCode": "s.age = 25  # 'age'\n# ERROR: AttributeError: 'Student' object has no attribute 'score'\ntry:\n    s.score = 99\nexcept AttributeError as e:\n    print(\"AttributeError:\", e)\ng = GraduateStudent()\ng.score = 99\nprint(\"g.score =\", g.score)",
        "detail": "python-prac.learn-python3.oop_advance.use_slots",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_slots",
        "description": "python-prac.learn-python3.oop_advance.use_slots",
        "peekOfCode": "g = GraduateStudent()\ng.score = 99\nprint(\"g.score =\", g.score)",
        "detail": "python-prac.learn-python3.oop_advance.use_slots",
        "documentation": {}
    },
    {
        "label": "g.score",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_advance.use_slots",
        "description": "python-prac.learn-python3.oop_advance.use_slots",
        "peekOfCode": "g.score = 99\nprint(\"g.score =\", g.score)",
        "detail": "python-prac.learn-python3.oop_advance.use_slots",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_basic.animals",
        "description": "python-prac.learn-python3.oop_basic.animals",
        "peekOfCode": "class Animal(object):\n    def run(self):\n        print(\"Animal is running...\")\nclass Dog(Animal):\n    def run(self):\n        print(\"Dog is running...\")\nclass Cat(Animal):\n    def run(self):\n        print(\"Cat is running...\")\ndef run_twice(animal):",
        "detail": "python-prac.learn-python3.oop_basic.animals",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_basic.animals",
        "description": "python-prac.learn-python3.oop_basic.animals",
        "peekOfCode": "class Dog(Animal):\n    def run(self):\n        print(\"Dog is running...\")\nclass Cat(Animal):\n    def run(self):\n        print(\"Cat is running...\")\ndef run_twice(animal):\n    animal.run()\n    animal.run()\na = Animal()",
        "detail": "python-prac.learn-python3.oop_basic.animals",
        "documentation": {}
    },
    {
        "label": "Cat",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_basic.animals",
        "description": "python-prac.learn-python3.oop_basic.animals",
        "peekOfCode": "class Cat(Animal):\n    def run(self):\n        print(\"Cat is running...\")\ndef run_twice(animal):\n    animal.run()\n    animal.run()\na = Animal()\nd = Dog()\nc = Cat()\nprint(\"a is Animal?\", isinstance(a, Animal))",
        "detail": "python-prac.learn-python3.oop_basic.animals",
        "documentation": {}
    },
    {
        "label": "run_twice",
        "kind": 2,
        "importPath": "python-prac.learn-python3.oop_basic.animals",
        "description": "python-prac.learn-python3.oop_basic.animals",
        "peekOfCode": "def run_twice(animal):\n    animal.run()\n    animal.run()\na = Animal()\nd = Dog()\nc = Cat()\nprint(\"a is Animal?\", isinstance(a, Animal))\nprint(\"a is Dog?\", isinstance(a, Dog))\nprint(\"a is Cat?\", isinstance(a, Cat))\nprint(\"d is Animal?\", isinstance(d, Animal))",
        "detail": "python-prac.learn-python3.oop_basic.animals",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.animals",
        "description": "python-prac.learn-python3.oop_basic.animals",
        "peekOfCode": "a = Animal()\nd = Dog()\nc = Cat()\nprint(\"a is Animal?\", isinstance(a, Animal))\nprint(\"a is Dog?\", isinstance(a, Dog))\nprint(\"a is Cat?\", isinstance(a, Cat))\nprint(\"d is Animal?\", isinstance(d, Animal))\nprint(\"d is Dog?\", isinstance(d, Dog))\nprint(\"d is Cat?\", isinstance(d, Cat))\nrun_twice(c)",
        "detail": "python-prac.learn-python3.oop_basic.animals",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.animals",
        "description": "python-prac.learn-python3.oop_basic.animals",
        "peekOfCode": "d = Dog()\nc = Cat()\nprint(\"a is Animal?\", isinstance(a, Animal))\nprint(\"a is Dog?\", isinstance(a, Dog))\nprint(\"a is Cat?\", isinstance(a, Cat))\nprint(\"d is Animal?\", isinstance(d, Animal))\nprint(\"d is Dog?\", isinstance(d, Dog))\nprint(\"d is Cat?\", isinstance(d, Cat))\nrun_twice(c)",
        "detail": "python-prac.learn-python3.oop_basic.animals",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.animals",
        "description": "python-prac.learn-python3.oop_basic.animals",
        "peekOfCode": "c = Cat()\nprint(\"a is Animal?\", isinstance(a, Animal))\nprint(\"a is Dog?\", isinstance(a, Dog))\nprint(\"a is Cat?\", isinstance(a, Cat))\nprint(\"d is Animal?\", isinstance(d, Animal))\nprint(\"d is Dog?\", isinstance(d, Dog))\nprint(\"d is Cat?\", isinstance(d, Cat))\nrun_twice(c)",
        "detail": "python-prac.learn-python3.oop_basic.animals",
        "documentation": {}
    },
    {
        "label": "MyObject",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_basic.attrs",
        "description": "python-prac.learn-python3.oop_basic.attrs",
        "peekOfCode": "class MyObject(object):\n    def __init__(self):\n        self.x = 9\n    def power(self):\n        return self.x * self.x\nobj = MyObject()\nprint(\"hasattr(obj, 'x') =\", hasattr(obj, \"x\"))  # 'x'？\nprint(\"hasattr(obj, 'y') =\", hasattr(obj, \"y\"))  # 'y'？\nsetattr(obj, \"y\", 19)  # 'y'\nprint(\"hasattr(obj, 'y') =\", hasattr(obj, \"y\"))  # 'y'？",
        "detail": "python-prac.learn-python3.oop_basic.attrs",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.attrs",
        "description": "python-prac.learn-python3.oop_basic.attrs",
        "peekOfCode": "obj = MyObject()\nprint(\"hasattr(obj, 'x') =\", hasattr(obj, \"x\"))  # 'x'？\nprint(\"hasattr(obj, 'y') =\", hasattr(obj, \"y\"))  # 'y'？\nsetattr(obj, \"y\", 19)  # 'y'\nprint(\"hasattr(obj, 'y') =\", hasattr(obj, \"y\"))  # 'y'？\nprint(\"getattr(obj, 'y') =\", getattr(obj, \"y\"))  # 'y'\nprint(\"obj.y =\", obj.y)  # 'y'\nprint(\"getattr(obj, 'z') =\", getattr(obj, \"z\", 404))  # 'z'，，404\nf = getattr(obj, \"power\")  # 'power'\nprint(f)",
        "detail": "python-prac.learn-python3.oop_basic.attrs",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.attrs",
        "description": "python-prac.learn-python3.oop_basic.attrs",
        "peekOfCode": "f = getattr(obj, \"power\")  # 'power'\nprint(f)\nprint(f())",
        "detail": "python-prac.learn-python3.oop_basic.attrs",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_basic.get_instance",
        "description": "python-prac.learn-python3.oop_basic.get_instance",
        "peekOfCode": "class Animal(object):\n    pass\nclass Dog(Animal):\n    pass\nclass Husky(Dog):\n    pass\na = Animal()\nd = Dog()\nh = Husky()\nprint(\"check a = Animal()...\")",
        "detail": "python-prac.learn-python3.oop_basic.get_instance",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_basic.get_instance",
        "description": "python-prac.learn-python3.oop_basic.get_instance",
        "peekOfCode": "class Dog(Animal):\n    pass\nclass Husky(Dog):\n    pass\na = Animal()\nd = Dog()\nh = Husky()\nprint(\"check a = Animal()...\")\nprint(\"isinstance(a, Animal) =\", isinstance(a, Animal))\nprint(\"isinstance(a, Dog) =\", isinstance(a, Dog))",
        "detail": "python-prac.learn-python3.oop_basic.get_instance",
        "documentation": {}
    },
    {
        "label": "Husky",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_basic.get_instance",
        "description": "python-prac.learn-python3.oop_basic.get_instance",
        "peekOfCode": "class Husky(Dog):\n    pass\na = Animal()\nd = Dog()\nh = Husky()\nprint(\"check a = Animal()...\")\nprint(\"isinstance(a, Animal) =\", isinstance(a, Animal))\nprint(\"isinstance(a, Dog) =\", isinstance(a, Dog))\nprint(\"isinstance(a, Husky) =\", isinstance(a, Husky))\nprint(\"check d = Dog()...\")",
        "detail": "python-prac.learn-python3.oop_basic.get_instance",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.get_instance",
        "description": "python-prac.learn-python3.oop_basic.get_instance",
        "peekOfCode": "a = Animal()\nd = Dog()\nh = Husky()\nprint(\"check a = Animal()...\")\nprint(\"isinstance(a, Animal) =\", isinstance(a, Animal))\nprint(\"isinstance(a, Dog) =\", isinstance(a, Dog))\nprint(\"isinstance(a, Husky) =\", isinstance(a, Husky))\nprint(\"check d = Dog()...\")\nprint(\"isinstance(d, Animal) =\", isinstance(d, Animal))\nprint(\"isinstance(d, Dog) =\", isinstance(d, Dog))",
        "detail": "python-prac.learn-python3.oop_basic.get_instance",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.get_instance",
        "description": "python-prac.learn-python3.oop_basic.get_instance",
        "peekOfCode": "d = Dog()\nh = Husky()\nprint(\"check a = Animal()...\")\nprint(\"isinstance(a, Animal) =\", isinstance(a, Animal))\nprint(\"isinstance(a, Dog) =\", isinstance(a, Dog))\nprint(\"isinstance(a, Husky) =\", isinstance(a, Husky))\nprint(\"check d = Dog()...\")\nprint(\"isinstance(d, Animal) =\", isinstance(d, Animal))\nprint(\"isinstance(d, Dog) =\", isinstance(d, Dog))\nprint(\"isinstance(d, Husky) =\", isinstance(d, Husky))",
        "detail": "python-prac.learn-python3.oop_basic.get_instance",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.get_instance",
        "description": "python-prac.learn-python3.oop_basic.get_instance",
        "peekOfCode": "h = Husky()\nprint(\"check a = Animal()...\")\nprint(\"isinstance(a, Animal) =\", isinstance(a, Animal))\nprint(\"isinstance(a, Dog) =\", isinstance(a, Dog))\nprint(\"isinstance(a, Husky) =\", isinstance(a, Husky))\nprint(\"check d = Dog()...\")\nprint(\"isinstance(d, Animal) =\", isinstance(d, Animal))\nprint(\"isinstance(d, Dog) =\", isinstance(d, Dog))\nprint(\"isinstance(d, Husky) =\", isinstance(d, Husky))\nprint(\"check h = Husky()...\")",
        "detail": "python-prac.learn-python3.oop_basic.get_instance",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_basic.protected_student",
        "description": "python-prac.learn-python3.oop_basic.protected_student",
        "peekOfCode": "class Student(object):\n    def __init__(self, name, score):\n        self.__name = name\n        self.__score = score\n    def get_name(self):\n        return self.__name\n    def get_score(self):\n        return self.__score\n    def set_score(self, score):\n        if 0 <= score <= 100:",
        "detail": "python-prac.learn-python3.oop_basic.protected_student",
        "documentation": {}
    },
    {
        "label": "bart",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.protected_student",
        "description": "python-prac.learn-python3.oop_basic.protected_student",
        "peekOfCode": "bart = Student(\"Bart Simpson\", 59)\nprint(\"bart.get_name() =\", bart.get_name())\nbart.set_score(60)\nprint(\"bart.get_score() =\", bart.get_score())\nprint(\"DO NOT use bart._Student__name:\", bart._Student__name)",
        "detail": "python-prac.learn-python3.oop_basic.protected_student",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "python-prac.learn-python3.oop_basic.student",
        "description": "python-prac.learn-python3.oop_basic.student",
        "peekOfCode": "class Student(object):\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n    def print_score(self):\n        print(\"%s: %s\" % (self.name, self.score))\n    def get_grade(self):\n        if self.score >= 90:\n            return \"A\"\n        elif self.score >= 60:",
        "detail": "python-prac.learn-python3.oop_basic.student",
        "documentation": {}
    },
    {
        "label": "bart",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.student",
        "description": "python-prac.learn-python3.oop_basic.student",
        "peekOfCode": "bart = Student(\"Bart Simpson\", 59)\nlisa = Student(\"Lisa Simpson\", 87)\nprint(\"bart.name =\", bart.name)\nprint(\"bart.score =\", bart.score)\nbart.print_score()\nprint(\"grade of Bart:\", bart.get_grade())\nprint(\"grade of Lisa:\", lisa.get_grade())",
        "detail": "python-prac.learn-python3.oop_basic.student",
        "documentation": {}
    },
    {
        "label": "lisa",
        "kind": 5,
        "importPath": "python-prac.learn-python3.oop_basic.student",
        "description": "python-prac.learn-python3.oop_basic.student",
        "peekOfCode": "lisa = Student(\"Lisa Simpson\", 87)\nprint(\"bart.name =\", bart.name)\nprint(\"bart.score =\", bart.score)\nbart.print_score()\nprint(\"grade of Bart:\", bart.get_grade())\nprint(\"grade of Lisa:\", lisa.get_grade())",
        "detail": "python-prac.learn-python3.oop_basic.student",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "python-prac.learn-python3.regex.regex",
        "description": "python-prac.learn-python3.regex.regex",
        "peekOfCode": "m = re.match(r\"^(\\d{3})-(\\d{3,8})$\", \"010-12345\")\nprint(m.group(1), m.group(2))\nt = \"19:05:30\"\nprint(\"Test:\", t)\nm = re.match(\n    r\"^(0[0-9]|1[0-9]|2[0-3]|[0-9])\\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$\",\n    t,\n)\nprint(m.groups())",
        "detail": "python-prac.learn-python3.regex.regex",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-prac.learn-python3.regex.regex",
        "description": "python-prac.learn-python3.regex.regex",
        "peekOfCode": "t = \"19:05:30\"\nprint(\"Test:\", t)\nm = re.match(\n    r\"^(0[0-9]|1[0-9]|2[0-3]|[0-9])\\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$\",\n    t,\n)\nprint(m.groups())",
        "detail": "python-prac.learn-python3.regex.regex",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "python-prac.learn-python3.regex.regex",
        "description": "python-prac.learn-python3.regex.regex",
        "peekOfCode": "m = re.match(\n    r\"^(0[0-9]|1[0-9]|2[0-3]|[0-9])\\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$\",\n    t,\n)\nprint(m.groups())",
        "detail": "python-prac.learn-python3.regex.regex",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.socket.do_tcp",
        "description": "python-prac.learn-python3.socket.do_tcp",
        "peekOfCode": "s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# :\ns.connect((\"www.sina.com.cn\", 80))\n# :\ns.send(b\"GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n\")\n# :\nbuffer = []\nwhile True:\n    # 1k:\n    d = s.recv(1024)",
        "detail": "python-prac.learn-python3.socket.do_tcp",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "python-prac.learn-python3.socket.do_tcp",
        "description": "python-prac.learn-python3.socket.do_tcp",
        "peekOfCode": "buffer = []\nwhile True:\n    # 1k:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b\"\".join(buffer)\n# :",
        "detail": "python-prac.learn-python3.socket.do_tcp",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-prac.learn-python3.socket.do_tcp",
        "description": "python-prac.learn-python3.socket.do_tcp",
        "peekOfCode": "data = b\"\".join(buffer)\n# :\ns.close()\nheader, html = data.split(b\"\\r\\n\\r\\n\", 1)\nprint(header.decode(\"utf-8\"))\n# :\nwith open(\"sina.html\", \"wb\") as f:\n    f.write(html)",
        "detail": "python-prac.learn-python3.socket.do_tcp",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.socket.udp_client",
        "description": "python-prac.learn-python3.socket.udp_client",
        "peekOfCode": "s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nfor data in [b\"Michael\", b\"Tracy\", b\"Sarah\"]:\n    # :\n    s.sendto(data, (\"127.0.0.1\", 9999))\n    # :\n    print(s.recv(1024).decode(\"utf-8\"))\ns.close()",
        "detail": "python-prac.learn-python3.socket.udp_client",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.learn-python3.socket.udp_server",
        "description": "python-prac.learn-python3.socket.udp_server",
        "peekOfCode": "s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n# :\ns.bind((\"127.0.0.1\", 9999))\nprint(\"Bind UDP on 9999...\")\nwhile True:\n    # :\n    data, addr = s.recvfrom(1024)\n    print(\"Received from %s:%s.\" % addr)\n    reply = \"Hello, %s!\" % data.decode(\"utf-8\")\n    s.sendto(reply.encode(\"utf-8\"), addr)",
        "detail": "python-prac.learn-python3.socket.udp_server",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 6,
        "importPath": "python-prac.learn-python3.test.dict_doctest",
        "description": "python-prac.learn-python3.test.dict_doctest",
        "peekOfCode": "class Dict(dict):\n    \"\"\"\n    Simple dict but also support access as x.y style.\n    >>> d1 = Dict()\n    >>> d1['x'] = 100\n    >>> d1.x\n    100\n    >>> d1.y = 200\n    >>> d1['y']\n    200",
        "detail": "python-prac.learn-python3.test.dict_doctest",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 6,
        "importPath": "python-prac.learn-python3.test.dict_unittest",
        "description": "python-prac.learn-python3.test.dict_unittest",
        "peekOfCode": "class Dict(dict):\n    def __init__(self, **kw):\n        super(Dict, self).__init__(**kw)\n    def __getattr__(self, key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Dict' object has no attribute '%s'\" % key)\n    def __setattr__(self, key, value):\n        self[key] = value",
        "detail": "python-prac.learn-python3.test.dict_unittest",
        "documentation": {}
    },
    {
        "label": "TestDict",
        "kind": 6,
        "importPath": "python-prac.learn-python3.test.dict_unittest",
        "description": "python-prac.learn-python3.test.dict_unittest",
        "peekOfCode": "class TestDict(unittest.TestCase):\n    def setUp(self):\n        print(\"setUp...\")\n    def tearDown(self):\n        print(\"tearDown...\")\n    def test_init(self):\n        d = Dict(a=1, b=\"test\")\n        self.assertEqual(d.a, 1)\n        self.assertEqual(d.b, \"test\")\n        self.assertTrue(isinstance(d, dict))",
        "detail": "python-prac.learn-python3.test.dict_unittest",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "python-prac.learn-python3.web.mvc.app",
        "description": "python-prac.learn-python3.web.mvc.app",
        "peekOfCode": "def home():\n    return render_template(\"home.html\")\n@app.route(\"/signin\", methods=[\"GET\"])\ndef signin_form():\n    return render_template(\"form.html\")\n@app.route(\"/signin\", methods=[\"POST\"])\ndef signin():\n    username = request.form[\"username\"]\n    password = request.form[\"password\"]\n    if username == \"admin\" and password == \"password\":",
        "detail": "python-prac.learn-python3.web.mvc.app",
        "documentation": {}
    },
    {
        "label": "signin_form",
        "kind": 2,
        "importPath": "python-prac.learn-python3.web.mvc.app",
        "description": "python-prac.learn-python3.web.mvc.app",
        "peekOfCode": "def signin_form():\n    return render_template(\"form.html\")\n@app.route(\"/signin\", methods=[\"POST\"])\ndef signin():\n    username = request.form[\"username\"]\n    password = request.form[\"password\"]\n    if username == \"admin\" and password == \"password\":\n        return render_template(\"signin-ok.html\", username=username)\n    return render_template(\n        \"form.html\", message=\"Bad username or password\", username=username",
        "detail": "python-prac.learn-python3.web.mvc.app",
        "documentation": {}
    },
    {
        "label": "signin",
        "kind": 2,
        "importPath": "python-prac.learn-python3.web.mvc.app",
        "description": "python-prac.learn-python3.web.mvc.app",
        "peekOfCode": "def signin():\n    username = request.form[\"username\"]\n    password = request.form[\"password\"]\n    if username == \"admin\" and password == \"password\":\n        return render_template(\"signin-ok.html\", username=username)\n    return render_template(\n        \"form.html\", message=\"Bad username or password\", username=username\n    )\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "python-prac.learn-python3.web.mvc.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "python-prac.learn-python3.web.mvc.app",
        "description": "python-prac.learn-python3.web.mvc.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef home():\n    return render_template(\"home.html\")\n@app.route(\"/signin\", methods=[\"GET\"])\ndef signin_form():\n    return render_template(\"form.html\")\n@app.route(\"/signin\", methods=[\"POST\"])\ndef signin():\n    username = request.form[\"username\"]",
        "detail": "python-prac.learn-python3.web.mvc.app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "python-prac.learn-python3.web.do_flask",
        "description": "python-prac.learn-python3.web.do_flask",
        "peekOfCode": "def home():\n    return \"<h1>Home</h1>\"\n@app.route(\"/signin\", methods=[\"GET\"])\ndef signin_form():\n    return \"\"\"<form action=\"/signin\" method=\"post\">\n              <p><input name=\"username\"></p>\n              <p><input name=\"password\" type=\"password\"></p>\n              <p><button type=\"submit\">Sign In</button></p>\n              </form>\"\"\"\n@app.route(\"/signin\", methods=[\"POST\"])",
        "detail": "python-prac.learn-python3.web.do_flask",
        "documentation": {}
    },
    {
        "label": "signin_form",
        "kind": 2,
        "importPath": "python-prac.learn-python3.web.do_flask",
        "description": "python-prac.learn-python3.web.do_flask",
        "peekOfCode": "def signin_form():\n    return \"\"\"<form action=\"/signin\" method=\"post\">\n              <p><input name=\"username\"></p>\n              <p><input name=\"password\" type=\"password\"></p>\n              <p><button type=\"submit\">Sign In</button></p>\n              </form>\"\"\"\n@app.route(\"/signin\", methods=[\"POST\"])\ndef signin():\n    # request：\n    if request.form[\"username\"] == \"admin\" and request.form[\"password\"] == \"password\":",
        "detail": "python-prac.learn-python3.web.do_flask",
        "documentation": {}
    },
    {
        "label": "signin",
        "kind": 2,
        "importPath": "python-prac.learn-python3.web.do_flask",
        "description": "python-prac.learn-python3.web.do_flask",
        "peekOfCode": "def signin():\n    # request：\n    if request.form[\"username\"] == \"admin\" and request.form[\"password\"] == \"password\":\n        return \"<h3>Hello, admin!</h3>\"\n    return \"<h3>Bad username or password.</h3>\"\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "python-prac.learn-python3.web.do_flask",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "python-prac.learn-python3.web.do_flask",
        "description": "python-prac.learn-python3.web.do_flask",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef home():\n    return \"<h1>Home</h1>\"\n@app.route(\"/signin\", methods=[\"GET\"])\ndef signin_form():\n    return \"\"\"<form action=\"/signin\" method=\"post\">\n              <p><input name=\"username\"></p>\n              <p><input name=\"password\" type=\"password\"></p>\n              <p><button type=\"submit\">Sign In</button></p>",
        "detail": "python-prac.learn-python3.web.do_flask",
        "documentation": {}
    },
    {
        "label": "httpd",
        "kind": 5,
        "importPath": "python-prac.learn-python3.web.do_wsgi",
        "description": "python-prac.learn-python3.web.do_wsgi",
        "peekOfCode": "httpd = make_server(\"\", 8000, application)\nprint(\"Serving HTTP on port 8000...\")\nhttpd.serve_forever()",
        "detail": "python-prac.learn-python3.web.do_wsgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 2,
        "importPath": "python-prac.learn-python3.web.hello",
        "description": "python-prac.learn-python3.web.hello",
        "peekOfCode": "def application(environ, start_response):\n    start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n    body = \"<h1>Hello, %s!</h1>\" % (environ[\"PATH_INFO\"][1:] or \"web\")\n    return [body.encode(\"utf-8\")]",
        "detail": "python-prac.learn-python3.web.hello",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "python-prac.learn-python3.chinese-char",
        "description": "python-prac.learn-python3.chinese-char",
        "peekOfCode": "def translate(str):\n    out = set()\n    # correlating pretreatment process, including converted to Unicode, etc.\n    line = str.strip(). decode('utf-8', 'ignore')\n         # Chinese encoding range is: \\ u4e00 to \\ u9fa5\n    p2 = re.compile(ur '[^ \\ u4e00- \\ u9fa5]')\n    zh = \" \".join(p2.split(line)).strip()\n         # Zh = \"\\ n\" .join (zh.split ()) #dsds obtained after correlation processing of Chinese text\n    for s in zh.split():\n                 # after correlation processing to obtain the Chinese text",
        "detail": "python-prac.learn-python3.chinese-char",
        "documentation": {}
    },
    {
        "label": "extract_file",
        "kind": 2,
        "importPath": "python-prac.learn-python3.chinese-char",
        "description": "python-prac.learn-python3.chinese-char",
        "peekOfCode": "def extract_file(path):\n    result = set()\n    try:\n                 f = open(path)  # open file\n        lines = f.readlines()\n        for line in lines:\n            string = translate(line)\n            if string:\n                result.update(string)\n    except Exception as e:",
        "detail": "python-prac.learn-python3.chinese-char",
        "documentation": {}
    },
    {
        "label": "extract",
        "kind": 2,
        "importPath": "python-prac.learn-python3.chinese-char",
        "description": "python-prac.learn-python3.chinese-char",
        "peekOfCode": "def extract(path):\n    result = set()\n    files = os.listdir(path)\n    for file in files:\n        if not file.startswith(\".\"):\n                         if not os.path.isdir (path + \"/\" + file): # judge whether it is a folder, not the folder only open ssgsg determine whether it is a folder, not the folder only open\n                sub_file = extract_file(path + \"/\" + file)\n                if sub_file:\n                    result.update(sub_file)\n            else:",
        "detail": "python-prac.learn-python3.chinese-char",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Add_Binary",
        "description": "python-prac.leetcode.Add_Binary",
        "peekOfCode": "class Solution:\n    def addBinary(self, a, b):\n        x, y = int(a, 2), int(b, 2)\n        while y:\n            answer = x ^ y\n            carry = (x & y) << 1\n            x, y = answer, carry\n        return bin(x)\nif __name__ == \"__main__\":\n    a = \"1010\"",
        "detail": "python-prac.leetcode.Add_Binary",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Add_Strings",
        "description": "python-prac.leetcode.Add_Strings",
        "peekOfCode": "class Solution:\n    def addStrings(self, num1, num2):\n        if len(num1) < len(num2):\n            return self.sumNums(num1, num2)\n        else:\n            return self.sumNums(num2, num1)\n    def sumNums(self, low, high):\n        dict = {\n            \"0\": 0,\n            \"1\": 1,",
        "detail": "python-prac.leetcode.Add_Strings",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Add_Two_LinkedList_without_reverse",
        "description": "python-prac.leetcode.Add_Two_LinkedList_without_reverse",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        def ll_to_l(l):\n            num = \"\"\n            while l:\n                num += str(l.val)",
        "detail": "python-prac.leetcode.Add_Two_LinkedList_without_reverse",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Add_Two_LinkedList_without_reverse",
        "description": "python-prac.leetcode.Add_Two_LinkedList_without_reverse",
        "peekOfCode": "class Solution:\n    def addTwoNumbers(self, l1, l2):\n        def ll_to_l(l):\n            num = \"\"\n            while l:\n                num += str(l.val)\n                l = l.next\n            return int(num)\n        n1 = ll_to_l(l1)\n        n2 = ll_to_l(l2)",
        "detail": "python-prac.leetcode.Add_Two_LinkedList_without_reverse",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Add_Two_Linked_List_Reverse",
        "description": "python-prac.leetcode.Add_Two_Linked_List_Reverse",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution(object):\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        list1 = l1\n        list2 = l2\n        res = []\n        carry = 0",
        "detail": "python-prac.leetcode.Add_Two_Linked_List_Reverse",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Add_Two_Linked_List_Reverse",
        "description": "python-prac.leetcode.Add_Two_Linked_List_Reverse",
        "peekOfCode": "class Solution(object):\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        list1 = l1\n        list2 = l2\n        res = []\n        carry = 0\n        while list1 is not None and list2 is not None:\n            currSum = list1.val + list2.val + carry\n            res.append(currSum % 10)\n            carry = currSum // 10",
        "detail": "python-prac.leetcode.Add_Two_Linked_List_Reverse",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Backspace_String_compare",
        "description": "python-prac.leetcode.Backspace_String_compare",
        "peekOfCode": "class Solution:\n    def backspaceCompare(self, S, T):\n        p1 = len(S) - 1\n        p2 = len(S) - 1\n        skip1 = 0\n        skip2 = 0\n        while p1 >= 0 or p2 >= 0:\n            while p1 >= 0:\n                if S[p1] == \"#\":\n                    skip1 += 1",
        "detail": "python-prac.leetcode.Backspace_String_compare",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Balanced_Binary_Tree",
        "description": "python-prac.leetcode.Balanced_Binary_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\nclass Solution:\n    def isBalanced(self, root):\n        def helper(root):\n            if not root:\n                return (True, 0)",
        "detail": "python-prac.leetcode.Balanced_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Balanced_Binary_Tree",
        "description": "python-prac.leetcode.Balanced_Binary_Tree",
        "peekOfCode": "class Solution:\n    def isBalanced(self, root):\n        def helper(root):\n            if not root:\n                return (True, 0)\n            leftB, leftH = helper(root.left)\n            rightB, rightH = helper(root.right)\n            return (\n                leftB and rightB and abs(leftH - rightH) <= 1,\n                max(leftH, rightH) + 1,",
        "detail": "python-prac.leetcode.Balanced_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Best_Time_to_Buy_and_Sell_Stock",
        "description": "python-prac.leetcode.Best_Time_to_Buy_and_Sell_Stock",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices):\n        if not prices:\n            return 0\n        Min = prices[0]\n        res = 0\n        for price in prices:\n            if Min > price:\n                Min = min(Min, price)\n            res = max(price - Min, res)",
        "detail": "python-prac.leetcode.Best_Time_to_Buy_and_Sell_Stock",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Binary_Search_Tree_Construction",
        "description": "python-prac.leetcode.Binary_Search_Tree_Construction",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\nclass Solution:\n    def insertIn(self, root, num):\n        currNode = root\n        while True:\n            if num > currNode.val:",
        "detail": "python-prac.leetcode.Binary_Search_Tree_Construction",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Binary_Search_Tree_Construction",
        "description": "python-prac.leetcode.Binary_Search_Tree_Construction",
        "peekOfCode": "class Solution:\n    def insertIn(self, root, num):\n        currNode = root\n        while True:\n            if num > currNode.val:\n                if currNode.right is None:\n                    currNode.right = TreeNode(num)\n                    break\n                else:\n                    currNode = currNode.right",
        "detail": "python-prac.leetcode.Binary_Search_Tree_Construction",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Binary_tree Paths",
        "description": "python-prac.leetcode.Binary_tree Paths",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def binaryTreePaths(self, root):\n        res = []\n        path = \"\"\n        def helper(node, path):",
        "detail": "python-prac.leetcode.Binary_tree Paths",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Binary_tree Paths",
        "description": "python-prac.leetcode.Binary_tree Paths",
        "peekOfCode": "class Solution:\n    def binaryTreePaths(self, root):\n        res = []\n        path = \"\"\n        def helper(node, path):\n            if not node:\n                return\n            path += str(node.val) + \"->\"\n            if not node.left and not node.right:\n                res.append(path[:-2])",
        "detail": "python-prac.leetcode.Binary_tree Paths",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Binary_Tree_Inorder_Traversal",
        "description": "python-prac.leetcode.Binary_Tree_Inorder_Traversal",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def inorderTraversal(self, root):\n        stack = []\n        res = []\n        while stack or root:",
        "detail": "python-prac.leetcode.Binary_Tree_Inorder_Traversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Binary_Tree_Inorder_Traversal",
        "description": "python-prac.leetcode.Binary_Tree_Inorder_Traversal",
        "peekOfCode": "class Solution:\n    def inorderTraversal(self, root):\n        stack = []\n        res = []\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)",
        "detail": "python-prac.leetcode.Binary_Tree_Inorder_Traversal",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Binary_Tree_Level_Order_Traversal",
        "description": "python-prac.leetcode.Binary_Tree_Level_Order_Traversal",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def levelOrder(self, root):\n        if not root:\n            return []\n        res = []",
        "detail": "python-prac.leetcode.Binary_Tree_Level_Order_Traversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Binary_Tree_Level_Order_Traversal",
        "description": "python-prac.leetcode.Binary_Tree_Level_Order_Traversal",
        "peekOfCode": "class Solution:\n    def levelOrder(self, root):\n        if not root:\n            return []\n        res = []\n        queue = collections.deque()\n        queue.append(root)\n        while len(queue):\n            num = len(queue)\n            arr = []",
        "detail": "python-prac.leetcode.Binary_Tree_Level_Order_Traversal",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Binary_Tree_Longest_Consecutive_Sequence",
        "description": "python-prac.leetcode.Binary_Tree_Longest_Consecutive_Sequence",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def longestConsecutive(self, root):\n        def helper(node, parent, length):\n            if not node:\n                return length",
        "detail": "python-prac.leetcode.Binary_Tree_Longest_Consecutive_Sequence",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Binary_Tree_Longest_Consecutive_Sequence",
        "description": "python-prac.leetcode.Binary_Tree_Longest_Consecutive_Sequence",
        "peekOfCode": "class Solution:\n    def longestConsecutive(self, root):\n        def helper(node, parent, length):\n            if not node:\n                return length\n            if parent is not None and node.val == parent.val + 1:\n                length += 1\n            else:\n                length = 1\n            return max(",
        "detail": "python-prac.leetcode.Binary_Tree_Longest_Consecutive_Sequence",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Bulls_and_Cows",
        "description": "python-prac.leetcode.Bulls_and_Cows",
        "peekOfCode": "class Solution:\n    def getHint(self, secret, guess):\n        dicts = collections.Counter(secret)\n        A = 0\n        B = 0\n        for i in range(len(guess)):\n            if secret[i] == guess[i]:\n                A += 1\n                dicts[guess[i]] -= 1\n        for i in range(len(guess)):",
        "detail": "python-prac.leetcode.Bulls_and_Cows",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Check If a Number Is Majority Element in a Sorted Array",
        "description": "python-prac.leetcode.Check If a Number Is Majority Element in a Sorted Array",
        "peekOfCode": "class Solution:\n    def isMajorityElement(self, nums, target):\n        dict = collections.Counter(nums)\n        if len(nums) == 1:\n            return nums[0] == target\n        k = nums[len(nums) // 2]\n        if dict[k] > len(nums) // 2:\n            return True\n        return False",
        "detail": "python-prac.leetcode.Check If a Number Is Majority Element in a Sorted Array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Climbing_Stairs",
        "description": "python-prac.leetcode.Climbing_Stairs",
        "peekOfCode": "class Solution:\n    def climbStairs(self, n):\n        if n == 1:\n            return 1\n        first = 1\n        second = 2\n        for i in range(3, n + 1):\n            third = first + second\n            first = second\n            second = third",
        "detail": "python-prac.leetcode.Climbing_Stairs",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.leetcode.Clone_Binary_Tree",
        "description": "python-prac.leetcode.Clone_Binary_Tree",
        "peekOfCode": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n    def __str__(self):\n        return str(self.val)\nclass Solution:\n    def findNode(self, a, b, node):\n        if a == node:",
        "detail": "python-prac.leetcode.Clone_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Clone_Binary_Tree",
        "description": "python-prac.leetcode.Clone_Binary_Tree",
        "peekOfCode": "class Solution:\n    def findNode(self, a, b, node):\n        if a == node:\n            return b\n        if a.left and b.left:\n            found = self.findNode(a.left, b.left, node)\n            if found:\n                return found\n        if a.right and b.right:\n            found = self.findNode(a.right, b.right, node)",
        "detail": "python-prac.leetcode.Clone_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Compare_strings_frequency",
        "description": "python-prac.leetcode.Compare_strings_frequency",
        "peekOfCode": "class Solution:\n    def numSmallerByFrequency(self, queries, words):\n        # you have to go through each char to find the frequency O(n)\n        def f(s):\n            return collections.Counter(s)[min(s)]\n        # O(m)\n        arr_w = []\n        for word in words:\n            arr_w.append(f(word))\n        # O(n log(n))",
        "detail": "python-prac.leetcode.Compare_strings_frequency",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Contains_Duplicate_II",
        "description": "python-prac.leetcode.Contains_Duplicate_II",
        "peekOfCode": "class Solution:\n    def containsNearbyDuplicate(self, nums, k):\n        dict = {}\n        for idx, num in enumerate(nums):\n            if num in dict:\n                if abs(dict[num] - idx) <= k:\n                    return True\n                elif abs(dict[num] - idx) > k:\n                    dict[num] = idx\n            else:",
        "detail": "python-prac.leetcode.Contains_Duplicate_II",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Convert_Sorted_Array_to_Binary_Search_Tree",
        "description": "python-prac.leetcode.Convert_Sorted_Array_to_Binary_Search_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def sortedArrayToBST(self, nums):\n        def helper(left, right):\n            if left <= right:\n                mid = left + ((right - left) // 2)",
        "detail": "python-prac.leetcode.Convert_Sorted_Array_to_Binary_Search_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Convert_Sorted_Array_to_Binary_Search_Tree",
        "description": "python-prac.leetcode.Convert_Sorted_Array_to_Binary_Search_Tree",
        "peekOfCode": "class Solution:\n    def sortedArrayToBST(self, nums):\n        def helper(left, right):\n            if left <= right:\n                mid = left + ((right - left) // 2)\n                newnode = TreeNode(nums[mid])\n                newnode.left = helper(left, mid - 1)\n                newnode.right = helper(mid + 1, right)\n                return newnode\n        return helper(0, len(nums) - 1)",
        "detail": "python-prac.leetcode.Convert_Sorted_Array_to_Binary_Search_Tree",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Convert_Sorted_List_to_Binary_Search_Tree",
        "description": "python-prac.leetcode.Convert_Sorted_List_to_Binary_Search_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    # O(n) Time and O(n) Space\n    def sortedListToBST(self, head):\n        arr = []\n        curr = head",
        "detail": "python-prac.leetcode.Convert_Sorted_List_to_Binary_Search_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Convert_Sorted_List_to_Binary_Search_Tree",
        "description": "python-prac.leetcode.Convert_Sorted_List_to_Binary_Search_Tree",
        "peekOfCode": "class Solution:\n    # O(n) Time and O(n) Space\n    def sortedListToBST(self, head):\n        arr = []\n        curr = head\n        while curr:\n            arr.append(curr.val)\n            curr = curr.next\n        def helper(left, right):\n            if left <= right:",
        "detail": "python-prac.leetcode.Convert_Sorted_List_to_Binary_Search_Tree",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Delete_Elements_LinkedList",
        "description": "python-prac.leetcode.Delete_Elements_LinkedList",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def remove(self, head, val):\n        sentinel = ListNode(0)\n        sentinel.next = head\n        prev, curr = sentinel, head\n        while curr:",
        "detail": "python-prac.leetcode.Delete_Elements_LinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Delete_Elements_LinkedList",
        "description": "python-prac.leetcode.Delete_Elements_LinkedList",
        "peekOfCode": "class Solution:\n    def remove(self, head, val):\n        sentinel = ListNode(0)\n        sentinel.next = head\n        prev, curr = sentinel, head\n        while curr:\n            if curr.val == val:\n                prev.next = curr.next\n            else:\n                prev = curr",
        "detail": "python-prac.leetcode.Delete_Elements_LinkedList",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Delete_Node_Linked_List",
        "description": "python-prac.leetcode.Delete_Node_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def delete(self, node):\n        node.val = node.next.val\n        node.next = node.next.next\nif __name__ == \"__main__\":\n    node = ListNode(4)",
        "detail": "python-prac.leetcode.Delete_Node_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Delete_Node_Linked_List",
        "description": "python-prac.leetcode.Delete_Node_Linked_List",
        "peekOfCode": "class Solution:\n    def delete(self, node):\n        node.val = node.next.val\n        node.next = node.next.next\nif __name__ == \"__main__\":\n    node = ListNode(4)\n    node.next = ListNode(5)\n    node.next.next = ListNode(1)\n    node.next.next.next = ListNode(9)\n    test = node",
        "detail": "python-prac.leetcode.Delete_Node_Linked_List",
        "documentation": {}
    },
    {
        "label": "StringIterator",
        "kind": 6,
        "importPath": "python-prac.leetcode.Design_Compressed_String_Iterator",
        "description": "python-prac.leetcode.Design_Compressed_String_Iterator",
        "peekOfCode": "class StringIterator:\n    def __init__(self, compressedString):\n        self.s = compressedString\n        self.ptr = 0\n        self.num = 0\n        self.len = len(compressedString)\n        self.char = \"\"\n    def next(self):\n        if not self.hasNext():\n            return \" \"",
        "detail": "python-prac.leetcode.Design_Compressed_String_Iterator",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Design_Linked_List",
        "description": "python-prac.leetcode.Design_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=None):\n        self.val = val\n        self.next = None\nclass MyLinkedList:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.head = None",
        "detail": "python-prac.leetcode.Design_Linked_List",
        "documentation": {}
    },
    {
        "label": "MyLinkedList",
        "kind": 6,
        "importPath": "python-prac.leetcode.Design_Linked_List",
        "description": "python-prac.leetcode.Design_Linked_List",
        "peekOfCode": "class MyLinkedList:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.head = None\n    def get(self, index: int) -> int:\n        \"\"\"\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n        \"\"\"",
        "detail": "python-prac.leetcode.Design_Linked_List",
        "documentation": {}
    },
    {
        "label": "PhoneDirectory",
        "kind": 6,
        "importPath": "python-prac.leetcode.Design_Phone_Directory",
        "description": "python-prac.leetcode.Design_Phone_Directory",
        "peekOfCode": "class PhoneDirectory:\n    def __init__(self, maxNumbers: int):\n        self.num = maxNumbers\n        self.queue = deque([])\n        for i in range(self.num):\n            self.queue.append(i)\n    def get(self) -> int:\n        if len(self.queue) == 0:\n            return -1\n        num = self.queue.popleft()",
        "detail": "python-prac.leetcode.Design_Phone_Directory",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Determine_Cycle_LinkedList",
        "description": "python-prac.leetcode.Determine_Cycle_LinkedList",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def isCycle(self, head):\n        pointer1 = head\n        pointer2 = head.next\n        while pointer1 != pointer2:\n            if pointer2 is None or pointer2.next is None:",
        "detail": "python-prac.leetcode.Determine_Cycle_LinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Determine_Cycle_LinkedList",
        "description": "python-prac.leetcode.Determine_Cycle_LinkedList",
        "peekOfCode": "class Solution:\n    def isCycle(self, head):\n        pointer1 = head\n        pointer2 = head.next\n        while pointer1 != pointer2:\n            if pointer2 is None or pointer2.next is None:\n                return False\n            pointer1 = pointer1.next\n            pointer2 = pointer2.next.next\n        return True",
        "detail": "python-prac.leetcode.Determine_Cycle_LinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Display_Directory",
        "description": "python-prac.leetcode.Display_Directory",
        "peekOfCode": "class Solution:\n    def displayDir(self, dirName):\n        res = []\n        arr = self.getNodes(dirName)\n        for element in arr:\n            if \"lines\" in element.keys():\n                out = (\n                    [element[\"name\"]]\n                    + [\" | \"]\n                    + [\"file\"]",
        "detail": "python-prac.leetcode.Display_Directory",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Excel_Sheet_Column_Number",
        "description": "python-prac.leetcode.Excel_Sheet_Column_Number",
        "peekOfCode": "class Solution:\n    def titleToNumber(self, s):\n        Sum = 0\n        for exp, char in enumerate(s[::-1]):\n            Sum += (ord(char) - 65 + 1) * 26 ** exp\n        return Sum",
        "detail": "python-prac.leetcode.Excel_Sheet_Column_Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Excel_Sheet_Column_Title",
        "description": "python-prac.leetcode.Excel_Sheet_Column_Title",
        "peekOfCode": "class Solution:\n    def convertToTitle(self, n):\n        dict = {\n            0: \"Z\",\n            1: \"A\",\n            2: \"B\",\n            3: \"C\",\n            4: \"D\",\n            5: \"E\",\n            6: \"F\",",
        "detail": "python-prac.leetcode.Excel_Sheet_Column_Title",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "python-prac.leetcode.Fibonacci_Number",
        "description": "python-prac.leetcode.Fibonacci_Number",
        "peekOfCode": "def fib(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    for i in range(2, n + 1):\n        value = a + b\n        a = b",
        "detail": "python-prac.leetcode.Fibonacci_Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Find_Difference_Two_String",
        "description": "python-prac.leetcode.Find_Difference_Two_String",
        "peekOfCode": "class Solution:\n    def findTheDifference(self, s, t):\n        if not s:\n            return t\n        c = ord(s[0])\n        for i in s[1:]:\n            c = c ^ ord(i)\n        for j in t:\n            c = c ^ ord(j)\n        return chr(c)",
        "detail": "python-prac.leetcode.Find_Difference_Two_String",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Find_Maximum_Time",
        "description": "python-prac.leetcode.Find_Maximum_Time",
        "peekOfCode": "class Solution:\n    def findMax(self, time):\n        arr = []\n        for c in time:\n            arr.append(c)\n        if arr[0] == \"?\":\n            if arr[1] <= \"3\" or arr[1] == \"?\":\n                arr[0] = \"2\"\n            else:\n                arr[0] = \"1\"",
        "detail": "python-prac.leetcode.Find_Maximum_Time",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Find_the_nonduplicate_number",
        "description": "python-prac.leetcode.Find_the_nonduplicate_number",
        "peekOfCode": "class Solution:\n    def find(self, arr):\n        dic = {}\n        for num in arr:\n            dic[num] = dic.get(num, 0) + 1\n        for num in arr:\n            if dic[num] == 1:\n                return num\nif __name__ == \"__main__\":\n    arr = [2, 2, 3, 4, 2, 3, 4, 1, 5, 5, 6, 6]",
        "detail": "python-prac.leetcode.Find_the_nonduplicate_number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.First_Missing_Positive",
        "description": "python-prac.leetcode.First_Missing_Positive",
        "peekOfCode": "class Solution:\n    def firstMissingPositive(self, nums):\n        dict = {}\n        for num in nums:\n            dict[num] = 1\n        for i in range(1, len(nums) + 2):\n            if i not in dict:\n                return i\n        return -1",
        "detail": "python-prac.leetcode.First_Missing_Positive",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.First_Unique_Character",
        "description": "python-prac.leetcode.First_Unique_Character",
        "peekOfCode": "class Solution:\n    def firstUniqChar(self, s):\n        if s == \"\":\n            return -1\n        dict = collections.defaultdict(int)\n        for c in s:\n            dict[c] += 1\n        for c in s:\n            if dict[c] == 1:\n                return s.index(c)",
        "detail": "python-prac.leetcode.First_Unique_Character",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Flip_Game",
        "description": "python-prac.leetcode.Flip_Game",
        "peekOfCode": "class Solution:\n    def generatePossibleNextMoves(self, s):\n        res = []\n        strs = []\n        for c in s:\n            strs.append(c)\n        for i in range(len(strs) - 1):\n            if strs[i] == \"+\" and strs[i + 1] == \"+\":\n                res.append(s[:i] + \"--\" + s[i + 2 :])\n        return res",
        "detail": "python-prac.leetcode.Flip_Game",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Fruit_Into_Basked",
        "description": "python-prac.leetcode.Fruit_Into_Basked",
        "peekOfCode": "class Solution:\n    def totalFruits(self, Tree):\n        last_fruit = -1\n        second_last_fruit = -1\n        last_fruit_count = 0\n        current_max = 0\n        maximum = 0\n        for fruit in Tree:\n            if fruit == last_fruit or fruit == second_last_fruit:\n                current_max += 1",
        "detail": "python-prac.leetcode.Fruit_Into_Basked",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Generate_Parenthesis",
        "description": "python-prac.leetcode.Generate_Parenthesis",
        "peekOfCode": "class Solution:\n    def generateParenthesis(self, n):\n        res = []\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                res.append(S)\n                return\n            if left < n:\n                backtrack(S + \"(\", left + 1, right)\n            if right < left:",
        "detail": "python-prac.leetcode.Generate_Parenthesis",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Group_Anagrams",
        "description": "python-prac.leetcode.Group_Anagrams",
        "peekOfCode": "class Solution:\n    def groupAnagrams(self, strs):\n        dict = collections.defaultdict(list)\n        def hashkey(anyword):\n            return \"\".join(sorted(anyword))\n        for word in strs:\n            dict[hashkey(word)].append(word)\n        return dict.values()",
        "detail": "python-prac.leetcode.Group_Anagrams",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Guess_Number_Higher_Lower",
        "description": "python-prac.leetcode.Guess_Number_Higher_Lower",
        "peekOfCode": "class Solution:\n    def guessNumber(self, n: int) -> int:\n        if guess(n) == 0:\n            return n\n        def helper(low, high):\n            k = (low + high) // 2\n            if guess(k) == 0:\n                return k\n            elif guess(k) == 1:\n                return helper(k, high)",
        "detail": "python-prac.leetcode.Guess_Number_Higher_Lower",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Happy_Number",
        "description": "python-prac.leetcode.Happy_Number",
        "peekOfCode": "class Solution:\n    def isHappy(self, n):\n        slow = n\n        fast = self.getNum(n)\n        while fast != 1 and slow != fast:\n            slow = self.getNum(slow)\n            fast = self.getNum(self.getNum(fast))\n        return fast == 1\n    def getNum(self, num):\n        res = 0",
        "detail": "python-prac.leetcode.Happy_Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Heaters",
        "description": "python-prac.leetcode.Heaters",
        "peekOfCode": "class Solution:\n    def findRadius(self, houses, heaters):\n        houses.sort()\n        heaters.sort()\n        heaters = [float(\"-inf\")] + heaters + [float(\"inf\")]\n        i = j = radius = 0\n        while i < len(houses):\n            if heaters[j] >= houses[i]:\n                dist = min(heaters[j] - houses[i], houses[i] - heaters[j - 1])\n                i += 1",
        "detail": "python-prac.leetcode.Heaters",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.House_Robber",
        "description": "python-prac.leetcode.House_Robber",
        "peekOfCode": "class Solution:\n    def rob(self, nums):\n        prevMax = 0\n        currMax = 0\n        for num in nums:\n            prevMax, currMax = currMax, max(prevMax + num, currMax)\n        return currMax",
        "detail": "python-prac.leetcode.House_Robber",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Inorder_Successor",
        "description": "python-prac.leetcode.Inorder_Successor",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def inorderSuccessor(self, root, p):\n        if p.right:\n            curr = p.right\n            while curr.left:",
        "detail": "python-prac.leetcode.Inorder_Successor",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Inorder_Successor",
        "description": "python-prac.leetcode.Inorder_Successor",
        "peekOfCode": "class Solution:\n    def inorderSuccessor(self, root, p):\n        if p.right:\n            curr = p.right\n            while curr.left:\n                curr = curr.left\n            return curr\n        stack, inorder = [], float(\"inf\")\n        while stack or root:\n            while root:",
        "detail": "python-prac.leetcode.Inorder_Successor",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.leetcode.Insert_Sorted_Linked_List",
        "description": "python-prac.leetcode.Insert_Sorted_Linked_List",
        "peekOfCode": "class Node:\n    def __init__(self, val=None, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def insert(self, head, insertVal):\n        if not head:\n            head = Node(insertVal)\n            head.next = head\n            return head",
        "detail": "python-prac.leetcode.Insert_Sorted_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Insert_Sorted_Linked_List",
        "description": "python-prac.leetcode.Insert_Sorted_Linked_List",
        "peekOfCode": "class Solution:\n    def insert(self, head, insertVal):\n        if not head:\n            head = Node(insertVal)\n            head.next = head\n            return head\n        prev = head\n        curr = head.next\n        isinsert = False\n        while True:",
        "detail": "python-prac.leetcode.Insert_Sorted_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Intersection_of_two_array",
        "description": "python-prac.leetcode.Intersection_of_two_array",
        "peekOfCode": "class Solution:\n    def intersection(self, nums1, nums2):\n        nums1.sort()\n        nums2.sort()\n        i = j = k = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                nums1[k] = nums1[i]\n                i += 1\n                j += 1",
        "detail": "python-prac.leetcode.Intersection_of_two_array",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Intersection_of_Two_LinkedList",
        "description": "python-prac.leetcode.Intersection_of_Two_LinkedList",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def getIntersectionNode(self, headA, headB):\n        nodeA = headA\n        nodeB = headB\n        countA = self.count(nodeA)\n        countB = self.count(nodeB)",
        "detail": "python-prac.leetcode.Intersection_of_Two_LinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Intersection_of_Two_LinkedList",
        "description": "python-prac.leetcode.Intersection_of_Two_LinkedList",
        "peekOfCode": "class Solution:\n    def getIntersectionNode(self, headA, headB):\n        nodeA = headA\n        nodeB = headB\n        countA = self.count(nodeA)\n        countB = self.count(nodeB)\n        skip = abs(countA - countB)\n        if countA - countB > 0:\n            for i in range(skip):\n                nodeA = nodeA.next",
        "detail": "python-prac.leetcode.Intersection_of_Two_LinkedList",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Invert_Binary_Tree",
        "description": "python-prac.leetcode.Invert_Binary_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nimport collections\nclass Solution:\n    def invertTree(self, root):\n        def helper(node):\n            if not node:",
        "detail": "python-prac.leetcode.Invert_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Invert_Binary_Tree",
        "description": "python-prac.leetcode.Invert_Binary_Tree",
        "peekOfCode": "class Solution:\n    def invertTree(self, root):\n        def helper(node):\n            if not node:\n                return node\n            left = helper(node.left)\n            right = helper(node.right)\n            node.left = right\n            node.right = left\n            return node",
        "detail": "python-prac.leetcode.Invert_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Island_Perimeter",
        "description": "python-prac.leetcode.Island_Perimeter",
        "peekOfCode": "class Solution:\n    def islandPerimeter(self, grid):\n        if len(grid) == 0:\n            return 0\n        def findPerimeter(row, col):\n            side = 4\n            if row - 1 >= 0 and grid[row - 1][col] == 1:\n                side -= 1\n            if row + 1 < len(grid) and grid[row + 1][col] == 1:\n                side -= 1",
        "detail": "python-prac.leetcode.Island_Perimeter",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Isomorphic String",
        "description": "python-prac.leetcode.Isomorphic String",
        "peekOfCode": "class Solution:\n    def __init__(self, s, t):\n        self.s = s\n        self.t = t\n    def is_isomorphic(self):\n        dict = {}\n        for i in range(len(self.s)):\n            char_s = self.s[i]\n            char_t = self.t[i]\n            if char_s not in dict.keys():",
        "detail": "python-prac.leetcode.Isomorphic String",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Is_Subsequence",
        "description": "python-prac.leetcode.Is_Subsequence",
        "peekOfCode": "class Solution:\n    def isSubsequence(self, s, t):\n        pointer1 = 0\n        pointer2 = 0\n        while pointer1 < len(s) and pointer2 < len(t):\n            if s[pointer1] == t[pointer2]:\n                pointer1 += 1\n            pointer2 += 1\n        if pointer1 == len(s):\n            return True",
        "detail": "python-prac.leetcode.Is_Subsequence",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Kth_Largest_Array_Quick_Select",
        "description": "python-prac.leetcode.Kth_Largest_Array_Quick_Select",
        "peekOfCode": "class Solution:\n    def quickSelect(self, nums, k):\n        k = len(nums) - k\n        return self.helper(nums, 0, len(nums) - 1, k)\n    def helper(self, nums, left, right, k):\n        while True:\n            pivot = left\n            leftIdx = left + 1\n            rightIdx = right\n            while leftIdx <= rightIdx:",
        "detail": "python-prac.leetcode.Kth_Largest_Array_Quick_Select",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.kth_largest_in_unsorted_array",
        "description": "python-prac.leetcode.kth_largest_in_unsorted_array",
        "peekOfCode": "class Solution:\n    def klargest(self, nums, k):\n        heap = []\n        for num in nums:\n            heapq.heappush(heap, num)\n            if len(heap) > k:\n                heapq.heappop(heap)\n        return heap[0]\nif __name__ == \"__main__\":\n    arr = [3, 2, 3, 1, 2, 4, 5, 5, 6]",
        "detail": "python-prac.leetcode.kth_largest_in_unsorted_array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.K_closest_points_to_Origin",
        "description": "python-prac.leetcode.K_closest_points_to_Origin",
        "peekOfCode": "class Solution:\n    def kclosest(self, points, k):\n        heap = []\n        for point in points:\n            d = (point[0] * point[0]) + (point[1] * point[1])\n            heapq.heappush(heap, (d, point))\n        res = []\n        for i in range(k):\n            res.append(heapq.heappop(heap)[1])\n        return res",
        "detail": "python-prac.leetcode.K_closest_points_to_Origin",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Largest_Number",
        "description": "python-prac.leetcode.Largest_Number",
        "peekOfCode": "class Solution:\n    def largestNumber(self, nums):\n        res = [str(num) for num in sorted(nums, key=cmp_to_key(self.compare))]\n        return \"0\" if res[0] == \"0\" else \"\".join(res)\n    def compare(self, a, b):\n        if str(a) + str(b) > str(b) + str(a):\n            return -1\n        else:\n            return 1",
        "detail": "python-prac.leetcode.Largest_Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.License_Key_Formatting",
        "description": "python-prac.leetcode.License_Key_Formatting",
        "peekOfCode": "class Solution:\n    def licence_key_formatting(self, S, K):\n        strs = S.replace(\"-\", \"\")\n        first = len(strs) % K\n        first_part = S[:first]\n        licence_key = \"\"\n        for i in range(first, len(strs), K):\n            licence_key = licence_key + strs[i : i + K] + \"-\"\n        if len(first_part) > 0:\n            licence_key = first_part + \"-\" + licence_key[:-1]",
        "detail": "python-prac.leetcode.License_Key_Formatting",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Linked_List",
        "description": "python-prac.leetcode.Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    def __str__(self):\n        node = self\n        output = \"\"\n        while node:\n            output += str(node.data) + \" \"\n            node = node.next",
        "detail": "python-prac.leetcode.Linked_List",
        "documentation": {}
    },
    {
        "label": "list2linkedlist",
        "kind": 2,
        "importPath": "python-prac.leetcode.Linked_List",
        "description": "python-prac.leetcode.Linked_List",
        "peekOfCode": "def list2linkedlist(l):\n    if l == []:\n        return None\n    head = ListNode(l[0])\n    n = head\n    for i in range(1, len(l)):\n        new = ListNode(l[i])\n        n.next = new\n        n = n.next\n    return head",
        "detail": "python-prac.leetcode.Linked_List",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-prac.leetcode.Linked_List",
        "description": "python-prac.leetcode.Linked_List",
        "peekOfCode": "def reverse(node):\n    prev = None\n    curr = node\n    while curr:\n        temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = temp\n    return prev\nif __name__ == \"__main__\":",
        "detail": "python-prac.leetcode.Linked_List",
        "documentation": {}
    },
    {
        "label": "Logger",
        "kind": 6,
        "importPath": "python-prac.leetcode.Log_Rate_Limiter",
        "description": "python-prac.leetcode.Log_Rate_Limiter",
        "peekOfCode": "class Logger:\n    def __init__(self):\n        self.dict = {}\n    def shouldPrintMessage(self, timestamp, message):\n        if message not in self.dict:\n            self.dict[message] = timestamp\n            return True\n        if timestamp - self.dict[message] >= 10:\n            self.dict[message] = timestamp\n            return True",
        "detail": "python-prac.leetcode.Log_Rate_Limiter",
        "documentation": {}
    },
    {
        "label": "longestCommonPrefix",
        "kind": 2,
        "importPath": "python-prac.leetcode.Longest Common Prefix",
        "description": "python-prac.leetcode.Longest Common Prefix",
        "peekOfCode": "def longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    commmon_prefix = strs[0]\n    for i in range(1, len(strs)):\n        if commmon_prefix == \"\" or strs[i] == \"\":\n            return \"\"\n        for j in range(len(strs[i])):",
        "detail": "python-prac.leetcode.Longest Common Prefix",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Longest_File_Path",
        "description": "python-prac.leetcode.Longest_File_Path",
        "peekOfCode": "class Solution:\n    def lengthLongestPath(self, input):\n        paths = input.split(\"\\n\")\n        maxLength = 0\n        dict = {-1: 0}\n        for line in paths:\n            depth = line.count(\"\\t\")\n            dict[depth] = len(line) - depth + dict[depth - 1]\n            if \".\" in line:\n                maxLength = max(maxLength, dict[depth] + depth)",
        "detail": "python-prac.leetcode.Longest_File_Path",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Longest_Palindrome",
        "description": "python-prac.leetcode.Longest_Palindrome",
        "peekOfCode": "class Solution:\n    def longestPalindrome(self, s):\n        dict = collections.Counter(s)\n        ans = 0\n        for value in dict.values():\n            ans += value // 2 * 2\n            if ans % 2 == 0 and value % 2 == 1:\n                ans += 1\n        return ans",
        "detail": "python-prac.leetcode.Longest_Palindrome",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Longest_Palindromic_Substring",
        "description": "python-prac.leetcode.Longest_Palindromic_Substring",
        "peekOfCode": "class Solution:\n    def longestPalindrome(self, s):\n        currentLongest = [0, 1]\n        def checkPalindrome(string, leftidx, rightidx):\n            while leftidx >= 0 and rightidx < len(string):\n                if string[leftidx] != string[rightidx]:\n                    break\n                leftidx -= 1\n                rightidx += 1\n            return [leftidx + 1, rightidx]",
        "detail": "python-prac.leetcode.Longest_Palindromic_Substring",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Longest_Sequence_With_Two_Unique_Number",
        "description": "python-prac.leetcode.Longest_Sequence_With_Two_Unique_Number",
        "peekOfCode": "class Solution:\n    def findSequence(self, arr):\n        last_num = -1\n        second_last_num = -1\n        last_num_count = 0\n        current_max = 0\n        maximum = 0\n        for num in arr:\n            if num == last_num or num == second_last_num:\n                current_max += 1",
        "detail": "python-prac.leetcode.Longest_Sequence_With_Two_Unique_Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Longest_Substring_Without_repeating_Character",
        "description": "python-prac.leetcode.Longest_Substring_Without_repeating_Character",
        "peekOfCode": "class Solution:\n    def lengthOfLongestSubstring(self, s):\n        if s == \"\":\n            return 0\n        letters = {}\n        startindex = 0\n        longest = [0, 1]\n        for idx, char in enumerate(s):\n            if char in letters:\n                startindex = max(startindex, letters[char] + 1)",
        "detail": "python-prac.leetcode.Longest_Substring_Without_repeating_Character",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Longest_Substring_with_At_Most_K_Distinct_Characters",
        "description": "python-prac.leetcode.Longest_Substring_with_At_Most_K_Distinct_Characters",
        "peekOfCode": "class Solution:\n    def lengthOfLongestSubstringKDistinct(self, s, k):\n        n = len(s)\n        if k == 0 or n == 0:\n            return 0\n        left, right = 0, 0\n        dict = {}\n        max_len = 1\n        while right < n:\n            dict[s[right]] = right",
        "detail": "python-prac.leetcode.Longest_Substring_with_At_Most_K_Distinct_Characters",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Longest_Substring_with_At_Most_Two_Distinct_Characters",
        "description": "python-prac.leetcode.Longest_Substring_with_At_Most_Two_Distinct_Characters",
        "peekOfCode": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s):\n        last_char = \"\"\n        second_last_char = \"\"\n        last_char_count = 0\n        maximum = 0\n        currentMax = 0\n        for char in s:\n            if char == last_char or char == second_last_char:\n                currentMax += 1",
        "detail": "python-prac.leetcode.Longest_Substring_with_At_Most_Two_Distinct_Characters",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Lowest_Common_Ancestor_of_a_Binary_Search_Tree",
        "description": "python-prac.leetcode.Lowest_Common_Ancestor_of_a_Binary_Search_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def lowest(self, root, p, q):\n        parent = root.val\n        pval = p.val\n        qval = q.val",
        "detail": "python-prac.leetcode.Lowest_Common_Ancestor_of_a_Binary_Search_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Lowest_Common_Ancestor_of_a_Binary_Search_Tree",
        "description": "python-prac.leetcode.Lowest_Common_Ancestor_of_a_Binary_Search_Tree",
        "peekOfCode": "class Solution:\n    def lowest(self, root, p, q):\n        parent = root.val\n        pval = p.val\n        qval = q.val",
        "detail": "python-prac.leetcode.Lowest_Common_Ancestor_of_a_Binary_Search_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Majority_Element",
        "description": "python-prac.leetcode.Majority_Element",
        "peekOfCode": "class Solution:\n    # O(n) Time and O(n) space\n    def majorityElement(self, nums):\n        dict = collections.Counter(nums)\n        n = len(nums) / 2\n        for k, v in dict.items():\n            if v > n:\n                return k\n    # O(n log n) Time and O(1) Space\n    def majorityElement2(self, nums):",
        "detail": "python-prac.leetcode.Majority_Element",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximize_Distance_to_Closest_Person",
        "description": "python-prac.leetcode.Maximize_Distance_to_Closest_Person",
        "peekOfCode": "class Solution:\n    def maxDistToClosest(self, seats):\n        dist = 0\n        while dist < len(seats) and seats[dist] == 0:\n            dist += 1\n        zero = 0\n        for i in range(dist + 1, len(seats)):\n            if seats[i] == 0:\n                zero += 1\n            else:",
        "detail": "python-prac.leetcode.Maximize_Distance_to_Closest_Person",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_Depth_Binary_Tree_Iterative",
        "description": "python-prac.leetcode.Maximum_Depth_Binary_Tree_Iterative",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\nclass Solution:\n    def maxDepth(self, root):\n        stack = []\n        if root is not None:\n            stack.append((root, 1))",
        "detail": "python-prac.leetcode.Maximum_Depth_Binary_Tree_Iterative",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_Depth_Binary_Tree_Iterative",
        "description": "python-prac.leetcode.Maximum_Depth_Binary_Tree_Iterative",
        "peekOfCode": "class Solution:\n    def maxDepth(self, root):\n        stack = []\n        if root is not None:\n            stack.append((root, 1))\n        depth = 0\n        while stack != []:\n            node, current_depth = stack.pop()\n            if node is not None:\n                depth = max(depth, current_depth)",
        "detail": "python-prac.leetcode.Maximum_Depth_Binary_Tree_Iterative",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_Depth_of_Binary_Tree",
        "description": "python-prac.leetcode.Maximum_Depth_of_Binary_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def maxDepth(self, root):\n        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))",
        "detail": "python-prac.leetcode.Maximum_Depth_of_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_Depth_of_Binary_Tree",
        "description": "python-prac.leetcode.Maximum_Depth_of_Binary_Tree",
        "peekOfCode": "class Solution:\n    def maxDepth(self, root):\n        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))",
        "detail": "python-prac.leetcode.Maximum_Depth_of_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_Depth_of_N-ary_Tree",
        "description": "python-prac.leetcode.Maximum_Depth_of_N-ary_Tree",
        "peekOfCode": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\nclass Solution:\n    def maxDepth(self, root):\n        if not root:\n            return 0\n        stack = []\n        stack.append([root, 1])",
        "detail": "python-prac.leetcode.Maximum_Depth_of_N-ary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_Depth_of_N-ary_Tree",
        "description": "python-prac.leetcode.Maximum_Depth_of_N-ary_Tree",
        "peekOfCode": "class Solution:\n    def maxDepth(self, root):\n        if not root:\n            return 0\n        stack = []\n        stack.append([root, 1])\n        maxDepth = 0\n        while len(stack):\n            node, depth = stack.pop()\n            maxDepth = max(maxDepth, depth)",
        "detail": "python-prac.leetcode.Maximum_Depth_of_N-ary_Tree",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_Level_Sum_of_a_Binary_Tree",
        "description": "python-prac.leetcode.Maximum_Level_Sum_of_a_Binary_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nimport collections\nclass Solution:\n    def maxLevelSum(self, root):\n        queue = collections.deque()\n        queue.append(root)",
        "detail": "python-prac.leetcode.Maximum_Level_Sum_of_a_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_Level_Sum_of_a_Binary_Tree",
        "description": "python-prac.leetcode.Maximum_Level_Sum_of_a_Binary_Tree",
        "peekOfCode": "class Solution:\n    def maxLevelSum(self, root):\n        queue = collections.deque()\n        queue.append(root)\n        Max = [0, 0]\n        level = 1\n        while len(queue):\n            total = 0\n            num = len(queue)\n            while num > 0:",
        "detail": "python-prac.leetcode.Maximum_Level_Sum_of_a_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_Size_Subarray_Sum_Equals_k",
        "description": "python-prac.leetcode.Maximum_Size_Subarray_Sum_Equals_k",
        "peekOfCode": "class Solution:\n    def maxSubArrayLen(self, nums, k):\n        dict = {}\n        maxLength = 0\n        dict[0] = -1\n        currSum = 0\n        for i in range(len(nums)):\n            currSum += nums[i]\n            if (currSum - k) in dict:\n                maxLength = max(maxLength, i - dict[currSum - k])",
        "detail": "python-prac.leetcode.Maximum_Size_Subarray_Sum_Equals_k",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_Stack",
        "description": "python-prac.leetcode.Maximum_Stack",
        "peekOfCode": "class MaxStack:\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stack = []\n    def push(self, x):\n        if len(self.stack) == 0:\n            self.stack.append([x, x])\n        else:",
        "detail": "python-prac.leetcode.Maximum_Stack",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Maximum_SubArray",
        "description": "python-prac.leetcode.Maximum_SubArray",
        "peekOfCode": "class Solution:\n    def maxSubArray(self, nums):\n        res = nums[0]\n        currentSum = 0\n        for num in nums:\n            if currentSum + num < 0:\n                currentSum = 0\n                res = max(res, num)\n            else:\n                currentSum += num",
        "detail": "python-prac.leetcode.Maximum_SubArray",
        "documentation": {}
    },
    {
        "label": "find_median_sorted_arrays",
        "kind": 2,
        "importPath": "python-prac.leetcode.Median_of_Two_Sorted_Array",
        "description": "python-prac.leetcode.Median_of_Two_Sorted_Array",
        "peekOfCode": "def find_median_sorted_arrays(nums1, nums2):\n    arr = nums1 + nums2\n    i = j = k = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            arr[k] = nums1[i]\n            i += 1\n        else:\n            arr[k] = nums2[j]\n            j += 1",
        "detail": "python-prac.leetcode.Median_of_Two_Sorted_Array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Meeting_Rooma_2",
        "description": "python-prac.leetcode.Meeting_Rooma_2",
        "peekOfCode": "class Solution:\n    def minMeetingRooms(self, intervals):\n        start = []\n        end = []\n        for Start, End in intervals:\n            start.append(Start)\n            end.append(End)\n        start.sort()\n        end.sort()\n        available = 0",
        "detail": "python-prac.leetcode.Meeting_Rooma_2",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Meeting_Rooms",
        "description": "python-prac.leetcode.Meeting_Rooms",
        "peekOfCode": "class Solution:\n    def canAttendMeetings(self, intervals):\n        intervals.sort(key=lambda x: [x[0]])\n        for i in range(len(intervals) - 1):\n            if intervals[i][1] > intervals[i + 1][0]:\n                return False\n        return True",
        "detail": "python-prac.leetcode.Meeting_Rooms",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Merge_Intervals",
        "description": "python-prac.leetcode.Merge_Intervals",
        "peekOfCode": "class Solution:\n    def merge(self, intervals):\n        intervals.sort(key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res",
        "detail": "python-prac.leetcode.Merge_Intervals",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Merge_k_Sorted_Lists",
        "description": "python-prac.leetcode.Merge_k_Sorted_Lists",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def mergeKLists(self, lists):\n        if len(lists) == 0:\n            return None\n        klist = lists[0]\n        for i in range(1, len(lists)):",
        "detail": "python-prac.leetcode.Merge_k_Sorted_Lists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Merge_k_Sorted_Lists",
        "description": "python-prac.leetcode.Merge_k_Sorted_Lists",
        "peekOfCode": "class Solution:\n    def mergeKLists(self, lists):\n        if len(lists) == 0:\n            return None\n        klist = lists[0]\n        for i in range(1, len(lists)):\n            klist = self.mergeTwoLlist(klist, lists[i])\n        return klist\n    def mergeTwoLlist(self, l1, l2):\n        list1 = l1",
        "detail": "python-prac.leetcode.Merge_k_Sorted_Lists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Merge_List_Of_Number_Into_Ranges",
        "description": "python-prac.leetcode.Merge_List_Of_Number_Into_Ranges",
        "peekOfCode": "class Solution:\n    def list_to_range(self, nums):\n        low = nums[0]\n        high = nums[0]\n        res = []\n        for num in nums:\n            if high + 1 < num:\n                res.append([low, high])\n                low = num\n            high = num",
        "detail": "python-prac.leetcode.Merge_List_Of_Number_Into_Ranges",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Merge_Two_Linked_List",
        "description": "python-prac.leetcode.Merge_Two_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def merge(self, l1, l2):\n        newnode = ListNode(-1)\n        node = newnode\n        while l1 is not None and l2 is not None:\n            if l1.val <= l2.val:",
        "detail": "python-prac.leetcode.Merge_Two_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Merge_Two_Linked_List",
        "description": "python-prac.leetcode.Merge_Two_Linked_List",
        "peekOfCode": "class Solution:\n    def merge(self, l1, l2):\n        newnode = ListNode(-1)\n        node = newnode\n        while l1 is not None and l2 is not None:\n            if l1.val <= l2.val:\n                node.next = l1\n                l1 = l1.next\n            else:\n                node.next = l2",
        "detail": "python-prac.leetcode.Merge_Two_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Minimum_Days_To_Bloom",
        "description": "python-prac.leetcode.Minimum_Days_To_Bloom",
        "peekOfCode": "class Solution:\n    def minNumberofDays(self, roses, k, n):\n        minDays = max(roses)\n        left = 1\n        right = minDays\n        while left <= right:\n            mid = left + ((right - left) // 2)\n            boque = 0\n            running = 0\n            for rose in roses:",
        "detail": "python-prac.leetcode.Minimum_Days_To_Bloom",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Minimum_Domino_Rotations",
        "description": "python-prac.leetcode.Minimum_Domino_Rotations",
        "peekOfCode": "class Solution:\n    def min_domino(self, A, B):\n        def check(x):\n            rotations_a = rotations_b = 0\n            for i in range(n):\n                if A[i] != x and B[i] != x:\n                    return -1\n                elif A[i] != x:\n                    rotations_a += 1\n                elif B[i] != x:",
        "detail": "python-prac.leetcode.Minimum_Domino_Rotations",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Minimum_Size_Subarray_Sum",
        "description": "python-prac.leetcode.Minimum_Size_Subarray_Sum",
        "peekOfCode": "class Solution:\n    def minSubArrayLen(self, s, nums):\n        pointer1 = 0\n        pointer2 = 0\n        Sum = 0\n        count = float(\"inf\")\n        while pointer2 < len(nums):\n            Sum += nums[pointer2]\n            while Sum >= s:\n                count = min(count, pointer2 - pointer1 + 1)",
        "detail": "python-prac.leetcode.Minimum_Size_Subarray_Sum",
        "documentation": {}
    },
    {
        "label": "MinStack",
        "kind": 6,
        "importPath": "python-prac.leetcode.Min_Stack",
        "description": "python-prac.leetcode.Min_Stack",
        "peekOfCode": "class MinStack:\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stack = []\n    def push(self, x):\n        if len(self.stack) == 0:\n            self.stack.append([x, x])\n        else:",
        "detail": "python-prac.leetcode.Min_Stack",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Missing_Number",
        "description": "python-prac.leetcode.Missing_Number",
        "peekOfCode": "class Solution:\n    def missingNumber(self, nums):\n        n = len(nums)\n        expectedSum = n * (n + 1) // 2\n        actualSum = 0\n        for num in nums:\n            actualSum += num\n        return expectedSum - actualSum",
        "detail": "python-prac.leetcode.Missing_Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Most Common Word",
        "description": "python-prac.leetcode.Most Common Word",
        "peekOfCode": "class Solution:\n    def mostCommonWord(self, paragraph, banned):\n        for c in \"!?',;.\":\n            paragraph = paragraph.replace(c, \" \")\n        dict = collections.Counter(paragraph.lower().split())\n        ans = \"\"\n        num = 0\n        for word in dict:\n            if dict[word] > num and word not in banned:\n                ans = word",
        "detail": "python-prac.leetcode.Most Common Word",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Most_Booked_Hotel_Room",
        "description": "python-prac.leetcode.Most_Booked_Hotel_Room",
        "peekOfCode": "class Solution:\n    def maxRoom(self, arr):\n        dict = collections.defaultdict(int)\n        rooms = arr\n        # O(n) time complexicity, for dict space = O(n)\n        for room in rooms:\n            if room[0] == \"+\":\n                dict[room[1:]] += 1\n        Max = 0\n        room = \"\"",
        "detail": "python-prac.leetcode.Most_Booked_Hotel_Room",
        "documentation": {}
    },
    {
        "label": "moveElementToEnd",
        "kind": 2,
        "importPath": "python-prac.leetcode.Move_Element_To_End",
        "description": "python-prac.leetcode.Move_Element_To_End",
        "peekOfCode": "def moveElementToEnd(array, toMove):\n    # Write your code here.\n    left = 0\n    right = len(array) - 1\n    while left < right:\n        if array[right] == toMove:\n            right -= 1\n            continue\n        if array[left] == toMove:\n            array[left], array[right] = array[right], array[left]",
        "detail": "python-prac.leetcode.Move_Element_To_End",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Move_Zeros",
        "description": "python-prac.leetcode.Move_Zeros",
        "peekOfCode": "class Solution:\n    def moveZeroes(self, nums):\n        zero = 0  # records the position of \"0\"\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                nums[i], nums[zero] = nums[zero], nums[i]\n                zero += 1",
        "detail": "python-prac.leetcode.Move_Zeros",
        "documentation": {}
    },
    {
        "label": "MovingAverage",
        "kind": 6,
        "importPath": "python-prac.leetcode.Moving_Average_from_data_Stream",
        "description": "python-prac.leetcode.Moving_Average_from_data_Stream",
        "peekOfCode": "class MovingAverage:\n    def __init__(self, size: int):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.size = size\n        self.queue = deque()\n        self.sum = 0\n    def next(self, val: int) -> float:\n        self.queue.append(val)",
        "detail": "python-prac.leetcode.Moving_Average_from_data_Stream",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Number_of_Island",
        "description": "python-prac.leetcode.Number_of_Island",
        "peekOfCode": "class Solution:\n    def __init__(self, grid):\n        self.grid = grid\n    def is_island(self):\n        def sink_island(grid, r, c):\n            if grid[r][c] == \"1\":\n                grid[r][c] = 0\n            else:\n                return\n            if r - 1 >= 0:",
        "detail": "python-prac.leetcode.Number_of_Island",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Odd_Even_Linked_List",
        "description": "python-prac.leetcode.Odd_Even_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def oddeven(self, head):\n        if not head:\n            return []\n        odds = ListNode(0)\n        evens = ListNode(0)",
        "detail": "python-prac.leetcode.Odd_Even_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Odd_Even_Linked_List",
        "description": "python-prac.leetcode.Odd_Even_Linked_List",
        "peekOfCode": "class Solution:\n    def oddeven(self, head):\n        if not head:\n            return []\n        odds = ListNode(0)\n        evens = ListNode(0)\n        oddshead = odds\n        evenshead = evens\n        isodd = True\n        while head:",
        "detail": "python-prac.leetcode.Odd_Even_Linked_List",
        "documentation": {}
    },
    {
        "label": "ListFastSum",
        "kind": 6,
        "importPath": "python-prac.leetcode.Optimized_List_Sum",
        "description": "python-prac.leetcode.Optimized_List_Sum",
        "peekOfCode": "class ListFastSum:\n    def __init__(self, nums):\n        self.nums = nums\n        self.sum_up_to = []\n        current_sum = 0\n        for num in nums:\n            current_sum += num\n            self.sum_up_to.append(current_sum)\n        # Allows self.sum_up_to[-1] = 0\n        self.sum_up_to.append(0)",
        "detail": "python-prac.leetcode.Optimized_List_Sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Paint_Fence",
        "description": "python-prac.leetcode.Paint_Fence",
        "peekOfCode": "class Solution:\n    def numWays(self, n, k):\n        if n == 0:\n            return 0\n        if n == 1:\n            return k\n        same, diff = k, k * (k - 1)\n        for i in range(3, n + 1):\n            same, diff = diff, (same + diff) * (k - 1)\n        return same + diff",
        "detail": "python-prac.leetcode.Paint_Fence",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "python-prac.leetcode.Palindrome",
        "description": "python-prac.leetcode.Palindrome",
        "peekOfCode": "def is_palindrome(x):\n    if x < 0:\n        return False\n    elif 0 < x < 10:\n        return True\n    second_half = 0\n    while second_half < x:\n        second_half = second_half * 10 + (x % 10)\n        x = x // 10\n        if second_half == 0:",
        "detail": "python-prac.leetcode.Palindrome",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Palindrome_Linked_List",
        "description": "python-prac.leetcode.Palindrome_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def isPalindrome(self, head):\n        first_half_end = self.first_half_end(head)\n        second_half_start = self.reverse_ll(first_half_end.next)\n        first_position = head\n        second_position = second_half_start",
        "detail": "python-prac.leetcode.Palindrome_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Palindrome_Linked_List",
        "description": "python-prac.leetcode.Palindrome_Linked_List",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, head):\n        first_half_end = self.first_half_end(head)\n        second_half_start = self.reverse_ll(first_half_end.next)\n        first_position = head\n        second_position = second_half_start\n        while second_position is not None:\n            if second_position.val != first_position.val:\n                return False\n            first_position = first_position.next",
        "detail": "python-prac.leetcode.Palindrome_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Palindrome_Permutation",
        "description": "python-prac.leetcode.Palindrome_Permutation",
        "peekOfCode": "class Solution:\n    def canPermutePalindrome(self, s):\n        dict = collections.Counter(s)\n        num = 0\n        for val in dict.values():\n            if val % 2 == 0:\n                num += val\n            elif num % 2 != 0:\n                return False\n            else:",
        "detail": "python-prac.leetcode.Palindrome_Permutation",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Peak_Index_in_a_Mountain_Array",
        "description": "python-prac.leetcode.Peak_Index_in_a_Mountain_Array",
        "peekOfCode": "class Solution:\n    def peakIndexInMountainArray(self, A):\n        l = 0\n        r = len(A) - 1\n        while l <= r:\n            m = l + (r - l) // 2\n            if m >= 1 and A[m] > A[m - 1] and A[m] > A[m + 1]:\n                return m\n            elif A[m] > A[m - 1]:\n                l = m + 1",
        "detail": "python-prac.leetcode.Peak_Index_in_a_Mountain_Array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Product_Sum",
        "description": "python-prac.leetcode.Product_Sum",
        "peekOfCode": "class Solution:\n    def productSum(self, arr, depth):\n        Sum = 0\n        for element in arr:\n            if type(element) is list:\n                Sum += self.productSum(element, depth + 1)\n            else:\n                Sum += element\n        return depth * Sum\nif __name__ == \"__main__\":",
        "detail": "python-prac.leetcode.Product_Sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Push_Dominoes",
        "description": "python-prac.leetcode.Push_Dominoes",
        "peekOfCode": "class Solution:\n    def pushDominoes(self, dominoes):\n        N = len(dominoes)\n        force = [0] * N\n        f = 0\n        for i in range(N):\n            if dominoes[i] == \"L\":\n                f = 0\n            elif dominoes[i] == \"R\":\n                f = N",
        "detail": "python-prac.leetcode.Push_Dominoes",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Queue_Reconstruction_by_Height",
        "description": "python-prac.leetcode.Queue_Reconstruction_by_Height",
        "peekOfCode": "class Solution:\n    def reconstructQueue(self, people):\n        people.sort(key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res\nif __name__ == \"__main__\":\n    people = [[7, 0], [4, 4], [7, 1], [5, 0], [6, 1], [5, 2]]\n    print(Solution().reconstructQueue(people))",
        "detail": "python-prac.leetcode.Queue_Reconstruction_by_Height",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "kind": 6,
        "importPath": "python-prac.leetcode.Queue_Using_Stack",
        "description": "python-prac.leetcode.Queue_Using_Stack",
        "peekOfCode": "class MyQueue:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.s1 = []\n        self.s2 = []\n    def push(self, x):\n        \"\"\"\n        Push element x to the back of queue.",
        "detail": "python-prac.leetcode.Queue_Using_Stack",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Quick_Select",
        "description": "python-prac.leetcode.Quick_Select",
        "peekOfCode": "class Solution:\n    def quickSelect(self, nums, k):\n        return self.helper(nums, 0, len(nums) - 1, k)\n    def helper(self, nums, left, right, k):\n        while True:\n            pivot = left\n            leftIdx = left + 1\n            rightIdx = right\n            while leftIdx <= rightIdx:\n                if nums[leftIdx] > nums[pivot] and nums[rightIdx] < nums[pivot]:",
        "detail": "python-prac.leetcode.Quick_Select",
        "documentation": {}
    },
    {
        "label": "ransom",
        "kind": 2,
        "importPath": "python-prac.leetcode.Ransom Note",
        "description": "python-prac.leetcode.Ransom Note",
        "peekOfCode": "def ransom(ransomnote, magazine):\n    dict_mag = collections.defaultdict(int)\n    for c in magazine:\n        dict_mag[c] += 1\n    for c in ransomnote:\n        dict_mag[c] -= 1\n        if dict_mag[c] < 0:\n            return False\n    return True\nif __name__ == \"__main__\":",
        "detail": "python-prac.leetcode.Ransom Note",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Remove_Duplicates_from_Sorted_List_II",
        "description": "python-prac.leetcode.Remove_Duplicates_from_Sorted_List_II",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n        if not head:\n            return head\n        if not head.next:\n            return head",
        "detail": "python-prac.leetcode.Remove_Duplicates_from_Sorted_List_II",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Remove_Duplicates_from_Sorted_List_II",
        "description": "python-prac.leetcode.Remove_Duplicates_from_Sorted_List_II",
        "peekOfCode": "class Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n        if not head:\n            return head\n        if not head.next:\n            return head\n        node = ListNode(-1)\n        node.next = head\n        prev = node\n        curr = node.next",
        "detail": "python-prac.leetcode.Remove_Duplicates_from_Sorted_List_II",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Remove_Duplicates_Linked_List",
        "description": "python-prac.leetcode.Remove_Duplicates_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def removeDuplicates(self, head):\n        if not head:\n            return None\n        if head.next is None:\n            return head",
        "detail": "python-prac.leetcode.Remove_Duplicates_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Remove_Duplicates_Linked_List",
        "description": "python-prac.leetcode.Remove_Duplicates_Linked_List",
        "peekOfCode": "class Solution:\n    def removeDuplicates(self, head):\n        if not head:\n            return None\n        if head.next is None:\n            return head\n        prev, curr = head, head.next\n        while curr:\n            if prev.val == curr.val:\n                prev.next = curr.next",
        "detail": "python-prac.leetcode.Remove_Duplicates_Linked_List",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Remove_Zero_Sum_Consecutive_Nodes_from_Linked_List",
        "description": "python-prac.leetcode.Remove_Zero_Sum_Consecutive_Nodes_from_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nimport collections\nclass Solution:\n    def removeZeroSumSublists(self, head):\n        seen = collections.OrderedDict()\n        sentinal = ListNode(0)\n        sentinal.next = head",
        "detail": "python-prac.leetcode.Remove_Zero_Sum_Consecutive_Nodes_from_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Remove_Zero_Sum_Consecutive_Nodes_from_Linked_List",
        "description": "python-prac.leetcode.Remove_Zero_Sum_Consecutive_Nodes_from_Linked_List",
        "peekOfCode": "class Solution:\n    def removeZeroSumSublists(self, head):\n        seen = collections.OrderedDict()\n        sentinal = ListNode(0)\n        sentinal.next = head\n        curr = sentinal\n        prefix = 0\n        while curr:\n            prefix += curr.val\n            if prefix not in seen:",
        "detail": "python-prac.leetcode.Remove_Zero_Sum_Consecutive_Nodes_from_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Repeated_String_Match",
        "description": "python-prac.leetcode.Repeated_String_Match",
        "peekOfCode": "class Solution:\n    def repeatedStringMatch(self, A: str, B: str) -> int:\n        la = len(A)\n        lb = len(B)\n        steps = 2 + lb // la\n        for i in range(steps + 1):\n            if B in A * i:\n                return i\n        return -1",
        "detail": "python-prac.leetcode.Repeated_String_Match",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Reverse String",
        "description": "python-prac.leetcode.Reverse String",
        "peekOfCode": "class Solution:\n    def reversefun(self, arr):\n        left, right = 0, len(arr) - 1\n        while left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            left, right = left + 1, right - 1\n        return arr\nif __name__ == \"__main__\":\n    strs = [\"H\", \"e\", \"l\", \"l\", \"o\"]\n    print(Solution().reversefun(strs))",
        "detail": "python-prac.leetcode.Reverse String",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Reverse_Vowels_of_a_String",
        "description": "python-prac.leetcode.Reverse_Vowels_of_a_String",
        "peekOfCode": "class Solution:\n    def reverseVowels(self, s):\n        if len(s) == 0 or len(s) == 1:\n            return s\n        strs = []\n        for char in s:\n            strs.append(char)\n        pointer1 = 0\n        pointer2 = len(strs) - 1\n        dict = {",
        "detail": "python-prac.leetcode.Reverse_Vowels_of_a_String",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Reverse_Words_String",
        "description": "python-prac.leetcode.Reverse_Words_String",
        "peekOfCode": "class Solution:\n    def reverseStr(self, s):\n        strs = s.split(\" \")\n        newstr = \"\"\n        for word in strs:\n            newstr += word[::-1] + \" \"\n        return newstr[:-1]\nif __name__ == \"__main__\":\n    sentence = \"Let's take LeetCode contest\"\n    print(Solution().reverseStr(sentence))",
        "detail": "python-prac.leetcode.Reverse_Words_String",
        "documentation": {}
    },
    {
        "label": "roman_to_int",
        "kind": 2,
        "importPath": "python-prac.leetcode.Roman_To_Int",
        "description": "python-prac.leetcode.Roman_To_Int",
        "peekOfCode": "def roman_to_int(s):\n    romanNumeral = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n    prev = 0\n    Sum = 0\n    for i in s[::-1]:\n        curr = romanNumeral[i]\n        if curr < prev:\n            Sum -= curr\n        else:\n            Sum += curr",
        "detail": "python-prac.leetcode.Roman_To_Int",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Rotate_Linked_List",
        "description": "python-prac.leetcode.Rotate_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def rotateRight(self, head, k):\n        if not head:\n            return head\n        if not head.next:\n            return head",
        "detail": "python-prac.leetcode.Rotate_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Rotate_Linked_List",
        "description": "python-prac.leetcode.Rotate_Linked_List",
        "peekOfCode": "class Solution:\n    def rotateRight(self, head, k):\n        if not head:\n            return head\n        if not head.next:\n            return head\n        length = 0\n        curr = head\n        while curr:\n            length += 1",
        "detail": "python-prac.leetcode.Rotate_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Same_Tree",
        "description": "python-prac.leetcode.Same_Tree",
        "peekOfCode": "class Solution:\n    def isSameTree(self, p, q):\n        queue = collections.deque()\n        queue.append([p, q])\n        while len(queue):\n            node1, node2 = queue.popleft()\n            if not node1 and not node2:\n                continue\n            if not node1 or not node2:\n                return node1 == node2",
        "detail": "python-prac.leetcode.Same_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Sentence_Similarity",
        "description": "python-prac.leetcode.Sentence_Similarity",
        "peekOfCode": "class Solution:\n    def areSentencesSimilar(self, words1, words2, pairs):\n        if len(words1) != len(words2):\n            return False\n        for i in range(len(words1)):\n            arr = [words1[i], words2[i]]\n            arr_rev = [words2[i], words1[i]]\n            if arr not in pairs and arr_rev not in pairs:\n                if words1[i] != words2[i]:\n                    return False",
        "detail": "python-prac.leetcode.Sentence_Similarity",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Single_Number",
        "description": "python-prac.leetcode.Single_Number",
        "peekOfCode": "class Solution:\n    def singleNumber(self, nums):\n        res = 0\n        for num in nums:\n            res = res ^ num\n        return res",
        "detail": "python-prac.leetcode.Single_Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Single_Row_Keyboard",
        "description": "python-prac.leetcode.Single_Row_Keyboard",
        "peekOfCode": "class Solution:\n    def calculateTime(self, keyboard, word):\n        # dict = {}\n        # for i in range(len(keyboard)):\n        #     dict[keyboard[i]] = i\n        total = 0\n        i = 0\n        for char in word:\n            total += abs(i - keyboard.index(char))\n            i = keyboard.index(char)",
        "detail": "python-prac.leetcode.Single_Row_Keyboard",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Sliding_Window_maximum",
        "description": "python-prac.leetcode.Sliding_Window_maximum",
        "peekOfCode": "class Solution:\n    def maxSlidingWindow(self, nums, k):\n        # if len(nums) == 0:\n        #     return []\n        # length = len(nums) - k\n        # arr = []\n        # for i in range(length + 1):\n        #     arr.append(max(nums[i:i + k]))\n        #\n        # return arr",
        "detail": "python-prac.leetcode.Sliding_Window_maximum",
        "documentation": {}
    },
    {
        "label": "sortArray",
        "kind": 2,
        "importPath": "python-prac.leetcode.Sort_an_Array",
        "description": "python-prac.leetcode.Sort_an_Array",
        "peekOfCode": "def sortArray(nums):\n    def helper(nums, start, end):\n        if start >= end:\n            return\n        pivot = start\n        left = start + 1\n        right = end\n        while left <= right:\n            if nums[left] > nums[pivot] and nums[right] < nums[pivot]:\n                nums[left], nums[right] = nums[right], nums[left]",
        "detail": "python-prac.leetcode.Sort_an_Array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Sort_Three_Colors",
        "description": "python-prac.leetcode.Sort_Three_Colors",
        "peekOfCode": "class Solution:\n    def sortColors(self, nums):\n        index = 0\n        zero_index = 0\n        two_index = len(nums) - 1\n        while index <= two_index:\n            if nums[index] == 0:\n                nums[index], nums[zero_index] = nums[zero_index], nums[index]\n                index += 1\n                zero_index += 1",
        "detail": "python-prac.leetcode.Sort_Three_Colors",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Squares_of_a_Sorted_Array",
        "description": "python-prac.leetcode.Squares_of_a_Sorted_Array",
        "peekOfCode": "class Solution:\n    def sortedSquares(self, A):\n        negative_stack = []\n        res = []\n        for num in A:\n            if num < 0:\n                negative_stack.append(num)\n                continue\n            while len(negative_stack) and -negative_stack[-1] <= num:\n                res.append(negative_stack.pop() ** 2)",
        "detail": "python-prac.leetcode.Squares_of_a_Sorted_Array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.String_Compression",
        "description": "python-prac.leetcode.String_Compression",
        "peekOfCode": "class Solution:\n    def compress(self, chars):\n        n = len(chars)\n        i = 0\n        count = 1\n        for j in range(1, n + 1):\n            if j < n and chars[j] == chars[j - 1]:\n                count += 1\n            else:\n                chars[i] = chars[j - 1]",
        "detail": "python-prac.leetcode.String_Compression",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Strobogrammatic_Number",
        "description": "python-prac.leetcode.Strobogrammatic_Number",
        "peekOfCode": "class Solution:\n    def isStrobogrammatic(self, num):\n        dict = {\"6\": \"9\", \"9\": \"6\", \"8\": \"8\", \"0\": \"0\", \"1\": \"1\"}\n        pointer = len(num) - 1\n        nums = []\n        while pointer >= 0:\n            if num[pointer] not in dict:\n                return False\n            nums.append(dict[num[pointer]])\n            pointer -= 1",
        "detail": "python-prac.leetcode.Strobogrammatic_Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Student_Attendance_Record_I",
        "description": "python-prac.leetcode.Student_Attendance_Record_I",
        "peekOfCode": "class Solution:\n    def checkRecord(self, s):\n        countA = 0\n        for i in range(len(s)):\n            if s[i] == \"A\":\n                countA += 1\n            if (i < len(s) - 2) and s[i] == \"L\" and s[i + 1] == \"L\" and s[i + 2] == \"L\":\n                return False\n        if countA > 1:\n            return False",
        "detail": "python-prac.leetcode.Student_Attendance_Record_I",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Subarray_Sum_K",
        "description": "python-prac.leetcode.Subarray_Sum_K",
        "peekOfCode": "class Solution:\n    def subarraySum(self, nums, k):\n        Sum = 0\n        previous = collections.defaultdict(int)\n        count = 0\n        previous[0] += 1\n        for index, num in enumerate(nums):\n            Sum += num\n            if Sum - k in previous:\n                count += previous[Sum - k]",
        "detail": "python-prac.leetcode.Subarray_Sum_K",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Subtree_of_another_Tree",
        "description": "python-prac.leetcode.Subtree_of_another_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:\n        def preOrder(node):\n            if not node:\n                return \"null\"",
        "detail": "python-prac.leetcode.Subtree_of_another_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Subtree_of_another_Tree",
        "description": "python-prac.leetcode.Subtree_of_another_Tree",
        "peekOfCode": "class Solution:\n    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:\n        def preOrder(node):\n            if not node:\n                return \"null\"\n            return (\n                \"-\"\n                + str(node.val)\n                + \"-\"\n                + preOrder(node.left)",
        "detail": "python-prac.leetcode.Subtree_of_another_Tree",
        "documentation": {}
    },
    {
        "label": "SuffixTrie",
        "kind": 6,
        "importPath": "python-prac.leetcode.Suffix_Trie_Construction",
        "description": "python-prac.leetcode.Suffix_Trie_Construction",
        "peekOfCode": "class SuffixTrie:\n    def __init__(self, string):\n        self.root = {}\n        self.endSymbol = \"*\"\n        self.populateSuffixTrieFrom(string)\n    def populateSuffixTrieFrom(self, string):\n        for i in range(len(string)):\n            self.insertSubstringStartingAt(i, string)\n    def insertSubstringStartingAt(self, i, string):\n        node = self.root",
        "detail": "python-prac.leetcode.Suffix_Trie_Construction",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Sum_of_left_leaves",
        "description": "python-prac.leetcode.Sum_of_left_leaves",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    # Iterative\n    def sum_of_Left_Leaves(self, root):\n        if not root:\n            return 0",
        "detail": "python-prac.leetcode.Sum_of_left_leaves",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Sum_of_left_leaves",
        "description": "python-prac.leetcode.Sum_of_left_leaves",
        "peekOfCode": "class Solution:\n    # Iterative\n    def sum_of_Left_Leaves(self, root):\n        if not root:\n            return 0\n        node = root\n        stack = []\n        stack.append(node)\n        lsum = 0\n        while len(stack) > 0:",
        "detail": "python-prac.leetcode.Sum_of_left_leaves",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Sum_of_two_nums",
        "description": "python-prac.leetcode.Sum_of_two_nums",
        "peekOfCode": "class Solution:\n    def __init__(self, arr, target):\n        self.arr = arr\n        self.target = target\n    def twoSum(self):\n        dict = {}\n        for i, num in enumerate(self.arr):\n            if (self.target - num) in dict:\n                return [dict[self.target - num], i]\n            dict[num] = i",
        "detail": "python-prac.leetcode.Sum_of_two_nums",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Symmetric_Tree",
        "description": "python-prac.leetcode.Symmetric_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def isSymmetric(self, root):\n        if not root:\n            return True\n        def helper(node1, node2):",
        "detail": "python-prac.leetcode.Symmetric_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Symmetric_Tree",
        "description": "python-prac.leetcode.Symmetric_Tree",
        "peekOfCode": "class Solution:\n    def isSymmetric(self, root):\n        if not root:\n            return True\n        def helper(node1, node2):\n            if not node1 and not node2:\n                return True\n            if not node1 or not node2:\n                return False\n            if node1.val != node2.val:",
        "detail": "python-prac.leetcode.Symmetric_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Three_Sum",
        "description": "python-prac.leetcode.Three_Sum",
        "peekOfCode": "class Solution:\n    def threeSum(self, nums):\n        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            # Two Sum\n            j = i + 1\n            k = len(nums) - 1",
        "detail": "python-prac.leetcode.Three_Sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Toeplitz_Matrix",
        "description": "python-prac.leetcode.Toeplitz_Matrix",
        "peekOfCode": "class Solution:\n    def isToeplitzMatrix(self, matrix):\n        for r in range(len(matrix) - 1):\n            for c in range(len(matrix[0]) - 1):\n                if matrix[r][c] != matrix[r + 1][c + 1]:\n                    return False\n        return True",
        "detail": "python-prac.leetcode.Toeplitz_Matrix",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Top_K_Frequent_element",
        "description": "python-prac.leetcode.Top_K_Frequent_element",
        "peekOfCode": "class Solution:\n    def topk(self, nums, k):\n        dict_nums = collections.Counter(nums)\n        heap = []\n        for key, val in dict_nums.items():\n            heapq.heappush(heap, (val, key))\n            if len(heap) > k:\n                heapq.heappop(heap)\n        res = []\n        while len(heap) > 0:",
        "detail": "python-prac.leetcode.Top_K_Frequent_element",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.leetcode.Traversing2_parallel_trees",
        "description": "python-prac.leetcode.Traversing2_parallel_trees",
        "peekOfCode": "class Node:\n    def __init__(self, data=None, children=[]):\n        self.data = data\n        self.children = children\n    def isclone(self, n2):\n        if self.data != n2.data:\n            return False\n        if len(self.children) != len(n2.children):\n            return False\n        for i in range(0, len(self.children)):",
        "detail": "python-prac.leetcode.Traversing2_parallel_trees",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Tree_Serialization_DeSerialization",
        "description": "python-prac.leetcode.Tree_Serialization_DeSerialization",
        "peekOfCode": "class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Codec:\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        :type root: TreeNode\n        :rtype: str",
        "detail": "python-prac.leetcode.Tree_Serialization_DeSerialization",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "python-prac.leetcode.Tree_Serialization_DeSerialization",
        "description": "python-prac.leetcode.Tree_Serialization_DeSerialization",
        "peekOfCode": "class Codec:\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        if not root:\n            return \"#\"\n        return (\n            str(root.val)",
        "detail": "python-prac.leetcode.Tree_Serialization_DeSerialization",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Two_Sum_II_Input_array_is_sorted",
        "description": "python-prac.leetcode.Two_Sum_II_Input_array_is_sorted",
        "peekOfCode": "class Solution:\n    def twoSum(self, numbers, target):\n        left = 0\n        right = len(numbers) - 1\n        while left < right:\n            total = numbers[left] + numbers[right]\n            if total == target:\n                return [left + 1, right + 1]\n            elif total > target:\n                right -= 1",
        "detail": "python-prac.leetcode.Two_Sum_II_Input_array_is_sorted",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Two_Sum_IV_Input_is_a_BST",
        "description": "python-prac.leetcode.Two_Sum_IV_Input_is_a_BST",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def findTarget(self, root, k):\n        dict = {}\n        queue = collections.deque()\n        queue.append(root)",
        "detail": "python-prac.leetcode.Two_Sum_IV_Input_is_a_BST",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Two_Sum_IV_Input_is_a_BST",
        "description": "python-prac.leetcode.Two_Sum_IV_Input_is_a_BST",
        "peekOfCode": "class Solution:\n    def findTarget(self, root, k):\n        dict = {}\n        queue = collections.deque()\n        queue.append(root)\n        while len(queue):\n            node = queue.popleft()\n            if k - node.val in dict:\n                return True\n            dict[node.val] = 1",
        "detail": "python-prac.leetcode.Two_Sum_IV_Input_is_a_BST",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Unique_email_Addresses",
        "description": "python-prac.leetcode.Unique_email_Addresses",
        "peekOfCode": "class Solution:\n    def numUniqueEmails(self, emails):\n        seen = set()\n        for email in emails:\n            local, domain = email.split(\"@\")\n            if \"+\" in local:\n                local = local[: local.index(\"+\")]\n                local = local.replace(\".\", \"\")\n                seen.add(local + \"@\" + domain)\n            else:",
        "detail": "python-prac.leetcode.Unique_email_Addresses",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Unique_paths",
        "description": "python-prac.leetcode.Unique_paths",
        "peekOfCode": "class Solution:\n    def uniquePaths(self, m, n):\n        matrix = []\n        for i in range(m):\n            matrix.append([0] * n)\n        for i in range(n):\n            matrix[0][i] = 1\n        for i in range(m):\n            matrix[i][0] = 1\n        for i in range(1, m):",
        "detail": "python-prac.leetcode.Unique_paths",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.leetcode.Validate Binary Search Tree",
        "description": "python-prac.leetcode.Validate Binary Search Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def isValidBST(self, root):\n        def helper(node, lower, upper):\n            if not node:\n                return True",
        "detail": "python-prac.leetcode.Validate Binary Search Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Validate Binary Search Tree",
        "description": "python-prac.leetcode.Validate Binary Search Tree",
        "peekOfCode": "class Solution:\n    def isValidBST(self, root):\n        def helper(node, lower, upper):\n            if not node:\n                return True\n            val = node.val\n            if val <= lower or val >= upper:\n                print(\"entered 1\")\n                return False\n            if not helper(node.right, val, upper):",
        "detail": "python-prac.leetcode.Validate Binary Search Tree",
        "documentation": {}
    },
    {
        "label": "node",
        "kind": 5,
        "importPath": "python-prac.leetcode.Validate Binary Search Tree",
        "description": "python-prac.leetcode.Validate Binary Search Tree",
        "peekOfCode": "node = TreeNode(5)\nnode.left = TreeNode(4)\nnode.right = TreeNode(7)\nnode.right.left = TreeNode(6)\nnode.right.right = TreeNode(8)\nprint(Solution().isValidBST(node))",
        "detail": "python-prac.leetcode.Validate Binary Search Tree",
        "documentation": {}
    },
    {
        "label": "node.left",
        "kind": 5,
        "importPath": "python-prac.leetcode.Validate Binary Search Tree",
        "description": "python-prac.leetcode.Validate Binary Search Tree",
        "peekOfCode": "node.left = TreeNode(4)\nnode.right = TreeNode(7)\nnode.right.left = TreeNode(6)\nnode.right.right = TreeNode(8)\nprint(Solution().isValidBST(node))",
        "detail": "python-prac.leetcode.Validate Binary Search Tree",
        "documentation": {}
    },
    {
        "label": "node.right",
        "kind": 5,
        "importPath": "python-prac.leetcode.Validate Binary Search Tree",
        "description": "python-prac.leetcode.Validate Binary Search Tree",
        "peekOfCode": "node.right = TreeNode(7)\nnode.right.left = TreeNode(6)\nnode.right.right = TreeNode(8)\nprint(Solution().isValidBST(node))",
        "detail": "python-prac.leetcode.Validate Binary Search Tree",
        "documentation": {}
    },
    {
        "label": "node.right.left",
        "kind": 5,
        "importPath": "python-prac.leetcode.Validate Binary Search Tree",
        "description": "python-prac.leetcode.Validate Binary Search Tree",
        "peekOfCode": "node.right.left = TreeNode(6)\nnode.right.right = TreeNode(8)\nprint(Solution().isValidBST(node))",
        "detail": "python-prac.leetcode.Validate Binary Search Tree",
        "documentation": {}
    },
    {
        "label": "node.right.right",
        "kind": 5,
        "importPath": "python-prac.leetcode.Validate Binary Search Tree",
        "description": "python-prac.leetcode.Validate Binary Search Tree",
        "peekOfCode": "node.right.right = TreeNode(8)\nprint(Solution().isValidBST(node))",
        "detail": "python-prac.leetcode.Validate Binary Search Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Valid_Anagram",
        "description": "python-prac.leetcode.Valid_Anagram",
        "peekOfCode": "class Solution:\n    def isAnagram(self, s, t):\n        if len(s) != len(t):\n            return False\n        dict = collections.Counter(t)\n        for char in s:\n            if char in dict and dict[char] > 0:\n                dict[char] -= 1\n            else:\n                return False",
        "detail": "python-prac.leetcode.Valid_Anagram",
        "documentation": {}
    },
    {
        "label": "isValid",
        "kind": 2,
        "importPath": "python-prac.leetcode.Valid_parentheses",
        "description": "python-prac.leetcode.Valid_parentheses",
        "peekOfCode": "def isValid(s):\n    stack = []\n    for c in s:\n        if c == \"(\":\n            stack.append(\"(\")\n        if c == \")\":\n            if len(stack) == 0:\n                return False\n            if stack[-1] != \"(\":\n                return False",
        "detail": "python-prac.leetcode.Valid_parentheses",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.leetcode.Watering_Flowers_2",
        "description": "python-prac.leetcode.Watering_Flowers_2",
        "peekOfCode": "class Solution:\n    def waterPlants(self, plants, capacity1, capacity2):\n        if len(plants) == 0:\n            return 0\n        pointer1 = 0\n        pointer2 = len(plants) - 1\n        can1 = capacity1\n        can2 = capacity2\n        count = 2\n        while pointer1 != pointer2:",
        "detail": "python-prac.leetcode.Watering_Flowers_2",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_append().txt",
        "description": "python-prac.mini-scripts.Array_Methods_append().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.append(\"orange\")\nprint(fruits)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_append().txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_append()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_append()_2.txt",
        "peekOfCode": "a = [\"apple\", \"banana\", \"cherry\"]\nb = [\"Ford\", \"BMW\", \"Volvo\"]\na.append(b)\nprint(a)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_append()_2.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_append()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_append()_2.txt",
        "peekOfCode": "b = [\"Ford\", \"BMW\", \"Volvo\"]\na.append(b)\nprint(a)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_append()_2.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_clear().txt",
        "description": "python-prac.mini-scripts.Array_Methods_clear().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.clear()\nprint(fruits)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_clear().txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_copy().txt",
        "description": "python-prac.mini-scripts.Array_Methods_copy().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nx = fruits.copy()\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_copy().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_copy().txt",
        "description": "python-prac.mini-scripts.Array_Methods_copy().txt",
        "peekOfCode": "x = fruits.copy()\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_copy().txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_count().txt",
        "description": "python-prac.mini-scripts.Array_Methods_count().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nx = fruits.count(\"cherry\")\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_count().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_count().txt",
        "description": "python-prac.mini-scripts.Array_Methods_count().txt",
        "peekOfCode": "x = fruits.count(\"cherry\")\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_count().txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_count()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_count()_2.txt",
        "peekOfCode": "fruits = [1, 4, 2, 9, 7, 8, 9, 3, 1]\nx = fruits.count(9)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_count()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_count()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_count()_2.txt",
        "peekOfCode": "x = fruits.count(9)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_count()_2.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_extend().txt",
        "description": "python-prac.mini-scripts.Array_Methods_extend().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\ncars = [\"Ford\", \"BMW\", \"Volvo\"]\nfruits.extend(cars)\nprint(fruits)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_extend().txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_extend().txt",
        "description": "python-prac.mini-scripts.Array_Methods_extend().txt",
        "peekOfCode": "cars = [\"Ford\", \"BMW\", \"Volvo\"]\nfruits.extend(cars)\nprint(fruits)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_extend().txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_extend()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_extend()_2.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\npoints = (1, 4, 5, 9)\nfruits.extend(points)\nprint(fruits)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_extend()_2.txt",
        "documentation": {}
    },
    {
        "label": "points",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_extend()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_extend()_2.txt",
        "peekOfCode": "points = (1, 4, 5, 9)\nfruits.extend(points)\nprint(fruits)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_extend()_2.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_index().txt",
        "description": "python-prac.mini-scripts.Array_Methods_index().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nx = fruits.index(\"cherry\")\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_index().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_index().txt",
        "description": "python-prac.mini-scripts.Array_Methods_index().txt",
        "peekOfCode": "x = fruits.index(\"cherry\")\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_index().txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_index()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_index()_2.txt",
        "peekOfCode": "fruits = [4, 55, 64, 32, 16, 32]\nx = fruits.index(32)\nprint(x)\n# Author: Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_index()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_index()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_index()_2.txt",
        "peekOfCode": "x = fruits.index(32)\nprint(x)\n# Author: Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_index()_2.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_insert().txt",
        "description": "python-prac.mini-scripts.Array_Methods_insert().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.insert(1, \"orange\")\nprint(fruits)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_insert().txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_pop().txt",
        "description": "python-prac.mini-scripts.Array_Methods_pop().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.pop(1)\nprint(fruits)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_pop().txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_pop()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_pop()_2.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nx = fruits.pop(1)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_pop()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_pop()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_pop()_2.txt",
        "peekOfCode": "x = fruits.pop(1)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_pop()_2.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_remove().txt",
        "description": "python-prac.mini-scripts.Array_Methods_remove().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.remove(\"banana\")\nprint(fruits)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_remove().txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_reverse().txt",
        "description": "python-prac.mini-scripts.Array_Methods_reverse().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.reverse()\nprint(fruits)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_reverse().txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_sort().txt",
        "description": "python-prac.mini-scripts.Array_Methods_sort().txt",
        "peekOfCode": "cars = [\"Ford\", \"BMW\", \"Volvo\"]\ncars.sort()\nprint(cars)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_sort().txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_sort()_2.txt",
        "description": "python-prac.mini-scripts.Array_Methods_sort()_2.txt",
        "peekOfCode": "cars = [\"Ford\", \"BMW\", \"Volvo\"]\ncars.sort(reverse=True)\nprint(cars)\n# Author: Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_sort()_2.txt",
        "documentation": {}
    },
    {
        "label": "myFunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.Array_Methods_sort()_3.txt",
        "description": "python-prac.mini-scripts.Array_Methods_sort()_3.txt",
        "peekOfCode": "def myFunc(e):\n    return len(e)\ncars = [\"Ford\", \"Mitsubishi\", \"BMW\", \"VW\"]\ncars.sort(key=myFunc)\nprint(cars)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_sort()_3.txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_sort()_3.txt",
        "description": "python-prac.mini-scripts.Array_Methods_sort()_3.txt",
        "peekOfCode": "cars = [\"Ford\", \"Mitsubishi\", \"BMW\", \"VW\"]\ncars.sort(key=myFunc)\nprint(cars)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_sort()_3.txt",
        "documentation": {}
    },
    {
        "label": "myFunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.Array_Methods_sort()_4.txt",
        "description": "python-prac.mini-scripts.Array_Methods_sort()_4.txt",
        "peekOfCode": "def myFunc(e):\n    return e[\"year\"]\ncars = [\n    {\"car\": \"Ford\", \"year\": 2005},\n    {\"car\": \"Mitsubishi\", \"year\": 2000},\n    {\"car\": \"BMW\", \"year\": 2019},\n    {\"car\": \"VW\", \"year\": 2011},\n]\ncars.sort(key=myFunc)\nprint(cars)",
        "detail": "python-prac.mini-scripts.Array_Methods_sort()_4.txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_sort()_4.txt",
        "description": "python-prac.mini-scripts.Array_Methods_sort()_4.txt",
        "peekOfCode": "cars = [\n    {\"car\": \"Ford\", \"year\": 2005},\n    {\"car\": \"Mitsubishi\", \"year\": 2000},\n    {\"car\": \"BMW\", \"year\": 2019},\n    {\"car\": \"VW\", \"year\": 2011},\n]\ncars.sort(key=myFunc)\nprint(cars)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_sort()_4.txt",
        "documentation": {}
    },
    {
        "label": "myFunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.Array_Methods_sort()_5.txt",
        "description": "python-prac.mini-scripts.Array_Methods_sort()_5.txt",
        "peekOfCode": "def myFunc(e):\n    return len(e)\ncars = [\"Ford\", \"Mitsubishi\", \"BMW\", \"VW\"]\ncars.sort(reverse=True, key=myFunc)\nprint(cars)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_sort()_5.txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Array_Methods_sort()_5.txt",
        "description": "python-prac.mini-scripts.Array_Methods_sort()_5.txt",
        "peekOfCode": "cars = [\"Ford\", \"Mitsubishi\", \"BMW\", \"VW\"]\ncars.sort(reverse=True, key=myFunc)\nprint(cars)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Array_Methods_sort()_5.txt",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.List_Items_-_Data_Types__1.txt",
        "description": "python-prac.mini-scripts.List_Items_-_Data_Types__1.txt",
        "peekOfCode": "list1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]\nprint(list1)\nprint(list2)\nprint(list3)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.List_Items_-_Data_Types__1.txt",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.List_Items_-_Data_Types__1.txt",
        "description": "python-prac.mini-scripts.List_Items_-_Data_Types__1.txt",
        "peekOfCode": "list2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]\nprint(list1)\nprint(list2)\nprint(list3)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.List_Items_-_Data_Types__1.txt",
        "documentation": {}
    },
    {
        "label": "list3",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.List_Items_-_Data_Types__1.txt",
        "description": "python-prac.mini-scripts.List_Items_-_Data_Types__1.txt",
        "peekOfCode": "list3 = [True, False, False]\nprint(list1)\nprint(list2)\nprint(list3)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.List_Items_-_Data_Types__1.txt",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.List_Items_-_Data_Types__2.txt",
        "description": "python-prac.mini-scripts.List_Items_-_Data_Types__2.txt",
        "peekOfCode": "list1 = [\"abc\", 34, True, 40, \"male\"]\nprint(list1)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.List_Items_-_Data_Types__2.txt",
        "documentation": {}
    },
    {
        "label": "mylist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.List_Items_-_Data_Types__3.txt",
        "description": "python-prac.mini-scripts.List_Items_-_Data_Types__3.txt",
        "peekOfCode": "mylist = [\"apple\", \"banana\", \"cherry\"]\nprint(type(mylist))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.List_Items_-_Data_Types__3.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.List_Items_-_Data_Types__4.txt",
        "description": "python-prac.mini-scripts.List_Items_-_Data_Types__4.txt",
        "peekOfCode": "thislist = list((\"apple\", \"banana\", \"cherry\"))\nprint(thislist)\n# Author: Bryan G",
        "detail": "python-prac.mini-scripts.List_Items_-_Data_Types__4.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.pythi_The_pass_Statement.txt",
        "description": "python-prac.mini-scripts.pythi_The_pass_Statement.txt",
        "peekOfCode": "a = 33\nb = 200\nif b > a:\n    pass\n# having an empty if statement like this, would raise an error without the pass statement",
        "detail": "python-prac.mini-scripts.pythi_The_pass_Statement.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.pythi_The_pass_Statement.txt",
        "description": "python-prac.mini-scripts.pythi_The_pass_Statement.txt",
        "peekOfCode": "b = 200\nif b > a:\n    pass\n# having an empty if statement like this, would raise an error without the pass statement",
        "detail": "python-prac.mini-scripts.pythi_The_pass_Statement.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Access_Dictionary_1.txt",
        "description": "python-prac.mini-scripts.Python_-_Access_Dictionary_1.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nx = thisdict[\"model\"]\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Access_Dictionary_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Access_Dictionary_1.txt",
        "description": "python-prac.mini-scripts.Python_-_Access_Dictionary_1.txt",
        "peekOfCode": "x = thisdict[\"model\"]\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Access_Dictionary_1.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Access_Dictionary_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Access_Dictionary_2.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nx = thisdict.get(\"model\")\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Access_Dictionary_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Access_Dictionary_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Access_Dictionary_2.txt",
        "peekOfCode": "x = thisdict.get(\"model\")\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Access_Dictionary_2.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Access_List.txt",
        "description": "python-prac.mini-scripts.Python_-_Access_List.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist[1])\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Access_List.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Access_Set_Items_1.txt",
        "description": "python-prac.mini-scripts.Python_-_Access_Set_Items_1.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\nfor x in thisset:\n    print(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Access_Set_Items_1.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Access_Set_Items_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Access_Set_Items_2.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\nprint(\"banana\" in thisset)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Access_Set_Items_2.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Add_Dictionary.txt",
        "description": "python-prac.mini-scripts.Python_-_Add_Dictionary.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nthisdict[\"color\"] = \"red\"\nprint(thisdict)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Add_Dictionary.txt",
        "documentation": {}
    },
    {
        "label": "thisdict[\"color\"]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Add_Dictionary.txt",
        "description": "python-prac.mini-scripts.Python_-_Add_Dictionary.txt",
        "peekOfCode": "thisdict[\"color\"] = \"red\"\nprint(thisdict)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Add_Dictionary.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Add_Set.txt",
        "description": "python-prac.mini-scripts.Python_-_Add_Set.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.add(\"orange\")\nprint(thisset)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Add_Set.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Change_Dictionary.txt",
        "description": "python-prac.mini-scripts.Python_-_Change_Dictionary.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nthisdict[\"year\"] = 2018\nprint(thisdict)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Change_Dictionary.txt",
        "documentation": {}
    },
    {
        "label": "thisdict[\"year\"]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Change_Dictionary.txt",
        "description": "python-prac.mini-scripts.Python_-_Change_Dictionary.txt",
        "peekOfCode": "thisdict[\"year\"] = 2018\nprint(thisdict)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Change_Dictionary.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Change_List_insert_items.txt",
        "description": "python-prac.mini-scripts.Python_-_Change_List_insert_items.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.insert(2, \"watermelon\")\nprint(thislist)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Change_List_insert_items.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_clear_Set_Items.txt",
        "description": "python-prac.mini-scripts.Python_-_clear_Set_Items.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.clear()\nprint(thisset)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_clear_Set_Items.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Copy.txt",
        "description": "python-prac.mini-scripts.Python_-_Copy.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = thislist.copy()\nprint(mylist)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Copy.txt",
        "documentation": {}
    },
    {
        "label": "mylist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Copy.txt",
        "description": "python-prac.mini-scripts.Python_-_Copy.txt",
        "peekOfCode": "mylist = thislist.copy()\nprint(mylist)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Copy.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_delete_Set_Items.txt",
        "description": "python-prac.mini-scripts.Python_-_delete_Set_Items.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\ndel thisset\nprint(thisset) #this will raise an error because the set no longer exists\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_delete_Set_Items.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_discard_Set_Items.txt",
        "description": "python-prac.mini-scripts.Python_-_discard_Set_Items.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.discard(\"banana\")\nprint(thisset)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_discard_Set_Items.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_(actal_value).txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_(actal_value).txt",
        "peekOfCode": "txt = \"\\110\\145\\154\\154\\157\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_(actal_value).txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_(backslash).txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_(backslash).txt",
        "peekOfCode": "txt = \"This will insert one \\\\ (backslash).\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_(backslash).txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_(backspace).txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_(backspace).txt",
        "peekOfCode": "txt = \"Hello \\bWorld!\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_(backspace).txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_(carriage_return).txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_(carriage_return).txt",
        "peekOfCode": "txt = \"Hello\\rWorld!\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_(carriage_return).txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_(hex_value).txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_(hex_value).txt",
        "peekOfCode": "txt = \"\\x48\\x65\\x6c\\x6c\\x6f\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_(hex_value).txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_(new_line).txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_(new_line).txt",
        "peekOfCode": "txt = \"Hello\\nWorld!\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_(new_line).txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_(single_quote).txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_(single_quote).txt",
        "peekOfCode": "txt = \"It's alright.\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_(single_quote).txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_(tap).txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_(tap).txt",
        "peekOfCode": "txt = \"Hello\\rWorld!\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_(tap).txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_backpase.txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_backpase.txt",
        "peekOfCode": "txt = \"Hello \\bWorld!\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_backpase.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_backslash.txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_backslash.txt",
        "peekOfCode": "txt = \"This will insert one \\\\ (backslash).\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_backslash.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_carriage_return.txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_carriage_return.txt",
        "peekOfCode": "txt = \"Hello\\rWorld!\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_carriage_return.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_hex_value.txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_hex_value.txt",
        "peekOfCode": "txt = \"\\x48\\x65\\x6c\\x6c\\x6f\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_hex_value.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_new_line.txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_new_line.txt",
        "peekOfCode": "txt = \"Hello\\nWorld!\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_new_line.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_octal_value.txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_octal_value.txt",
        "peekOfCode": "txt = \"\\110\\145\\154\\154\\157\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_octal_value.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_singlr_quote.txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_singlr_quote.txt",
        "peekOfCode": "txt = \"It's alright.\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_singlr_quote.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Escape_Characters_tab.txt",
        "description": "python-prac.mini-scripts.Python_-_Escape_Characters_tab.txt",
        "peekOfCode": "txt = \"Hello\\tWorld!\"\nprint(txt)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Escape_Characters_tab.txt",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Format_-_Strings_1.txt",
        "description": "python-prac.mini-scripts.Python_-_Format_-_Strings_1.txt",
        "peekOfCode": "age = 36\ntxt = \"My name is John, and I am {}\"\nprint(txt.format(age))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Format_-_Strings_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Format_-_Strings_1.txt",
        "description": "python-prac.mini-scripts.Python_-_Format_-_Strings_1.txt",
        "peekOfCode": "txt = \"My name is John, and I am {}\"\nprint(txt.format(age))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Format_-_Strings_1.txt",
        "documentation": {}
    },
    {
        "label": "quantity",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "peekOfCode": "quantity = 3\nitemno = 567\nprice = 49.95\nmyorder = \"I want {} pieces of item {} for {} dollars.\"\nprint(myorder.format(quantity, itemno, price))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "documentation": {}
    },
    {
        "label": "itemno",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "peekOfCode": "itemno = 567\nprice = 49.95\nmyorder = \"I want {} pieces of item {} for {} dollars.\"\nprint(myorder.format(quantity, itemno, price))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "peekOfCode": "price = 49.95\nmyorder = \"I want {} pieces of item {} for {} dollars.\"\nprint(myorder.format(quantity, itemno, price))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "documentation": {}
    },
    {
        "label": "myorder",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "peekOfCode": "myorder = \"I want {} pieces of item {} for {} dollars.\"\nprint(myorder.format(quantity, itemno, price))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Format_-_Strings_2.txt",
        "documentation": {}
    },
    {
        "label": "quantity",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "description": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "peekOfCode": "quantity = 3\nitemno = 567\nprice = 49.95\nmyorder = \"I want to pay {2} dollars for {0} pieces of item {1}.\"\nprint(myorder.format(quantity, itemno, price))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "documentation": {}
    },
    {
        "label": "itemno",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "description": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "peekOfCode": "itemno = 567\nprice = 49.95\nmyorder = \"I want to pay {2} dollars for {0} pieces of item {1}.\"\nprint(myorder.format(quantity, itemno, price))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "description": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "peekOfCode": "price = 49.95\nmyorder = \"I want to pay {2} dollars for {0} pieces of item {1}.\"\nprint(myorder.format(quantity, itemno, price))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "documentation": {}
    },
    {
        "label": "myorder",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "description": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "peekOfCode": "myorder = \"I want to pay {2} dollars for {0} pieces of item {1}.\"\nprint(myorder.format(quantity, itemno, price))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Format_-_Strings_3.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.Python_-_Global_Variables_1.txt",
        "description": "python-prac.mini-scripts.Python_-_Global_Variables_1.txt",
        "peekOfCode": "def myfunc():\n    print(\"Python is \" + x)\nmyfunc()\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Global_Variables_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Global_Variables_1.txt",
        "description": "python-prac.mini-scripts.Python_-_Global_Variables_1.txt",
        "peekOfCode": "x = \"awesome\"\ndef myfunc():\n    print(\"Python is \" + x)\nmyfunc()\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Global_Variables_1.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.Python_-_Global_Variables_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Global_Variables_2.txt",
        "peekOfCode": "def myfunc():\n    x = \"fantastic\"\n    print(\"Python is \" + x)\nmyfunc()\nprint(\"Python is \" + x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Global_Variables_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Global_Variables_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Global_Variables_2.txt",
        "peekOfCode": "x = \"awesome\"\ndef myfunc():\n    x = \"fantastic\"\n    print(\"Python is \" + x)\nmyfunc()\nprint(\"Python is \" + x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Global_Variables_2.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_list.txt",
        "description": "python-prac.mini-scripts.Python_-_list.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = list(thislist)\nprint(mylist)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_list.txt",
        "documentation": {}
    },
    {
        "label": "mylist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_list.txt",
        "description": "python-prac.mini-scripts.Python_-_list.txt",
        "peekOfCode": "mylist = list(thislist)\nprint(mylist)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_list.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_1.txt",
        "description": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_1.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nfor x in thisdict:\n    print(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_1.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_2.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nfor x in thisdict:\n    print(thisdict[x])\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_2.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_items().txt",
        "description": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_items().txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nfor x, y in thisdict.items():\n    print(x, y)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_items().txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_keys().txt",
        "description": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_keys().txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nfor x in thisdict.keys():\n    print(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Loop_Dictionaries_keys().txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Loop_Sets.txt",
        "description": "python-prac.mini-scripts.Python_-_Loop_Sets.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\nfor x in thisset:\n    print(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Loop_Sets.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Modify_Strings_(lower_case).txt",
        "description": "python-prac.mini-scripts.Python_-_Modify_Strings_(lower_case).txt",
        "peekOfCode": "a = \"Hello, World!\"\nprint(a.lower())\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Modify_Strings_(lower_case).txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Modify_Strings_(upper_case).txt",
        "description": "python-prac.mini-scripts.Python_-_Modify_Strings_(upper_case).txt",
        "peekOfCode": "a = \"Hello, World!\"\nprint(a.upper())\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Modify_Strings_(upper_case).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Output_Variables_1.txt",
        "description": "python-prac.mini-scripts.Python_-_Output_Variables_1.txt",
        "peekOfCode": "x = \"awesome\"\nprint(\"Python is \" + x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Output_Variables_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Output_Variables_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Output_Variables_2.txt",
        "peekOfCode": "x = \"Python is \"\ny = \"awesome\"\nz = x + y\nprint(z)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Output_Variables_2.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Output_Variables_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Output_Variables_2.txt",
        "peekOfCode": "y = \"awesome\"\nz = x + y\nprint(z)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Output_Variables_2.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Output_Variables_2.txt",
        "description": "python-prac.mini-scripts.Python_-_Output_Variables_2.txt",
        "peekOfCode": "z = x + y\nprint(z)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Output_Variables_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Output_Variables_3.txt",
        "description": "python-prac.mini-scripts.Python_-_Output_Variables_3.txt",
        "peekOfCode": "x = 5\ny = 10\nprint(x + y)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Output_Variables_3.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Output_Variables_3.txt",
        "description": "python-prac.mini-scripts.Python_-_Output_Variables_3.txt",
        "peekOfCode": "y = 10\nprint(x + y)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Output_Variables_3.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_pop_Set_Items.txt",
        "description": "python-prac.mini-scripts.Python_-_pop_Set_Items.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\nx = thisset.pop()\nprint(x) #removed item\nprint(thisset) #the set after removal\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_pop_Set_Items.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_pop_Set_Items.txt",
        "description": "python-prac.mini-scripts.Python_-_pop_Set_Items.txt",
        "peekOfCode": "x = thisset.pop()\nprint(x) #removed item\nprint(thisset) #the set after removal\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_pop_Set_Items.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Remove_Dictionary_1.txt",
        "description": "python-prac.mini-scripts.Python_-_Remove_Dictionary_1.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nthisdict.pop(\"model\")\nprint(thisdict)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Remove_Dictionary_1.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Remove_Set_Items.txt",
        "description": "python-prac.mini-scripts.Python_-_Remove_Set_Items.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.remove(\"banana\")\nprint(thisset)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Remove_Set_Items.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_Slicing_Strings.txt",
        "description": "python-prac.mini-scripts.Python_-_Slicing_Strings.txt",
        "peekOfCode": "b = \"Hello, World!\"\nprint(b[2:5])\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_Slicing_Strings.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Concatenation_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Concatenation_1.txt",
        "peekOfCode": "a = \"Hello\"\nb = \"World\"\nc = a + b\nprint(c)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Concatenation_1.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Concatenation_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Concatenation_1.txt",
        "peekOfCode": "b = \"World\"\nc = a + b\nprint(c)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Concatenation_1.txt",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Concatenation_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Concatenation_1.txt",
        "peekOfCode": "c = a + b\nprint(c)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Concatenation_1.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Concatenation_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Concatenation_2.txt",
        "peekOfCode": "a = \"Hello\"\nb = \"World\"\nc = a + \" \" + b\nprint(c)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Concatenation_2.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Concatenation_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Concatenation_2.txt",
        "peekOfCode": "b = \"World\"\nc = a + \" \" + b\nprint(c)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Concatenation_2.txt",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Concatenation_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Concatenation_2.txt",
        "peekOfCode": "c = a + \" \" + b\nprint(c)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Concatenation_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_1.txt",
        "peekOfCode": "txt = \"hello, and welcome to my world.\"\nx = txt.capitalize()\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_1.txt",
        "peekOfCode": "x = txt.capitalize()\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_2.txt",
        "peekOfCode": "txt = \"36 is my age.\"\nx = txt.capitalize()\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_2.txt",
        "peekOfCode": "x = txt.capitalize()\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_capitalize()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_casefold().txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_casefold().txt",
        "peekOfCode": "txt = \"Hello, And Welcome To My World!\"\nx = txt.casefold()\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_casefold().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_casefold().txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_casefold().txt",
        "peekOfCode": "x = txt.casefold()\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_casefold().txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_center()_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_center()_1.txt",
        "peekOfCode": "txt = \"banana\"\nx = txt.center(20)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_center()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_center()_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_center()_1.txt",
        "peekOfCode": "x = txt.center(20)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_center()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_center()_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_center()_2.txt",
        "peekOfCode": "txt = \"banana\"\nx = txt.center(20, \"O\")\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_center()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_center()_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_center()_2.txt",
        "peekOfCode": "x = txt.center(20, \"O\")\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_center()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_count()_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_count()_1.txt",
        "peekOfCode": "txt = \"I love apples, apple are my favorite fruit\"\nx = txt.count(\"apple\")\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_count()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_count()_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_count()_1.txt",
        "peekOfCode": "x = txt.count(\"apple\")\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_count()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_count()_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_count()_2.txt",
        "peekOfCode": "txt = \"I love apples, apple are my favorite fruit\"\nx = txt.count(\"apple\", 10, 24)\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_count()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_count()_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_count()_2.txt",
        "peekOfCode": "x = txt.count(\"apple\", 10, 24)\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_count()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_encode()_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_encode()_1.txt",
        "peekOfCode": "txt = \"My name is Ståle\"\nx = txt.encode()\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_encode()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_encode()_1.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_encode()_1.txt",
        "peekOfCode": "x = txt.encode()\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_encode()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_encode()_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_encode()_2.txt",
        "peekOfCode": "txt = \"My name is Ståle\"\nprint(txt.encode(encoding=\"ascii\",errors=\"backslashreplace\"))\nprint(txt.encode(encoding=\"ascii\",errors=\"ignore\"))\nprint(txt.encode(encoding=\"ascii\",errors=\"namereplace\"))\nprint(txt.encode(encoding=\"ascii\",errors=\"replace\"))\nprint(txt.encode(encoding=\"ascii\",errors=\"xmlcharrefreplace\"))\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_encode()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_endswith().txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_endswith().txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.endswith(\".\")\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_endswith().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_endswith().txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_endswith().txt",
        "peekOfCode": "x = txt.endswith(\".\")\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_endswith().txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_2.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.endswith(\"my world.\")\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_2.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_2.txt",
        "peekOfCode": "x = txt.endswith(\"my world.\")\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_3.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_3.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.endswith(\"my world.\", 5, 11)\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_3.txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_3.txt",
        "peekOfCode": "x = txt.endswith(\"my world.\", 5, 11)\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_endswith()_3.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_expandtabs().txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_expandtabs().txt",
        "peekOfCode": "txt = \"H\\te\\tl\\tl\\to\"\nx =  txt.expandtabs(2)\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_expandtabs().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_expandtabs().txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_expandtabs().txt",
        "peekOfCode": "x =  txt.expandtabs(2)\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_expandtabs().txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_find().txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_find().txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.find(\"welcome\")\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_find().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_find().txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_find().txt",
        "peekOfCode": "x = txt.find(\"welcome\")\nprint(x)\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_find().txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_format().txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_format().txt",
        "peekOfCode": "txt = \"For only {price:.2f} dollars!\"\nprint(txt.format(price = 49))\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_format().txt",
        "documentation": {}
    },
    {
        "label": "print(txt.format(price",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_-_String_Methods_format().txt",
        "description": "python-prac.mini-scripts.Python_-_String_Methods_format().txt",
        "peekOfCode": "print(txt.format(price = 49))\n//creater by Bryan G",
        "detail": "python-prac.mini-scripts.Python_-_String_Methods_format().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(%=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(%=).txt",
        "peekOfCode": "x = 5\nx%=3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(%=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(&=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(&=).txt",
        "peekOfCode": "x = 5\nx &= 3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(&=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(+=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(+=).txt",
        "peekOfCode": "x = 5\nx += 3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(+=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(-=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(-=).txt",
        "peekOfCode": "x = 5\nx -= 3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(-=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(=).txt",
        "peekOfCode": "x = 5\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(backslash_=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(backslash_=).txt",
        "peekOfCode": "x = 5\nx /= 3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(backslash_=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(double_backslash_=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(double_backslash_=).txt",
        "peekOfCode": "x = 5\nx//=3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(double_backslash_=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(double_multible_=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(double_multible_=).txt",
        "peekOfCode": "x = 5\nx **= 3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(double_multible_=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(greterthe_=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(greterthe_=).txt",
        "peekOfCode": "x = 5\nx >>= 3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(greterthe_=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(I=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(I=).txt",
        "peekOfCode": "x = 5\nx |= 3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(I=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(leesthen_=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(leesthen_=).txt",
        "peekOfCode": "x = 5\nx <<= 3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(leesthen_=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(multible_=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(multible_=).txt",
        "peekOfCode": "x = 5\nx *= 3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(multible_=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Assignment_Operators_(up_=).txt",
        "description": "python-prac.mini-scripts.Python_Assignment_Operators_(up_=).txt",
        "peekOfCode": "x = 5\nx ^= 3\nprint(x)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Assignment_Operators_(up_=).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Binomial_Distribution.txt",
        "description": "python-prac.mini-scripts.python_Binomial_Distribution.txt",
        "peekOfCode": "x = random.binomial(n=10, p=0.5, size=10)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Binomial_Distribution.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Built-in_Math_Functions_1.txt",
        "description": "python-prac.mini-scripts.python_Built-in_Math_Functions_1.txt",
        "peekOfCode": "x = min(5, 10, 25)\ny = max(5, 10, 25)\nprint(x)\nprint(y)",
        "detail": "python-prac.mini-scripts.python_Built-in_Math_Functions_1.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Built-in_Math_Functions_1.txt",
        "description": "python-prac.mini-scripts.python_Built-in_Math_Functions_1.txt",
        "peekOfCode": "y = max(5, 10, 25)\nprint(x)\nprint(y)",
        "detail": "python-prac.mini-scripts.python_Built-in_Math_Functions_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Built-in_Math_Functions_2.txt",
        "description": "python-prac.mini-scripts.python_Built-in_Math_Functions_2.txt",
        "peekOfCode": "x = abs(-7.25)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Built-in_Math_Functions_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Built-in_Math_Functions_3.txt",
        "description": "python-prac.mini-scripts.python_Built-in_Math_Functions_3.txt",
        "peekOfCode": "x = pow(4, 3)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Built-in_Math_Functions_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Built-in_Modules.txt",
        "description": "python-prac.mini-scripts.python_Built-in_Modules.txt",
        "peekOfCode": "x = platform.system()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Built-in_Modules.txt",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Calling_a_Function.txt",
        "description": "python-prac.mini-scripts.python_Calling_a_Function.txt",
        "peekOfCode": "def my_function():\n    print(\"Hello from a function\")\nmy_function()",
        "detail": "python-prac.mini-scripts.python_Calling_a_Function.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Case_Insensitive_Sort_1.txt",
        "description": "python-prac.mini-scripts.python_Case_Insensitive_Sort_1.txt",
        "peekOfCode": "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.sort()\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Case_Insensitive_Sort_1.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Case_Insensitive_Sort_2.txt",
        "description": "python-prac.mini-scripts.python_Case_Insensitive_Sort_2.txt",
        "peekOfCode": "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.sort(key=str.lower)\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Case_Insensitive_Sort_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "description": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "peekOfCode": "x = float(1)\ny = float(2.8)\nz = float(\"3\")\nw = float(\"4.2\")\nprint(x)\nprint(y)\nprint(z)\nprint(w)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "description": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "peekOfCode": "y = float(2.8)\nz = float(\"3\")\nw = float(\"4.2\")\nprint(x)\nprint(y)\nprint(z)\nprint(w)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "description": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "peekOfCode": "z = float(\"3\")\nw = float(\"4.2\")\nprint(x)\nprint(y)\nprint(z)\nprint(w)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "description": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "peekOfCode": "w = float(\"4.2\")\nprint(x)\nprint(y)\nprint(z)\nprint(w)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Casting_(float).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Casting_(int).txt",
        "description": "python-prac.mini-scripts.Python_Casting_(int).txt",
        "peekOfCode": "x = int(1)\ny = int(2.8)\nz = int(\"3\")\nprint(x)\nprint(y)\nprint(z)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Casting_(int).txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Casting_(int).txt",
        "description": "python-prac.mini-scripts.Python_Casting_(int).txt",
        "peekOfCode": "y = int(2.8)\nz = int(\"3\")\nprint(x)\nprint(y)\nprint(z)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Casting_(int).txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Casting_(int).txt",
        "description": "python-prac.mini-scripts.Python_Casting_(int).txt",
        "peekOfCode": "z = int(\"3\")\nprint(x)\nprint(y)\nprint(z)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Casting_(int).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Casting_(str).txt",
        "description": "python-prac.mini-scripts.Python_Casting_(str).txt",
        "peekOfCode": "x = str(\"s1\")\ny = str(2)\nz = str(3.0)\nprint(x)\nprint(y)\nprint(z)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Casting_(str).txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Casting_(str).txt",
        "description": "python-prac.mini-scripts.Python_Casting_(str).txt",
        "peekOfCode": "y = str(2)\nz = str(3.0)\nprint(x)\nprint(y)\nprint(z)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Casting_(str).txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Casting_(str).txt",
        "description": "python-prac.mini-scripts.Python_Casting_(str).txt",
        "peekOfCode": "z = str(3.0)\nprint(x)\nprint(y)\nprint(z)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Casting_(str).txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_1.txt",
        "description": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_1.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"]\nthislist[1:3] = [\"blackcurrant\", \"watermelon\"]\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_1.txt",
        "documentation": {}
    },
    {
        "label": "thislist[1:3]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_1.txt",
        "description": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_1.txt",
        "peekOfCode": "thislist[1:3] = [\"blackcurrant\", \"watermelon\"]\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_1.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_2.txt",
        "description": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_2.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"]\nthislist[1:3] = [\"blackcurrant\", \"watermelon\"]\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_2.txt",
        "documentation": {}
    },
    {
        "label": "thislist[1:3]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_2.txt",
        "description": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_2.txt",
        "peekOfCode": "thislist[1:3] = [\"blackcurrant\", \"watermelon\"]\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_2.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_3.txt",
        "description": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_3.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist[1:2] = [\"blackcurrant\", \"watermelon\"]\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_3.txt",
        "documentation": {}
    },
    {
        "label": "thislist[1:2]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_3.txt",
        "description": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_3.txt",
        "peekOfCode": "thislist[1:2] = [\"blackcurrant\", \"watermelon\"]\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_3.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_4.txt",
        "description": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_4.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist[1:3] = [\"watermelon\"]\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_4.txt",
        "documentation": {}
    },
    {
        "label": "thislist[1:3]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_4.txt",
        "description": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_4.txt",
        "peekOfCode": "thislist[1:3] = [\"watermelon\"]\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Change_a_Range_of_Item_Values_4.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_Item_Value.txt",
        "description": "python-prac.mini-scripts.python_Change_Item_Value.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist[1] = \"blackcurrant\"\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Change_Item_Value.txt",
        "documentation": {}
    },
    {
        "label": "thislist[1]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_Item_Value.txt",
        "description": "python-prac.mini-scripts.python_Change_Item_Value.txt",
        "peekOfCode": "thislist[1] = \"blackcurrant\"\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Change_Item_Value.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "description": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "peekOfCode": "x = (\"apple\", \"banana\", \"cherry\")\ny = list(x)\ny[1] = \"kiwi\"\nx = tuple(y)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "description": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "peekOfCode": "y = list(x)\ny[1] = \"kiwi\"\nx = tuple(y)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "documentation": {}
    },
    {
        "label": "y[1]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "description": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "peekOfCode": "y[1] = \"kiwi\"\nx = tuple(y)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "description": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "peekOfCode": "x = tuple(y)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Change_Tuple_Values.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Check_if_Item_Exists.txt",
        "description": "python-prac.mini-scripts.python_Check_if_Item_Exists.txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\")\nif \"apple\" in thistuple:\n    print(\"Yes, 'apple' is in the fruits tuple\")",
        "detail": "python-prac.mini-scripts.python_Check_if_Item_Exists.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Check_if_Key_Exists.txt",
        "description": "python-prac.mini-scripts.python_Check_if_Key_Exists.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nif \"model\" in thisdict:\n    print(\"Yes, 'model' is one of the keys in the thisdict dictionary\")",
        "detail": "python-prac.mini-scripts.python_Check_if_Key_Exists.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Check_if_NOT.txt",
        "description": "python-prac.mini-scripts.python_Check_if_NOT.txt",
        "peekOfCode": "txt = \"The best things in life are free!\"\nprint(\"expensive\" not in txt)",
        "detail": "python-prac.mini-scripts.python_Check_if_NOT.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Check_if_NOT__if_statement.txt",
        "description": "python-prac.mini-scripts.python_Check_if_NOT__if_statement.txt",
        "peekOfCode": "txt = \"The best things in life are free!\"\nif \"expensive\" not in txt:\n    print(\"Yes, 'expensive' is NOT present.\")",
        "detail": "python-prac.mini-scripts.python_Check_if_NOT__if_statement.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "description": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "peekOfCode": "a = np.array(42)\nb = np.array([1, 2, 3, 4, 5])\nc = np.array([[1, 2, 3], [4, 5, 6]])\nd = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\nprint(a.ndim)\nprint(b.ndim)\nprint(c.ndim)\nprint(d.ndim)",
        "detail": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "description": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "peekOfCode": "b = np.array([1, 2, 3, 4, 5])\nc = np.array([[1, 2, 3], [4, 5, 6]])\nd = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\nprint(a.ndim)\nprint(b.ndim)\nprint(c.ndim)\nprint(d.ndim)",
        "detail": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "description": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "peekOfCode": "c = np.array([[1, 2, 3], [4, 5, 6]])\nd = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\nprint(a.ndim)\nprint(b.ndim)\nprint(c.ndim)\nprint(d.ndim)",
        "detail": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "description": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "peekOfCode": "d = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\nprint(a.ndim)\nprint(b.ndim)\nprint(c.ndim)\nprint(d.ndim)",
        "detail": "python-prac.mini-scripts.python_Check_Number_of_Dimensions.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Check_String.txt",
        "description": "python-prac.mini-scripts.python_Check_String.txt",
        "peekOfCode": "txt = \"The best things in life are free!\"\nprint(\"free\" in txt)",
        "detail": "python-prac.mini-scripts.python_Check_String.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Check_String_if_statement.txt",
        "description": "python-prac.mini-scripts.python_Check_String_if_statement.txt",
        "peekOfCode": "txt = \"The best things in life are free!\"\nif \"free\" in txt:\n    print(\"Yes, 'free' is present.\")",
        "detail": "python-prac.mini-scripts.python_Check_String_if_statement.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Chi_Square_Distribution.txt",
        "description": "python-prac.mini-scripts.python_Chi_Square_Distribution.txt",
        "peekOfCode": "x = random.chisquare(df=2, size=(2, 3))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Chi_Square_Distribution.txt",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_class_and_object_pass_Statement.txt",
        "description": "python-prac.mini-scripts.python_class_and_object_pass_Statement.txt",
        "peekOfCode": "class Person:\n    pass\n# having an empty class definition like this, would raise an error without the pass statement",
        "detail": "python-prac.mini-scripts.python_class_and_object_pass_Statement.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Clear_the_List.txt",
        "description": "python-prac.mini-scripts.python_Clear_the_List.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.clear()\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Clear_the_List.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(equal).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(equal).txt",
        "peekOfCode": "x = 5\ny = 3\nprint(x == y)\n# returns False because 5 is not equal to 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(equal).txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(equal).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(equal).txt",
        "peekOfCode": "y = 3\nprint(x == y)\n# returns False because 5 is not equal to 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(equal).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(greaterthen_or_equal).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(greaterthen_or_equal).txt",
        "peekOfCode": "x = 5\ny = 3\nprint(x >= y)\n# returns True because five is greater, or equal, to 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(greaterthen_or_equal).txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(greaterthen_or_equal).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(greaterthen_or_equal).txt",
        "peekOfCode": "y = 3\nprint(x >= y)\n# returns True because five is greater, or equal, to 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(greaterthen_or_equal).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(greater_then_).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(greater_then_).txt",
        "peekOfCode": "x = 5\ny = 3\nprint(x > y)\n# returns True because 5 is greater than 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(greater_then_).txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(greater_then_).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(greater_then_).txt",
        "peekOfCode": "y = 3\nprint(x > y)\n# returns True because 5 is greater than 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(greater_then_).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_).txt",
        "peekOfCode": "x = 5\ny = 3\nprint(x < y)\n# returns False because 5 is not less than 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_).txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_).txt",
        "peekOfCode": "y = 3\nprint(x < y)\n# returns False because 5 is not less than 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_not_equal).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_not_equal).txt",
        "peekOfCode": "x = 5\ny = 3\nprint(x <= y)\n# returns False because 5 is neither less than or equal to 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_not_equal).txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_not_equal).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_not_equal).txt",
        "peekOfCode": "y = 3\nprint(x <= y)\n# returns False because 5 is neither less than or equal to 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(lessthen_not_equal).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(not_equal).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(not_equal).txt",
        "peekOfCode": "x = 5\ny = 3\nprint(x != y)\n# returns True because 5 is not equal to 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(not_equal).txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Comparison_Operators_(not_equal).txt",
        "description": "python-prac.mini-scripts.Python_Comparison_Operators_(not_equal).txt",
        "peekOfCode": "y = 3\nprint(x != y)\n# returns True because 5 is not equal to 3\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Comparison_Operators_(not_equal).txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Conditions_and_If_statements.txt",
        "description": "python-prac.mini-scripts.Python_Conditions_and_If_statements.txt",
        "peekOfCode": "a = 33\nb = 200\nif b > a:\n    print(\"b is greater than a\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Conditions_and_If_statements.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Conditions_and_If_statements.txt",
        "description": "python-prac.mini-scripts.Python_Conditions_and_If_statements.txt",
        "peekOfCode": "b = 200\nif b > a:\n    print(\"b is greater than a\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Conditions_and_If_statements.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_1.txt",
        "description": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_1.txt",
        "peekOfCode": "x = {\"name\": \"sanu\", \"age\": 24, \"city\": \"batticaloa\"}\n# convert into JSON:\ny = json.dumps(x)\n# the result is a JSON string:\nprint(y)",
        "detail": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_1.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_1.txt",
        "description": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_1.txt",
        "peekOfCode": "y = json.dumps(x)\n# the result is a JSON string:\nprint(y)",
        "detail": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_3.txt",
        "description": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_3.txt",
        "peekOfCode": "x = {\n    \"name\": \"sanu\",\n    \"age\": 324,\n    \"married\": True,\n    \"divorced\": False,\n    \"children\": (\"Ann\", \"Billy\"),\n    \"pets\": None,\n    \"cars\": [{\"model\": \"BMW 230\", \"mpg\": 27.5}, {\"model\": \"Ford Edge\", \"mpg\": 24.1}],\n}\n# convert into JSON:",
        "detail": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_3.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_3.txt",
        "description": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_3.txt",
        "peekOfCode": "y = json.dumps(x)\n# the result is a JSON string:\nprint(y)",
        "detail": "python-prac.mini-scripts.python_Convert_from_Python_to_JSON_3.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Copy_a_Dictionary.txt",
        "description": "python-prac.mini-scripts.python_Copy_a_Dictionary.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nmydict = thisdict.copy()\nprint(mydict)",
        "detail": "python-prac.mini-scripts.python_Copy_a_Dictionary.txt",
        "documentation": {}
    },
    {
        "label": "mydict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Copy_a_Dictionary.txt",
        "description": "python-prac.mini-scripts.python_Copy_a_Dictionary.txt",
        "peekOfCode": "mydict = thisdict.copy()\nprint(mydict)",
        "detail": "python-prac.mini-scripts.python_Copy_a_Dictionary.txt",
        "documentation": {}
    },
    {
        "label": "MyNumbers",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Create_an_Iterator.txt",
        "description": "python-prac.mini-scripts.python_Create_an_Iterator.txt",
        "peekOfCode": "class MyNumbers:\n    def __iter__(self):\n        self.a = 1\n        return self\n    def __next__(self):\n        x = self.a\n        self.a += 1\n        return x\nmyclass = MyNumbers()\nmyiter = iter(myclass)",
        "detail": "python-prac.mini-scripts.python_Create_an_Iterator.txt",
        "documentation": {}
    },
    {
        "label": "myclass",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Create_an_Iterator.txt",
        "description": "python-prac.mini-scripts.python_Create_an_Iterator.txt",
        "peekOfCode": "myclass = MyNumbers()\nmyiter = iter(myclass)\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))",
        "detail": "python-prac.mini-scripts.python_Create_an_Iterator.txt",
        "documentation": {}
    },
    {
        "label": "myiter",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Create_an_Iterator.txt",
        "description": "python-prac.mini-scripts.python_Create_an_Iterator.txt",
        "peekOfCode": "myiter = iter(myclass)\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))",
        "detail": "python-prac.mini-scripts.python_Create_an_Iterator.txt",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Create_a_Child_Class.txt",
        "description": "python-prac.mini-scripts.python_Create_a_Child_Class.txt",
        "peekOfCode": "class Person:\n    def __init__(self, fname, lname):\n        self.firstname = fname\n        self.lastname = lname\n    def printname(self):\n        print(self.firstname, self.lastname)\nclass Student(Person):\n    pass\nx = Student(\"sanu\", \"santh\")\nx.printname()",
        "detail": "python-prac.mini-scripts.python_Create_a_Child_Class.txt",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Create_a_Child_Class.txt",
        "description": "python-prac.mini-scripts.python_Create_a_Child_Class.txt",
        "peekOfCode": "class Student(Person):\n    pass\nx = Student(\"sanu\", \"santh\")\nx.printname()",
        "detail": "python-prac.mini-scripts.python_Create_a_Child_Class.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Create_a_Child_Class.txt",
        "description": "python-prac.mini-scripts.python_Create_a_Child_Class.txt",
        "peekOfCode": "x = Student(\"sanu\", \"santh\")\nx.printname()",
        "detail": "python-prac.mini-scripts.python_Create_a_Child_Class.txt",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Create_a_Class.txt",
        "description": "python-prac.mini-scripts.python_Create_a_Class.txt",
        "peekOfCode": "class MyClass:\n    x = 5\nprint(MyClass)",
        "detail": "python-prac.mini-scripts.python_Create_a_Class.txt",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Create_a_Module.txt",
        "description": "python-prac.mini-scripts.python_Create_a_Module.txt",
        "peekOfCode": "def greeting(name):\n    print(\"Hello, \" + name)",
        "detail": "python-prac.mini-scripts.python_Create_a_Module.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Create_a_NumPy_ndarray_Object_1.txt",
        "description": "python-prac.mini-scripts.python_Create_a_NumPy_ndarray_Object_1.txt",
        "peekOfCode": "arr = np.array((1, 2, 3, 4, 5))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Create_a_NumPy_ndarray_Object_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Create_a_NumPy_ndarray_Object_2.txt",
        "description": "python-prac.mini-scripts.python_Create_a_NumPy_ndarray_Object_2.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5])\nprint(arr)\nprint(type(arr))",
        "detail": "python-prac.mini-scripts.python_Create_a_NumPy_ndarray_Object_2.txt",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Create_a_Parent_Class.txt",
        "description": "python-prac.mini-scripts.python_Create_a_Parent_Class.txt",
        "peekOfCode": "class Person:\n    def __init__(self, fname, lname):\n        self.firstname = fname\n        self.lastname = lname\n    def printname(self):\n        print(self.firstname, self.lastname)\n# Use the Person class to create an object, and then execute the printname method:\nx = Person(\"Sanus\", \"santh\")\nx.printname()",
        "detail": "python-prac.mini-scripts.python_Create_a_Parent_Class.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Create_a_Parent_Class.txt",
        "description": "python-prac.mini-scripts.python_Create_a_Parent_Class.txt",
        "peekOfCode": "x = Person(\"Sanus\", \"santh\")\nx.printname()",
        "detail": "python-prac.mini-scripts.python_Create_a_Parent_Class.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_create_a_set.txt",
        "description": "python-prac.mini-scripts.python_create_a_set.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\nprint(thisset)\n# Note: the set list is unordered, meaning: the items will appear in a random order.\n# Refresh this page to see the change in the result.",
        "detail": "python-prac.mini-scripts.python_create_a_set.txt",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Create_Object.txt",
        "description": "python-prac.mini-scripts.python_Create_Object.txt",
        "peekOfCode": "class MyClass:\n    x = 5\np1 = MyClass()\nprint(p1.x)",
        "detail": "python-prac.mini-scripts.python_Create_Object.txt",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Create_Object.txt",
        "description": "python-prac.mini-scripts.python_Create_Object.txt",
        "peekOfCode": "p1 = MyClass()\nprint(p1.x)",
        "detail": "python-prac.mini-scripts.python_Create_Object.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Create_Tuple_With_One_Item.txt",
        "description": "python-prac.mini-scripts.python_Create_Tuple_With_One_Item.txt",
        "peekOfCode": "thistuple = (\"apple\",)\nprint(type(thistuple))\n# NOT a tuple\nthistuple = \"apple\"\nprint(type(thistuple))",
        "detail": "python-prac.mini-scripts.python_Create_Tuple_With_One_Item.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Create_Tuple_With_One_Item.txt",
        "description": "python-prac.mini-scripts.python_Create_Tuple_With_One_Item.txt",
        "peekOfCode": "thistuple = \"apple\"\nprint(type(thistuple))",
        "detail": "python-prac.mini-scripts.python_Create_Tuple_With_One_Item.txt",
        "documentation": {}
    },
    {
        "label": "myadd",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Create_Your_Own_ufunc.txt",
        "description": "python-prac.mini-scripts.python_Create_Your_Own_ufunc.txt",
        "peekOfCode": "def myadd(x, y):\n    return x + y\nmyadd = np.frompyfunc(myadd, 2, 1)\nprint(myadd([1, 2, 3, 4], [5, 6, 7, 8]))",
        "detail": "python-prac.mini-scripts.python_Create_Your_Own_ufunc.txt",
        "documentation": {}
    },
    {
        "label": "myadd",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Create_Your_Own_ufunc.txt",
        "description": "python-prac.mini-scripts.python_Create_Your_Own_ufunc.txt",
        "peekOfCode": "myadd = np.frompyfunc(myadd, 2, 1)\nprint(myadd([1, 2, 3, 4], [5, 6, 7, 8]))",
        "detail": "python-prac.mini-scripts.python_Create_Your_Own_ufunc.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_Date_Objects.txt",
        "description": "python-prac.mini-scripts.python_Creating_Date_Objects.txt",
        "peekOfCode": "x = datetime.datetime(2020, 5, 17)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Creating_Date_Objects.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_1.txt",
        "description": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_1.txt",
        "peekOfCode": "arr = np.array([41, 42, 43, 44])\nfilter_arr = arr > 42\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_1.txt",
        "documentation": {}
    },
    {
        "label": "filter_arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_1.txt",
        "description": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_1.txt",
        "peekOfCode": "filter_arr = arr > 42\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_1.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_1.txt",
        "description": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_1.txt",
        "peekOfCode": "newarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_2.txt",
        "description": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_2.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7])\nfilter_arr = arr % 2 == 0\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_2.txt",
        "documentation": {}
    },
    {
        "label": "filter_arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_2.txt",
        "description": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_2.txt",
        "peekOfCode": "filter_arr = arr % 2 == 0\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_2.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_2.txt",
        "description": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_2.txt",
        "peekOfCode": "newarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Creating_Filter_Directly_From_Array_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_the_Filter_Array_1.txt",
        "description": "python-prac.mini-scripts.python_Creating_the_Filter_Array_1.txt",
        "peekOfCode": "arr = np.array([41, 42, 43, 44])\n# Create an empty list\nfilter_arr = []\n# go through each element in arr\nfor element in arr:\n    # if the element is higher than 42, set the value to True, otherwise False:\n    if element > 42:\n        filter_arr.append(True)\n    else:\n        filter_arr.append(False)",
        "detail": "python-prac.mini-scripts.python_Creating_the_Filter_Array_1.txt",
        "documentation": {}
    },
    {
        "label": "filter_arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_the_Filter_Array_1.txt",
        "description": "python-prac.mini-scripts.python_Creating_the_Filter_Array_1.txt",
        "peekOfCode": "filter_arr = []\n# go through each element in arr\nfor element in arr:\n    # if the element is higher than 42, set the value to True, otherwise False:\n    if element > 42:\n        filter_arr.append(True)\n    else:\n        filter_arr.append(False)\nnewarr = arr[filter_arr]\nprint(filter_arr)",
        "detail": "python-prac.mini-scripts.python_Creating_the_Filter_Array_1.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_the_Filter_Array_1.txt",
        "description": "python-prac.mini-scripts.python_Creating_the_Filter_Array_1.txt",
        "peekOfCode": "newarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Creating_the_Filter_Array_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_the_Filter_Array_2.txt",
        "description": "python-prac.mini-scripts.python_Creating_the_Filter_Array_2.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7])\n# Create an empty list\nfilter_arr = []\n# go through each element in arr\nfor element in arr:\n    # if the element is completely divisble by 2, set the value to True, otherwise False\n    if element % 2 == 0:\n        filter_arr.append(True)\n    else:\n        filter_arr.append(False)",
        "detail": "python-prac.mini-scripts.python_Creating_the_Filter_Array_2.txt",
        "documentation": {}
    },
    {
        "label": "filter_arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_the_Filter_Array_2.txt",
        "description": "python-prac.mini-scripts.python_Creating_the_Filter_Array_2.txt",
        "peekOfCode": "filter_arr = []\n# go through each element in arr\nfor element in arr:\n    # if the element is completely divisble by 2, set the value to True, otherwise False\n    if element % 2 == 0:\n        filter_arr.append(True)\n    else:\n        filter_arr.append(False)\nnewarr = arr[filter_arr]\nprint(filter_arr)",
        "detail": "python-prac.mini-scripts.python_Creating_the_Filter_Array_2.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Creating_the_Filter_Array_2.txt",
        "description": "python-prac.mini-scripts.python_Creating_the_Filter_Array_2.txt",
        "peekOfCode": "newarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Creating_the_Filter_Array_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Cummulative_Product.txt",
        "description": "python-prac.mini-scripts.python_Cummulative_Product.txt",
        "peekOfCode": "arr = np.array([5, 6, 7, 8])\nnewarr = np.cumprod(arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Cummulative_Product.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Cummulative_Product.txt",
        "description": "python-prac.mini-scripts.python_Cummulative_Product.txt",
        "peekOfCode": "newarr = np.cumprod(arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Cummulative_Product.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Cummulative_Sum.txt",
        "description": "python-prac.mini-scripts.python_Cummulative_Sum.txt",
        "peekOfCode": "arr = np.array([1, 2, 3])\nnewarr = np.cumsum(arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Cummulative_Sum.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Cummulative_Sum.txt",
        "description": "python-prac.mini-scripts.python_Cummulative_Sum.txt",
        "peekOfCode": "newarr = np.cumsum(arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Cummulative_Sum.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Customize_Sort_Function.txt",
        "description": "python-prac.mini-scripts.python_Customize_Sort_Function.txt",
        "peekOfCode": "def myfunc(n):\n    return abs(n - 50)\nthislist = [100, 50, 65, 82, 23]\nthislist.sort(key=myfunc)\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Customize_Sort_Function.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Customize_Sort_Function.txt",
        "description": "python-prac.mini-scripts.python_Customize_Sort_Function.txt",
        "peekOfCode": "thislist = [100, 50, 65, 82, 23]\nthislist.sort(key=myfunc)\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Customize_Sort_Function.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(bool).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(bool).txt",
        "peekOfCode": "x = True\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(bool).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(bytearray).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(bytearray).txt",
        "peekOfCode": "x = bytearray(5)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(bytearray).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(bytes).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(bytes).txt",
        "peekOfCode": "x = b\"Hello\"\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(bytes).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(complex).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(complex).txt",
        "peekOfCode": "x = 1j\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(complex).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(dict).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(dict).txt",
        "peekOfCode": "x = {\"name\": \"sanu\", \"age\": 24}\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(dict).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(float).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(float).txt",
        "peekOfCode": "x = 20.5\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(float).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(frozenset).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(frozenset).txt",
        "peekOfCode": "x = frozenset({\"apple\", \"banana\", \"cherry\"})\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(frozenset).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(int).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(int).txt",
        "peekOfCode": "x = 20\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(int).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(list).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(list).txt",
        "peekOfCode": "x = [\"apple\", \"banana\", \"cherry\"]\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(list).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(memoryview).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(memoryview).txt",
        "peekOfCode": "x = memoryview(bytes(5))\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(memoryview).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(range).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(range).txt",
        "peekOfCode": "x = range(6)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(range).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(set).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(set).txt",
        "peekOfCode": "x = {\"apple\", \"banana\", \"cherry\"}\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(set).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(str).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(str).txt",
        "peekOfCode": "x = \"Hello World\"\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(str).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_(tuple).txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_(tuple).txt",
        "peekOfCode": "x = (\"apple\", \"banana\", \"cherry\")\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_(tuple).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_bool.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_bool.txt",
        "peekOfCode": "x = True\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_bool.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_bytearry.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_bytearry.txt",
        "peekOfCode": "x = bytearray(5)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_bytearry.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_bytes.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_bytes.txt",
        "peekOfCode": "x = b\"Hello\"\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_bytes.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_complex.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_complex.txt",
        "peekOfCode": "x = 1j\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_complex.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_dict.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_dict.txt",
        "peekOfCode": "x = {\"name\": \"John\", \"age\": 36}\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_dict.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_float.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_float.txt",
        "peekOfCode": "x = 20.5\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_float.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_frozenset.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_frozenset.txt",
        "peekOfCode": "x = frozenset({\"apple\", \"banana\", \"cherry\"})\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_frozenset.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_int.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_int.txt",
        "peekOfCode": "x = 20\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_int.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_list.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_list.txt",
        "peekOfCode": "x = [\"apple\", \"banana\", \"cherry\"]\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_list.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_memoryview.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_memoryview.txt",
        "peekOfCode": "x = memoryview(bytes(5))\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_memoryview.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_range.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_range.txt",
        "peekOfCode": "x = range(6)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_range.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_set.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_set.txt",
        "peekOfCode": "x = {\"apple\", \"banana\", \"cherry\"}\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_set.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_str.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_str.txt",
        "peekOfCode": "x = \"Hello World\"\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_str.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Data_Types_tuple.txt",
        "description": "python-prac.mini-scripts.Python_Data_Types_tuple.txt",
        "peekOfCode": "x = (\"apple\", \"banana\", \"cherry\")\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Data_Types_tuple.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Dates.txt",
        "description": "python-prac.mini-scripts.Python_Dates.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Dates.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_AM.PM.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_AM.PM.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%p\"))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_AM.PM.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_A_%_character.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_A_%_character.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%%\"))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_A_%_character.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_day_number_of_year.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_day_number_of_year.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%j\"))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_day_number_of_year.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_day_of_month.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_day_of_month.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%d\"))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_day_of_month.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_hour.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_hour.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%H\"))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_hour.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_hour_1.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_hour_1.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%I\"))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_hour_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_IOS_weekday.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_IOS_weekday.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%u\"))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_IOS_weekday.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_IOS_year.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_IOS_year.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%G\"))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_IOS_year.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_local_version_daye_and_time.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_local_version_daye_and_time.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%c\"))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_local_version_daye_and_time.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_loca_version_of_time.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_loca_version_of_time.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%X\"))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_loca_version_of_time.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_microsecond.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_microsecond.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%f\"))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_microsecond.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_minute.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_minute.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%M\"))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_minute.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_month_as_a_number.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_month_as_a_number.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%m\"))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_month_as_a_number.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_month_name_full.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_month_name_full.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%B\"))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_month_name_full.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_month_name_short.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_month_name_short.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%b\"))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_month_name_short.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Datetime_second.txt",
        "description": "python-prac.mini-scripts.Python_Datetime_second.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.strftime(\"%S\"))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Datetime_second.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Date_Output.txt",
        "description": "python-prac.mini-scripts.python_Date_Output.txt",
        "peekOfCode": "x = datetime.datetime.now()\nprint(x.year)\nprint(x.strftime(\"%A\"))",
        "detail": "python-prac.mini-scripts.python_Date_Output.txt",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_File_Open.txt",
        "description": "python-prac.mini-scripts.Python_File_Open.txt",
        "peekOfCode": "f = open(\"demofile.txt\", \"r\")\nprint(f.read())\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_File_Open.txt",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_File_Open_2.txt",
        "description": "python-prac.mini-scripts.Python_File_Open_2.txt",
        "peekOfCode": "f = open(\"D:\\\\myfiles\\welcome.txt\", \"r\")\nprint(f.read())\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_File_Open_2.txt",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_File_Write_1.txt",
        "description": "python-prac.mini-scripts.Python_File_Write_1.txt",
        "peekOfCode": "f = open(\"demofile2.txt\", \"a\")\nf.write(\"Now the file has more content!\")\nf.close()\n#open and read the file after the appending:\nf = open(\"demofile2.txt\", \"r\")\nprint(f.read())\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_File_Write_1.txt",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_File_Write_1.txt",
        "description": "python-prac.mini-scripts.Python_File_Write_1.txt",
        "peekOfCode": "f = open(\"demofile2.txt\", \"r\")\nprint(f.read())\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_File_Write_1.txt",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_File_Write_2.txt",
        "description": "python-prac.mini-scripts.Python_File_Write_2.txt",
        "peekOfCode": "f = open(\"demofile3.txt\", \"w\")\nf.write(\"Woops! I have deleted the content!\")\nf.close()\n#open and read the file after the appending:\nf = open(\"demofile3.txt\", \"r\")\nprint(f.read())\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_File_Write_2.txt",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_File_Write_2.txt",
        "description": "python-prac.mini-scripts.Python_File_Write_2.txt",
        "peekOfCode": "f = open(\"demofile3.txt\", \"r\")\nprint(f.read())\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_File_Write_2.txt",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_GCD_(Greatest_Common_Denominator).txt",
        "description": "python-prac.mini-scripts.python_Finding_GCD_(Greatest_Common_Denominator).txt",
        "peekOfCode": "num1 = 6\nnum2 = 9\nx = np.gcd(num1, num2)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_GCD_(Greatest_Common_Denominator).txt",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_GCD_(Greatest_Common_Denominator).txt",
        "description": "python-prac.mini-scripts.python_Finding_GCD_(Greatest_Common_Denominator).txt",
        "peekOfCode": "num2 = 9\nx = np.gcd(num1, num2)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_GCD_(Greatest_Common_Denominator).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_GCD_(Greatest_Common_Denominator).txt",
        "description": "python-prac.mini-scripts.python_Finding_GCD_(Greatest_Common_Denominator).txt",
        "peekOfCode": "x = np.gcd(num1, num2)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_GCD_(Greatest_Common_Denominator).txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_GCD_in_Arrays.txt",
        "description": "python-prac.mini-scripts.python_Finding_GCD_in_Arrays.txt",
        "peekOfCode": "arr = np.array([20, 8, 32, 36, 16])\nx = np.gcd.reduce(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_GCD_in_Arrays.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_GCD_in_Arrays.txt",
        "description": "python-prac.mini-scripts.python_Finding_GCD_in_Arrays.txt",
        "peekOfCode": "x = np.gcd.reduce(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_GCD_in_Arrays.txt",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_LCM_(Lowest_Common_Multiple).txt",
        "description": "python-prac.mini-scripts.python_Finding_LCM_(Lowest_Common_Multiple).txt",
        "peekOfCode": "num1 = 4\nnum2 = 6\nx = np.lcm(num1, num2)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_LCM_(Lowest_Common_Multiple).txt",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_LCM_(Lowest_Common_Multiple).txt",
        "description": "python-prac.mini-scripts.python_Finding_LCM_(Lowest_Common_Multiple).txt",
        "peekOfCode": "num2 = 6\nx = np.lcm(num1, num2)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_LCM_(Lowest_Common_Multiple).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_LCM_(Lowest_Common_Multiple).txt",
        "description": "python-prac.mini-scripts.python_Finding_LCM_(Lowest_Common_Multiple).txt",
        "peekOfCode": "x = np.lcm(num1, num2)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_LCM_(Lowest_Common_Multiple).txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays_1.txt",
        "peekOfCode": "arr = np.array([3, 6, 9])\nx = np.lcm.reduce(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays_1.txt",
        "peekOfCode": "x = np.lcm.reduce(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays__2.txt",
        "description": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays__2.txt",
        "peekOfCode": "arr = np.arange(1, 11)\nx = np.lcm.reduce(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays__2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays__2.txt",
        "description": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays__2.txt",
        "peekOfCode": "x = np.lcm.reduce(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Finding_LCM_in_Arrays__2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Flattening_the_arrays.txt",
        "description": "python-prac.mini-scripts.python_Flattening_the_arrays.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3], [4, 5, 6]])\nnewarr = arr.reshape(-1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Flattening_the_arrays.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Flattening_the_arrays.txt",
        "description": "python-prac.mini-scripts.python_Flattening_the_arrays.txt",
        "peekOfCode": "newarr = arr.reshape(-1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Flattening_the_arrays.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Format_the_Result_1.txt",
        "description": "python-prac.mini-scripts.python_Format_the_Result_1.txt",
        "peekOfCode": "x = {\n    \"name\": \"sanu\",\n    \"age\": 24,\n    \"married\": True,\n    \"divorced\": False,\n    \"children\": (\"Ann\", \"Billy\"),\n    \"pets\": None,\n    \"cars\": [{\"model\": \"BMW 230\", \"mpg\": 27.5}, {\"model\": \"Ford Edge\", \"mpg\": 24.1}],\n}\n# use four indents to make it easier to read the result:",
        "detail": "python-prac.mini-scripts.python_Format_the_Result_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Format_the_Result_2.txt",
        "description": "python-prac.mini-scripts.python_Format_the_Result_2.txt",
        "peekOfCode": "x = {\n    \"name\": \"sanu\",\n    \"age\": 24,\n    \"married\": True,\n    \"divorced\": False,\n    \"children\": (\"Ann\", \"Billy\"),\n    \"pets\": None,\n    \"cars\": [{\"model\": \"BMW 230\", \"mpg\": 27.5}, {\"model\": \"Ford Edge\", \"mpg\": 24.1}],\n}\n# use . and a space to separate objects, and a space, a = and a space to separate keys from their values:",
        "detail": "python-prac.mini-scripts.python_Format_the_Result_2.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_For_Loops.txt",
        "description": "python-prac.mini-scripts.Python_For_Loops.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  print(x) \n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_For_Loops.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_for_loop_continue_Statement.txt",
        "description": "python-prac.mini-scripts.python_for_loop_continue_Statement.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n    if x == \"banana\":\n        continue\n    print(x)",
        "detail": "python-prac.mini-scripts.python_for_loop_continue_Statement.txt",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_for_loop_Nested_Loops.txt",
        "description": "python-prac.mini-scripts.python_for_loop_Nested_Loops.txt",
        "peekOfCode": "adj = [\"red\", \"big\", \"tasty\"]\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in adj:\n    for y in fruits:\n        print(x, y)",
        "detail": "python-prac.mini-scripts.python_for_loop_Nested_Loops.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_for_loop_Nested_Loops.txt",
        "description": "python-prac.mini-scripts.python_for_loop_Nested_Loops.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in adj:\n    for y in fruits:\n        print(x, y)",
        "detail": "python-prac.mini-scripts.python_for_loop_Nested_Loops.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_for_loop__break_Statement.txt",
        "description": "python-prac.mini-scripts.python_for_loop__break_Statement.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n    print(x)\n    if x == \"banana\":\n        break",
        "detail": "python-prac.mini-scripts.python_for_loop__break_Statement.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_for_loop__break_Statement_2.txt",
        "description": "python-prac.mini-scripts.python_for_loop__break_Statement_2.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n    if x == \"banana\":\n        break\n    print(x)",
        "detail": "python-prac.mini-scripts.python_for_loop__break_Statement_2.txt",
        "documentation": {}
    },
    {
        "label": "myFunction",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Functions_can_Return_a_Boolean_1.txt",
        "description": "python-prac.mini-scripts.python_Functions_can_Return_a_Boolean_1.txt",
        "peekOfCode": "def myFunction():\n    return True\nprint(myFunction())",
        "detail": "python-prac.mini-scripts.python_Functions_can_Return_a_Boolean_1.txt",
        "documentation": {}
    },
    {
        "label": "myFunction",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Functions_can_Return_a_Boolean_2.txt",
        "description": "python-prac.mini-scripts.python_Functions_can_Return_a_Boolean_2.txt",
        "peekOfCode": "def myFunction():\n    return True\nif myFunction():\n    print(\"YES!\")\nelse:\n    print(\"NO!\")",
        "detail": "python-prac.mini-scripts.python_Functions_can_Return_a_Boolean_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Functions_can_Return_a_Boolean_3.txt",
        "description": "python-prac.mini-scripts.python_Functions_can_Return_a_Boolean_3.txt",
        "peekOfCode": "x = 200\nprint(isinstance(x, int))",
        "detail": "python-prac.mini-scripts.python_Functions_can_Return_a_Boolean_3.txt",
        "documentation": {}
    },
    {
        "label": "myfunction",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_function_pass_Statement.txt",
        "description": "python-prac.mini-scripts.python_function_pass_Statement.txt",
        "peekOfCode": "def myfunction():\n    pass\n# having an empty function definition like this, would raise an error without the pass statement",
        "detail": "python-prac.mini-scripts.python_function_pass_Statement.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Generate_Random_Array_floats_1.txt",
        "description": "python-prac.mini-scripts.python_Generate_Random_Array_floats_1.txt",
        "peekOfCode": "x = random.rand(5)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Generate_Random_Array_floats_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Generate_Random_Array_floats_2.txt",
        "description": "python-prac.mini-scripts.python_Generate_Random_Array_floats_2.txt",
        "peekOfCode": "x = random.rand(3, 5)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Generate_Random_Array_floats_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Generate_Random_Array_integate_1.txt",
        "description": "python-prac.mini-scripts.python_Generate_Random_Array_integate_1.txt",
        "peekOfCode": "x = random.randint(100, size=(5))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Generate_Random_Array_integate_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Generate_Random_Array_integate_2.txt",
        "description": "python-prac.mini-scripts.python_Generate_Random_Array_integate_2.txt",
        "peekOfCode": "x = random.randint(100, size=(3, 5))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Generate_Random_Array_integate_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Generate_Random_Float.txt",
        "description": "python-prac.mini-scripts.python_Generate_Random_Float.txt",
        "peekOfCode": "x = random.rand()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Generate_Random_Float.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Generate_Random_Number.txt",
        "description": "python-prac.mini-scripts.python_Generate_Random_Number.txt",
        "peekOfCode": "x = random.randint(100)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Generate_Random_Number.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Generate_Random_Number_From_Array_1.txt",
        "description": "python-prac.mini-scripts.python_Generate_Random_Number_From_Array_1.txt",
        "peekOfCode": "x = random.choice([3, 5, 7, 9])\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Generate_Random_Number_From_Array_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Generate_Random_Number_From_Array_2.txt",
        "description": "python-prac.mini-scripts.python_Generate_Random_Number_From_Array_2.txt",
        "peekOfCode": "x = random.choice([3, 5, 7, 9], size=(3, 5))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Generate_Random_Number_From_Array_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Generating_Permutation_of_Arrays.txt",
        "description": "python-prac.mini-scripts.python_Generating_Permutation_of_Arrays.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5])\nprint(random.permutation(arr))",
        "detail": "python-prac.mini-scripts.python_Generating_Permutation_of_Arrays.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Items_1.txt",
        "description": "python-prac.mini-scripts.python_Get_Items_1.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nx = thisdict.items()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Get_Items_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Items_1.txt",
        "description": "python-prac.mini-scripts.python_Get_Items_1.txt",
        "peekOfCode": "x = thisdict.items()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Get_Items_1.txt",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Items_2.txt",
        "description": "python-prac.mini-scripts.python_Get_Items_2.txt",
        "peekOfCode": "car = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nx = car.items()\nprint(x)  # before the change\ncar[\"year\"] = 2020\nprint(x)  # after the change",
        "detail": "python-prac.mini-scripts.python_Get_Items_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Items_2.txt",
        "description": "python-prac.mini-scripts.python_Get_Items_2.txt",
        "peekOfCode": "x = car.items()\nprint(x)  # before the change\ncar[\"year\"] = 2020\nprint(x)  # after the change",
        "detail": "python-prac.mini-scripts.python_Get_Items_2.txt",
        "documentation": {}
    },
    {
        "label": "car[\"year\"]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Items_2.txt",
        "description": "python-prac.mini-scripts.python_Get_Items_2.txt",
        "peekOfCode": "car[\"year\"] = 2020\nprint(x)  # after the change",
        "detail": "python-prac.mini-scripts.python_Get_Items_2.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Keys_1.txt",
        "description": "python-prac.mini-scripts.python_Get_Keys_1.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nx = thisdict.keys()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Get_Keys_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Keys_1.txt",
        "description": "python-prac.mini-scripts.python_Get_Keys_1.txt",
        "peekOfCode": "x = thisdict.keys()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Get_Keys_1.txt",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Keys_2.txt",
        "description": "python-prac.mini-scripts.python_Get_Keys_2.txt",
        "peekOfCode": "car = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nx = car.keys()\nprint(x)  # before the change\ncar[\"color\"] = \"white\"\nprint(x)  # after the change",
        "detail": "python-prac.mini-scripts.python_Get_Keys_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Keys_2.txt",
        "description": "python-prac.mini-scripts.python_Get_Keys_2.txt",
        "peekOfCode": "x = car.keys()\nprint(x)  # before the change\ncar[\"color\"] = \"white\"\nprint(x)  # after the change",
        "detail": "python-prac.mini-scripts.python_Get_Keys_2.txt",
        "documentation": {}
    },
    {
        "label": "car[\"color\"]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Keys_2.txt",
        "description": "python-prac.mini-scripts.python_Get_Keys_2.txt",
        "peekOfCode": "car[\"color\"] = \"white\"\nprint(x)  # after the change",
        "detail": "python-prac.mini-scripts.python_Get_Keys_2.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_the_Length_of_a_Set.txt",
        "description": "python-prac.mini-scripts.python_Get_the_Length_of_a_Set.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\"}\nprint(len(thisset))",
        "detail": "python-prac.mini-scripts.python_Get_the_Length_of_a_Set.txt",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Values_1.txt",
        "description": "python-prac.mini-scripts.python_Get_Values_1.txt",
        "peekOfCode": "thisdict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nx = thisdict.values()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Get_Values_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Values_1.txt",
        "description": "python-prac.mini-scripts.python_Get_Values_1.txt",
        "peekOfCode": "x = thisdict.values()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Get_Values_1.txt",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Values_2.txt",
        "description": "python-prac.mini-scripts.python_Get_Values_2.txt",
        "peekOfCode": "car = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\nx = car.values()\nprint(x)  # before the change\ncar[\"year\"] = 2020\nprint(x)  # after the change",
        "detail": "python-prac.mini-scripts.python_Get_Values_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Values_2.txt",
        "description": "python-prac.mini-scripts.python_Get_Values_2.txt",
        "peekOfCode": "x = car.values()\nprint(x)  # before the change\ncar[\"year\"] = 2020\nprint(x)  # after the change",
        "detail": "python-prac.mini-scripts.python_Get_Values_2.txt",
        "documentation": {}
    },
    {
        "label": "car[\"year\"]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Get_Values_2.txt",
        "description": "python-prac.mini-scripts.python_Get_Values_2.txt",
        "peekOfCode": "car[\"year\"] = 2020\nprint(x)  # after the change",
        "detail": "python-prac.mini-scripts.python_Get_Values_2.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_global_Keyword_1.txt",
        "description": "python-prac.mini-scripts.python_global_Keyword_1.txt",
        "peekOfCode": "def myfunc():\n    global x\n    x = \"fantastic\"\nmyfunc()\nprint(\"Python is \" + x)",
        "detail": "python-prac.mini-scripts.python_global_Keyword_1.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Global_Keyword_1_(2).txt",
        "description": "python-prac.mini-scripts.python_Global_Keyword_1_(2).txt",
        "peekOfCode": "def myfunc():\n    print(x)\nmyfunc()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Global_Keyword_1_(2).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Global_Keyword_1_(2).txt",
        "description": "python-prac.mini-scripts.python_Global_Keyword_1_(2).txt",
        "peekOfCode": "x = 300\ndef myfunc():\n    print(x)\nmyfunc()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Global_Keyword_1_(2).txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_global_Keyword_2.txt",
        "description": "python-prac.mini-scripts.python_global_Keyword_2.txt",
        "peekOfCode": "def myfunc():\n    global x\n    x = \"fantastic\"\nmyfunc()\nprint(\"Python is \" + x)",
        "detail": "python-prac.mini-scripts.python_global_Keyword_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_global_Keyword_2.txt",
        "description": "python-prac.mini-scripts.python_global_Keyword_2.txt",
        "peekOfCode": "x = \"awesome\"\ndef myfunc():\n    global x\n    x = \"fantastic\"\nmyfunc()\nprint(\"Python is \" + x)",
        "detail": "python-prac.mini-scripts.python_global_Keyword_2.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Global_Keyword_2_(2).txt",
        "description": "python-prac.mini-scripts.python_Global_Keyword_2_(2).txt",
        "peekOfCode": "def myfunc():\n    global x\n    x = 200\nmyfunc()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Global_Keyword_2_(2).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Global_Keyword_2_(2).txt",
        "description": "python-prac.mini-scripts.python_Global_Keyword_2_(2).txt",
        "peekOfCode": "x = 300\ndef myfunc():\n    global x\n    x = 200\nmyfunc()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Global_Keyword_2_(2).txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Global_Scope_1.txt",
        "description": "python-prac.mini-scripts.python_Global_Scope_1.txt",
        "peekOfCode": "def myfunc():\n    print(x)\nmyfunc()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Global_Scope_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Global_Scope_1.txt",
        "description": "python-prac.mini-scripts.python_Global_Scope_1.txt",
        "peekOfCode": "x = 300\ndef myfunc():\n    print(x)\nmyfunc()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Global_Scope_1.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Global_Scope_2.txt",
        "description": "python-prac.mini-scripts.python_Global_Scope_2.txt",
        "peekOfCode": "def myfunc():\n    x = 200\n    print(x)\nmyfunc()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Global_Scope_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Global_Scope_2.txt",
        "description": "python-prac.mini-scripts.python_Global_Scope_2.txt",
        "peekOfCode": "x = 300\ndef myfunc():\n    x = 200\n    print(x)\nmyfunc()\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Global_Scope_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Higher_Dimensional_Arrays.txt",
        "description": "python-prac.mini-scripts.python_Higher_Dimensional_Arrays.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4], ndmin=5)\nprint(arr)\nprint(\"number of dimensions :\", arr.ndim)",
        "detail": "python-prac.mini-scripts.python_Higher_Dimensional_Arrays.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Hyperbolic_Functions_1.txt",
        "description": "python-prac.mini-scripts.python_Hyperbolic_Functions_1.txt",
        "peekOfCode": "x = np.sinh(np.pi / 2)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Hyperbolic_Functions_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Hyperbolic_Functions_2.txt",
        "description": "python-prac.mini-scripts.python_Hyperbolic_Functions_2.txt",
        "peekOfCode": "arr = np.array([np.pi / 2, np.pi / 3, np.pi / 4, np.pi / 5])\nx = np.cosh(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Hyperbolic_Functions_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Hyperbolic_Functions_2.txt",
        "description": "python-prac.mini-scripts.python_Hyperbolic_Functions_2.txt",
        "peekOfCode": "x = np.cosh(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Hyperbolic_Functions_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Hyperbolic_Functions_3.txt",
        "description": "python-prac.mini-scripts.python_Hyperbolic_Functions_3.txt",
        "peekOfCode": "x = np.arcsinh(1.0)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Hyperbolic_Functions_3.txt",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Hypotenues.txt",
        "description": "python-prac.mini-scripts.python_Hypotenues.txt",
        "peekOfCode": "base = 3\nperp = 4\nx = np.hypot(base, perp)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Hypotenues.txt",
        "documentation": {}
    },
    {
        "label": "perp",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Hypotenues.txt",
        "description": "python-prac.mini-scripts.python_Hypotenues.txt",
        "peekOfCode": "perp = 4\nx = np.hypot(base, perp)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Hypotenues.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Hypotenues.txt",
        "description": "python-prac.mini-scripts.python_Hypotenues.txt",
        "peekOfCode": "x = np.hypot(base, perp)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Hypotenues.txt",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Import_From_Module_1.txt",
        "description": "python-prac.mini-scripts.python_Import_From_Module_1.txt",
        "peekOfCode": "def greeting(name):\n    print(\"Hello, \" + name)\nperson1 = {\"name\": \"sanu\", \"age\": 24, \"country\": \"srilanka\"}",
        "detail": "python-prac.mini-scripts.python_Import_From_Module_1.txt",
        "documentation": {}
    },
    {
        "label": "person1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Import_From_Module_1.txt",
        "description": "python-prac.mini-scripts.python_Import_From_Module_1.txt",
        "peekOfCode": "person1 = {\"name\": \"sanu\", \"age\": 24, \"country\": \"srilanka\"}",
        "detail": "python-prac.mini-scripts.python_Import_From_Module_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Import_NumPy_1.txt",
        "description": "python-prac.mini-scripts.python_Import_NumPy_1.txt",
        "peekOfCode": "arr = numpy.array([1, 2, 3, 4, 5])\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Import_NumPy_1.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Insert_Items.txt",
        "description": "python-prac.mini-scripts.python_Insert_Items.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.insert(1, \"orange\")\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Insert_Items.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterating_Arrays.txt",
        "description": "python-prac.mini-scripts.python_Iterating_Arrays.txt",
        "peekOfCode": "arr = np.array([1, 2, 3])\nfor x in arr:\n    print(x)",
        "detail": "python-prac.mini-scripts.python_Iterating_Arrays.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterating_Arrays_2-D_array_1.txt",
        "description": "python-prac.mini-scripts.python_Iterating_Arrays_2-D_array_1.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3], [4, 5, 6]])\nfor x in arr:\n    print(x)",
        "detail": "python-prac.mini-scripts.python_Iterating_Arrays_2-D_array_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterating_Arrays_2-D_array_2.txt",
        "description": "python-prac.mini-scripts.python_Iterating_Arrays_2-D_array_2.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3], [4, 5, 6]])\nfor x in arr:\n    for y in x:\n        print(y)",
        "detail": "python-prac.mini-scripts.python_Iterating_Arrays_2-D_array_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterating_Arrays_3-D_array_1.txt",
        "description": "python-prac.mini-scripts.python_Iterating_Arrays_3-D_array_1.txt",
        "peekOfCode": "arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\nfor x in arr:\n    print(\"x represents the 2-D array:\")\n    print(x)",
        "detail": "python-prac.mini-scripts.python_Iterating_Arrays_3-D_array_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterating_Arrays_3-D_array_2.txt",
        "description": "python-prac.mini-scripts.python_Iterating_Arrays_3-D_array_2.txt",
        "peekOfCode": "arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\nfor x in arr:\n    for y in x:\n        for z in y:\n            print(z)",
        "detail": "python-prac.mini-scripts.python_Iterating_Arrays_3-D_array_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterating_Arrays_Using_nditer().txt",
        "description": "python-prac.mini-scripts.python_Iterating_Arrays_Using_nditer().txt",
        "peekOfCode": "arr = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\nfor x in np.nditer(arr):\n    print(x)",
        "detail": "python-prac.mini-scripts.python_Iterating_Arrays_Using_nditer().txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterating_Array_With_Different_Data_Types.txt",
        "description": "python-prac.mini-scripts.python_Iterating_Array_With_Different_Data_Types.txt",
        "peekOfCode": "arr = np.array([1, 2, 3])\nfor x in np.nditer(arr, flags=[\"buffered\"], op_dtypes=[\"S\"]):\n    print(x)",
        "detail": "python-prac.mini-scripts.python_Iterating_Array_With_Different_Data_Types.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterating_With_Different_Step_Size.txt",
        "description": "python-prac.mini-scripts.python_Iterating_With_Different_Step_Size.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\nfor x in np.nditer(arr[:, ::2]):\n    print(x)",
        "detail": "python-prac.mini-scripts.python_Iterating_With_Different_Step_Size.txt",
        "documentation": {}
    },
    {
        "label": "mytuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterator_vs_Iterable_1.txt",
        "description": "python-prac.mini-scripts.python_Iterator_vs_Iterable_1.txt",
        "peekOfCode": "mytuple = (\"apple\", \"banana\", \"cherry\")\nmyit = iter(mytuple)\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))",
        "detail": "python-prac.mini-scripts.python_Iterator_vs_Iterable_1.txt",
        "documentation": {}
    },
    {
        "label": "myit",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterator_vs_Iterable_1.txt",
        "description": "python-prac.mini-scripts.python_Iterator_vs_Iterable_1.txt",
        "peekOfCode": "myit = iter(mytuple)\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))",
        "detail": "python-prac.mini-scripts.python_Iterator_vs_Iterable_1.txt",
        "documentation": {}
    },
    {
        "label": "mystr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterator_vs_Iterable_2.txt",
        "description": "python-prac.mini-scripts.python_Iterator_vs_Iterable_2.txt",
        "peekOfCode": "mystr = \"banana\"\nmyit = iter(mystr)\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))",
        "detail": "python-prac.mini-scripts.python_Iterator_vs_Iterable_2.txt",
        "documentation": {}
    },
    {
        "label": "myit",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Iterator_vs_Iterable_2.txt",
        "description": "python-prac.mini-scripts.python_Iterator_vs_Iterable_2.txt",
        "peekOfCode": "myit = iter(mystr)\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))",
        "detail": "python-prac.mini-scripts.python_Iterator_vs_Iterable_2.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_1.txt",
        "peekOfCode": "arr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.concatenate((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_1.txt",
        "peekOfCode": "arr2 = np.array([4, 5, 6])\narr = np.concatenate((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_1.txt",
        "peekOfCode": "arr = np.concatenate((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_2.txt",
        "description": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_2.txt",
        "peekOfCode": "arr1 = np.array([[1, 2], [3, 4]])\narr2 = np.array([[5, 6], [7, 8]])\narr = np.concatenate((arr1, arr2), axis=1)\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_2.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_2.txt",
        "description": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_2.txt",
        "peekOfCode": "arr2 = np.array([[5, 6], [7, 8]])\narr = np.concatenate((arr1, arr2), axis=1)\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_2.txt",
        "description": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_2.txt",
        "peekOfCode": "arr = np.concatenate((arr1, arr2), axis=1)\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Joining_NumPy_Arrays_2.txt",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Lists_1.txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Lists_1.txt",
        "peekOfCode": "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]\nlist3 = list1 + list2\nprint(list3)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Lists_1.txt",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Lists_1.txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Lists_1.txt",
        "peekOfCode": "list2 = [1, 2, 3]\nlist3 = list1 + list2\nprint(list3)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Lists_1.txt",
        "documentation": {}
    },
    {
        "label": "list3",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Lists_1.txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Lists_1.txt",
        "peekOfCode": "list3 = list1 + list2\nprint(list3)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Lists_1.txt",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Lists_2.txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Lists_2.txt",
        "peekOfCode": "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]\nfor x in list2:\n    list1.append(x)\nprint(list1)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Lists_2.txt",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Lists_2.txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Lists_2.txt",
        "peekOfCode": "list2 = [1, 2, 3]\nfor x in list2:\n    list1.append(x)\nprint(list1)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Lists_2.txt",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Lists__extend().txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Lists__extend().txt",
        "peekOfCode": "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]\nlist1.extend(list2)\nprint(list1)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Lists__extend().txt",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Lists__extend().txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Lists__extend().txt",
        "peekOfCode": "list2 = [1, 2, 3]\nlist1.extend(list2)\nprint(list1)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Lists__extend().txt",
        "documentation": {}
    },
    {
        "label": "set1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Sets_union().txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Sets_union().txt",
        "peekOfCode": "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = set1.union(set2)\nprint(set3)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Sets_union().txt",
        "documentation": {}
    },
    {
        "label": "set2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Sets_union().txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Sets_union().txt",
        "peekOfCode": "set2 = {1, 2, 3}\nset3 = set1.union(set2)\nprint(set3)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Sets_union().txt",
        "documentation": {}
    },
    {
        "label": "set3",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Sets_union().txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Sets_union().txt",
        "peekOfCode": "set3 = set1.union(set2)\nprint(set3)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Sets_union().txt",
        "documentation": {}
    },
    {
        "label": "set1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_join_two_sets_update().txt",
        "description": "python-prac.mini-scripts.python_join_two_sets_update().txt",
        "peekOfCode": "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset1.update(set2)\nprint(set1)",
        "detail": "python-prac.mini-scripts.python_join_two_sets_update().txt",
        "documentation": {}
    },
    {
        "label": "set2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_join_two_sets_update().txt",
        "description": "python-prac.mini-scripts.python_join_two_sets_update().txt",
        "peekOfCode": "set2 = {1, 2, 3}\nset1.update(set2)\nprint(set1)",
        "detail": "python-prac.mini-scripts.python_join_two_sets_update().txt",
        "documentation": {}
    },
    {
        "label": "tuple1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Tuples.txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Tuples.txt",
        "peekOfCode": "tuple1 = (\"a\", \"b\", \"c\")\ntuple2 = (1, 2, 3)\ntuple3 = tuple1 + tuple2\nprint(tuple3)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Tuples.txt",
        "documentation": {}
    },
    {
        "label": "tuple2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Tuples.txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Tuples.txt",
        "peekOfCode": "tuple2 = (1, 2, 3)\ntuple3 = tuple1 + tuple2\nprint(tuple3)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Tuples.txt",
        "documentation": {}
    },
    {
        "label": "tuple3",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Join_Two_Tuples.txt",
        "description": "python-prac.mini-scripts.python_Join_Two_Tuples.txt",
        "peekOfCode": "tuple3 = tuple1 + tuple2\nprint(tuple3)",
        "detail": "python-prac.mini-scripts.python_Join_Two_Tuples.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_1.txt",
        "description": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_1.txt",
        "peekOfCode": "x = {\"apple\", \"banana\", \"cherry\"}\ny = {\"google\", \"microsoft\", \"apple\"}\nx.symmetric_difference_update(y)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_1.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_1.txt",
        "description": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_1.txt",
        "peekOfCode": "y = {\"google\", \"microsoft\", \"apple\"}\nx.symmetric_difference_update(y)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_2.txt",
        "description": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_2.txt",
        "peekOfCode": "x = {\"apple\", \"banana\", \"cherry\"}\ny = {\"google\", \"microsoft\", \"apple\"}\nz = x.symmetric_difference(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_2.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_2.txt",
        "description": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_2.txt",
        "peekOfCode": "y = {\"google\", \"microsoft\", \"apple\"}\nz = x.symmetric_difference(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_2.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_2.txt",
        "description": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_2.txt",
        "peekOfCode": "z = x.symmetric_difference(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_Keep_All._But_NOT_the_Duplicates_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_1.txt",
        "description": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_1.txt",
        "peekOfCode": "x = {\"apple\", \"banana\", \"cherry\"}\ny = {\"google\", \"microsoft\", \"apple\"}\nx.intersection_update(y)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_1.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_1.txt",
        "description": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_1.txt",
        "peekOfCode": "y = {\"google\", \"microsoft\", \"apple\"}\nx.intersection_update(y)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_2.txt",
        "description": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_2.txt",
        "peekOfCode": "x = {\"apple\", \"banana\", \"cherry\"}\ny = {\"google\", \"microsoft\", \"apple\"}\nz = x.intersection(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_2.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_2.txt",
        "description": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_2.txt",
        "peekOfCode": "y = {\"google\", \"microsoft\", \"apple\"}\nz = x.intersection(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_2.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_2.txt",
        "description": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_2.txt",
        "peekOfCode": "z = x.intersection(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_Keep_ONLY_the_Duplicates_2.txt",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Keyword_Arguments.txt",
        "description": "python-prac.mini-scripts.python_Keyword_Arguments.txt",
        "peekOfCode": "def my_function(child3, child2, child1):\n    print(\"The youngest child is \" + child3)\nmy_function(child1=\"Emil\", child2=\"Tobias\", child3=\"Linus\")",
        "detail": "python-prac.mini-scripts.python_Keyword_Arguments.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Lambda_1.txt",
        "description": "python-prac.mini-scripts.Python_Lambda_1.txt",
        "peekOfCode": "x = lambda a: a + 10\nprint(x(5))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lambda_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Lambda_2.txt",
        "description": "python-prac.mini-scripts.Python_Lambda_2.txt",
        "peekOfCode": "x = lambda a, b: a * b\nprint(x(5, 6))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lambda_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Lambda_3.txt",
        "description": "python-prac.mini-scripts.Python_Lambda_3.txt",
        "peekOfCode": "x = lambda a, b, c: a + b + c\nprint(x(5, 6, 2))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lambda_3.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.Python_Lambda_4.txt",
        "description": "python-prac.mini-scripts.Python_Lambda_4.txt",
        "peekOfCode": "def myfunc(n):\n  return lambda a : a * n\nmydoubler = myfunc(2)\nprint(mydoubler(11))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lambda_4.txt",
        "documentation": {}
    },
    {
        "label": "mydoubler",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Lambda_4.txt",
        "description": "python-prac.mini-scripts.Python_Lambda_4.txt",
        "peekOfCode": "mydoubler = myfunc(2)\nprint(mydoubler(11))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lambda_4.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.Python_Lambda_5.txt",
        "description": "python-prac.mini-scripts.Python_Lambda_5.txt",
        "peekOfCode": "def myfunc(n):\n  return lambda a : a * n\nmytripler = myfunc(3)\nprint(mytripler(11))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lambda_5.txt",
        "documentation": {}
    },
    {
        "label": "mytripler",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Lambda_5.txt",
        "description": "python-prac.mini-scripts.Python_Lambda_5.txt",
        "peekOfCode": "mytripler = myfunc(3)\nprint(mytripler(11))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lambda_5.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.Python_Lambda_6.txt",
        "description": "python-prac.mini-scripts.Python_Lambda_6.txt",
        "peekOfCode": "def myfunc(n):\n  return lambda a : a * n\nmydoubler = myfunc(2)\nmytripler = myfunc(3)\nprint(mydoubler(11)) \nprint(mytripler(11))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lambda_6.txt",
        "documentation": {}
    },
    {
        "label": "mydoubler",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Lambda_6.txt",
        "description": "python-prac.mini-scripts.Python_Lambda_6.txt",
        "peekOfCode": "mydoubler = myfunc(2)\nmytripler = myfunc(3)\nprint(mydoubler(11)) \nprint(mytripler(11))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lambda_6.txt",
        "documentation": {}
    },
    {
        "label": "mytripler",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Lambda_6.txt",
        "description": "python-prac.mini-scripts.Python_Lambda_6.txt",
        "peekOfCode": "mytripler = myfunc(3)\nprint(mydoubler(11)) \nprint(mytripler(11))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lambda_6.txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Length_of_an_Array.txt",
        "description": "python-prac.mini-scripts.python_Length_of_an_Array.txt",
        "peekOfCode": "cars = [\"Ford\", \"Volvo\", \"BMW\"]\nx = len(cars)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Length_of_an_Array.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Length_of_an_Array.txt",
        "description": "python-prac.mini-scripts.python_Length_of_an_Array.txt",
        "peekOfCode": "x = len(cars)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Length_of_an_Array.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Lists_1.txt",
        "description": "python-prac.mini-scripts.Python_Lists_1.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lists_1.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Lists_2.txt",
        "description": "python-prac.mini-scripts.Python_Lists_2.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Lists_2.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_List_Comprehension_1.txt",
        "description": "python-prac.mini-scripts.python_List_Comprehension_1.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = []\nfor x in fruits:\n    if \"a\" in x:\n        newlist.append(x)\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_List_Comprehension_1.txt",
        "documentation": {}
    },
    {
        "label": "newlist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_List_Comprehension_1.txt",
        "description": "python-prac.mini-scripts.python_List_Comprehension_1.txt",
        "peekOfCode": "newlist = []\nfor x in fruits:\n    if \"a\" in x:\n        newlist.append(x)\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_List_Comprehension_1.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_List_Comprehension_2.txt",
        "description": "python-prac.mini-scripts.python_List_Comprehension_2.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x for x in fruits if \"a\" in x]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_List_Comprehension_2.txt",
        "documentation": {}
    },
    {
        "label": "newlist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_List_Comprehension_2.txt",
        "description": "python-prac.mini-scripts.python_List_Comprehension_2.txt",
        "peekOfCode": "newlist = [x for x in fruits if \"a\" in x]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_List_Comprehension_2.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_List_Length.txt",
        "description": "python-prac.mini-scripts.python_List_Length.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))",
        "detail": "python-prac.mini-scripts.python_List_Length.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Logical_Operators_(and).txt",
        "description": "python-prac.mini-scripts.Python_Logical_Operators_(and).txt",
        "peekOfCode": "x = 5\nprint(x > 3 and x < 10)\n# returns True because 5 is greater than 3 AND 5 is less than 10\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Logical_Operators_(and).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Logical_Operators_(not).txt",
        "description": "python-prac.mini-scripts.Python_Logical_Operators_(not).txt",
        "peekOfCode": "x = 5\nprint(not(x > 3 and x < 10))\n# returns False because not is used to reverse the result\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Logical_Operators_(not).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Logical_Operators_(or).txt",
        "description": "python-prac.mini-scripts.Python_Logical_Operators_(or).txt",
        "peekOfCode": "x = 5\nprint(x > 3 and x < 10)\n# returns True because 5 is greater than 3 AND 5 is less than 10\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Logical_Operators_(or).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Logistic_Distribution.txt",
        "description": "python-prac.mini-scripts.python_Logistic_Distribution.txt",
        "peekOfCode": "x = random.logistic(loc=1, scale=2, size=(2, 3))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Logistic_Distribution.txt",
        "documentation": {}
    },
    {
        "label": "nplog",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Log_at_Any_Base.txt",
        "description": "python-prac.mini-scripts.python_Log_at_Any_Base.txt",
        "peekOfCode": "nplog = np.frompyfunc(log, 2, 1)\nprint(nplog(100, 15))",
        "detail": "python-prac.mini-scripts.python_Log_at_Any_Base.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Log_at_Base_10.txt",
        "description": "python-prac.mini-scripts.python_Log_at_Base_10.txt",
        "peekOfCode": "arr = np.arange(1, 10)\nprint(np.log10(arr))",
        "detail": "python-prac.mini-scripts.python_Log_at_Base_10.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Log_at_Base_2.txt",
        "description": "python-prac.mini-scripts.python_Log_at_Base_2.txt",
        "peekOfCode": "arr = np.arange(1, 10)\nprint(np.log2(arr))",
        "detail": "python-prac.mini-scripts.python_Log_at_Base_2.txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Looping_Array_Elements.txt",
        "description": "python-prac.mini-scripts.python_Looping_Array_Elements.txt",
        "peekOfCode": "cars = [\"Ford\", \"Volvo\", \"BMW\"]\nfor x in cars:\n    print(x)",
        "detail": "python-prac.mini-scripts.python_Looping_Array_Elements.txt",
        "documentation": {}
    },
    {
        "label": "mytuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Looping_Through_an_Iterator_1.txt",
        "description": "python-prac.mini-scripts.python_Looping_Through_an_Iterator_1.txt",
        "peekOfCode": "mytuple = (\"apple\", \"banana\", \"cherry\")\nfor x in mytuple:\n    print(x)",
        "detail": "python-prac.mini-scripts.python_Looping_Through_an_Iterator_1.txt",
        "documentation": {}
    },
    {
        "label": "mystr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Looping_Through_an_Iterator_2.txt",
        "description": "python-prac.mini-scripts.python_Looping_Through_an_Iterator_2.txt",
        "peekOfCode": "mystr = \"banana\"\nfor x in mystr:\n    print(x)",
        "detail": "python-prac.mini-scripts.python_Looping_Through_an_Iterator_2.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Looping_Using_List_Comprehension.txt",
        "description": "python-prac.mini-scripts.python_Looping_Using_List_Comprehension.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\n[print(x) for x in thislist]",
        "detail": "python-prac.mini-scripts.python_Looping_Using_List_Comprehension.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Loop_Through_a_List.txt",
        "description": "python-prac.mini-scripts.python_Loop_Through_a_List.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nfor x in thislist:\n    print(x)",
        "detail": "python-prac.mini-scripts.python_Loop_Through_a_List.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Loop_Through_the_Index_Numbers.txt",
        "description": "python-prac.mini-scripts.python_Loop_Through_the_Index_Numbers.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nfor i in range(len(thislist)):\n    print(thislist[i])",
        "detail": "python-prac.mini-scripts.python_Loop_Through_the_Index_Numbers.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Math_Module_1.txt",
        "description": "python-prac.mini-scripts.python_Math_Module_1.txt",
        "peekOfCode": "x = math.sqrt(64)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Math_Module_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Math_Module_2.txt",
        "description": "python-prac.mini-scripts.python_Math_Module_2.txt",
        "peekOfCode": "x = math.ceil(1.4)\n# Round a number downward to its nearest integer\ny = math.floor(1.4)\nprint(x)\nprint(y)",
        "detail": "python-prac.mini-scripts.python_Math_Module_2.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Math_Module_2.txt",
        "description": "python-prac.mini-scripts.python_Math_Module_2.txt",
        "peekOfCode": "y = math.floor(1.4)\nprint(x)\nprint(y)",
        "detail": "python-prac.mini-scripts.python_Math_Module_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Math_Module_3.txt",
        "description": "python-prac.mini-scripts.python_Math_Module_3.txt",
        "peekOfCode": "x = math.pi\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Math_Module_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Membership_Operators_(in).txt",
        "description": "python-prac.mini-scripts.Python_Membership_Operators_(in).txt",
        "peekOfCode": "x = [\"apple\", \"banana\"]\nprint(\"banana\" in x)\n# returns True because a sequence with the value \"banana\" is in the list\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Membership_Operators_(in).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Membership_Operators_(not_in).txt",
        "description": "python-prac.mini-scripts.Python_Membership_Operators_(not_in).txt",
        "peekOfCode": "x = [\"apple\", \"banana\"]\nprint(\"pineapple\" not in x)\n# returns True because a sequence with the value \"pineapple\" is not in the list\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Membership_Operators_(not_in).txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_method_find()_2.txt",
        "description": "python-prac.mini-scripts.python_method_find()_2.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.find(\"e\")\nprint(x)",
        "detail": "python-prac.mini-scripts.python_method_find()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_method_find()_2.txt",
        "description": "python-prac.mini-scripts.python_method_find()_2.txt",
        "peekOfCode": "x = txt.find(\"e\")\nprint(x)",
        "detail": "python-prac.mini-scripts.python_method_find()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_method_find()_3.txt",
        "description": "python-prac.mini-scripts.python_method_find()_3.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.find(\"e\", 5, 10)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_method_find()_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_method_find()_3.txt",
        "description": "python-prac.mini-scripts.python_method_find()_3.txt",
        "peekOfCode": "x = txt.find(\"e\", 5, 10)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_method_find()_3.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_method_find()_4.txt",
        "description": "python-prac.mini-scripts.python_method_find()_4.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nprint(txt.find(\"q\"))\nprint(txt.index(\"q\"))",
        "detail": "python-prac.mini-scripts.python_method_find()_4.txt",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Modify_Object_Properties.txt",
        "description": "python-prac.mini-scripts.python_Modify_Object_Properties.txt",
        "peekOfCode": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def myfunc(self):\n        print(\"Hello my name is \" + self.name)\np1 = Person(\"sanus\", 24)\np1.age = 40\nprint(p1.age)",
        "detail": "python-prac.mini-scripts.python_Modify_Object_Properties.txt",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Modify_Object_Properties.txt",
        "description": "python-prac.mini-scripts.python_Modify_Object_Properties.txt",
        "peekOfCode": "p1 = Person(\"sanus\", 24)\np1.age = 40\nprint(p1.age)",
        "detail": "python-prac.mini-scripts.python_Modify_Object_Properties.txt",
        "documentation": {}
    },
    {
        "label": "p1.age",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Modify_Object_Properties.txt",
        "description": "python-prac.mini-scripts.python_Modify_Object_Properties.txt",
        "peekOfCode": "p1.age = 40\nprint(p1.age)",
        "detail": "python-prac.mini-scripts.python_Modify_Object_Properties.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Multiline_Strings_1.txt",
        "description": "python-prac.mini-scripts.python_Multiline_Strings_1.txt",
        "peekOfCode": "a = \"\"\"Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.\"\"\"\nprint(a)",
        "detail": "python-prac.mini-scripts.python_Multiline_Strings_1.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Multiline_Strings_2.txt",
        "description": "python-prac.mini-scripts.python_Multiline_Strings_2.txt",
        "peekOfCode": "a = \"\"\"Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.\"\"\"\nprint(a)",
        "detail": "python-prac.mini-scripts.python_Multiline_Strings_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Multinomial_Distribution.txt",
        "description": "python-prac.mini-scripts.python_Multinomial_Distribution.txt",
        "peekOfCode": "x = random.multinomial(n=6, pvals=[1 / 6, 1 / 6, 1 / 6, 1 / 6, 1 / 6, 1 / 6])\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Multinomial_Distribution.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Multiply_Tuples.txt",
        "description": "python-prac.mini-scripts.python_Multiply_Tuples.txt",
        "peekOfCode": "fruits = (\"apple\", \"banana\", \"cherry\")\nmytuple = fruits * 2\nprint(mytuple)",
        "detail": "python-prac.mini-scripts.python_Multiply_Tuples.txt",
        "documentation": {}
    },
    {
        "label": "mytuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Multiply_Tuples.txt",
        "description": "python-prac.mini-scripts.python_Multiply_Tuples.txt",
        "peekOfCode": "mytuple = fruits * 2\nprint(mytuple)",
        "detail": "python-prac.mini-scripts.python_Multiply_Tuples.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Natural_Log._or_Log_at_Base_e.txt",
        "description": "python-prac.mini-scripts.python_Natural_Log._or_Log_at_Base_e.txt",
        "peekOfCode": "arr = np.arange(1, 10)\nprint(np.log(arr))",
        "detail": "python-prac.mini-scripts.python_Natural_Log._or_Log_at_Base_e.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Negative_Indexing.txt",
        "description": "python-prac.mini-scripts.python_Negative_Indexing.txt",
        "peekOfCode": "b = \"Hello, World!\"\nprint(b[-5:-2])",
        "detail": "python-prac.mini-scripts.python_Negative_Indexing.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Negative_Indexing_(2).txt",
        "description": "python-prac.mini-scripts.python_Negative_Indexing_(2).txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple[-1])",
        "detail": "python-prac.mini-scripts.python_Negative_Indexing_(2).txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_negative_indexing_Access_Array_Elements.txt",
        "description": "python-prac.mini-scripts.python_negative_indexing_Access_Array_Elements.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(\"Last element from 2nd dim: \", arr[1, -1])",
        "detail": "python-prac.mini-scripts.python_negative_indexing_Access_Array_Elements.txt",
        "documentation": {}
    },
    {
        "label": "myfamily",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Nested_Dictionaries_1.txt",
        "description": "python-prac.mini-scripts.python_Nested_Dictionaries_1.txt",
        "peekOfCode": "myfamily = {\n    \"child1\": {\"name\": \"Emil\", \"year\": 2004},\n    \"child2\": {\"name\": \"Tobias\", \"year\": 2007},\n    \"child3\": {\"name\": \"Linus\", \"year\": 2011},\n}\nprint(myfamily)",
        "detail": "python-prac.mini-scripts.python_Nested_Dictionaries_1.txt",
        "documentation": {}
    },
    {
        "label": "child1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "description": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "peekOfCode": "child1 = {\"name\": \"Emil\", \"year\": 2004}\nchild2 = {\"name\": \"Tobias\", \"year\": 2007}\nchild3 = {\"name\": \"Linus\", \"year\": 2011}\nmyfamily = {\"child1\": child1, \"child2\": child2, \"child3\": child3}\nprint(myfamily)",
        "detail": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "documentation": {}
    },
    {
        "label": "child2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "description": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "peekOfCode": "child2 = {\"name\": \"Tobias\", \"year\": 2007}\nchild3 = {\"name\": \"Linus\", \"year\": 2011}\nmyfamily = {\"child1\": child1, \"child2\": child2, \"child3\": child3}\nprint(myfamily)",
        "detail": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "documentation": {}
    },
    {
        "label": "child3",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "description": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "peekOfCode": "child3 = {\"name\": \"Linus\", \"year\": 2011}\nmyfamily = {\"child1\": child1, \"child2\": child2, \"child3\": child3}\nprint(myfamily)",
        "detail": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "documentation": {}
    },
    {
        "label": "myfamily",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "description": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "peekOfCode": "myfamily = {\"child1\": child1, \"child2\": child2, \"child3\": child3}\nprint(myfamily)",
        "detail": "python-prac.mini-scripts.python_Nested_Dictionaries_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Nested_If.txt",
        "description": "python-prac.mini-scripts.python_Nested_If.txt",
        "peekOfCode": "x = 41\nif x > 10:\n    print(\"Above ten,\")\n    if x > 20:\n        print(\"and also above 20!\")\n    else:\n        print(\"but not above 20.\")",
        "detail": "python-prac.mini-scripts.python_Nested_If.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Normal_(Gaussian)_Distribution_1.txt",
        "description": "python-prac.mini-scripts.python_Normal_(Gaussian)_Distribution_1.txt",
        "peekOfCode": "x = random.normal(size=(2, 3))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Normal_(Gaussian)_Distribution_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Normal_(Gaussian)_Distribution_2.txt",
        "description": "python-prac.mini-scripts.python_Normal_(Gaussian)_Distribution_2.txt",
        "peekOfCode": "x = random.normal(loc=1, scale=2, size=(2, 3))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Normal_(Gaussian)_Distribution_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers.txt",
        "description": "python-prac.mini-scripts.Python_Numbers.txt",
        "peekOfCode": "x = 1\ny = 2.8\nz = 1j\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers.txt",
        "description": "python-prac.mini-scripts.Python_Numbers.txt",
        "peekOfCode": "y = 2.8\nz = 1j\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers.txt",
        "description": "python-prac.mini-scripts.Python_Numbers.txt",
        "peekOfCode": "z = 1j\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(complex)_1.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(complex)_1.txt",
        "peekOfCode": "x = 3+5j\ny = 5j\nz = -5j\nprint(type(x))\nprint(type(y))\nprint(type(z))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(complex)_1.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(complex)_1.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(complex)_1.txt",
        "peekOfCode": "y = 5j\nz = -5j\nprint(type(x))\nprint(type(y))\nprint(type(z))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(complex)_1.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(complex)_1.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(complex)_1.txt",
        "peekOfCode": "z = -5j\nprint(type(x))\nprint(type(y))\nprint(type(z))\n//Creater By Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(complex)_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(complex)_2.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(complex)_2.txt",
        "peekOfCode": "x = float(1)\n# convert from float to int:\ny = int(2.8)\n# convert from int to complex:\nz = complex(x)\nprint(x)\nprint(y)\nprint(z)\nprint(type(x))\nprint(type(y))",
        "detail": "python-prac.mini-scripts.Python_Numbers_(complex)_2.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(complex)_2.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(complex)_2.txt",
        "peekOfCode": "y = int(2.8)\n# convert from int to complex:\nz = complex(x)\nprint(x)\nprint(y)\nprint(z)\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(complex)_2.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(complex)_2.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(complex)_2.txt",
        "peekOfCode": "z = complex(x)\nprint(x)\nprint(y)\nprint(z)\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(complex)_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(float)_1.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(float)_1.txt",
        "peekOfCode": "x = 1.10\ny = 1.0\nz = -35.59\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(float)_1.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(float)_1.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(float)_1.txt",
        "peekOfCode": "y = 1.0\nz = -35.59\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(float)_1.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(float)_1.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(float)_1.txt",
        "peekOfCode": "z = -35.59\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(float)_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(float)_2.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(float)_2.txt",
        "peekOfCode": "x = 35e3\ny = 12e4\nz = -87.7e100\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(float)_2.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(float)_2.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(float)_2.txt",
        "peekOfCode": "y = 12e4\nz = -87.7e100\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(float)_2.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(float)_2.txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(float)_2.txt",
        "peekOfCode": "z = -87.7e100\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(float)_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(int).txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(int).txt",
        "peekOfCode": "x = 1\ny = 35656222554887711\nz = -3255522\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(int).txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(int).txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(int).txt",
        "peekOfCode": "y = 35656222554887711\nz = -3255522\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(int).txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Numbers_(int).txt",
        "description": "python-prac.mini-scripts.Python_Numbers_(int).txt",
        "peekOfCode": "z = -3255522\nprint(type(x))\nprint(type(y))\nprint(type(z))\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_Numbers_(int).txt",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Number_of_Arguments.txt",
        "description": "python-prac.mini-scripts.python_Number_of_Arguments.txt",
        "peekOfCode": "def my_function(fname, lname):\n    print(fname + \" \" + lname)\nmy_function(\"Emil\", \"Refsnes\")",
        "detail": "python-prac.mini-scripts.python_Number_of_Arguments.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_Access_Array_Elements_1.txt",
        "description": "python-prac.mini-scripts.python_numpy_Access_Array_Elements_1.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4])\nprint(arr[0])",
        "detail": "python-prac.mini-scripts.python_numpy_Access_Array_Elements_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_Access_Array_Elements_2.txt",
        "description": "python-prac.mini-scripts.python_numpy_Access_Array_Elements_2.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4])\nprint(arr[1])",
        "detail": "python-prac.mini-scripts.python_numpy_Access_Array_Elements_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_Access_Array_Elements_3.txt",
        "description": "python-prac.mini-scripts.python_numpy_Access_Array_Elements_3.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4])\nprint(arr[2] + arr[3])",
        "detail": "python-prac.mini-scripts.python_numpy_Access_Array_Elements_3.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_Access_Array_Elements__2-D_array_1.txt",
        "description": "python-prac.mini-scripts.python_numpy_Access_Array_Elements__2-D_array_1.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(\"2nd element on 1st dim: \", arr[0, 1])",
        "detail": "python-prac.mini-scripts.python_numpy_Access_Array_Elements__2-D_array_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_Access_Array_Elements__2-D_array_2.txt",
        "description": "python-prac.mini-scripts.python_numpy_Access_Array_Elements__2-D_array_2.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(\"5th element on 2nd dim: \", arr[1, 4])",
        "detail": "python-prac.mini-scripts.python_numpy_Access_Array_Elements__2-D_array_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_Access_Array_Elements__3-D_array_1.txt",
        "description": "python-prac.mini-scripts.python_numpy_Access_Array_Elements__3-D_array_1.txt",
        "peekOfCode": "arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\nprint(arr[0, 1, 2])",
        "detail": "python-prac.mini-scripts.python_numpy_Access_Array_Elements__3-D_array_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_Copy.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_Copy.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5])\nx = arr.copy()\narr[0] = 42\nprint(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_Copy.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_Copy.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_Copy.txt",
        "peekOfCode": "x = arr.copy()\narr[0] = 42\nprint(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_Copy.txt",
        "documentation": {}
    },
    {
        "label": "arr[0]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_Copy.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_Copy.txt",
        "peekOfCode": "arr[0] = 42\nprint(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_Copy.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_Copy_and_View.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_Copy_and_View.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5])\nx = arr.view()\nx[0] = 31\nprint(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_Copy_and_View.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_Copy_and_View.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_Copy_and_View.txt",
        "peekOfCode": "x = arr.view()\nx[0] = 31\nprint(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_Copy_and_View.txt",
        "documentation": {}
    },
    {
        "label": "x[0]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_Copy_and_View.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_Copy_and_View.txt",
        "peekOfCode": "x[0] = 31\nprint(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_Copy_and_View.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[-3:-1])",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_1.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_1.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5:2])",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_2.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[::2])",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_3.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_3.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[1, 1:4])",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_3.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_4.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_4.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[0:2, 2])",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_4.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_5.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_5.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[0:2, 1:4])",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_negative_Slicing_(STEP)_5.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_Slicing_1.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_Slicing_1.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5])",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_Slicing_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_Slicing_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_Slicing_2.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[4:])",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_Slicing_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array_Slicing_3.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array_Slicing_3.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[:4])",
        "detail": "python-prac.mini-scripts.python_NumPy_Array_Slicing_3.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array__View.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array__View.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5])\nx = arr.view()\narr[0] = 42\nprint(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Array__View.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array__View.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array__View.txt",
        "peekOfCode": "x = arr.view()\narr[0] = 42\nprint(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Array__View.txt",
        "documentation": {}
    },
    {
        "label": "arr[0]",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Array__View.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Array__View.txt",
        "peekOfCode": "arr[0] = 42\nprint(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Array__View.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Data_Types_1.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Data_Types_1.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4])\nprint(arr.dtype)",
        "detail": "python-prac.mini-scripts.python_NumPy_Data_Types_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Data_Types_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Data_Types_2.txt",
        "peekOfCode": "arr = np.array([\"apple\", \"banana\", \"cherry\"])\nprint(arr.dtype)",
        "detail": "python-prac.mini-scripts.python_NumPy_Data_Types_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Data_Types_3.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Data_Types_3.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4], dtype=\"S\")\nprint(arr)\nprint(arr.dtype)",
        "detail": "python-prac.mini-scripts.python_NumPy_Data_Types_3.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Data_Types_4.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Data_Types_4.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4], dtype=\"i4\")\nprint(arr)\nprint(arr.dtype)",
        "detail": "python-prac.mini-scripts.python_NumPy_Data_Types_4.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Data_Types_5.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Data_Types_5.txt",
        "peekOfCode": "arr = np.array([1.1, 2.1, 3.1])\nnewarr = arr.astype(\"i\")\nprint(newarr)\nprint(newarr.dtype)",
        "detail": "python-prac.mini-scripts.python_NumPy_Data_Types_5.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Data_Types_5.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Data_Types_5.txt",
        "peekOfCode": "newarr = arr.astype(\"i\")\nprint(newarr)\nprint(newarr.dtype)",
        "detail": "python-prac.mini-scripts.python_NumPy_Data_Types_5.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Data_Types_6.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Data_Types_6.txt",
        "peekOfCode": "arr = np.array([1.1, 2.1, 3.1])\nnewarr = arr.astype(int)\nprint(newarr)\nprint(newarr.dtype)",
        "detail": "python-prac.mini-scripts.python_NumPy_Data_Types_6.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Data_Types_6.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Data_Types_6.txt",
        "peekOfCode": "newarr = arr.astype(int)\nprint(newarr)\nprint(newarr.dtype)",
        "detail": "python-prac.mini-scripts.python_NumPy_Data_Types_6.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Data_Types_7.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Data_Types_7.txt",
        "peekOfCode": "arr = np.array([1, 0, 3])\nnewarr = arr.astype(bool)\nprint(newarr)\nprint(newarr.dtype)",
        "detail": "python-prac.mini-scripts.python_NumPy_Data_Types_7.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Data_Types_7.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Data_Types_7.txt",
        "peekOfCode": "newarr = arr.astype(bool)\nprint(newarr)\nprint(newarr.dtype)",
        "detail": "python-prac.mini-scripts.python_NumPy_Data_Types_7.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Differences.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Differences.txt",
        "peekOfCode": "arr = np.array([10, 15, 25, 5])\nnewarr = np.diff(arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_NumPy_Differences.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Differences.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Differences.txt",
        "peekOfCode": "newarr = np.diff(arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_NumPy_Differences.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Differences_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Differences_2.txt",
        "peekOfCode": "arr = np.array([10, 15, 25, 5])\nnewarr = np.diff(arr, n=2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_NumPy_Differences_2.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Differences_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Differences_2.txt",
        "peekOfCode": "newarr = np.diff(arr, n=2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_NumPy_Differences_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Filter_Array.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Filter_Array.txt",
        "peekOfCode": "arr = np.array([41, 42, 43, 44])\nx = arr[[True, False, True, False]]\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Filter_Array.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Filter_Array.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Filter_Array.txt",
        "peekOfCode": "x = arr[[True, False, True, False]]\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Filter_Array.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Products_1.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Products_1.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4])\nx = np.prod(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Products_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Products_1.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Products_1.txt",
        "peekOfCode": "x = np.prod(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Products_1.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Products_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Products_2.txt",
        "peekOfCode": "arr1 = np.array([1, 2, 3, 4])\narr2 = np.array([5, 6, 7, 8])\nx = np.prod([arr1, arr2])\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Products_2.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Products_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Products_2.txt",
        "peekOfCode": "arr2 = np.array([5, 6, 7, 8])\nx = np.prod([arr1, arr2])\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Products_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Products_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Products_2.txt",
        "peekOfCode": "x = np.prod([arr1, arr2])\nprint(x)",
        "detail": "python-prac.mini-scripts.python_NumPy_Products_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Sorting_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Sorting_Arrays_1.txt",
        "peekOfCode": "arr = np.array([3, 2, 0, 1])\nprint(np.sort(arr))",
        "detail": "python-prac.mini-scripts.python_NumPy_Sorting_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Sorting_Arrays_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Sorting_Arrays_2.txt",
        "peekOfCode": "arr = np.array([\"banana\", \"cherry\", \"apple\"])\nprint(np.sort(arr))",
        "detail": "python-prac.mini-scripts.python_NumPy_Sorting_Arrays_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Sorting_Arrays_3.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Sorting_Arrays_3.txt",
        "peekOfCode": "arr = np.array([True, False, True])\nprint(np.sort(arr))",
        "detail": "python-prac.mini-scripts.python_NumPy_Sorting_Arrays_3.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Summations_1.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Summations_1.txt",
        "peekOfCode": "arr1 = np.array([1, 2, 3])\narr2 = np.array([1, 2, 3])\nnewarr = np.add(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_NumPy_Summations_1.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Summations_1.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Summations_1.txt",
        "peekOfCode": "arr2 = np.array([1, 2, 3])\nnewarr = np.add(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_NumPy_Summations_1.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Summations_1.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Summations_1.txt",
        "peekOfCode": "newarr = np.add(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_NumPy_Summations_1.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Summations_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Summations_2.txt",
        "peekOfCode": "arr1 = np.array([1, 2, 3])\narr2 = np.array([1, 2, 3])\nnewarr = np.sum([arr1, arr2])\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_NumPy_Summations_2.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Summations_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Summations_2.txt",
        "peekOfCode": "arr2 = np.array([1, 2, 3])\nnewarr = np.sum([arr1, arr2])\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_NumPy_Summations_2.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_NumPy_Summations_2.txt",
        "description": "python-prac.mini-scripts.python_NumPy_Summations_2.txt",
        "peekOfCode": "newarr = np.sum([arr1, arr2])\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_NumPy_Summations_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization1.txt",
        "description": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization1.txt",
        "peekOfCode": "x = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = []\nfor i, j in zip(x, y):\n    z.append(i + j)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization1.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization1.txt",
        "description": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization1.txt",
        "peekOfCode": "y = [4, 5, 6, 7]\nz = []\nfor i, j in zip(x, y):\n    z.append(i + j)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization1.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization1.txt",
        "description": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization1.txt",
        "peekOfCode": "z = []\nfor i, j in zip(x, y):\n    z.append(i + j)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization2.txt",
        "description": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization2.txt",
        "peekOfCode": "x = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = np.add(x, y)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization2.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization2.txt",
        "description": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization2.txt",
        "peekOfCode": "y = [4, 5, 6, 7]\nz = np.add(x, y)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization2.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization2.txt",
        "description": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization2.txt",
        "peekOfCode": "z = np.add(x, y)\nprint(z)",
        "detail": "python-prac.mini-scripts.python_numpy_ufuncs_Vectorization2.txt",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Object_Methods.txt",
        "description": "python-prac.mini-scripts.python_Object_Methods.txt",
        "peekOfCode": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def myfunc(self):\n        print(\"Hello my name is \" + self.name)\np1 = Person(\"sanus\", 24)\np1.myfunc()",
        "detail": "python-prac.mini-scripts.python_Object_Methods.txt",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Object_Methods.txt",
        "description": "python-prac.mini-scripts.python_Object_Methods.txt",
        "peekOfCode": "p1 = Person(\"sanus\", 24)\np1.myfunc()",
        "detail": "python-prac.mini-scripts.python_Object_Methods.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_or.txt",
        "description": "python-prac.mini-scripts.python_or.txt",
        "peekOfCode": "a = 200\nb = 33\nc = 500\nif a > b or a > c:\n    print(\"At least one of the conditions is True\")",
        "detail": "python-prac.mini-scripts.python_or.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_or.txt",
        "description": "python-prac.mini-scripts.python_or.txt",
        "peekOfCode": "b = 33\nc = 500\nif a > b or a > c:\n    print(\"At least one of the conditions is True\")",
        "detail": "python-prac.mini-scripts.python_or.txt",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_or.txt",
        "description": "python-prac.mini-scripts.python_or.txt",
        "peekOfCode": "c = 500\nif a > b or a > c:\n    print(\"At least one of the conditions is True\")",
        "detail": "python-prac.mini-scripts.python_or.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Order_the_Result.txt",
        "description": "python-prac.mini-scripts.python_Order_the_Result.txt",
        "peekOfCode": "x = {\n    \"name\": \"sanu\",\n    \"age\": 24,\n    \"married\": True,\n    \"divorced\": False,\n    \"children\": (\"Ann\", \"Billy\"),\n    \"pets\": None,\n    \"cars\": [{\"model\": \"BMW 230\", \"mpg\": 27.5}, {\"model\": \"Ford Edge\", \"mpg\": 24.1}],\n}\n# sort the result alphabetically by keys:",
        "detail": "python-prac.mini-scripts.python_Order_the_Result.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Pareto_Distribution.txt",
        "description": "python-prac.mini-scripts.python_Pareto_Distribution.txt",
        "peekOfCode": "x = random.pareto(a=2, size=(2, 3))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Pareto_Distribution.txt",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Passing_a_List_as_an_Argument.txt",
        "description": "python-prac.mini-scripts.python_Passing_a_List_as_an_Argument.txt",
        "peekOfCode": "def my_function(food):\n    for x in food:\n        print(x)\nfruits = [\"apple\", \"banana\", \"cherry\"]\nmy_function(fruits)",
        "detail": "python-prac.mini-scripts.python_Passing_a_List_as_an_Argument.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Passing_a_List_as_an_Argument.txt",
        "description": "python-prac.mini-scripts.python_Passing_a_List_as_an_Argument.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nmy_function(fruits)",
        "detail": "python-prac.mini-scripts.python_Passing_a_List_as_an_Argument.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Poisson_Distribution.txt",
        "description": "python-prac.mini-scripts.python_Poisson_Distribution.txt",
        "peekOfCode": "x = random.poisson(lam=2, size=10)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Poisson_Distribution.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Product_Over_an_Axis.txt",
        "description": "python-prac.mini-scripts.python_Product_Over_an_Axis.txt",
        "peekOfCode": "arr1 = np.array([1, 2, 3, 4])\narr2 = np.array([5, 6, 7, 8])\nnewarr = np.prod([arr1, arr2], axis=1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Product_Over_an_Axis.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Product_Over_an_Axis.txt",
        "description": "python-prac.mini-scripts.python_Product_Over_an_Axis.txt",
        "peekOfCode": "arr2 = np.array([5, 6, 7, 8])\nnewarr = np.prod([arr1, arr2], axis=1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Product_Over_an_Axis.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Product_Over_an_Axis.txt",
        "description": "python-prac.mini-scripts.python_Product_Over_an_Axis.txt",
        "peekOfCode": "newarr = np.prod([arr1, arr2], axis=1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Product_Over_an_Axis.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Raise_an_exception_1.txt",
        "description": "python-prac.mini-scripts.python_Raise_an_exception_1.txt",
        "peekOfCode": "x = -1\nif x < 0:\n    raise Exception(\"Sorry, no numbers below zero\")",
        "detail": "python-prac.mini-scripts.python_Raise_an_exception_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Raise_an_exception_2.txt",
        "description": "python-prac.mini-scripts.python_Raise_an_exception_2.txt",
        "peekOfCode": "x = \"hello\"\nif not type(x) is int:\n    raise TypeError(\"Only integers are allowed\")",
        "detail": "python-prac.mini-scripts.python_Raise_an_exception_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Random_Data_Distribution_1.txt",
        "description": "python-prac.mini-scripts.python_Random_Data_Distribution_1.txt",
        "peekOfCode": "x = random.choice([3, 5, 7, 9], p=[0.1, 0.3, 0.6, 0.0], size=(100))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Random_Data_Distribution_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Random_Data_Distribution_2.txt",
        "description": "python-prac.mini-scripts.python_Random_Data_Distribution_2.txt",
        "peekOfCode": "x = random.choice([3, 5, 7, 9], p=[0.1, 0.3, 0.6, 0.0], size=(3, 5))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Random_Data_Distribution_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Random_Permutations_shuffling_array.txt",
        "description": "python-prac.mini-scripts.python_Random_Permutations_shuffling_array.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5])\nrandom.shuffle(arr)\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Random_Permutations_shuffling_array.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Range_of_Indexes_1.txt",
        "description": "python-prac.mini-scripts.python_Range_of_Indexes_1.txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[2:5])\n# This will return the items from position 2 to 5.\n# Remember that the first item is position 0,\n# and note that the item in position 5 is NOT included",
        "detail": "python-prac.mini-scripts.python_Range_of_Indexes_1.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Range_of_Indexes_2.txt",
        "description": "python-prac.mini-scripts.python_Range_of_Indexes_2.txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[2:5])\n# This will return the items from position 2 to 5.\n# Remember that the first item is position 0,\n# and note that the item in position 5 is NOT included",
        "detail": "python-prac.mini-scripts.python_Range_of_Indexes_2.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Range_of_Indexes_3.txt",
        "description": "python-prac.mini-scripts.python_Range_of_Indexes_3.txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[2:])",
        "detail": "python-prac.mini-scripts.python_Range_of_Indexes_3.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Range_of_Negative_Indexes.txt",
        "description": "python-prac.mini-scripts.python_Range_of_Negative_Indexes.txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[-4:-1])\n# Negative indexing means starting from the end of the tuple.\n# This example returns the items from index -4 (included) to index -1 (excluded)\n# Remember that the last item has the index -1,",
        "detail": "python-prac.mini-scripts.python_Range_of_Negative_Indexes.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Rayleigh_Distribution.txt",
        "description": "python-prac.mini-scripts.python_Rayleigh_Distribution.txt",
        "peekOfCode": "x = random.rayleigh(scale=2, size=(2, 3))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Rayleigh_Distribution.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Re-naming_a_Module.txt",
        "description": "python-prac.mini-scripts.python_Re-naming_a_Module.txt",
        "peekOfCode": "a = mx.person1[\"age\"]\nprint(a)",
        "detail": "python-prac.mini-scripts.python_Re-naming_a_Module.txt",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Read_Only_Parts_of_the_File.txt",
        "description": "python-prac.mini-scripts.python_Read_Only_Parts_of_the_File.txt",
        "peekOfCode": "f = open(\"demofile.txt\", \"r\")\nprint(f.read(5))",
        "detail": "python-prac.mini-scripts.python_Read_Only_Parts_of_the_File.txt",
        "documentation": {}
    },
    {
        "label": "tri_recursion",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Recursion.txt",
        "description": "python-prac.mini-scripts.python_Recursion.txt",
        "peekOfCode": "def tri_recursion(k):\n    if k > 0:\n        result = k + tri_recursion(k - 1)\n        print(result)\n    else:\n        result = 0\n    return result\nprint(\"\\n\\nRecursion Example Results\")\ntri_recursion(6)",
        "detail": "python-prac.mini-scripts.python_Recursion.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx.txt",
        "description": "python-prac.mini-scripts.Python_RegEx.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.search(\"^The.*Spain$\", txt)\nif x:\n    print(\"YES! We have a match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx.txt",
        "description": "python-prac.mini-scripts.Python_RegEx.txt",
        "peekOfCode": "x = re.search(\"^The.*Spain$\", txt)\nif x:\n    print(\"YES! We have a match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_match_object_1.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_match_object_1.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.search(\"ai\", txt)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_match_object_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_match_object_1.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_match_object_1.txt",
        "peekOfCode": "x = re.search(\"ai\", txt)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_match_object_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters_either_or.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters_either_or.txt",
        "peekOfCode": "txt = \"The rain in Spain falls mainly in the plain!\"\n# Check if the string contains either \"falls\" or \"stays\":\nx = re.findall(\"falls|stays\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters_either_or.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters_either_or.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters_either_or.txt",
        "peekOfCode": "x = re.findall(\"falls|stays\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters_either_or.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__a_set_of_cgaracter_[].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__a_set_of_cgaracter_[].txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Find all lower case characters alphabetically between \"a\" and \"m\":\nx = re.findall(\"[a-m]\", txt)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__a_set_of_cgaracter_[].txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__a_set_of_cgaracter_[].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__a_set_of_cgaracter_[].txt",
        "peekOfCode": "x = re.findall(\"[a-m]\", txt)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__a_set_of_cgaracter_[].txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__end_with.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__end_with.txt",
        "peekOfCode": "txt = \"hello world\"\n# Check if the string ends with 'world':\nx = re.findall(\"world$\", txt)\nif x:\n    print(\"Yes, the string ends with 'world'\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__end_with.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__end_with.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__end_with.txt",
        "peekOfCode": "x = re.findall(\"world$\", txt)\nif x:\n    print(\"Yes, the string ends with 'world'\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__end_with.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__exactly_the_specifies_number_of_occurrences.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__exactly_the_specifies_number_of_occurrences.txt",
        "peekOfCode": "txt = \"The rain in Spain falls mainly in the plain!\"\n# Check if the string contains \"a\" followed by exactly two \"l\" characters:\nx = re.findall(\"al{2}\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__exactly_the_specifies_number_of_occurrences.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__exactly_the_specifies_number_of_occurrences.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__exactly_the_specifies_number_of_occurrences.txt",
        "peekOfCode": "x = re.findall(\"al{2}\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__exactly_the_specifies_number_of_occurrences.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__nay_character_..txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__nay_character_..txt",
        "peekOfCode": "txt = \"hello world\"\n# Search for a sequence that starts with \"he\", followed by two (any) characters, and an \"o\":\nx = re.findall(\"he..o\", txt)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__nay_character_..txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__nay_character_..txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__nay_character_..txt",
        "peekOfCode": "x = re.findall(\"he..o\", txt)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__nay_character_..txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__one_or_more_coourrences.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__one_or_more_coourrences.txt",
        "peekOfCode": "txt = \"The rain in Spain falls mainly in the plain!\"\n# Check if the string contains \"ai\" followed by 1 or more \"x\" characters:\nx = re.findall(\"aix+\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__one_or_more_coourrences.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__one_or_more_coourrences.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__one_or_more_coourrences.txt",
        "peekOfCode": "x = re.findall(\"aix+\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__one_or_more_coourrences.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__signal_a_special_sequence_back_slash.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__signal_a_special_sequence_back_slash.txt",
        "peekOfCode": "txt = \"That will be 59 dollars\"\n# Find all digit characters:\nx = re.findall(\"\\d\", txt)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__signal_a_special_sequence_back_slash.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__signal_a_special_sequence_back_slash.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__signal_a_special_sequence_back_slash.txt",
        "peekOfCode": "x = re.findall(\"\\d\", txt)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__signal_a_special_sequence_back_slash.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__starts_with.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__starts_with.txt",
        "peekOfCode": "txt = \"hello world\"\n# Check if the string starts with 'hello':\nx = re.findall(\"^hello\", txt)\nif x:\n    print(\"Yes, the string starts with 'hello'\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__starts_with.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__starts_with.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__starts_with.txt",
        "peekOfCode": "x = re.findall(\"^hello\", txt)\nif x:\n    print(\"Yes, the string starts with 'hello'\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__starts_with.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__zero_or_more_occurrences.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__zero_or_more_occurrences.txt",
        "peekOfCode": "txt = \"The rain in Spain falls mainly in the plain!\"\n# Check if the string contains \"ai\" followed by 0 or more \"x\" characters:\nx = re.findall(\"aix*\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__zero_or_more_occurrences.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_metacharacters__zero_or_more_occurrences.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_metacharacters__zero_or_more_occurrences.txt",
        "peekOfCode": "x = re.findall(\"aix*\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx_metacharacters__zero_or_more_occurrences.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_mutch_object_2.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_mutch_object_2.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(x.span())",
        "detail": "python-prac.mini-scripts.Python_RegEx_mutch_object_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_mutch_object_2.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_mutch_object_2.txt",
        "peekOfCode": "x = re.search(r\"\\bS\\w+\", txt)\nprint(x.span())",
        "detail": "python-prac.mini-scripts.Python_RegEx_mutch_object_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_mutch_object_3.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_mutch_object_3.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(x.string)",
        "detail": "python-prac.mini-scripts.Python_RegEx_mutch_object_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_mutch_object_3.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_mutch_object_3.txt",
        "peekOfCode": "x = re.search(r\"\\bS\\w+\", txt)\nprint(x.string)",
        "detail": "python-prac.mini-scripts.Python_RegEx_mutch_object_3.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_mutch_object_4.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_mutch_object_4.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(x.group())",
        "detail": "python-prac.mini-scripts.Python_RegEx_mutch_object_4.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_mutch_object_4.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_mutch_object_4.txt",
        "peekOfCode": "x = re.search(r\"\\bS\\w+\", txt)\nprint(x.group())",
        "detail": "python-prac.mini-scripts.Python_RegEx_mutch_object_4.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_search_1.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_search_1.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.search(\"Portugal\", txt)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_RegEx_search_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_search_1.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_search_1.txt",
        "peekOfCode": "x = re.search(\"Portugal\", txt)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_RegEx_search_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_search_2.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_search_2.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.search(\"\\s\", txt)\nprint(\"The first white-space character is located in position:\", x.start())",
        "detail": "python-prac.mini-scripts.Python_RegEx_search_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_search_2.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_search_2.txt",
        "peekOfCode": "x = re.search(\"\\s\", txt)\nprint(\"The first white-space character is located in position:\", x.start())",
        "detail": "python-prac.mini-scripts.Python_RegEx_search_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[+].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[+].txt",
        "peekOfCode": "txt = \"8 times before 11:45 AM\"\n# Check if the string has any + characters:\nx = re.findall(\"[+]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[+].txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[+].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[+].txt",
        "peekOfCode": "x = re.findall(\"[+]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[+].txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[0-5]_[0-9].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[0-5]_[0-9].txt",
        "peekOfCode": "txt = \"8 times before 11:45 AM\"\n# Check if the string has any two-digit numbers, from 00 to 59:\nx = re.findall(\"[0-5][0-9]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[0-5]_[0-9].txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[0-5]_[0-9].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[0-5]_[0-9].txt",
        "peekOfCode": "x = re.findall(\"[0-5][0-9]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[0-5]_[0-9].txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[0-9].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[0-9].txt",
        "peekOfCode": "txt = \"8 times before 11:45 AM\"\n# Check if the string has any digits:\nx = re.findall(\"[0-9]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[0-9].txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[0-9].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[0-9].txt",
        "peekOfCode": "x = re.findall(\"[0-9]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[0-9].txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[0123].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[0123].txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if the string has any 0, 1, 2, or 3 digits:\nx = re.findall(\"[0123]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[0123].txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[0123].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[0123].txt",
        "peekOfCode": "x = re.findall(\"[0123]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[0123].txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[a-n].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[a-n].txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if the string has any characters between a and n:\nx = re.findall(\"[a-n]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[a-n].txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[a-n].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[a-n].txt",
        "peekOfCode": "x = re.findall(\"[a-n]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[a-n].txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[a-z_A-Z].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[a-z_A-Z].txt",
        "peekOfCode": "txt = \"8 times before 11:45 AM\"\n# Check if the string has any characters from a to z lower case, and A to Z upper case:\nx = re.findall(\"[a-zA-Z]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[a-z_A-Z].txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[a-z_A-Z].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[a-z_A-Z].txt",
        "peekOfCode": "x = re.findall(\"[a-zA-Z]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[a-z_A-Z].txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[arn].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[arn].txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if the string has any a, r, or n characters:\nx = re.findall(\"[arn]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[arn].txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[arn].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[arn].txt",
        "peekOfCode": "x = re.findall(\"[arn]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[arn].txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[up_arn].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[up_arn].txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if the string has other characters than a, r, or n:\nx = re.findall(\"[^arn]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[up_arn].txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sets_[up_arn].txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sets_[up_arn].txt",
        "peekOfCode": "x = re.findall(\"[^arn]\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_sets_[up_arn].txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_A.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_A.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if the string starts with \"The\":\nx = re.findall(\"\\AThe\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is a match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_A.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_A.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_A.txt",
        "peekOfCode": "x = re.findall(\"\\AThe\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is a match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_A.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_b.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_b.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if \"ain\" is present at the beginning of a WORD:\nx = re.findall(r\"\\bain\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_b.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_b.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_b.txt",
        "peekOfCode": "x = re.findall(r\"\\bain\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_b.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_D.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_D.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Return a match at every no-digit character:\nx = re.findall(\"\\D\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_D.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_D.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_D.txt",
        "peekOfCode": "x = re.findall(\"\\D\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_D.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_s.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_s.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Return a match at every white-space character:\nx = re.findall(\"\\s\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_s.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_s.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_s.txt",
        "peekOfCode": "x = re.findall(\"\\s\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_s.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_Z.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_Z.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if the string ends with \"Spain\":\nx = re.findall(\"Spain\\Z\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is a match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_Z.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_Z.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_Z.txt",
        "peekOfCode": "x = re.findall(\"Spain\\Z\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is a match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash_Z.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__d.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__d.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if the string contains any digits (numbers from 0-9):\nx = re.findall(\"\\d\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__d.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__d.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__d.txt",
        "peekOfCode": "x = re.findall(\"\\d\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__d.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__w.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__w.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Return a match at every word character (characters from a to Z, digits from 0-9, and the underscore _ character):\nx = re.findall(\"\\w\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__w.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__w.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__w.txt",
        "peekOfCode": "x = re.findall(\"\\w\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash__w.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___B.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___B.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if \"ain\" is present, but NOT at the beginning of a word:\nx = re.findall(r\"\\Bain\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___B.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___B.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___B.txt",
        "peekOfCode": "x = re.findall(r\"\\Bain\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___B.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___d.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___d.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if the string contains any digits (numbers from 0-9):\nx = re.findall(\"\\d\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___d.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___d.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___d.txt",
        "peekOfCode": "x = re.findall(\"\\d\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___d.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___S.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___S.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Return a match at every NON white-space character:\nx = re.findall(\"\\S\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___S.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___S.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___S.txt",
        "peekOfCode": "x = re.findall(\"\\S\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash___S.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash____W.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash____W.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Return a match at every NON word character (characters NOT between a and Z. Like \"!\", \"?\" white-space etc.):\nx = re.findall(\"\\W\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash____W.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash____W.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash____W.txt",
        "peekOfCode": "x = re.findall(\"\\W\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.Python_RegEx_special_sequences_backslash____W.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_split_()_1.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_split_()_1.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.split(\"\\s\", txt)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_RegEx_split_()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_split_()_1.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_split_()_1.txt",
        "peekOfCode": "x = re.split(\"\\s\", txt)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_RegEx_split_()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_split_()_2.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_split_()_2.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.split(\"\\s\", txt, 1)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_RegEx_split_()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_split_()_2.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_split_()_2.txt",
        "peekOfCode": "x = re.split(\"\\s\", txt, 1)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_RegEx_split_()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sub_()_2.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sub_()_2.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \"9\", txt, 2)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_RegEx_sub_()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx_sub_()_2.txt",
        "description": "python-prac.mini-scripts.Python_RegEx_sub_()_2.txt",
        "peekOfCode": "x = re.sub(\"\\s\", \"9\", txt, 2)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_RegEx_sub_()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx__sub_()_1.txt",
        "description": "python-prac.mini-scripts.Python_RegEx__sub_()_1.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \"9\", txt)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx__sub_()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_RegEx__sub_()_1.txt",
        "description": "python-prac.mini-scripts.Python_RegEx__sub_()_1.txt",
        "peekOfCode": "x = re.sub(\"\\s\", \"9\", txt)\nprint(x)\n# Author:  Bryan G",
        "detail": "python-prac.mini-scripts.Python_RegEx__sub_()_1.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Remove_Items.txt",
        "description": "python-prac.mini-scripts.python_Remove_Items.txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\")\ny = list(thistuple)\ny.remove(\"apple\")\nthistuple = tuple(y)\nprint(thistuple)",
        "detail": "python-prac.mini-scripts.python_Remove_Items.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Remove_Items.txt",
        "description": "python-prac.mini-scripts.python_Remove_Items.txt",
        "peekOfCode": "y = list(thistuple)\ny.remove(\"apple\")\nthistuple = tuple(y)\nprint(thistuple)",
        "detail": "python-prac.mini-scripts.python_Remove_Items.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Remove_Items.txt",
        "description": "python-prac.mini-scripts.python_Remove_Items.txt",
        "peekOfCode": "thistuple = tuple(y)\nprint(thistuple)",
        "detail": "python-prac.mini-scripts.python_Remove_Items.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Remove_Specified_Index_1.txt",
        "description": "python-prac.mini-scripts.python_Remove_Specified_Index_1.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.pop(1)\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Remove_Specified_Index_1.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Remove_Specified_Index_2.txt",
        "description": "python-prac.mini-scripts.python_Remove_Specified_Index_2.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.pop()\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Remove_Specified_Index_2.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Remove_Specified_Index_3.txt",
        "description": "python-prac.mini-scripts.python_Remove_Specified_Index_3.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\ndel thislist[0]\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Remove_Specified_Index_3.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Remove_Specified_Index_4.txt",
        "description": "python-prac.mini-scripts.python_Remove_Specified_Index_4.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\ndel thislist\nprint(\n    thislist\n)  # this will cause an error because you have succsesfully deleted \"thislist\".",
        "detail": "python-prac.mini-scripts.python_Remove_Specified_Index_4.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Remove_Specified_Item.txt",
        "description": "python-prac.mini-scripts.python_Remove_Specified_Item.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.remove(\"banana\")\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Remove_Specified_Item.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Remove_Whitespace.txt",
        "description": "python-prac.mini-scripts.python_Remove_Whitespace.txt",
        "peekOfCode": "a = \" Hello, World! \"\nprint(a.strip())",
        "detail": "python-prac.mini-scripts.python_Remove_Whitespace.txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Removing_Array_Elements.txt",
        "description": "python-prac.mini-scripts.python_Removing_Array_Elements.txt",
        "peekOfCode": "cars = [\"Ford\", \"Volvo\", \"BMW\"]\ncars.pop(1)\nprint(cars)",
        "detail": "python-prac.mini-scripts.python_Removing_Array_Elements.txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Removing_Array_Elements_2.txt",
        "description": "python-prac.mini-scripts.python_Removing_Array_Elements_2.txt",
        "peekOfCode": "cars = [\"Ford\", \"Volvo\", \"BMW\"]\ncars.remove(\"Volvo\")\nprint(cars)",
        "detail": "python-prac.mini-scripts.python_Removing_Array_Elements_2.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Replace_String.txt",
        "description": "python-prac.mini-scripts.python_Replace_String.txt",
        "peekOfCode": "a = \"Hello, World!\"\nprint(a.replace(\"H\", \"J\"))",
        "detail": "python-prac.mini-scripts.python_Replace_String.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Reshape_From_1-D_to_2-D.txt",
        "description": "python-prac.mini-scripts.python_Reshape_From_1-D_to_2-D.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nnewarr = arr.reshape(4, 3)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Reshape_From_1-D_to_2-D.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Reshape_From_1-D_to_2-D.txt",
        "description": "python-prac.mini-scripts.python_Reshape_From_1-D_to_2-D.txt",
        "peekOfCode": "newarr = arr.reshape(4, 3)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Reshape_From_1-D_to_2-D.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Reshape_From_1-D_to_3-D.txt",
        "description": "python-prac.mini-scripts.python_Reshape_From_1-D_to_3-D.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nnewarr = arr.reshape(2, 3, 2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Reshape_From_1-D_to_3-D.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Reshape_From_1-D_to_3-D.txt",
        "description": "python-prac.mini-scripts.python_Reshape_From_1-D_to_3-D.txt",
        "peekOfCode": "newarr = arr.reshape(2, 3, 2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Reshape_From_1-D_to_3-D.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Returns_Copy_or_View.txt",
        "description": "python-prac.mini-scripts.python_Returns_Copy_or_View.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint(arr.reshape(2, 4).base)",
        "detail": "python-prac.mini-scripts.python_Returns_Copy_or_View.txt",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.python_Return_Values.txt",
        "description": "python-prac.mini-scripts.python_Return_Values.txt",
        "peekOfCode": "def my_function(x):\n    return 5 * x\nprint(my_function(3))\nprint(my_function(5))\nprint(my_function(9))",
        "detail": "python-prac.mini-scripts.python_Return_Values.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Reverse_Order.txt",
        "description": "python-prac.mini-scripts.python_Reverse_Order.txt",
        "peekOfCode": "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.reverse()\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Reverse_Order.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Rounding_Decimals_rounding.txt",
        "description": "python-prac.mini-scripts.python_Rounding_Decimals_rounding.txt",
        "peekOfCode": "arr = np.around(3.1666, 2)\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Rounding_Decimals_rounding.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Rounding_Decimals_truncation_1.txt",
        "description": "python-prac.mini-scripts.python_Rounding_Decimals_truncation_1.txt",
        "peekOfCode": "arr = np.trunc([-3.1666, 3.6667])\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Rounding_Decimals_truncation_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Rounding_Decimals__ceil.txt",
        "description": "python-prac.mini-scripts.python_Rounding_Decimals__ceil.txt",
        "peekOfCode": "arr = np.ceil([-3.1666, 3.6667])\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Rounding_Decimals__ceil.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Rounding_Decimals__fix.txt",
        "description": "python-prac.mini-scripts.python_Rounding_Decimals__fix.txt",
        "peekOfCode": "arr = np.fix([-3.1666, 3.6667])\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Rounding_Decimals__fix.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Rounding_Decimals__floor.txt",
        "description": "python-prac.mini-scripts.python_Rounding_Decimals__floor.txt",
        "peekOfCode": "arr = np.floor([-3.1666, 3.6667])\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Rounding_Decimals__floor.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.Python_Scope_1.txt",
        "description": "python-prac.mini-scripts.Python_Scope_1.txt",
        "peekOfCode": "def myfunc():\n    x = 300\n    print(x)\nmyfunc()",
        "detail": "python-prac.mini-scripts.Python_Scope_1.txt",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "python-prac.mini-scripts.Python_Scope_2.txt",
        "description": "python-prac.mini-scripts.Python_Scope_2.txt",
        "peekOfCode": "def myfunc():\n    x = 300\n    def myinnerfunc():\n        print(x)\n    myinnerfunc()\nmyfunc()",
        "detail": "python-prac.mini-scripts.Python_Scope_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Searching_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Searching_Arrays_1.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 4, 4])\nx = np.where(arr == 4)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Searching_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Searching_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Searching_Arrays_1.txt",
        "peekOfCode": "x = np.where(arr == 4)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Searching_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Searching_Arrays_2.txt",
        "description": "python-prac.mini-scripts.python_Searching_Arrays_2.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nx = np.where(arr % 2 == 0)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Searching_Arrays_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Searching_Arrays_2.txt",
        "description": "python-prac.mini-scripts.python_Searching_Arrays_2.txt",
        "peekOfCode": "x = np.where(arr % 2 == 0)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Searching_Arrays_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Searching_Arrays_3.txt",
        "description": "python-prac.mini-scripts.python_Searching_Arrays_3.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nx = np.where(arr % 2 == 1)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Searching_Arrays_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Searching_Arrays_3.txt",
        "description": "python-prac.mini-scripts.python_Searching_Arrays_3.txt",
        "peekOfCode": "x = np.where(arr % 2 == 1)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Searching_Arrays_3.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Searching_Arrays_multple_values.txt",
        "description": "python-prac.mini-scripts.python_Searching_Arrays_multple_values.txt",
        "peekOfCode": "arr = np.array([1, 3, 5, 7])\nx = np.searchsorted(arr, [2, 4, 6])\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Searching_Arrays_multple_values.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Searching_Arrays_multple_values.txt",
        "description": "python-prac.mini-scripts.python_Searching_Arrays_multple_values.txt",
        "peekOfCode": "x = np.searchsorted(arr, [2, 4, 6])\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Searching_Arrays_multple_values.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Search_From_the_Right_Side.txt",
        "description": "python-prac.mini-scripts.python_Search_From_the_Right_Side.txt",
        "peekOfCode": "arr = np.array([6, 7, 8, 9])\nx = np.searchsorted(arr, 7, side=\"right\")\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Search_From_the_Right_Side.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Search_From_the_Right_Side.txt",
        "description": "python-prac.mini-scripts.python_Search_From_the_Right_Side.txt",
        "peekOfCode": "x = np.searchsorted(arr, 7, side=\"right\")\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Search_From_the_Right_Side.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Search_Sorted_array.txt",
        "description": "python-prac.mini-scripts.python_Search_Sorted_array.txt",
        "peekOfCode": "arr = np.array([6, 7, 8, 9])\nx = np.searchsorted(arr, 7)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Search_Sorted_array.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Search_Sorted_array.txt",
        "description": "python-prac.mini-scripts.python_Search_Sorted_array.txt",
        "peekOfCode": "x = np.searchsorted(arr, 7)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Search_Sorted_array.txt",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_self_Parameter.txt",
        "description": "python-prac.mini-scripts.python_self_Parameter.txt",
        "peekOfCode": "class Person:\n    def __init__(mysillyobject, name, age):\n        mysillyobject.name = name\n        mysillyobject.age = age\n    def myfunc(abc):\n        print(\"Hello my name is \" + abc.name)\np1 = Person(\"sanus\", 24)\np1.myfunc()",
        "detail": "python-prac.mini-scripts.python_self_Parameter.txt",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_self_Parameter.txt",
        "description": "python-prac.mini-scripts.python_self_Parameter.txt",
        "peekOfCode": "p1 = Person(\"sanus\", 24)\np1.myfunc()",
        "detail": "python-prac.mini-scripts.python_self_Parameter.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__bool.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__bool.txt",
        "peekOfCode": "x = bool(5)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__bool.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__bytearray.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__bytearray.txt",
        "peekOfCode": "x = bytearray(5)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__bytearray.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__bytes.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__bytes.txt",
        "peekOfCode": "x = bytes(5)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__bytes.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__complex.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__complex.txt",
        "peekOfCode": "x = complex(1j)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__complex.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__dict.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__dict.txt",
        "peekOfCode": "x = dict(name=\"John\", age=36)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__dict.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__float.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__float.txt",
        "peekOfCode": "x = float(20.5)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__float.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__frozenset.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__frozenset.txt",
        "peekOfCode": "x = frozenset((\"apple\", \"banana\", \"cherry\"))\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__frozenset.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__int.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__int.txt",
        "peekOfCode": "x = int(20)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__int.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__list.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__list.txt",
        "peekOfCode": "x = list((\"apple\", \"banana\", \"cherry\"))\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__list.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__memoryview.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__memoryview.txt",
        "peekOfCode": "x = memoryview(bytes(5))\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__memoryview.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__range.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__range.txt",
        "peekOfCode": "x = range(6)\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__range.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__set.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__set.txt",
        "peekOfCode": "x = set((\"apple\", \"banana\", \"cherry\"))\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__set.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__str.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__str.txt",
        "peekOfCode": "x = str(\"Hello World\")\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__str.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__tuple.txt",
        "description": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__tuple.txt",
        "peekOfCode": "x = tuple((\"apple\", \"banana\", \"cherry\"))\n# display x:\nprint(x)\n# display the data type of x:\nprint(type(x))",
        "detail": "python-prac.mini-scripts.python_Setting_the_Specific_Data_Type__tuple.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_set_Duplicates_Not_Allowed.txt",
        "description": "python-prac.mini-scripts.python_set_Duplicates_Not_Allowed.txt",
        "peekOfCode": "thisset = {\"apple\", \"banana\", \"cherry\", \"apple\"}\nprint(thisset)",
        "detail": "python-prac.mini-scripts.python_set_Duplicates_Not_Allowed.txt",
        "documentation": {}
    },
    {
        "label": "set1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_1.txt",
        "description": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_1.txt",
        "peekOfCode": "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {1, 5, 7, 9, 3}\nset3 = {True, False, False}\nprint(set1)\nprint(set2)\nprint(set3)",
        "detail": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_1.txt",
        "documentation": {}
    },
    {
        "label": "set2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_1.txt",
        "description": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_1.txt",
        "peekOfCode": "set2 = {1, 5, 7, 9, 3}\nset3 = {True, False, False}\nprint(set1)\nprint(set2)\nprint(set3)",
        "detail": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_1.txt",
        "documentation": {}
    },
    {
        "label": "set3",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_1.txt",
        "description": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_1.txt",
        "peekOfCode": "set3 = {True, False, False}\nprint(set1)\nprint(set2)\nprint(set3)",
        "detail": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_1.txt",
        "documentation": {}
    },
    {
        "label": "set1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_2.txt",
        "description": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_2.txt",
        "peekOfCode": "set1 = {\"abc\", 34, True, 40, \"male\"}\nprint(set1)",
        "detail": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_2.txt",
        "documentation": {}
    },
    {
        "label": "myset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_3.txt",
        "description": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_3.txt",
        "peekOfCode": "myset = {\"apple\", \"banana\", \"cherry\"}\nprint(type(myset))",
        "detail": "python-prac.mini-scripts.python_Set_Items_-_Data_Types_3.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Shape_of_an_Array_1.txt",
        "description": "python-prac.mini-scripts.python_Shape_of_an_Array_1.txt",
        "peekOfCode": "arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\nprint(arr.shape)",
        "detail": "python-prac.mini-scripts.python_Shape_of_an_Array_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Shape_of_an_Array_2.txt",
        "description": "python-prac.mini-scripts.python_Shape_of_an_Array_2.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4], ndmin=5)\nprint(arr)\nprint(\"shape of array :\", arr.shape)",
        "detail": "python-prac.mini-scripts.python_Shape_of_an_Array_2.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Short_Hand_If.txt",
        "description": "python-prac.mini-scripts.python_Short_Hand_If.txt",
        "peekOfCode": "a = 200\nb = 33\nif a > b:\n    print(\"a is greater than b\")",
        "detail": "python-prac.mini-scripts.python_Short_Hand_If.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Short_Hand_If.txt",
        "description": "python-prac.mini-scripts.python_Short_Hand_If.txt",
        "peekOfCode": "b = 33\nif a > b:\n    print(\"a is greater than b\")",
        "detail": "python-prac.mini-scripts.python_Short_Hand_If.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_1.txt",
        "description": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_1.txt",
        "peekOfCode": "a = 2\nb = 330\nprint(\"A\") if a > b else print(\"B\")",
        "detail": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_1.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_1.txt",
        "description": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_1.txt",
        "peekOfCode": "b = 330\nprint(\"A\") if a > b else print(\"B\")",
        "detail": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_1.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_2.txt",
        "description": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_2.txt",
        "peekOfCode": "a = 330\nb = 330\nprint(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")",
        "detail": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_2.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_2.txt",
        "description": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_2.txt",
        "peekOfCode": "b = 330\nprint(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")",
        "detail": "python-prac.mini-scripts.python_Short_Hand_If_..._Else_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_absolute_values.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_absolute_values.txt",
        "peekOfCode": "arr = np.array([-1, -2, 1, 2, 3, -4])\nnewarr = np.absolute(arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_absolute_values.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_absolute_values.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_absolute_values.txt",
        "peekOfCode": "newarr = np.absolute(arr)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_absolute_values.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_addition.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_addition.txt",
        "peekOfCode": "arr1 = np.array([10, 11, 12, 13, 14, 15])\narr2 = np.array([20, 21, 22, 23, 24, 25])\nnewarr = np.add(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_addition.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_addition.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_addition.txt",
        "peekOfCode": "arr2 = np.array([20, 21, 22, 23, 24, 25])\nnewarr = np.add(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_addition.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_addition.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_addition.txt",
        "peekOfCode": "newarr = np.add(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_addition.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_division.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_division.txt",
        "peekOfCode": "arr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([3, 5, 10, 8, 2, 33])\nnewarr = np.divide(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_division.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_division.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_division.txt",
        "peekOfCode": "arr2 = np.array([3, 5, 10, 8, 2, 33])\nnewarr = np.divide(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_division.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_division.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_division.txt",
        "peekOfCode": "newarr = np.divide(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_division.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_multiplication.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_multiplication.txt",
        "peekOfCode": "arr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([20, 21, 22, 23, 24, 25])\nnewarr = np.multiply(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_multiplication.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_multiplication.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_multiplication.txt",
        "peekOfCode": "arr2 = np.array([20, 21, 22, 23, 24, 25])\nnewarr = np.multiply(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_multiplication.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_multiplication.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_multiplication.txt",
        "peekOfCode": "newarr = np.multiply(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_multiplication.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_power.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_power.txt",
        "peekOfCode": "arr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([3, 5, 6, 8, 2, 33])\nnewarr = np.power(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_power.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_power.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_power.txt",
        "peekOfCode": "arr2 = np.array([3, 5, 6, 8, 2, 33])\nnewarr = np.power(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_power.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_power.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_power.txt",
        "peekOfCode": "newarr = np.power(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_power.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_quotient_and_mod.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_quotient_and_mod.txt",
        "peekOfCode": "arr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.divmod(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_quotient_and_mod.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_quotient_and_mod.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_quotient_and_mod.txt",
        "peekOfCode": "arr2 = np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.divmod(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_quotient_and_mod.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_quotient_and_mod.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_quotient_and_mod.txt",
        "peekOfCode": "newarr = np.divmod(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_quotient_and_mod.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_remander.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_remander.txt",
        "peekOfCode": "arr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.mod(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_remander.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_remander.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_remander.txt",
        "peekOfCode": "arr2 = np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.mod(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_remander.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_remander.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_remander.txt",
        "peekOfCode": "newarr = np.mod(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_remander.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_remander_2.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_remander_2.txt",
        "peekOfCode": "arr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.remainder(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_remander_2.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_remander_2.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_remander_2.txt",
        "peekOfCode": "arr2 = np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.remainder(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_remander_2.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_remander_2.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_remander_2.txt",
        "peekOfCode": "newarr = np.remainder(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_remander_2.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_subtraction.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_subtraction.txt",
        "peekOfCode": "arr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([20, 21, 22, 23, 24, 25])\nnewarr = np.subtract(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_subtraction.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_subtraction.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_subtraction.txt",
        "peekOfCode": "arr2 = np.array([20, 21, 22, 23, 24, 25])\nnewarr = np.subtract(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_subtraction.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Simple_Arithmetic_subtraction.txt",
        "description": "python-prac.mini-scripts.python_Simple_Arithmetic_subtraction.txt",
        "peekOfCode": "newarr = np.subtract(arr1, arr2)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Simple_Arithmetic_subtraction.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Slice_From_the_Start.txt",
        "description": "python-prac.mini-scripts.python_Slice_From_the_Start.txt",
        "peekOfCode": "b = \"Hello, World!\"\nprint(b[:5])",
        "detail": "python-prac.mini-scripts.python_Slice_From_the_Start.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Slice_To_the_End.txt",
        "description": "python-prac.mini-scripts.python_Slice_To_the_End.txt",
        "peekOfCode": "b = \"Hello, World!\"\nprint(b[2:])",
        "detail": "python-prac.mini-scripts.python_Slice_To_the_End.txt",
        "documentation": {}
    },
    {
        "label": "myclass",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Some_Values_are_False_2.txt",
        "description": "python-prac.mini-scripts.python_Some_Values_are_False_2.txt",
        "peekOfCode": "class myclass:\n    def __len__(self):\n        return 0\nmyobj = myclass()\nprint(bool(myobj))",
        "detail": "python-prac.mini-scripts.python_Some_Values_are_False_2.txt",
        "documentation": {}
    },
    {
        "label": "myobj",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Some_Values_are_False_2.txt",
        "description": "python-prac.mini-scripts.python_Some_Values_are_False_2.txt",
        "peekOfCode": "myobj = myclass()\nprint(bool(myobj))",
        "detail": "python-prac.mini-scripts.python_Some_Values_are_False_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Sorting_a_2-D_Array.txt",
        "description": "python-prac.mini-scripts.python_Sorting_a_2-D_Array.txt",
        "peekOfCode": "arr = np.array([[3, 2, 4], [5, 0, 1]])\nprint(np.sort(arr))",
        "detail": "python-prac.mini-scripts.python_Sorting_a_2-D_Array.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Sort_Descending_1.txt",
        "description": "python-prac.mini-scripts.python_Sort_Descending_1.txt",
        "peekOfCode": "thislist = [\"orange\", \"mango\", \"kiwi\", \"pineapple\", \"banana\"]\nthislist.sort(reverse=True)\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Sort_Descending_1.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Sort_Descending_2.txt",
        "description": "python-prac.mini-scripts.python_Sort_Descending_2.txt",
        "peekOfCode": "thislist = [100, 50, 65, 82, 23]\nthislist.sort(reverse=True)\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Sort_Descending_2.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Sort_List_Alphanumerically_1.txt",
        "description": "python-prac.mini-scripts.python_Sort_List_Alphanumerically_1.txt",
        "peekOfCode": "thislist = [\"orange\", \"mango\", \"kiwi\", \"pineapple\", \"banana\"]\nthislist.sort()\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Sort_List_Alphanumerically_1.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Sort_List_Alphanumerically_2.txt",
        "description": "python-prac.mini-scripts.python_Sort_List_Alphanumerically_2.txt",
        "peekOfCode": "thislist = [100, 50, 65, 82, 23]\nthislist.sort()\nprint(thislist)",
        "detail": "python-prac.mini-scripts.python_Sort_List_Alphanumerically_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_1.txt",
        "peekOfCode": "arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\nnewarr = np.array_split(arr, 3)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_1.txt",
        "peekOfCode": "newarr = np.array_split(arr, 3)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_2.txt",
        "description": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_2.txt",
        "peekOfCode": "arr = np.array(\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\n)\nnewarr = np.array_split(arr, 3)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_2.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_2.txt",
        "description": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_2.txt",
        "peekOfCode": "newarr = np.array_split(arr, 3)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_3.txt",
        "description": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_3.txt",
        "peekOfCode": "arr = np.array(\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\n)\nnewarr = np.array_split(arr, 3, axis=1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_3.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_3.txt",
        "description": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_3.txt",
        "peekOfCode": "newarr = np.array_split(arr, 3, axis=1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_3.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_4.txt",
        "description": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_4.txt",
        "peekOfCode": "arr = np.array(\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\n)\nnewarr = np.hsplit(arr, 3)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_4.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_4.txt",
        "description": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_4.txt",
        "peekOfCode": "newarr = np.hsplit(arr, 3)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_2-D_Arrays_4.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_1.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6])\nnewarr = np.array_split(arr, 3)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_1.txt",
        "description": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_1.txt",
        "peekOfCode": "newarr = np.array_split(arr, 3)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_2.txt",
        "description": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_2.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6])\nnewarr = np.array_split(arr, 4)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_2.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_2.txt",
        "description": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_2.txt",
        "peekOfCode": "newarr = np.array_split(arr, 4)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Splitting_NumPy_Arrays_2.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Split_Into_Arrays.txt",
        "description": "python-prac.mini-scripts.python_Split_Into_Arrays.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6])\nnewarr = np.array_split(arr, 3)\nprint(newarr[0])\nprint(newarr[1])\nprint(newarr[2])",
        "detail": "python-prac.mini-scripts.python_Split_Into_Arrays.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Split_Into_Arrays.txt",
        "description": "python-prac.mini-scripts.python_Split_Into_Arrays.txt",
        "peekOfCode": "newarr = np.array_split(arr, 3)\nprint(newarr[0])\nprint(newarr[1])\nprint(newarr[2])",
        "detail": "python-prac.mini-scripts.python_Split_Into_Arrays.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Split_String.txt",
        "description": "python-prac.mini-scripts.python_Split_String.txt",
        "peekOfCode": "a = \"Hello, World!\"\nb = a.split(\",\")\nprint(b)",
        "detail": "python-prac.mini-scripts.python_Split_String.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Split_String.txt",
        "description": "python-prac.mini-scripts.python_Split_String.txt",
        "peekOfCode": "b = a.split(\",\")\nprint(b)",
        "detail": "python-prac.mini-scripts.python_Split_String.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Stacking_Along_Columns.txt",
        "description": "python-prac.mini-scripts.python_Stacking_Along_Columns.txt",
        "peekOfCode": "arr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.vstack((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Stacking_Along_Columns.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Stacking_Along_Columns.txt",
        "description": "python-prac.mini-scripts.python_Stacking_Along_Columns.txt",
        "peekOfCode": "arr2 = np.array([4, 5, 6])\narr = np.vstack((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Stacking_Along_Columns.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Stacking_Along_Columns.txt",
        "description": "python-prac.mini-scripts.python_Stacking_Along_Columns.txt",
        "peekOfCode": "arr = np.vstack((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Stacking_Along_Columns.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Stacking_Along_Height_(depth).txt",
        "description": "python-prac.mini-scripts.python_Stacking_Along_Height_(depth).txt",
        "peekOfCode": "arr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.dstack((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Stacking_Along_Height_(depth).txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Stacking_Along_Height_(depth).txt",
        "description": "python-prac.mini-scripts.python_Stacking_Along_Height_(depth).txt",
        "peekOfCode": "arr2 = np.array([4, 5, 6])\narr = np.dstack((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Stacking_Along_Height_(depth).txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Stacking_Along_Height_(depth).txt",
        "description": "python-prac.mini-scripts.python_Stacking_Along_Height_(depth).txt",
        "peekOfCode": "arr = np.dstack((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Stacking_Along_Height_(depth).txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Stacking_Along_Rows.txt",
        "description": "python-prac.mini-scripts.python_Stacking_Along_Rows.txt",
        "peekOfCode": "arr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.hstack((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Stacking_Along_Rows.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Stacking_Along_Rows.txt",
        "description": "python-prac.mini-scripts.python_Stacking_Along_Rows.txt",
        "peekOfCode": "arr2 = np.array([4, 5, 6])\narr = np.hstack((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Stacking_Along_Rows.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Stacking_Along_Rows.txt",
        "description": "python-prac.mini-scripts.python_Stacking_Along_Rows.txt",
        "peekOfCode": "arr = np.hstack((arr1, arr2))\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_Stacking_Along_Rows.txt",
        "documentation": {}
    },
    {
        "label": "MyNumbers",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_StopIteration.txt",
        "description": "python-prac.mini-scripts.python_StopIteration.txt",
        "peekOfCode": "class MyNumbers:\n    def __iter__(self):\n        self.a = 1\n        return self\n    def __next__(self):\n        if self.a <= 20:\n            x = self.a\n            self.a += 1\n            return x\n        else:",
        "detail": "python-prac.mini-scripts.python_StopIteration.txt",
        "documentation": {}
    },
    {
        "label": "myclass",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_StopIteration.txt",
        "description": "python-prac.mini-scripts.python_StopIteration.txt",
        "peekOfCode": "myclass = MyNumbers()\nmyiter = iter(myclass)\nfor x in myiter:\n    print(x)",
        "detail": "python-prac.mini-scripts.python_StopIteration.txt",
        "documentation": {}
    },
    {
        "label": "myiter",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_StopIteration.txt",
        "description": "python-prac.mini-scripts.python_StopIteration.txt",
        "peekOfCode": "myiter = iter(myclass)\nfor x in myiter:\n    print(x)",
        "detail": "python-prac.mini-scripts.python_StopIteration.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Strings_are_Arrays.txt",
        "description": "python-prac.mini-scripts.python_Strings_are_Arrays.txt",
        "peekOfCode": "a = \"Hello, World!\"\nprint(a[1])",
        "detail": "python-prac.mini-scripts.python_Strings_are_Arrays.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_expandtabs()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_expandtabs()_2.txt",
        "peekOfCode": "txt = \"H\\te\\tl\\tl\\to\"\nprint(txt)\nprint(txt.expandtabs())\nprint(txt.expandtabs(2))\nprint(txt.expandtabs(4))\nprint(txt.expandtabs(10))",
        "detail": "python-prac.mini-scripts.Python_String_expandtabs()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_1.txt",
        "peekOfCode": "txt1 = \"My name is {fname}, I'm {age}\".format(fname=\"sanu\", age=24)\n# numbered indexes:\ntxt2 = \"My name is {0}, I'm {1}\".format(\"sannu\", 24)\n# empty placeholders:\ntxt3 = \"My name is {}, I'm {}\".format(\"sanu\", 24)\nprint(txt1)\nprint(txt2)\nprint(txt3)",
        "detail": "python-prac.mini-scripts.Python_String_format()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_1.txt",
        "peekOfCode": "txt2 = \"My name is {0}, I'm {1}\".format(\"sannu\", 24)\n# empty placeholders:\ntxt3 = \"My name is {}, I'm {}\".format(\"sanu\", 24)\nprint(txt1)\nprint(txt2)\nprint(txt3)",
        "detail": "python-prac.mini-scripts.Python_String_format()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt3",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_1.txt",
        "peekOfCode": "txt3 = \"My name is {}, I'm {}\".format(\"sanu\", 24)\nprint(txt1)\nprint(txt2)\nprint(txt3)",
        "detail": "python-prac.mini-scripts.Python_String_format()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_binary_format.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_binary_format.txt",
        "peekOfCode": "txt = \"The binary version of {0} is {0:b}\"\nprint(txt.format(5))",
        "detail": "python-prac.mini-scripts.Python_String_format()_binary_format.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_center_aligns.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_center_aligns.txt",
        "peekOfCode": "txt = \"We have {:^8} chickens.\"\nprint(txt.format(49))",
        "detail": "python-prac.mini-scripts.Python_String_format()_center_aligns.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_decimal_format.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_decimal_format.txt",
        "peekOfCode": "txt = \"We have {:d} chickens.\"\nprint(txt.format(0b101))",
        "detail": "python-prac.mini-scripts.Python_String_format()_decimal_format.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_fixt_poit_number_format_upper_case.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_fixt_poit_number_format_upper_case.txt",
        "peekOfCode": "x = float(\"inf\")\ntxt = \"The price is {:F} dollars.\"\nprint(txt.format(x))\n# same example, but with a lower case f:\ntxt = \"The price is {:f} dollars.\"\nprint(txt.format(x))",
        "detail": "python-prac.mini-scripts.Python_String_format()_fixt_poit_number_format_upper_case.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_fixt_poit_number_format_upper_case.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_fixt_poit_number_format_upper_case.txt",
        "peekOfCode": "txt = \"The price is {:F} dollars.\"\nprint(txt.format(x))\n# same example, but with a lower case f:\ntxt = \"The price is {:f} dollars.\"\nprint(txt.format(x))",
        "detail": "python-prac.mini-scripts.Python_String_format()_fixt_poit_number_format_upper_case.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_fixt_poit_number_format_upper_case.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_fixt_poit_number_format_upper_case.txt",
        "peekOfCode": "txt = \"The price is {:f} dollars.\"\nprint(txt.format(x))",
        "detail": "python-prac.mini-scripts.Python_String_format()_fixt_poit_number_format_upper_case.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_fix_point_number_format.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_fix_point_number_format.txt",
        "peekOfCode": "txt = \"The price is {:.2f} dollars.\"\nprint(txt.format(45))\n# without the \".2\" inside the placeholder, this number will be displayed like this:\ntxt = \"The price is {:f} dollars.\"\nprint(txt.format(45))",
        "detail": "python-prac.mini-scripts.Python_String_format()_fix_point_number_format.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_fix_point_number_format.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_fix_point_number_format.txt",
        "peekOfCode": "txt = \"The price is {:f} dollars.\"\nprint(txt.format(45))",
        "detail": "python-prac.mini-scripts.Python_String_format()_fix_point_number_format.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_hex_format_lower_case.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_hex_format_lower_case.txt",
        "peekOfCode": "txt = \"The Hexadecimal version of {0} is {0:x}\"\nprint(txt.format(255))",
        "detail": "python-prac.mini-scripts.Python_String_format()_hex_format_lower_case.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_hex_format_upper_case.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_hex_format_upper_case.txt",
        "peekOfCode": "txt = \"The Hexadecimal version of {0} is {0:X}\"\nprint(txt.format(255))",
        "detail": "python-prac.mini-scripts.Python_String_format()_hex_format_upper_case.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_left_aligns.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_left_aligns.txt",
        "peekOfCode": "txt = \"We have {:<8} chickens.\"\nprint(txt.format(49))",
        "detail": "python-prac.mini-scripts.Python_String_format()_left_aligns.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_octal_format.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_octal_format.txt",
        "peekOfCode": "txt = \"The octal version of {0} is {0:o}\"\nprint(txt.format(10))",
        "detail": "python-prac.mini-scripts.Python_String_format()_octal_format.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_percentage_format.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_percentage_format.txt",
        "peekOfCode": "txt = \"You scored {:%}\"\nprint(txt.format(0.25))\n# Or, without any decimals:\ntxt = \"You scored {:.0%}\"\nprint(txt.format(0.25))",
        "detail": "python-prac.mini-scripts.Python_String_format()_percentage_format.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_percentage_format.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_percentage_format.txt",
        "peekOfCode": "txt = \"You scored {:.0%}\"\nprint(txt.format(0.25))",
        "detail": "python-prac.mini-scripts.Python_String_format()_percentage_format.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_places_the_sign_to_the_left_most_position.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_places_the_sign_to_the_left_most_position.txt",
        "peekOfCode": "txt = \"The temperature is {:=8} degrees celsius.\"\nprint(txt.format(-5))",
        "detail": "python-prac.mini-scripts.Python_String_format()_places_the_sign_to_the_left_most_position.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_right_aligns.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_right_aligns.txt",
        "peekOfCode": "txt = \"We have {:>8} chickens.\"\nprint(txt.format(49))",
        "detail": "python-prac.mini-scripts.Python_String_format()_right_aligns.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_scientific_format.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_scientific_format.txt",
        "peekOfCode": "txt = \"We have {:e} chickens.\"\nprint(txt.format(5))",
        "detail": "python-prac.mini-scripts.Python_String_format()_scientific_format.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_scientific_format_E.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_scientific_format_E.txt",
        "peekOfCode": "txt = \"We have {:E} chickens.\"\nprint(txt.format(5))",
        "detail": "python-prac.mini-scripts.Python_String_format()_scientific_format_E.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_scientific_format_F.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_scientific_format_F.txt",
        "peekOfCode": "txt = \"We have {:E} chickens.\"\nprint(txt.format(5))",
        "detail": "python-prac.mini-scripts.Python_String_format()_scientific_format_F.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_use_aspece.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_use_aspece.txt",
        "peekOfCode": "txt = \"The temperature is between {: } and {: } degrees celsius.\"\nprint(txt.format(-3, 7))",
        "detail": "python-prac.mini-scripts.Python_String_format()_use_aspece.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_use_a_comma.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_use_a_comma.txt",
        "peekOfCode": "txt = \"The universe is {:,} years old.\"\nprint(txt.format(13800000000))",
        "detail": "python-prac.mini-scripts.Python_String_format()_use_a_comma.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_use_a_minus.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_use_a_minus.txt",
        "peekOfCode": "txt = \"The temperature is between {:-} and {:-} degrees celsius.\"\nprint(txt.format(-3, 7))",
        "detail": "python-prac.mini-scripts.Python_String_format()_use_a_minus.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_use_a_plus.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_use_a_plus.txt",
        "peekOfCode": "txt = \"The temperature is between {:+} and {:+} degrees celsius.\"\nprint(txt.format(-3, 7))",
        "detail": "python-prac.mini-scripts.Python_String_format()_use_a_plus.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()_use_a_undercore.txt",
        "description": "python-prac.mini-scripts.Python_String_format()_use_a_undercore.txt",
        "peekOfCode": "txt = \"The universe is {:_} years old.\"\nprint(txt.format(13800000000))",
        "detail": "python-prac.mini-scripts.Python_String_format()_use_a_undercore.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()__2.txt",
        "description": "python-prac.mini-scripts.Python_String_format()__2.txt",
        "peekOfCode": "txt = \"For only {price:.2f} dollars!\"\nprint(txt.format(price=49))",
        "detail": "python-prac.mini-scripts.Python_String_format()__2.txt",
        "documentation": {}
    },
    {
        "label": "txt1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "description": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "peekOfCode": "txt1 = \"My name is {fname}, I'm {age}\".format(fname=\"sanu\", age=24)\n# numbered indexes:\ntxt2 = \"My name is {0}, I'm {1}\".format(\"sannu\", 24)\n# empty placeholders:\ntxt3 = \"My name is {}, I'm {}\".format(\"sanu\", 24)\n# empty placeholders:\ntxt4 = \"My name is {}, I'm {}\".format(\"sanu\", 24)\nprint(txt1)\nprint(txt2)\nprint(txt3)",
        "detail": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "documentation": {}
    },
    {
        "label": "txt2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "description": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "peekOfCode": "txt2 = \"My name is {0}, I'm {1}\".format(\"sannu\", 24)\n# empty placeholders:\ntxt3 = \"My name is {}, I'm {}\".format(\"sanu\", 24)\n# empty placeholders:\ntxt4 = \"My name is {}, I'm {}\".format(\"sanu\", 24)\nprint(txt1)\nprint(txt2)\nprint(txt3)\nprint(txt4)",
        "detail": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "documentation": {}
    },
    {
        "label": "txt3",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "description": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "peekOfCode": "txt3 = \"My name is {}, I'm {}\".format(\"sanu\", 24)\n# empty placeholders:\ntxt4 = \"My name is {}, I'm {}\".format(\"sanu\", 24)\nprint(txt1)\nprint(txt2)\nprint(txt3)\nprint(txt4)",
        "detail": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "documentation": {}
    },
    {
        "label": "txt4",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "description": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "peekOfCode": "txt4 = \"My name is {}, I'm {}\".format(\"sanu\", 24)\nprint(txt1)\nprint(txt2)\nprint(txt3)\nprint(txt4)",
        "detail": "python-prac.mini-scripts.Python_String_format()__3.txt",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_1.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_1.txt",
        "peekOfCode": "price = 49\ntxt = \"The price is {} dollars\"\nprint(txt.format(price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_1.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_1.txt",
        "peekOfCode": "txt = \"The price is {} dollars\"\nprint(txt.format(price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_1.txt",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_2.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_2.txt",
        "peekOfCode": "price = 49\ntxt = \"The price is {:.2f} dollars\"\nprint(txt.format(price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_2.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_2.txt",
        "peekOfCode": "txt = \"The price is {:.2f} dollars\"\nprint(txt.format(price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_2.txt",
        "documentation": {}
    },
    {
        "label": "quantity",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "peekOfCode": "quantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {0} pieces of item number {1} for {2:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "documentation": {}
    },
    {
        "label": "itemno",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "peekOfCode": "itemno = 567\nprice = 49\nmyorder = \"I want {0} pieces of item number {1} for {2:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "peekOfCode": "price = 49\nmyorder = \"I want {0} pieces of item number {1} for {2:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "documentation": {}
    },
    {
        "label": "myorder",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "peekOfCode": "myorder = \"I want {0} pieces of item number {1} for {2:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_index_number_1.txt",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_index_number_2.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_index_number_2.txt",
        "peekOfCode": "age = 36\nname = \"sanu\"\ntxt = \"His name is {1}. {1} is {0} years old.\"\nprint(txt.format(age, name))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_index_number_2.txt",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_index_number_2.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_index_number_2.txt",
        "peekOfCode": "name = \"sanu\"\ntxt = \"His name is {1}. {1} is {0} years old.\"\nprint(txt.format(age, name))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_index_number_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_index_number_2.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_index_number_2.txt",
        "peekOfCode": "txt = \"His name is {1}. {1} is {0} years old.\"\nprint(txt.format(age, name))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_index_number_2.txt",
        "documentation": {}
    },
    {
        "label": "quantity",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "peekOfCode": "quantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {} pieces of item number {} for {:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "documentation": {}
    },
    {
        "label": "itemno",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "peekOfCode": "itemno = 567\nprice = 49\nmyorder = \"I want {} pieces of item number {} for {:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "peekOfCode": "price = 49\nmyorder = \"I want {} pieces of item number {} for {:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "documentation": {}
    },
    {
        "label": "myorder",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "peekOfCode": "myorder = \"I want {} pieces of item number {} for {:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_multiple_value.txt",
        "documentation": {}
    },
    {
        "label": "myorder",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_Formatting_named_indexes.txt",
        "description": "python-prac.mini-scripts.Python_String_Formatting_named_indexes.txt",
        "peekOfCode": "myorder = \"I have a {carname}, it is a {model}.\"\nprint(myorder.format(carname=\"Ford\", model=\"Mustang\"))",
        "detail": "python-prac.mini-scripts.Python_String_Formatting_named_indexes.txt",
        "documentation": {}
    },
    {
        "label": "myTuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_join()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_join()_1.txt",
        "peekOfCode": "myTuple = (\"John\", \"Peter\", \"Vicky\")\nx = \"#\".join(myTuple)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_join()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_join()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_join()_1.txt",
        "peekOfCode": "x = \"#\".join(myTuple)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_join()_1.txt",
        "documentation": {}
    },
    {
        "label": "myDict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_join()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_join()_2.txt",
        "peekOfCode": "myDict = {\"name\": \"John\", \"country\": \"Norway\"}\nmySeparator = \"TEST\"\nx = mySeparator.join(myDict)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_join()_2.txt",
        "documentation": {}
    },
    {
        "label": "mySeparator",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_join()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_join()_2.txt",
        "peekOfCode": "mySeparator = \"TEST\"\nx = mySeparator.join(myDict)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_join()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_join()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_join()_2.txt",
        "peekOfCode": "x = mySeparator.join(myDict)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_join()_2.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_String_Length.txt",
        "description": "python-prac.mini-scripts.python_String_Length.txt",
        "peekOfCode": "a = \"Hello, World!\"\nprint(len(a))",
        "detail": "python-prac.mini-scripts.python_String_Length.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_ljust()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_ljust()_1.txt",
        "peekOfCode": "txt = \"banana\"\nx = txt.ljust(20)\nprint(x, \"is my favorite fruit.\")",
        "detail": "python-prac.mini-scripts.Python_String_ljust()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_ljust()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_ljust()_1.txt",
        "peekOfCode": "x = txt.ljust(20)\nprint(x, \"is my favorite fruit.\")",
        "detail": "python-prac.mini-scripts.Python_String_ljust()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_ljust()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_ljust()_2.txt",
        "peekOfCode": "txt = \"banana\"\nx = txt.ljust(20, \"O\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_ljust()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_ljust()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_ljust()_2.txt",
        "peekOfCode": "x = txt.ljust(20, \"O\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_ljust()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_lower()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_lower()_1.txt",
        "peekOfCode": "txt = \"Hello my FRIENDS\"\nx = txt.lower()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_lower()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_lower()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_lower()_1.txt",
        "peekOfCode": "x = txt.lower()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_lower()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_lstrip().txt",
        "description": "python-prac.mini-scripts.Python_String_lstrip().txt",
        "peekOfCode": "txt = \"     banana     \"\nx = txt.lstrip()\nprint(\"of all fruits\", x, \"is my favorite\")",
        "detail": "python-prac.mini-scripts.Python_String_lstrip().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_lstrip().txt",
        "description": "python-prac.mini-scripts.Python_String_lstrip().txt",
        "peekOfCode": "x = txt.lstrip()\nprint(\"of all fruits\", x, \"is my favorite\")",
        "detail": "python-prac.mini-scripts.Python_String_lstrip().txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_lstrip()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_lstrip()_1.txt",
        "peekOfCode": "txt = \"     banana     \"\nx = txt.lstrip()\nprint(\"of all fruits\", x, \"is my favorite\")",
        "detail": "python-prac.mini-scripts.Python_String_lstrip()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_lstrip()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_lstrip()_1.txt",
        "peekOfCode": "x = txt.lstrip()\nprint(\"of all fruits\", x, \"is my favorite\")",
        "detail": "python-prac.mini-scripts.Python_String_lstrip()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_lstrip()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_lstrip()_2.txt",
        "peekOfCode": "txt = \",,,,,ssaaww.....banana\"\nx = txt.lstrip(\",.asw\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_lstrip()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_lstrip()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_lstrip()_2.txt",
        "peekOfCode": "x = txt.lstrip(\",.asw\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_lstrip()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_1.txt",
        "peekOfCode": "txt = \"Hello Sam!\"\nmytable = txt.maketrans(\"S\", \"P\")\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_1.txt",
        "documentation": {}
    },
    {
        "label": "mytable",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_1.txt",
        "peekOfCode": "mytable = txt.maketrans(\"S\", \"P\")\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "peekOfCode": "txt = \"Hi Sam!\"\nx = \"mSa\"\ny = \"eJo\"\nmytable = txt.maketrans(x, y)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "peekOfCode": "x = \"mSa\"\ny = \"eJo\"\nmytable = txt.maketrans(x, y)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "peekOfCode": "y = \"eJo\"\nmytable = txt.maketrans(x, y)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "documentation": {}
    },
    {
        "label": "mytable",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "peekOfCode": "mytable = txt.maketrans(x, y)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "peekOfCode": "txt = \"Good night Sam!\"\nx = \"mSa\"\ny = \"eJo\"\nz = \"odnght\"\nmytable = txt.maketrans(x, y, z)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "peekOfCode": "x = \"mSa\"\ny = \"eJo\"\nz = \"odnght\"\nmytable = txt.maketrans(x, y, z)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "peekOfCode": "y = \"eJo\"\nz = \"odnght\"\nmytable = txt.maketrans(x, y, z)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "peekOfCode": "z = \"odnght\"\nmytable = txt.maketrans(x, y, z)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "documentation": {}
    },
    {
        "label": "mytable",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "peekOfCode": "mytable = txt.maketrans(x, y, z)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_3.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "peekOfCode": "txt = \"Good night Sam!\"\nx = \"mSa\"\ny = \"eJo\"\nz = \"odnght\"\nprint(txt.maketrans(x, y, z))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "peekOfCode": "x = \"mSa\"\ny = \"eJo\"\nz = \"odnght\"\nprint(txt.maketrans(x, y, z))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "peekOfCode": "y = \"eJo\"\nz = \"odnght\"\nprint(txt.maketrans(x, y, z))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "description": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "peekOfCode": "z = \"odnght\"\nprint(txt.maketrans(x, y, z))",
        "detail": "python-prac.mini-scripts.Python_String_maketrans()_4.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_partition()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_partition()_1.txt",
        "peekOfCode": "txt = \"I could eat bananas all day\"\nx = txt.partition(\"bananas\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_partition()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_partition()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_partition()_1.txt",
        "peekOfCode": "x = txt.partition(\"bananas\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_partition()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_partition()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_partition()_2.txt",
        "peekOfCode": "txt = \"I could eat bananas all day\"\nx = txt.partition(\"apples\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_partition()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_partition()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_partition()_2.txt",
        "peekOfCode": "x = txt.partition(\"apples\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_partition()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_replace()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_replace()_1.txt",
        "peekOfCode": "txt = \"I like bananas\"\nx = txt.replace(\"bananas\", \"apples\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_replace()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_replace()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_replace()_1.txt",
        "peekOfCode": "x = txt.replace(\"bananas\", \"apples\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_replace()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_replace()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_replace()_2.txt",
        "peekOfCode": "txt = \"one one was a race horse, two two was one too.\"\nx = txt.replace(\"one\", \"three\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_replace()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_replace()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_replace()_2.txt",
        "peekOfCode": "x = txt.replace(\"one\", \"three\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_replace()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_replace()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_replace()_3.txt",
        "peekOfCode": "txt = \"one one was a race horse, two two was one too.\"\nx = txt.replace(\"one\", \"three\", 2)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_replace()_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_replace()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_replace()_3.txt",
        "peekOfCode": "x = txt.replace(\"one\", \"three\", 2)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_replace()_3.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rfind()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rfind()_1.txt",
        "peekOfCode": "txt = \"Mi casa, su casa.\"\nx = txt.rfind(\"casa\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rfind()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rfind()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rfind()_1.txt",
        "peekOfCode": "x = txt.rfind(\"casa\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rfind()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rfind()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rfind()_2.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.rfind(\"e\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rfind()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rfind()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rfind()_2.txt",
        "peekOfCode": "x = txt.rfind(\"e\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rfind()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rfind()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_rfind()_3.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.rfind(\"e\", 5, 10)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rfind()_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rfind()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_rfind()_3.txt",
        "peekOfCode": "x = txt.rfind(\"e\", 5, 10)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rfind()_3.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rfind()_4.txt",
        "description": "python-prac.mini-scripts.Python_String_rfind()_4.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nprint(txt.rfind(\"q\"))\nprint(txt.rindex(\"q\"))",
        "detail": "python-prac.mini-scripts.Python_String_rfind()_4.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rindex()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rindex()_1.txt",
        "peekOfCode": "txt = \"Mi casa, su casa.\"\nx = txt.rindex(\"casa\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rindex()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rindex()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rindex()_1.txt",
        "peekOfCode": "x = txt.rindex(\"casa\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rindex()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rindex()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rindex()_2.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.rindex(\"e\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rindex()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rindex()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rindex()_2.txt",
        "peekOfCode": "x = txt.rindex(\"e\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rindex()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rindex()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_rindex()_3.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.rindex(\"e\", 5, 10)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rindex()_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rindex()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_rindex()_3.txt",
        "peekOfCode": "x = txt.rindex(\"e\", 5, 10)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rindex()_3.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rindex()_4.txt",
        "description": "python-prac.mini-scripts.Python_String_rindex()_4.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nprint(txt.rfind(\"q\"))\nprint(txt.rindex(\"q\"))",
        "detail": "python-prac.mini-scripts.Python_String_rindex()_4.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rjust()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rjust()_1.txt",
        "peekOfCode": "txt = \"banana\"\nx = txt.rjust(20)\nprint(x, \"is my favorite fruit.\")",
        "detail": "python-prac.mini-scripts.Python_String_rjust()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rjust()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rjust()_1.txt",
        "peekOfCode": "x = txt.rjust(20)\nprint(x, \"is my favorite fruit.\")",
        "detail": "python-prac.mini-scripts.Python_String_rjust()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rjust()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rjust()_2.txt",
        "peekOfCode": "txt = \"banana\"\nx = txt.rjust(20, \"O\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rjust()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rjust()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rjust()_2.txt",
        "peekOfCode": "x = txt.rjust(20, \"O\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rjust()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rpartition()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rpartition()_1.txt",
        "peekOfCode": "txt = \"I could eat bananas all day, bananas are my favorite fruit\"\nx = txt.rpartition(\"bananas\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rpartition()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rpartition()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rpartition()_1.txt",
        "peekOfCode": "x = txt.rpartition(\"bananas\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rpartition()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rpartition()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rpartition()_2.txt",
        "peekOfCode": "txt = \"I could eat bananas all day, bananas are my favorite fruit\"\nx = txt.rpartition(\"apples\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rpartition()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rpartition()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rpartition()_2.txt",
        "peekOfCode": "x = txt.rpartition(\"apples\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rpartition()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rsplit()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rsplit()_1.txt",
        "peekOfCode": "txt = \"apple, banana, cherry\"\nx = txt.rsplit(\", \")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rsplit()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rsplit()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rsplit()_1.txt",
        "peekOfCode": "x = txt.rsplit(\", \")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rsplit()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rsplit()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rsplit()_2.txt",
        "peekOfCode": "txt = \"apple, banana, cherry\"\n# setting the maxsplit parameter to 1, will return a list with 2 elements!\nx = txt.rsplit(\", \", 1)\nprint(x)\n# note that the result has only 2 elements \"apple, banana\" is the first element, and \"cherry\" is the last.",
        "detail": "python-prac.mini-scripts.Python_String_rsplit()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rsplit()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rsplit()_2.txt",
        "peekOfCode": "x = txt.rsplit(\", \", 1)\nprint(x)\n# note that the result has only 2 elements \"apple, banana\" is the first element, and \"cherry\" is the last.",
        "detail": "python-prac.mini-scripts.Python_String_rsplit()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rstrip()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rstrip()_1.txt",
        "peekOfCode": "txt = \"     banana     \"\nx = txt.rstrip()\nprint(\"of all fruits\", x, \"is my favorite\")",
        "detail": "python-prac.mini-scripts.Python_String_rstrip()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rstrip()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_rstrip()_1.txt",
        "peekOfCode": "x = txt.rstrip()\nprint(\"of all fruits\", x, \"is my favorite\")",
        "detail": "python-prac.mini-scripts.Python_String_rstrip()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rstrip()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rstrip()_2.txt",
        "peekOfCode": "txt = \"banana,,,,,ssqqqww.....\"\nx = txt.rstrip(\",.qsw\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rstrip()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_rstrip()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_rstrip()_2.txt",
        "peekOfCode": "x = txt.rstrip(\",.qsw\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_rstrip()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_split()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_split()_1.txt",
        "peekOfCode": "txt = \"welcome to the jungle\"\nx = txt.split()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_split()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_split()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_split()_1.txt",
        "peekOfCode": "x = txt.split()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_split()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_split()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_split()_2.txt",
        "peekOfCode": "txt = \"hello, my name is Peter, I am 26 years old\"\nx = txt.split(\", \")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_split()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_split()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_split()_2.txt",
        "peekOfCode": "x = txt.split(\", \")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_split()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_split()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_split()_3.txt",
        "peekOfCode": "txt = \"apple#banana#cherry#orange\"\nx = txt.split(\"#\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_split()_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_split()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_split()_3.txt",
        "peekOfCode": "x = txt.split(\"#\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_split()_3.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_split()_4.txt",
        "description": "python-prac.mini-scripts.Python_String_split()_4.txt",
        "peekOfCode": "txt = \"apple#banana#cherry#orange\"\n# setting the maxsplit parameter to 1, will return a list with 2 elements!\nx = txt.split(\"#\", 1)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_split()_4.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_split()_4.txt",
        "description": "python-prac.mini-scripts.Python_String_split()_4.txt",
        "peekOfCode": "x = txt.split(\"#\", 1)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_split()_4.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_splitlines()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_splitlines()_1.txt",
        "peekOfCode": "txt = \"Thank you for the music\\nWelcome to the jungle\"\nx = txt.splitlines()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_splitlines()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_splitlines()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_splitlines()_1.txt",
        "peekOfCode": "x = txt.splitlines()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_splitlines()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_splitlines()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_splitlines()_2.txt",
        "peekOfCode": "txt = \"Thank you for the music\\nWelcome to the jungle\"\nx = txt.splitlines(True)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_splitlines()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_splitlines()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_splitlines()_2.txt",
        "peekOfCode": "x = txt.splitlines(True)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_splitlines()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_startswith()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_startswith()_1.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.startswith(\"Hello\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_startswith()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_startswith()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_startswith()_1.txt",
        "peekOfCode": "x = txt.startswith(\"Hello\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_startswith()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_startswith()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_startswith()_2.txt",
        "peekOfCode": "txt = \"Hello, welcome to my world.\"\nx = txt.startswith(\"wel\", 7, 20)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_startswith()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_startswith()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_startswith()_2.txt",
        "peekOfCode": "x = txt.startswith(\"wel\", 7, 20)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_startswith()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_strip()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_strip()_1.txt",
        "peekOfCode": "txt = \"     banana     \"\nx = txt.strip()\nprint(\"of all fruits\", x, \"is my favorite\")",
        "detail": "python-prac.mini-scripts.Python_String_strip()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_strip()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_strip()_1.txt",
        "peekOfCode": "x = txt.strip()\nprint(\"of all fruits\", x, \"is my favorite\")",
        "detail": "python-prac.mini-scripts.Python_String_strip()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_strip()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_strip()_2.txt",
        "peekOfCode": "txt = \",,,,,rrttgg.....banana....rrr\"\nx = txt.strip(\",.grt\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_strip()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_strip()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_strip()_2.txt",
        "peekOfCode": "x = txt.strip(\",.grt\")\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_strip()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_swapcase().txt",
        "description": "python-prac.mini-scripts.Python_String_swapcase().txt",
        "peekOfCode": "txt = \"Hello My Name Is sanus\"\nx = txt.swapcase()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_swapcase().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_swapcase().txt",
        "description": "python-prac.mini-scripts.Python_String_swapcase().txt",
        "peekOfCode": "x = txt.swapcase()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_swapcase().txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_title()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_title()_1.txt",
        "peekOfCode": "txt = \"Welcome to my world\"\nx = txt.title()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_title()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_title()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_title()_1.txt",
        "peekOfCode": "x = txt.title()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_title()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_title()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_title()_2.txt",
        "peekOfCode": "txt = \"Welcome to my 2nd world\"\nx = txt.title()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_title()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_title()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_title()_2.txt",
        "peekOfCode": "x = txt.title()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_title()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_title()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_title()_3.txt",
        "peekOfCode": "txt = \"hello b2b2b2 and 3g3g3g\"\nx = txt.title()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_title()_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_title()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_title()_3.txt",
        "peekOfCode": "x = txt.title()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_title()_3.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_String_to_a_Variable.txt",
        "description": "python-prac.mini-scripts.python_String_to_a_Variable.txt",
        "peekOfCode": "a = \"Hello\"\nprint(a)",
        "detail": "python-prac.mini-scripts.python_String_to_a_Variable.txt",
        "documentation": {}
    },
    {
        "label": "mydict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_1.txt",
        "peekOfCode": "mydict = {83: 80}\ntxt = \"Hello Sam!\"\nprint(txt.translate(mydict))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_1.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_1.txt",
        "peekOfCode": "txt = \"Hello Sam!\"\nprint(txt.translate(mydict))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_2.txt",
        "peekOfCode": "txt = \"Hello Sam!\"\nmytable = txt.maketrans(\"S\", \"P\")\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_2.txt",
        "documentation": {}
    },
    {
        "label": "mytable",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_2.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_2.txt",
        "peekOfCode": "mytable = txt.maketrans(\"S\", \"P\")\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_2.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "peekOfCode": "txt = \"Hi Sam!\"\nx = \"mSa\"\ny = \"eJo\"\nmytable = txt.maketrans(x, y)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "peekOfCode": "x = \"mSa\"\ny = \"eJo\"\nmytable = txt.maketrans(x, y)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "peekOfCode": "y = \"eJo\"\nmytable = txt.maketrans(x, y)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "documentation": {}
    },
    {
        "label": "mytable",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "peekOfCode": "mytable = txt.maketrans(x, y)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_3.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_4.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_4.txt",
        "peekOfCode": "txt = \"Good night Sam!\"\nmydict = {\n    109: 101,\n    83: 74,\n    97: 111,\n    111: None,\n    100: None,\n    110: None,\n    103: None,\n    104: None,",
        "detail": "python-prac.mini-scripts.Python_String_translate()_4.txt",
        "documentation": {}
    },
    {
        "label": "mydict",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_4.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_4.txt",
        "peekOfCode": "mydict = {\n    109: 101,\n    83: 74,\n    97: 111,\n    111: None,\n    100: None,\n    110: None,\n    103: None,\n    104: None,\n    116: None,",
        "detail": "python-prac.mini-scripts.Python_String_translate()_4.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "peekOfCode": "txt = \"Good night Sam!\"\nx = \"mSa\"\ny = \"eJo\"\nz = \"odnght\"\nmytable = txt.maketrans(x, y, z)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "peekOfCode": "x = \"mSa\"\ny = \"eJo\"\nz = \"odnght\"\nmytable = txt.maketrans(x, y, z)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "peekOfCode": "y = \"eJo\"\nz = \"odnght\"\nmytable = txt.maketrans(x, y, z)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "peekOfCode": "z = \"odnght\"\nmytable = txt.maketrans(x, y, z)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "documentation": {}
    },
    {
        "label": "mytable",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "description": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "peekOfCode": "mytable = txt.maketrans(x, y, z)\nprint(txt.translate(mytable))",
        "detail": "python-prac.mini-scripts.Python_String_translate()_5.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_upper().txt",
        "description": "python-prac.mini-scripts.Python_String_upper().txt",
        "peekOfCode": "txt = \"Hello my friends\"\nx = txt.upper()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_upper().txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_upper().txt",
        "description": "python-prac.mini-scripts.Python_String_upper().txt",
        "peekOfCode": "x = txt.upper()\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_upper().txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_zfill()__1.txt",
        "description": "python-prac.mini-scripts.Python_String_zfill()__1.txt",
        "peekOfCode": "txt = \"50\"\nx = txt.zfill(10)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_zfill()__1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_zfill()__1.txt",
        "description": "python-prac.mini-scripts.Python_String_zfill()__1.txt",
        "peekOfCode": "x = txt.zfill(10)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_String_zfill()__1.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_zfill()__2.txt",
        "description": "python-prac.mini-scripts.Python_String_zfill()__2.txt",
        "peekOfCode": "a = \"hello\"\nb = \"welcome to the jungle\"\nc = \"10.000\"\nprint(a.zfill(10))\nprint(b.zfill(10))\nprint(c.zfill(10))",
        "detail": "python-prac.mini-scripts.Python_String_zfill()__2.txt",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_zfill()__2.txt",
        "description": "python-prac.mini-scripts.Python_String_zfill()__2.txt",
        "peekOfCode": "b = \"welcome to the jungle\"\nc = \"10.000\"\nprint(a.zfill(10))\nprint(b.zfill(10))\nprint(c.zfill(10))",
        "detail": "python-prac.mini-scripts.Python_String_zfill()__2.txt",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_String_zfill()__2.txt",
        "description": "python-prac.mini-scripts.Python_String_zfill()__2.txt",
        "peekOfCode": "c = \"10.000\"\nprint(a.zfill(10))\nprint(b.zfill(10))\nprint(c.zfill(10))",
        "detail": "python-prac.mini-scripts.Python_String_zfill()__2.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Summation_Over_an_Axis.txt",
        "description": "python-prac.mini-scripts.python_Summation_Over_an_Axis.txt",
        "peekOfCode": "arr1 = np.array([1, 2, 3])\narr2 = np.array([1, 2, 3])\nnewarr = np.sum([arr1, arr2], axis=1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Summation_Over_an_Axis.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Summation_Over_an_Axis.txt",
        "description": "python-prac.mini-scripts.python_Summation_Over_an_Axis.txt",
        "peekOfCode": "arr2 = np.array([1, 2, 3])\nnewarr = np.sum([arr1, arr2], axis=1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Summation_Over_an_Axis.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Summation_Over_an_Axis.txt",
        "description": "python-prac.mini-scripts.python_Summation_Over_an_Axis.txt",
        "peekOfCode": "newarr = np.sum([arr1, arr2], axis=1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Summation_Over_an_Axis.txt",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_The_set()_Constructor.txt",
        "description": "python-prac.mini-scripts.python_The_set()_Constructor.txt",
        "peekOfCode": "thisset = set((\"apple\", \"banana\", \"cherry\"))\nprint(thisset)\n# Note: the set list is unordered, so the result will display the items in a random order.",
        "detail": "python-prac.mini-scripts.python_The_set()_Constructor.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_The_strftime()_Method.txt",
        "description": "python-prac.mini-scripts.python_The_strftime()_Method.txt",
        "peekOfCode": "x = datetime.datetime(2018, 6, 1)\nprint(x.strftime(\"%B\"))",
        "detail": "python-prac.mini-scripts.python_The_strftime()_Method.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_The_Syntax_condition_1.txt",
        "description": "python-prac.mini-scripts.python_The_Syntax_condition_1.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x for x in fruits if x != \"apple\"]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_The_Syntax_condition_1.txt",
        "documentation": {}
    },
    {
        "label": "newlist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_The_Syntax_condition_1.txt",
        "description": "python-prac.mini-scripts.python_The_Syntax_condition_1.txt",
        "peekOfCode": "newlist = [x for x in fruits if x != \"apple\"]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_The_Syntax_condition_1.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_The_Syntax_condition_2.txt",
        "description": "python-prac.mini-scripts.python_The_Syntax_condition_2.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x for x in fruits]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_The_Syntax_condition_2.txt",
        "documentation": {}
    },
    {
        "label": "newlist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_The_Syntax_condition_2.txt",
        "description": "python-prac.mini-scripts.python_The_Syntax_condition_2.txt",
        "peekOfCode": "newlist = [x for x in fruits]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_The_Syntax_condition_2.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_the_syntax_expression_1.txt",
        "description": "python-prac.mini-scripts.python_the_syntax_expression_1.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x.upper() for x in fruits]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_the_syntax_expression_1.txt",
        "documentation": {}
    },
    {
        "label": "newlist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_the_syntax_expression_1.txt",
        "description": "python-prac.mini-scripts.python_the_syntax_expression_1.txt",
        "peekOfCode": "newlist = [x.upper() for x in fruits]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_the_syntax_expression_1.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_the_syntax_expression_2.txt",
        "description": "python-prac.mini-scripts.python_the_syntax_expression_2.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [\"hello\" for x in fruits]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_the_syntax_expression_2.txt",
        "documentation": {}
    },
    {
        "label": "newlist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_the_syntax_expression_2.txt",
        "description": "python-prac.mini-scripts.python_the_syntax_expression_2.txt",
        "peekOfCode": "newlist = [\"hello\" for x in fruits]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_the_syntax_expression_2.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_the_syntax_expression_3.txt",
        "description": "python-prac.mini-scripts.python_the_syntax_expression_3.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x if x != \"banana\" else \"orange\" for x in fruits]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_the_syntax_expression_3.txt",
        "documentation": {}
    },
    {
        "label": "newlist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_the_syntax_expression_3.txt",
        "description": "python-prac.mini-scripts.python_the_syntax_expression_3.txt",
        "peekOfCode": "newlist = [x if x != \"banana\" else \"orange\" for x in fruits]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_the_syntax_expression_3.txt",
        "documentation": {}
    },
    {
        "label": "newlist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_the_sysntax_iterable.txt",
        "description": "python-prac.mini-scripts.python_the_sysntax_iterable.txt",
        "peekOfCode": "newlist = [x for x in range(10)]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_the_sysntax_iterable.txt",
        "documentation": {}
    },
    {
        "label": "newlist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_the_sysntax_iterable_2.txt",
        "description": "python-prac.mini-scripts.python_the_sysntax_iterable_2.txt",
        "peekOfCode": "newlist = [x for x in range(10) if x < 5]\nprint(newlist)",
        "detail": "python-prac.mini-scripts.python_the_sysntax_iterable_2.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_The_tuple()_Constructor.txt",
        "description": "python-prac.mini-scripts.python_The_tuple()_Constructor.txt",
        "peekOfCode": "thistuple = tuple((\"apple\", \"banana\", \"cherry\"))\nprint(thistuple)",
        "detail": "python-prac.mini-scripts.python_The_tuple()_Constructor.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Trigonometric_Functions_1.txt",
        "description": "python-prac.mini-scripts.python_Trigonometric_Functions_1.txt",
        "peekOfCode": "x = np.sin(np.pi / 2)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Trigonometric_Functions_1.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Trigonometric_Functions_2.txt",
        "description": "python-prac.mini-scripts.python_Trigonometric_Functions_2.txt",
        "peekOfCode": "arr = np.array([np.pi / 2, np.pi / 3, np.pi / 4, np.pi / 5])\nx = np.sin(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Trigonometric_Functions_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Trigonometric_Functions_2.txt",
        "description": "python-prac.mini-scripts.python_Trigonometric_Functions_2.txt",
        "peekOfCode": "x = np.sin(arr)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Trigonometric_Functions_2.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Tuples_1.txt",
        "description": "python-prac.mini-scripts.Python_Tuples_1.txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple)",
        "detail": "python-prac.mini-scripts.Python_Tuples_1.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Tuples_2.txt",
        "description": "python-prac.mini-scripts.Python_Tuples_2.txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")\nprint(thistuple)",
        "detail": "python-prac.mini-scripts.Python_Tuples_2.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Tuple_count()_Method.txt",
        "description": "python-prac.mini-scripts.Python_Tuple_count()_Method.txt",
        "peekOfCode": "thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)\nx = thistuple.count(5)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_Tuple_count()_Method.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Tuple_count()_Method.txt",
        "description": "python-prac.mini-scripts.Python_Tuple_count()_Method.txt",
        "peekOfCode": "x = thistuple.count(5)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_Tuple_count()_Method.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Tuple_index()_Method.txt",
        "description": "python-prac.mini-scripts.Python_Tuple_index()_Method.txt",
        "peekOfCode": "thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)\nx = thistuple.index(8)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_Tuple_index()_Method.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Tuple_index()_Method.txt",
        "description": "python-prac.mini-scripts.Python_Tuple_index()_Method.txt",
        "peekOfCode": "x = thistuple.index(8)\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_Tuple_index()_Method.txt",
        "documentation": {}
    },
    {
        "label": "tuple1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_1.txt",
        "description": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_1.txt",
        "peekOfCode": "tuple1 = (\"apple\", \"banana\", \"cherry\")\ntuple2 = (1, 5, 7, 9, 3)\ntuple3 = (True, False, False)\nprint(tuple1)\nprint(tuple2)\nprint(tuple3)",
        "detail": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_1.txt",
        "documentation": {}
    },
    {
        "label": "tuple2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_1.txt",
        "description": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_1.txt",
        "peekOfCode": "tuple2 = (1, 5, 7, 9, 3)\ntuple3 = (True, False, False)\nprint(tuple1)\nprint(tuple2)\nprint(tuple3)",
        "detail": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_1.txt",
        "documentation": {}
    },
    {
        "label": "tuple3",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_1.txt",
        "description": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_1.txt",
        "peekOfCode": "tuple3 = (True, False, False)\nprint(tuple1)\nprint(tuple2)\nprint(tuple3)",
        "detail": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_1.txt",
        "documentation": {}
    },
    {
        "label": "tuple1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_2.txt",
        "description": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_2.txt",
        "peekOfCode": "tuple1 = (\"abc\", 34, True, 40, \"male\")\nprint(tuple1)",
        "detail": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_2.txt",
        "documentation": {}
    },
    {
        "label": "mytuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_3.txt",
        "description": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_3.txt",
        "peekOfCode": "mytuple = (\"apple\", \"banana\", \"cherry\")\nprint(type(mytuple))",
        "detail": "python-prac.mini-scripts.python_Tuple_Items_-_Data_Types_3.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Tuple_Length.txt",
        "description": "python-prac.mini-scripts.python_Tuple_Length.txt",
        "peekOfCode": "thistuple = tuple((\"apple\", \"banana\", \"cherry\"))\nprint(len(thistuple))",
        "detail": "python-prac.mini-scripts.python_Tuple_Length.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Uniform_Distribution.txt",
        "description": "python-prac.mini-scripts.python_Uniform_Distribution.txt",
        "peekOfCode": "x = random.uniform(size=(2, 3))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Uniform_Distribution.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Unknown_Dimension.txt",
        "description": "python-prac.mini-scripts.python_Unknown_Dimension.txt",
        "peekOfCode": "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nnewarr = arr.reshape(2, 2, -1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Unknown_Dimension.txt",
        "documentation": {}
    },
    {
        "label": "newarr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Unknown_Dimension.txt",
        "description": "python-prac.mini-scripts.python_Unknown_Dimension.txt",
        "peekOfCode": "newarr = arr.reshape(2, 2, -1)\nprint(newarr)",
        "detail": "python-prac.mini-scripts.python_Unknown_Dimension.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Unpacking_a_Tuple_1.txt",
        "description": "python-prac.mini-scripts.python_Unpacking_a_Tuple_1.txt",
        "peekOfCode": "fruits = (\"apple\", \"banana\", \"cherry\")\nprint(fruits)",
        "detail": "python-prac.mini-scripts.python_Unpacking_a_Tuple_1.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Unpacking_a_Tuple_2.txt",
        "description": "python-prac.mini-scripts.python_Unpacking_a_Tuple_2.txt",
        "peekOfCode": "fruits = (\"apple\", \"banana\", \"cherry\")\n(green, yellow, red) = fruits\nprint(green)\nprint(yellow)\nprint(red)",
        "detail": "python-prac.mini-scripts.python_Unpacking_a_Tuple_2.txt",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_User_Input_1.txt",
        "description": "python-prac.mini-scripts.Python_User_Input_1.txt",
        "peekOfCode": "username = input(\"Enter username:\")\nprint(\"Username is: \" + username)",
        "detail": "python-prac.mini-scripts.Python_User_Input_1.txt",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_User_Input_2.txt",
        "description": "python-prac.mini-scripts.Python_User_Input_2.txt",
        "peekOfCode": "username = raw_input(\"Enter username:\")\nprint(\"Username is: \" + username)",
        "detail": "python-prac.mini-scripts.Python_User_Input_2.txt",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Use_the_super()_Function.txt",
        "description": "python-prac.mini-scripts.python_Use_the_super()_Function.txt",
        "peekOfCode": "class Person:\n  def __init__(self, fname, lname):\n    self.firstname = fname\n    self.lastname = lname\n  def printname(self):\n    print(self.firstname, self.lastname)\nclass Student(Person):\n  def __init__(self, fname, lname):\n    super().__init__(fname, lname)\nx = Student(\"sanu\", santh\")",
        "detail": "python-prac.mini-scripts.python_Use_the_super()_Function.txt",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "python-prac.mini-scripts.python_Use_the_super()_Function.txt",
        "description": "python-prac.mini-scripts.python_Use_the_super()_Function.txt",
        "peekOfCode": "class Student(Person):\n  def __init__(self, fname, lname):\n    super().__init__(fname, lname)\nx = Student(\"sanu\", santh\")\nx.printname()",
        "detail": "python-prac.mini-scripts.python_Use_the_super()_Function.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Use_the_super()_Function.txt",
        "description": "python-prac.mini-scripts.python_Use_the_super()_Function.txt",
        "peekOfCode": "x = Student(\"sanu\", santh\")\nx.printname()",
        "detail": "python-prac.mini-scripts.python_Use_the_super()_Function.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Using_Asterix_(multible)_1.txt",
        "description": "python-prac.mini-scripts.python_Using_Asterix_(multible)_1.txt",
        "peekOfCode": "fruits = (\"apple\", \"banana\", \"cherry\", \"strawberry\", \"raspberry\")\n(green, yellow, *red) = fruits\nprint(green)\nprint(yellow)\nprint(red)",
        "detail": "python-prac.mini-scripts.python_Using_Asterix_(multible)_1.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Using_Asterix_(multible)_2.txt",
        "description": "python-prac.mini-scripts.python_Using_Asterix_(multible)_2.txt",
        "peekOfCode": "fruits = (\"apple\", \"mango\", \"papaya\", \"pineapple\", \"cherry\")\n(green, *tropic, red) = fruits\nprint(green)\nprint(tropic)\nprint(red)",
        "detail": "python-prac.mini-scripts.python_Using_Asterix_(multible)_2.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_using_a_for_loop_1.txt",
        "description": "python-prac.mini-scripts.python_using_a_for_loop_1.txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\")\nfor x in thistuple:\n    print(x)",
        "detail": "python-prac.mini-scripts.python_using_a_for_loop_1.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_using_a_for_loop_2.txt",
        "description": "python-prac.mini-scripts.python_using_a_for_loop_2.txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\")\nfor x in thistuple:\n    print(x)",
        "detail": "python-prac.mini-scripts.python_using_a_for_loop_2.txt",
        "documentation": {}
    },
    {
        "label": "thislist",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Using_a_While_Loop.txt",
        "description": "python-prac.mini-scripts.python_Using_a_While_Loop.txt",
        "peekOfCode": "thislist = [\"apple\", \"banana\", \"cherry\"]\ni = 0\nwhile i < len(thislist):\n    print(thislist[i])\n    i = i + 1",
        "detail": "python-prac.mini-scripts.python_Using_a_While_Loop.txt",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Using_a_While_Loop.txt",
        "description": "python-prac.mini-scripts.python_Using_a_While_Loop.txt",
        "peekOfCode": "i = 0\nwhile i < len(thislist):\n    print(thislist[i])\n    i = i + 1",
        "detail": "python-prac.mini-scripts.python_Using_a_While_Loop.txt",
        "documentation": {}
    },
    {
        "label": "thistuple",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Using_a_While_Loop_(2).txt",
        "description": "python-prac.mini-scripts.python_Using_a_While_Loop_(2).txt",
        "peekOfCode": "thistuple = (\"apple\", \"banana\", \"cherry\")\ni = 0\nwhile i < len(thistuple):\n    print(thistuple[i])\n    i = i + 1",
        "detail": "python-prac.mini-scripts.python_Using_a_While_Loop_(2).txt",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Using_a_While_Loop_(2).txt",
        "description": "python-prac.mini-scripts.python_Using_a_While_Loop_(2).txt",
        "peekOfCode": "i = 0\nwhile i < len(thistuple):\n    print(thistuple[i])\n    i = i + 1",
        "detail": "python-prac.mini-scripts.python_Using_a_While_Loop_(2).txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Using_the_dir()_Function.txt",
        "description": "python-prac.mini-scripts.python_Using_the_dir()_Function.txt",
        "peekOfCode": "x = dir(platform)\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Using_the_dir()_Function.txt",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_v.txt",
        "description": "python-prac.mini-scripts.python_v.txt",
        "peekOfCode": "arr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.stack((arr1, arr2), axis=1)\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_v.txt",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_v.txt",
        "description": "python-prac.mini-scripts.python_v.txt",
        "peekOfCode": "arr2 = np.array([4, 5, 6])\narr = np.stack((arr1, arr2), axis=1)\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_v.txt",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_v.txt",
        "description": "python-prac.mini-scripts.python_v.txt",
        "peekOfCode": "arr = np.stack((arr1, arr2), axis=1)\nprint(arr)",
        "detail": "python-prac.mini-scripts.python_v.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_case-sensitive.txt",
        "description": "python-prac.mini-scripts.Python_Variables_case-sensitive.txt",
        "peekOfCode": "a = 4\nA = \"Sally\"\nprint(a)\nprint(A)",
        "detail": "python-prac.mini-scripts.Python_Variables_case-sensitive.txt",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_case-sensitive.txt",
        "description": "python-prac.mini-scripts.Python_Variables_case-sensitive.txt",
        "peekOfCode": "A = \"Sally\"\nprint(a)\nprint(A)",
        "detail": "python-prac.mini-scripts.Python_Variables_case-sensitive.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_casting_1.txt",
        "description": "python-prac.mini-scripts.Python_Variables_casting_1.txt",
        "peekOfCode": "x = str(3)\ny = int(3)\nz = float(3)\nprint(x)\nprint(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.Python_Variables_casting_1.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_casting_1.txt",
        "description": "python-prac.mini-scripts.Python_Variables_casting_1.txt",
        "peekOfCode": "y = int(3)\nz = float(3)\nprint(x)\nprint(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.Python_Variables_casting_1.txt",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_casting_1.txt",
        "description": "python-prac.mini-scripts.Python_Variables_casting_1.txt",
        "peekOfCode": "z = float(3)\nprint(x)\nprint(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.Python_Variables_casting_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_casting_2.txt",
        "description": "python-prac.mini-scripts.Python_Variables_casting_2.txt",
        "peekOfCode": "x = 5\ny = \"Sanu\"\nprint(type(x))\nprint(type(y))",
        "detail": "python-prac.mini-scripts.Python_Variables_casting_2.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_casting_2.txt",
        "description": "python-prac.mini-scripts.Python_Variables_casting_2.txt",
        "peekOfCode": "y = \"Sanu\"\nprint(type(x))\nprint(type(y))",
        "detail": "python-prac.mini-scripts.Python_Variables_casting_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_create_1.txt",
        "description": "python-prac.mini-scripts.Python_Variables_create_1.txt",
        "peekOfCode": "x = 5\ny = \"sanu\"\nprint(x)\nprint(y)",
        "detail": "python-prac.mini-scripts.Python_Variables_create_1.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_create_1.txt",
        "description": "python-prac.mini-scripts.Python_Variables_create_1.txt",
        "peekOfCode": "y = \"sanu\"\nprint(x)\nprint(y)",
        "detail": "python-prac.mini-scripts.Python_Variables_create_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_create_2.txt",
        "description": "python-prac.mini-scripts.Python_Variables_create_2.txt",
        "peekOfCode": "x = 4\nx = \"Sally\"\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_Variables_create_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_create_2.txt",
        "description": "python-prac.mini-scripts.Python_Variables_create_2.txt",
        "peekOfCode": "x = \"Sally\"\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_Variables_create_2.txt",
        "documentation": {}
    },
    {
        "label": "person1",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Variables_in_Module_1.txt",
        "description": "python-prac.mini-scripts.python_Variables_in_Module_1.txt",
        "peekOfCode": "person1 = {\"name\": \"John\", \"age\": 36, \"country\": \"Norway\"}",
        "detail": "python-prac.mini-scripts.python_Variables_in_Module_1.txt",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Variables_in_Module_2.txt",
        "description": "python-prac.mini-scripts.python_Variables_in_Module_2.txt",
        "peekOfCode": "a = mymodule.person1[\"age\"]\nprint(a)",
        "detail": "python-prac.mini-scripts.python_Variables_in_Module_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_One_Value_to_Multiple_Variables.txt",
        "description": "python-prac.mini-scripts.Python_Variables_One_Value_to_Multiple_Variables.txt",
        "peekOfCode": "x = y = z = \"Orange\"\nprint(x)\nprint(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.Python_Variables_One_Value_to_Multiple_Variables.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_single_or_double_quotes.txt",
        "description": "python-prac.mini-scripts.Python_Variables_single_or_double_quotes.txt",
        "peekOfCode": "x = \"Sanu\"\nprint(x)\n# double quotes are the same as single quotes:\nx = \"Sanu\"\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_Variables_single_or_double_quotes.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_single_or_double_quotes.txt",
        "description": "python-prac.mini-scripts.Python_Variables_single_or_double_quotes.txt",
        "peekOfCode": "x = \"Sanu\"\nprint(x)",
        "detail": "python-prac.mini-scripts.Python_Variables_single_or_double_quotes.txt",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.Python_Variables_Unpack_a_Collection.txt",
        "description": "python-prac.mini-scripts.Python_Variables_Unpack_a_Collection.txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nx, y, z = fruits\nprint(x)\nprint(y)\nprint(z)",
        "detail": "python-prac.mini-scripts.Python_Variables_Unpack_a_Collection.txt",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_while_Loop.txt",
        "description": "python-prac.mini-scripts.python_while_Loop.txt",
        "peekOfCode": "i = 1\nwhile i < 6:\n    print(i)\n    i += 1",
        "detail": "python-prac.mini-scripts.python_while_Loop.txt",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_while_loop_break_Statement.txt",
        "description": "python-prac.mini-scripts.python_while_loop_break_Statement.txt",
        "peekOfCode": "i = 1\nwhile i < 6:\n    print(i)\n    if i == 3:\n        break\n    i += 1",
        "detail": "python-prac.mini-scripts.python_while_loop_break_Statement.txt",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_while_loop_continue_Statement.txt",
        "description": "python-prac.mini-scripts.python_while_loop_continue_Statement.txt",
        "peekOfCode": "i = 0\nwhile i < 6:\n    i += 1\n    if i == 3:\n        continue\n    print(i)\n# Note that number 3 is missing in the result",
        "detail": "python-prac.mini-scripts.python_while_loop_continue_Statement.txt",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_while_loop_else_Statement.txt",
        "description": "python-prac.mini-scripts.python_while_loop_else_Statement.txt",
        "peekOfCode": "i = 1\nwhile i < 6:\n    print(i)\n    i += 1\nelse:\n    print(\"i is no longer less than 6\")",
        "detail": "python-prac.mini-scripts.python_while_loop_else_Statement.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.python_Zipf_Distribution.txt",
        "description": "python-prac.mini-scripts.python_Zipf_Distribution.txt",
        "peekOfCode": "x = random.zipf(a=2, size=(2, 3))\nprint(x)",
        "detail": "python-prac.mini-scripts.python_Zipf_Distribution.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.pytho_Parse_JSON_-_Convert_from_JSON_to_Python.txt",
        "description": "python-prac.mini-scripts.pytho_Parse_JSON_-_Convert_from_JSON_to_Python.txt",
        "peekOfCode": "x = '{ \"name\":\"sanu\", \"age\":24, \"city\":\"batticaloa\"}'\n# parse x:\ny = json.loads(x)\n# the result is a Python dictionary:\nprint(y[\"age\"])",
        "detail": "python-prac.mini-scripts.pytho_Parse_JSON_-_Convert_from_JSON_to_Python.txt",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.pytho_Parse_JSON_-_Convert_from_JSON_to_Python.txt",
        "description": "python-prac.mini-scripts.pytho_Parse_JSON_-_Convert_from_JSON_to_Python.txt",
        "peekOfCode": "y = json.loads(x)\n# the result is a Python dictionary:\nprint(y[\"age\"])",
        "detail": "python-prac.mini-scripts.pytho_Parse_JSON_-_Convert_from_JSON_to_Python.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.RegEx_Functions_findall_()_1.txt",
        "description": "python-prac.mini-scripts.RegEx_Functions_findall_()_1.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\nx = re.findall(\"ai\", txt)\nprint(x)",
        "detail": "python-prac.mini-scripts.RegEx_Functions_findall_()_1.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.RegEx_Functions_findall_()_1.txt",
        "description": "python-prac.mini-scripts.RegEx_Functions_findall_()_1.txt",
        "peekOfCode": "x = re.findall(\"ai\", txt)\nprint(x)",
        "detail": "python-prac.mini-scripts.RegEx_Functions_findall_()_1.txt",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.RegEx_Functions_findall_()_2.txt",
        "description": "python-prac.mini-scripts.RegEx_Functions_findall_()_2.txt",
        "peekOfCode": "txt = \"The rain in Spain\"\n# Check if \"Portugal\" is in the string:\nx = re.findall(\"Portugal\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.RegEx_Functions_findall_()_2.txt",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.mini-scripts.RegEx_Functions_findall_()_2.txt",
        "description": "python-prac.mini-scripts.RegEx_Functions_findall_()_2.txt",
        "peekOfCode": "x = re.findall(\"Portugal\", txt)\nprint(x)\nif x:\n    print(\"Yes, there is at least one match!\")\nelse:\n    print(\"No match\")",
        "detail": "python-prac.mini-scripts.RegEx_Functions_findall_()_2.txt",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.count",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.count",
        "peekOfCode": "def count(ar, n):\n    count = 0\n    for element in ar:\n        # More complex condition could be\n        # => (not element != n)\n        if element == n:\n            count += 1\n    return count\n# Testing\n# add your test cases in list below",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.count",
        "documentation": {}
    },
    {
        "label": "test_cases",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.count",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.count",
        "peekOfCode": "test_cases = [([1, 1, 2, 3, 5, 8, 13, 21, 1], 1), (\"Captain America\", \"a\")]\nfor test_case in test_cases:\n    print(\"TestCase: {}, {}\".format(test_case[0], test_case[1]))\n    print(\"Results: {}\\n\".format(count(test_case[0], test_case[1])))\n# You can add condition to check weather output is correct\n# or not",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.count",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.enum",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.enum",
        "peekOfCode": "def enum(ar):\n    for index in range(len(ar)):\n        yield ((index, ar[index]))\n# Test\ncase_1 = [19, 17, 20, 23, 27, 15]\nfor tup in list(enum(case_1)):\n    print(tup)\n# Enum function is a generator does not\n# return any value, instead generates\n# tuple as it encounters element of array",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.enum",
        "documentation": {}
    },
    {
        "label": "case_1",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.enum",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.enum",
        "peekOfCode": "case_1 = [19, 17, 20, 23, 27, 15]\nfor tup in list(enum(case_1)):\n    print(tup)\n# Enum function is a generator does not\n# return any value, instead generates\n# tuple as it encounters element of array\n# Tuples can be appended to list\n# and can be returned after iteration\n# However,\n# Generator is a good option",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.enum",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.length",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.length",
        "peekOfCode": "def length(ar, is_ap=False, is_gp=False, big_data=False, data_outline=[]):\n    # Length of data if it is an arithmetic progression\n    # using derived formula, n = (tn - a) / d + 1\n    if is_ap:\n        return ((ar[-1] - ar[0]) / (ar[1] - ar[0])) + 1\n    # Length of data if it is an geometric progression\n    # using derived formula, n = ((log base 10 an / a1) / log 10 r) + 1\n    elif is_gp:\n        # length is never a float\n        return int(math.log10((ar[-1] / ar[0])) / math.log10((ar[1] / ar[0])) + 1)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.length",
        "documentation": {}
    },
    {
        "label": "max_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.max",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.max",
        "peekOfCode": "def max_(seq):\n    max_n = seq[0]\n    for item in seq[1:]:\n        if item > max_n:\n            max_n = item\n    return max_n\n# Test\n# Add your tests too!\ntests = [\n    [9017289, 782367, 736812903, 9367821, 71256716278, 676215, 2398, 0, 1],",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.max",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.max",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.max",
        "peekOfCode": "tests = [\n    [9017289, 782367, 736812903, 9367821, 71256716278, 676215, 2398, 0, 1],\n    [19208, 9239, 4376, 738, 78, 51, 5, 6, 12, 78, 123, 65765, 1999999999],\n    [1, 2, 4, 7, 9],\n]\n# checking our functions results\n# with python's built-in max() function\nfor test_i in range(len(tests)):\n    m = max_(tests[test_i])\n    if m == max(tests[test_i]):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.max",
        "documentation": {}
    },
    {
        "label": "mean_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mean",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mean",
        "peekOfCode": "def mean_(*args):\n    sum_ = 0.0\n    length_ = 0.0\n    for arg in args:\n        sum_ += arg\n        length_ += 1.0\n    return sum_ / length_\n# Function to get mean of array\ndef mean_ar(ar):\n    return float(sum(ar)) / float(len(ar))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mean",
        "documentation": {}
    },
    {
        "label": "mean_ar",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mean",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mean",
        "peekOfCode": "def mean_ar(ar):\n    return float(sum(ar)) / float(len(ar))\n# Another feature can be start index\n# and end index of array\n# Test\n# First function\nif mean_(12, 445, 76, 23, 7, 9, 17, 19, 100) == 78.66666666666667:\n    print(\"First Function Works!\")\n# Second function\nif mean_ar([12, 445, 76, 23, 7, 9, 17, 19, 10]) == 68.66666666666667:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mean",
        "documentation": {}
    },
    {
        "label": "median",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.median",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.median",
        "peekOfCode": "def median(ar, ranked=False):\n    if not ranked:\n        data = sorted(ar[:])\n    else:\n        # Don't need an else block still\n        # but to map program properly\n        # i've added it\n        data = ar[:]\n    # Data with odd length\n    if len(data) % 2 != 0:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.median",
        "documentation": {}
    },
    {
        "label": "odd",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.median",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.median",
        "peekOfCode": "odd = [123, 456, 789, 101112, 131415, 161718, 192021, 222324, 252627]\neven = [8, 7, 5, 2, 1, 3, 4, 6]\nif median(odd, ranked=True) == 131415 and median(even) == 4.5:\n    # Print statements on separate lines look better\n    print(\"Median of odd data: \" + str(131415))\n    print(\"Median of even data: \" + str(4.5))\n    print(\"Yeah, it works!\")\nelse:\n    # If algo didn't work\n    print(\"There's something wrong!\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.median",
        "documentation": {}
    },
    {
        "label": "even",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.median",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.median",
        "peekOfCode": "even = [8, 7, 5, 2, 1, 3, 4, 6]\nif median(odd, ranked=True) == 131415 and median(even) == 4.5:\n    # Print statements on separate lines look better\n    print(\"Median of odd data: \" + str(131415))\n    print(\"Median of even data: \" + str(4.5))\n    print(\"Yeah, it works!\")\nelse:\n    # If algo didn't work\n    print(\"There's something wrong!\")\n# This median is for un-distributed/un-grouped data",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.median",
        "documentation": {}
    },
    {
        "label": "min_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.min",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.min",
        "peekOfCode": "def min_(seq):\n    min_n = seq[0]\n    for item in seq[1:]:\n        if item < min_n:\n            min_n = item\n    return min_n\n# Test\n# Add your tests too!\ntests = [\n    [9017289, 782367, 736812903, 9367821, 71256716278, 676215, 2398, 0, 1],",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.min",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.min",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.min",
        "peekOfCode": "tests = [\n    [9017289, 782367, 736812903, 9367821, 71256716278, 676215, 2398, 0, 1],\n    [19208, 9239, 4376, 738, 78, 51, 5, 6, 12, 78, 123, 65765, 1999999999],\n    [1, 2, 4, 7, 9],\n]\n# checking our functions results\n# with python's built-in min() function\nfor test_i in range(len(tests)):\n    m = min_(tests[test_i])\n    if m == min(tests[test_i]):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.min",
        "documentation": {}
    },
    {
        "label": "reduce_data",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mode",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mode",
        "peekOfCode": "def reduce_data(data):\n    # Simplest way to do this, just 1 line of code:\n    # return list(set(data))\n    # since set data structure does not have repeats\n    # But below code is much more\n    # illustrative and easier to understand\n    data_outline = []\n    for item in data:\n        if item not in data_outline:\n            data_outline.append(item)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mode",
        "documentation": {}
    },
    {
        "label": "mode",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mode",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mode",
        "peekOfCode": "def mode(data):\n    mode_ = data[0]\n    max_frequency = data.count(data[0])\n    # Insted of iterating through every repeat of\n    # same number, then counting multiple repeats\n    # of number multiple times, iterating through outline\n    # of data is convinient, less time consuming.\n    for value in reduce_data(data[1:]):\n        if data.count(value) > max_frequency:\n            mode_ = value",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mode",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mode",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mode",
        "peekOfCode": "tests = [\n    [19, 17, 25, 34, 57, 17, 25, 52, 47, 42, 25, 17, 3, 0, 3, 41, 17],\n    [1917, 2534, 5717, 1725, 5247, 1917, 4117, 5717, 17303, 1917],\n]\n# Function does work,\n# Check yourself\nfor test in tests:\n    modal_v = mode(test)\n    print(\"\\nData outline: {}\".format(reduce_data(test)))\n    print(\"Mode: {}\\nFrequency: {}\".format(modal_v[0], modal_v[1]))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.mode",
        "documentation": {}
    },
    {
        "label": "sort_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sort",
        "peekOfCode": "def sort_(arr, temporary=False, reverse=False):\n    # Making copy of array if temporary is true\n    if temporary:\n        ar = arr[:]\n    else:\n        ar = arr\n    # To blend every element\n    # in correct position\n    # length of total array is required\n    length = len(ar)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sort",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sort",
        "peekOfCode": "tests = [\n    [7, 8, 9, 6, 4, 5, 3, 2, 1, 15],\n    [1, 90, 1110, 1312, 1110, 98, 76, 54, 32, 10],\n]  # Add your test cases\nfor test in tests:\n    accend, decend = sort_(test, True), sort_(test, True, True)\n    if accend == sorted(test) and decend == sorted(test, reverse=True):\n        print(\"Orignal: {}\".format(test))\n        print(\"Sorted: {}\".format(accend))\n        print(\"Sorted(reverse): {}\\n\".format(decend))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sort",
        "documentation": {}
    },
    {
        "label": "sum_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sum",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sum",
        "peekOfCode": "def sum_(*args):\n    res = 0.0\n    for arg in args:\n        res += arg\n    return res\ndef sum_ar(ar, end_i):\n    # end_i is the last index of array\n    # till which function should add\n    # array's elements\n    if end_i > 0 and end_i <= len(ar):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sum",
        "documentation": {}
    },
    {
        "label": "sum_ar",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sum",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sum",
        "peekOfCode": "def sum_ar(ar, end_i):\n    # end_i is the last index of array\n    # till which function should add\n    # array's elements\n    if end_i > 0 and end_i <= len(ar):\n        if end_i == len(ar):\n            end_i = end_i - 1\n    else:\n        end_i = len(ar) - 1\n    res = 0.0",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.sum",
        "documentation": {}
    },
    {
        "label": "squared",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "peekOfCode": "def squared(n):\n    return n * n\ndef cubed(n):\n    return n * n * n\ndef raise_power(n, power):\n    for t in range(power):\n        n *= n\n    return n\ndef is_divisible(n, t):\n    return n % t == 0",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "documentation": {}
    },
    {
        "label": "cubed",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "peekOfCode": "def cubed(n):\n    return n * n * n\ndef raise_power(n, power):\n    for t in range(power):\n        n *= n\n    return n\ndef is_divisible(n, t):\n    return n % t == 0\ndef is_even(n):\n    return n % 2 == 0",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "documentation": {}
    },
    {
        "label": "raise_power",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "peekOfCode": "def raise_power(n, power):\n    for t in range(power):\n        n *= n\n    return n\ndef is_divisible(n, t):\n    return n % t == 0\ndef is_even(n):\n    return n % 2 == 0\ndef is_odd(n):\n    return n % 2 != 0",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "documentation": {}
    },
    {
        "label": "is_divisible",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "peekOfCode": "def is_divisible(n, t):\n    return n % t == 0\ndef is_even(n):\n    return n % 2 == 0\ndef is_odd(n):\n    return n % 2 != 0\n# These all functions are extremely\n# helpful when used with map method of python\n# map(func, list) basically applies given function\n# to every element of list and appends results to a new",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "documentation": {}
    },
    {
        "label": "is_even",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "peekOfCode": "def is_even(n):\n    return n % 2 == 0\ndef is_odd(n):\n    return n % 2 != 0\n# These all functions are extremely\n# helpful when used with map method of python\n# map(func, list) basically applies given function\n# to every element of list and appends results to a new\n# list\n# e.g.",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "documentation": {}
    },
    {
        "label": "is_odd",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "peekOfCode": "def is_odd(n):\n    return n % 2 != 0\n# These all functions are extremely\n# helpful when used with map method of python\n# map(func, list) basically applies given function\n# to every element of list and appends results to a new\n# list\n# e.g.\nprint(map(squared, [1, 3, 5, 7, 9, 11, 13, 15]))\n# for functions with multiple args",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.analysis.useful_function_mapping",
        "documentation": {}
    },
    {
        "label": "binary_to_decimal_conv",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.binary_to_decimal_converter",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.binary_to_decimal_converter",
        "peekOfCode": "def binary_to_decimal_conv(binary_string):\n    res = 0\n    binary_l = list(binary_string)\n    for bit_i in range(len(binary_l)):\n        res += int(binary_l[bit_i]) * (2 ** bit_i)\n    return res\n# Test\n# Testing interface\ni = 0\nwhile True:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.binary_to_decimal_converter",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.binary_to_decimal_converter",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.binary_to_decimal_converter",
        "peekOfCode": "i = 0\nwhile True:\n    if (\n        raw_input(\"\\n[{}] Exit(press e) or Continue(press c): \".format(i))\n        .strip()\n        .lower()\n        == \"c\"\n    ):\n        print(\"Decimal form: \" + str(binary_to_decimal_conv(raw_input(\"\\nBinary?: \"))))\n    else:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.binary_to_decimal_converter",
        "documentation": {}
    },
    {
        "label": "collatz_conjecture",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.collatz_sequence",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.collatz_sequence",
        "peekOfCode": "def collatz_conjecture(n):\n    if n < 1: \n    \traise Exception(\"\\n  Expected a value greater than 1\")\n    while n != 1:\n\t\tif n % 2 == 0:\n\t\t\tn = n // 2\n\t\telse: n = 3*n + 1\n\t\tyield n\n# If n will be negative then\n# sequence will be infinite",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.collatz_sequence",
        "documentation": {}
    },
    {
        "label": "\t\t\tn",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.collatz_sequence",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.collatz_sequence",
        "peekOfCode": "\t\t\tn = n // 2\n\t\telse: n = 3*n + 1\n\t\tyield n\n# If n will be negative then\n# sequence will be infinite\n# Interface\n# Test/Play\ni = 0\nwhile True:\n\tif raw_input(\"\\n[%i] Continue[Y/n]?: \" % i).strip().lower() == \"y\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.collatz_sequence",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.collatz_sequence",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.collatz_sequence",
        "peekOfCode": "i = 0\nwhile True:\n\tif raw_input(\"\\n[%i] Continue[Y/n]?: \" % i).strip().lower() == \"y\":\n\t\tfor v in collatz_conjecture(int(raw_input(\"N?: \"))):\n\t\t\tprint(\"  > \" + str(v))\n\t\ti += 1\n\telse:\n\t\tprint(\"\\nSee you soon!\")\n\t\tsys.exit(0)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.collatz_sequence",
        "documentation": {}
    },
    {
        "label": "compare_array_elements",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.compare_array_elements",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.compare_array_elements",
        "peekOfCode": "def compare_array_elements(arr1, arr2):\n    for l in range(len(arr1)):\n        if arr1[l] > arr2[l]:\n            yield (arr1[l], l, 1)\n        elif arr1[l] < arr2[l]:\n            yield (arr2[l], l, 2)\n        else:\n            yield (0)\n# Tests\ntests = [",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.compare_array_elements",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.compare_array_elements",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.compare_array_elements",
        "peekOfCode": "tests = [\n    [[21, 3454, 12, 77, 21, 90, 235], [123, 54, 21, 7, 23, 987, 21312]],\n    [[1223, 8273, 17732, 7127], [12989, 2131223, 129, 10]],\n]\n# Does not test last condition of function\nfor test in tests:\n    for n, index, array_n in compare_array_elements(test[0], test[1]):\n        print(\n            \"  [ %i ] is biggest value at index(%i) from array(%i)\"\n            % (n, index, array_n)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.compare_array_elements",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.factorial",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.factorial",
        "peekOfCode": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        n = n * factorial(n - 1)\n        return n\n# Recursion is the easiest way to\n# solve this problem\n# but, to make sure recursion's depth ends, above\n# condition is necessary, otherwise",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.factorial",
        "documentation": {}
    },
    {
        "label": "factorial_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.factorial",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.factorial",
        "peekOfCode": "def factorial_(n):\n    if n <= 1:\n        return 1\n    else:\n        m = 1\n        # range function produces inclusive range\n        for integer in range(1, n + 1):\n            m *= integer\n        return m\n# This solution is bigger",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.numbers.factorial",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.searching.binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.searching.binary_search",
        "peekOfCode": "def binary_search(arr, f, l, v, sorted_ar=False):\n    # need an ordered/sorted array for search,\n    # else search won't produce desirable results\n    if not sorted_ar:\n        arr.sort()\n    # If input is invalid\n    if l - f < 0:\n        return -1\n    else:\n        # Index of mid-term of array[f:l+1]",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.searching.binary_search",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.searching.binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.searching.binary_search",
        "peekOfCode": "tests = [\n    [10, 29, 38, 47, 56, 19, 28, 37, 46, 50],\n    [1, 92, 83, 74, 65, 29, 84, 75],\n    [1, 21, 32, 43, 54, 65, 79],\n    [7, 7],\n]\n# Play as long as you can\n# Searches query in all of arrays in tests\ni = 0\nwhile True:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.searching.binary_search",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.searching.binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.searching.binary_search",
        "peekOfCode": "i = 0\nwhile True:\n    if raw_input(\"\\n[%i] Exit(press e) or Continue(press c): \" % i) == \"e\":\n        sys.exit()\n    q = int(raw_input(\"\\nSearch?: \"))\n    print(\"Results:\")\n    for test in tests:\n        find_i = binary_search(test, 0, len(test) - 1, q, False)\n        if test[find_i] == q:\n            print(",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.searching.binary_search",
        "documentation": {}
    },
    {
        "label": "sort_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.bubble_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.bubble_sort",
        "peekOfCode": "def sort_(arr, temporary=False, reverse=False):\n    # Making copy of array if temporary is true\n    if temporary:\n        ar = arr[:]\n    else:\n        ar = arr\n    # To blend every element\n    # in correct position\n    # length of total array is required\n    length = len(ar)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.bubble_sort",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.bubble_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.bubble_sort",
        "peekOfCode": "tests = [\n    [7, 8, 9, 6, 4, 5, 3, 2, 1, 15],\n    [1, 90, 1110, 1312, 1110, 98, 76, 54, 32, 10],\n]  # Add your test cases\nfor test in tests:\n    accend, decend = sort_(test, True), sort_(test, True, True)\n    if accend == sorted(test) and decend == sorted(test, reverse=True):\n        print(\"Orignal: {}\".format(test))\n        print(\"Sorted: {}\".format(accend))\n        print(\"Sorted(reverse): {}\\n\".format(decend))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.bubble_sort",
        "documentation": {}
    },
    {
        "label": "sort_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.insertion_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.insertion_sort",
        "peekOfCode": "def sort_(arr, temporary=False, reverse=False):\n    # Making copy of array if temporary is true\n    if temporary:\n        ar = arr[:]\n    else:\n        ar = arr\n    # To blend every element\n    # in correct position\n    # length of total array is required\n    length = len(ar)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.insertion_sort",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.insertion_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.insertion_sort",
        "peekOfCode": "tests = [\n    [7, 8, 9, 6, 4, 5, 3, 2, 1, 15],\n    [1, 90, 1110, 1312, 1110, 98, 76, 54, 32, 10],\n]  # Add your test cases\nfor test in tests:\n    accend, decend = sort_(test, True), sort_(test, True, True)\n    if accend == sorted(test) and decend == sorted(test, reverse=True):\n        print(\"Orignal: {}\".format(test))\n        print(\"Sorted: {}\".format(accend))\n        print(\"Sorted(reverse): {}\\n\".format(decend))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.insertion_sort",
        "documentation": {}
    },
    {
        "label": "sort_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.selection_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.selection_sort",
        "peekOfCode": "def sort_(arr, temporary=False, reverse=False):\n    # Making copy of array if temporary is true\n    if temporary:\n        ar = arr[:]\n    else:\n        ar = arr\n    # To blend every element\n    # in correct position\n    # length of total array is required\n    length = len(ar)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.selection_sort",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.selection_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.selection_sort",
        "peekOfCode": "tests = [\n    [7, 8, 9, 6, 4, 5, 3, 2, 1, 15],\n    [1, 90, 1110, 1312, 1110, 98, 76, 54, 32, 10],\n]  # Add your test cases\nfor test in tests:\n    accend, decend = sort_(test, True), sort_(test, True, True)\n    if accend == sorted(test) and decend == sorted(test, reverse=True):\n        print(\"Orignal: {}\".format(test))\n        print(\"Sorted: {}\".format(accend))\n        print(\"Sorted(reverse): {}\\n\".format(decend))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.sorting.selection_sort",
        "documentation": {}
    },
    {
        "label": "caesars_cipher_encoding",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.caesars_cipher_encryption",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.caesars_cipher_encryption",
        "peekOfCode": "def caesars_cipher_encoding(s, k, lowercase=True, uppercase=False):\n    # To encrypt plain text in either\n    # uppercase letters or lowercase letters\n    if lowercase:\n        alphas = list(string.lowercase)\n    elif uppercase:\n        alphas = list(string.uppercase)\n    encrypted = \"\"\n    # List characters in orignal string\n    char_s = list(s)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.caesars_cipher_encryption",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.caesars_cipher_encryption",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.caesars_cipher_encryption",
        "peekOfCode": "i = 0\nwhile True:\n    if raw_input(\"[{}] Exit(press e), To continue(press c): \".format(i)).lower() == \"c\":\n        # Number of times\n        i += 1\n        # Input for String and key for char shift\n        S, K = raw_input(\"\\nString: \"), int(raw_input(\"Key: \"))\n        # Results\n        print(\"\\nOrignal string: \" + S + \" ,  Key: \" + str(K))\n        print(\"Encrypted text: \" + caesars_cipher_encoding(S, K, True, False) + \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.caesars_cipher_encryption",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome",
        "peekOfCode": "def is_palindrome(s):\n    if s[::-1] == s:\n        return True\n    return False\n# Test\nS = raw_input(\"String: \")\nif is_palindrome(S):\n    print(\"Results:\\n   \" + S + \" is a palindrome string.\")\nelse:\n    print(\"Results:\\n   \" + S + \" is not a palindrome string.\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome",
        "peekOfCode": "S = raw_input(\"String: \")\nif is_palindrome(S):\n    print(\"Results:\\n   \" + S + \" is a palindrome string.\")\nelse:\n    print(\"Results:\\n   \" + S + \" is not a palindrome string.\")\n# add a loop to play many times(maybe infinite)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome_two_liner",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome_two_liner",
        "peekOfCode": "def is_palindrome(s):\n\t# String Clenasing\n\ts = \"\".join([char for char in list(s.lower()) if char in list(string.ascii_lowercase)])\n\t# (index+1) * -1 gives negative index of corresponding counterpart\n\t# for e.g. s = \"noon\"  s[0] = s[-1] = \"n\"  and so on \n\t#  all() and list comprehensions make task so easy!!\n\treturn all([s[index]==s[(index+1)*-1] for index in range(0, len(s))])\n# Tests\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"ra cec, a?r   \"))  // True",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome_two_liner",
        "documentation": {}
    },
    {
        "label": "\ts",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome_two_liner",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome_two_liner",
        "peekOfCode": "\ts = \"\".join([char for char in list(s.lower()) if char in list(string.ascii_lowercase)])\n\t# (index+1) * -1 gives negative index of corresponding counterpart\n\t# for e.g. s = \"noon\"  s[0] = s[-1] = \"n\"  and so on \n\t#  all() and list comprehensions make task so easy!!\n\treturn all([s[index]==s[(index+1)*-1] for index in range(0, len(s))])\n# Tests\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"ra cec, a?r   \"))  // True\nprint(is_palindrome(\"noooonnn\"))\nprint(is_palindrome(\"cool..eh\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.is_palindrome_two_liner",
        "documentation": {}
    },
    {
        "label": "vowel_count",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.vowel_count",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.vowel_count",
        "peekOfCode": "def vowel_count(S):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowels:\n        counter = 0\n        for char in S:\n            if char == vowel:\n                counter += 1\n        yield (vowel, counter)\n# CLI\n# Testing or Playing Interface",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.algorithms.string.vowel_count",
        "documentation": {}
    },
    {
        "label": "thrust_props",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.aircraft_thrust",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.aircraft_thrust",
        "peekOfCode": "def thrust_props(diameter, velocity, velocity1, density):\n    # According to formula\n    return (\n        math.pi / 4 * diameter ** 2 * (velocity + velocity1 / 2) * density * velocity1\n    )\nprint(\"Hello Aircraft Lovers,\\n\")\nwhile True:\n    # Loop for continous calculation\n    start_or_end = str(raw_input(\"start or end : \")).strip().lower()\n    # Main interface",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.aircraft_thrust",
        "documentation": {}
    },
    {
        "label": "peri_of_square",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "peri_of_square = lambda s: 4 * s\n# perimeter of rectangle, f(L, W) = 2 * (L + W) or 2L + 2W\n# where L is length, and W is width(breadth) of rectangle\nperi_of_rectangle = lambda l, w: 2 * (l + w)\n# perimeter of triangle, f(s1, s2, s3) = s1 + s2 + s3\n# where s1, s2, s3, are the sides of a regular triangle\nperi_of_triangle = lambda s1, s2, s3: s1 + s2 + s3\n# peri of right angled triangle, f(a, b) = a + b + square_root(a ** 2 + b ** 2)\n# since, by pythagoras theoram,\n#  a ** 2 + b ** 2 = c ** 2 or a squared + b squared = c squared",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "peri_of_rectangle",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "peri_of_rectangle = lambda l, w: 2 * (l + w)\n# perimeter of triangle, f(s1, s2, s3) = s1 + s2 + s3\n# where s1, s2, s3, are the sides of a regular triangle\nperi_of_triangle = lambda s1, s2, s3: s1 + s2 + s3\n# peri of right angled triangle, f(a, b) = a + b + square_root(a ** 2 + b ** 2)\n# since, by pythagoras theoram,\n#  a ** 2 + b ** 2 = c ** 2 or a squared + b squared = c squared\nperi_of_rt_triangle = lambda a, b: a + b + math.sqrt(a ** 2 + b ** 2)\n# perimeter of circle(or circumference), f(r) = 2 * r * pi\n# or f(d) = d * pi, where r is radius, pi is pi ratio(3.14159......),",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "peri_of_triangle",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "peri_of_triangle = lambda s1, s2, s3: s1 + s2 + s3\n# peri of right angled triangle, f(a, b) = a + b + square_root(a ** 2 + b ** 2)\n# since, by pythagoras theoram,\n#  a ** 2 + b ** 2 = c ** 2 or a squared + b squared = c squared\nperi_of_rt_triangle = lambda a, b: a + b + math.sqrt(a ** 2 + b ** 2)\n# perimeter of circle(or circumference), f(r) = 2 * r * pi\n# or f(d) = d * pi, where r is radius, pi is pi ratio(3.14159......),\n# d is diameter\nperi_of_circle = lambda r: 2 * r * math.pi\nperi_of_circle1 = lambda d: d * math.pi",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "peri_of_rt_triangle",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "peri_of_rt_triangle = lambda a, b: a + b + math.sqrt(a ** 2 + b ** 2)\n# perimeter of circle(or circumference), f(r) = 2 * r * pi\n# or f(d) = d * pi, where r is radius, pi is pi ratio(3.14159......),\n# d is diameter\nperi_of_circle = lambda r: 2 * r * math.pi\nperi_of_circle1 = lambda d: d * math.pi\n# Areas\n# or surface area of figure\n# how many lengths into widths and vice versa\n# area of square, f(s) = s * s or (s)squared or s ** 2",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "peri_of_circle",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "peri_of_circle = lambda r: 2 * r * math.pi\nperi_of_circle1 = lambda d: d * math.pi\n# Areas\n# or surface area of figure\n# how many lengths into widths and vice versa\n# area of square, f(s) = s * s or (s)squared or s ** 2\n# where s is the side of square, s is same as both\n# length and width of square\narea_of_square = lambda s: s ** 2\n# area of rectangle, f(L, W) = L * W",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "peri_of_circle1",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "peri_of_circle1 = lambda d: d * math.pi\n# Areas\n# or surface area of figure\n# how many lengths into widths and vice versa\n# area of square, f(s) = s * s or (s)squared or s ** 2\n# where s is the side of square, s is same as both\n# length and width of square\narea_of_square = lambda s: s ** 2\n# area of rectangle, f(L, W) = L * W\n# or length multiplied by width(breadth)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "area_of_square",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "area_of_square = lambda s: s ** 2\n# area of rectangle, f(L, W) = L * W\n# or length multiplied by width(breadth)\narea_of_rectangle = lambda l, w: l * w\n# area of triangle, f(b, h) = b * h / 2\n# where, b is base, and h is the height of triangle\n# see: explaination of area of triangle\n# here:\narea_of_triangle = lambda b, h: (b * h) / 2\n# Heron's formula",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "area_of_rectangle",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "area_of_rectangle = lambda l, w: l * w\n# area of triangle, f(b, h) = b * h / 2\n# where, b is base, and h is the height of triangle\n# see: explaination of area of triangle\n# here:\narea_of_triangle = lambda b, h: (b * h) / 2\n# Heron's formula\n# see for more info: https://en.wikipedia.org/wiki/Heron%27s_formula\narea_of_triangle1 = lambda a, b, c: math.sqrt(\n    (a + b + c) / 2 * ((a + b + c) / 2 - a)((a + b + c) / 2 - b)((a + b + c) / 2 - c)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "area_of_triangle",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "area_of_triangle = lambda b, h: (b * h) / 2\n# Heron's formula\n# see for more info: https://en.wikipedia.org/wiki/Heron%27s_formula\narea_of_triangle1 = lambda a, b, c: math.sqrt(\n    (a + b + c) / 2 * ((a + b + c) / 2 - a)((a + b + c) / 2 - b)((a + b + c) / 2 - c)\n)\n# area of parallelogram, f(b, h) = b * h\n# where b is base, h is height of parallelogram\narea_of_parallelogram = lambda b, h: b * h\n# area of trapezoid(trapezium), f(b1, b2, h) (b1 + b2) / 2 * h",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "area_of_triangle1",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "area_of_triangle1 = lambda a, b, c: math.sqrt(\n    (a + b + c) / 2 * ((a + b + c) / 2 - a)((a + b + c) / 2 - b)((a + b + c) / 2 - c)\n)\n# area of parallelogram, f(b, h) = b * h\n# where b is base, h is height of parallelogram\narea_of_parallelogram = lambda b, h: b * h\n# area of trapezoid(trapezium), f(b1, b2, h) (b1 + b2) / 2 * h\n# where, b1 is base 1, b2 is base 2, and h is height\narea_of_trapezoid = lambda b1, b2, h: (b1 + b2) / 2 * h\n# area of circle, f(r) = pi * r ** 2",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "area_of_parallelogram",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "area_of_parallelogram = lambda b, h: b * h\n# area of trapezoid(trapezium), f(b1, b2, h) (b1 + b2) / 2 * h\n# where, b1 is base 1, b2 is base 2, and h is height\narea_of_trapezoid = lambda b1, b2, h: (b1 + b2) / 2 * h\n# area of circle, f(r) = pi * r ** 2\n# where r is radius, pi is math constant of pi(C/D)\n# see explaination of formula:\n# http://pythagoreanmath.com/complete-explanation-for-area-of-a-circle-formula/\narea_of_circle = lambda r: math.pi * r ** 2\n# Terminal UI",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "area_of_trapezoid",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "area_of_trapezoid = lambda b1, b2, h: (b1 + b2) / 2 * h\n# area of circle, f(r) = pi * r ** 2\n# where r is radius, pi is math constant of pi(C/D)\n# see explaination of formula:\n# http://pythagoreanmath.com/complete-explanation-for-area-of-a-circle-formula/\narea_of_circle = lambda r: math.pi * r ** 2\n# Terminal UI\ni = 0\nwhile True:\n    if raw_input(\"\\n[{}] Exit(press e), Continue(press c): \".format(i)).lower() == \"c\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "area_of_circle",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "area_of_circle = lambda r: math.pi * r ** 2\n# Terminal UI\ni = 0\nwhile True:\n    if raw_input(\"\\n[{}] Exit(press e), Continue(press c): \".format(i)).lower() == \"c\":\n        which_fig = raw_input(\n            \"\\nSquare(s), Rectangle(r), Triangle(t), right(|_)led triangle(rt), Parallelogram(pa), Cricle(ci), Trapezoid(tr): \"\n        ).lower()\n        if which_fig == \"s\":\n            if raw_input(\"\\nArea(press a) or Perimeter(press p): \").lower() == \"a\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "peekOfCode": "i = 0\nwhile True:\n    if raw_input(\"\\n[{}] Exit(press e), Continue(press c): \".format(i)).lower() == \"c\":\n        which_fig = raw_input(\n            \"\\nSquare(s), Rectangle(r), Triangle(t), right(|_)led triangle(rt), Parallelogram(pa), Cricle(ci), Trapezoid(tr): \"\n        ).lower()\n        if which_fig == \"s\":\n            if raw_input(\"\\nArea(press a) or Perimeter(press p): \").lower() == \"a\":\n                print(\n                    \"\\tArea of square: \"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.area_volume_calculator",
        "documentation": {}
    },
    {
        "label": "arithmetic_p_sequence_builder",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.arithmetic_progression_builder",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.arithmetic_progression_builder",
        "peekOfCode": "def arithmetic_p_sequence_builder(a, d, n_last):\n    # To generate an A.P. length should be\n    # greater than or equal to 1\n    if n_last < 1:\n        return -1\n    seq = []\n    # Every item is obtained by\n    # applying the general term formula\n    for n in range(1, n_last + 1):\n        seq.append(a + (n - 1) * d)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.arithmetic_progression_builder",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "peekOfCode": "add = lambda a, b: a + b\nsubtract = lambda a, b: a - b\nmultiply = lambda a, b: a * b\ndivide = lambda a, b: a / b\nmodulus = lambda a, b: a % b\n# CLI\n# Testing/Playing Interface\ni = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "peekOfCode": "subtract = lambda a, b: a - b\nmultiply = lambda a, b: a * b\ndivide = lambda a, b: a / b\nmodulus = lambda a, b: a % b\n# CLI\n# Testing/Playing Interface\ni = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":\n        op = (",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "peekOfCode": "multiply = lambda a, b: a * b\ndivide = lambda a, b: a / b\nmodulus = lambda a, b: a % b\n# CLI\n# Testing/Playing Interface\ni = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":\n        op = (\n            raw_input(",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "peekOfCode": "divide = lambda a, b: a / b\nmodulus = lambda a, b: a % b\n# CLI\n# Testing/Playing Interface\ni = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":\n        op = (\n            raw_input(\n                \"\\nAdd(press a), Subtract(press s), Multiply(press m),\\nDivide(press d), Modulus(press mo): \"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "documentation": {}
    },
    {
        "label": "modulus",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "peekOfCode": "modulus = lambda a, b: a % b\n# CLI\n# Testing/Playing Interface\ni = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":\n        op = (\n            raw_input(\n                \"\\nAdd(press a), Subtract(press s), Multiply(press m),\\nDivide(press d), Modulus(press mo): \"\n            )",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "peekOfCode": "i = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":\n        op = (\n            raw_input(\n                \"\\nAdd(press a), Subtract(press s), Multiply(press m),\\nDivide(press d), Modulus(press mo): \"\n            )\n            .strip()\n            .lower()\n        )",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.calculator",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "peekOfCode": "def E(f, v):\n    return f + v - 2\ndef V(e, f):\n    return e + 2 - f\ndef F(e, v):\n    return e + 2 - v\n# function to evaluate\n# By default datatype of raw_input() is string\nuser = raw_input(\"\\nE, V or F: \").upper()\nprint(\" \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "peekOfCode": "def V(e, f):\n    return e + 2 - f\ndef F(e, v):\n    return e + 2 - v\n# function to evaluate\n# By default datatype of raw_input() is string\nuser = raw_input(\"\\nE, V or F: \").upper()\nprint(\" \")\n# evaluating function asked by user\nif user == \"E\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "peekOfCode": "def F(e, v):\n    return e + 2 - v\n# function to evaluate\n# By default datatype of raw_input() is string\nuser = raw_input(\"\\nE, V or F: \").upper()\nprint(\" \")\n# evaluating function asked by user\nif user == \"E\":\n    print(\"\\nEdges: \" + str(E(input(\"Faces: \"), input(\"Vertices: \"))))\nelif user == \"V\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "peekOfCode": "user = raw_input(\"\\nE, V or F: \").upper()\nprint(\" \")\n# evaluating function asked by user\nif user == \"E\":\n    print(\"\\nEdges: \" + str(E(input(\"Faces: \"), input(\"Vertices: \"))))\nelif user == \"V\":\n    print(\"\\nVertices: \" + str(V(input(\"Edges: \"), input(\"Faces: \"))))\nelif user == \"F\":\n    print(\"\\nFaces: \" + str(F(input(\"Edges: \"), input(\"Vertices: \"))))\nelse:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.eulers_python",
        "documentation": {}
    },
    {
        "label": "geoMean",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.geoMean",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.geoMean",
        "peekOfCode": "geoMean = lambda x, y: math.sqrt(x * y)\nwhile True:\n    if input(\"Start [Y/n]?  \").strip().lower() == \"y\":\n        print(\n            \" [Res] = \"\n            + str(geoMean(float(input(\"\\nX? \")), float(input(\"Y? \"))))\n            + \"\\n\\n\"\n        )\n    else:\n        print(\"\\n\\nGoodBye!\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.geoMean",
        "documentation": {}
    },
    {
        "label": "geoMean",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.Mean",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.Mean",
        "peekOfCode": "geoMean = lambda x, y: math.sqrt(x * y)\nwhile True:\n    if input(\"Start [Y/n]?  \").strip().lower() == \"y\":\n        print(\n            \" [Res] = \"\n            + str(geoMean(float(input(\"\\nX? \")), float(input(\"Y? \"))))\n            + \"\\n\\n\"\n        )\n    else:\n        print(\"\\n\\nGoodBye!\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.Mean",
        "documentation": {}
    },
    {
        "label": "pos_neg_zero",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.math.number_lesser_greater",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.math.number_lesser_greater",
        "peekOfCode": "def pos_neg_zero(x):\n    if x < 0:\n        return \"Negative\"\n    elif x > 0:\n        return \"Positive\"\n    return \"Zero\"\nwhile True:\n    if str(raw_input(\" Start [Y/n]?  \")).strip().lower() == \"y\":\n        print(\"    [Num] = \" + pos_neg_zero(float(raw_input(\" Number:  \"))) + \"\\n\")\n    else:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.math.number_lesser_greater",
        "documentation": {}
    },
    {
        "label": "ping",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.network.are_you_connected_to_world",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.network.are_you_connected_to_world",
        "peekOfCode": "def ping(host):\n    instr = \"ping -c 1 %s\" % (host)\n    response = os.system(instr)\n    return response == 0\n# Finite state loop if\n# computer re-connects to network\n# else will run till re-conn\ndef you_cant_be_dead(host):\n    if not ping(host):\n        # Status update",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.network.are_you_connected_to_world",
        "documentation": {}
    },
    {
        "label": "you_cant_be_dead",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.network.are_you_connected_to_world",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.network.are_you_connected_to_world",
        "peekOfCode": "def you_cant_be_dead(host):\n    if not ping(host):\n        # Status update\n        print(\"  [.] Status -> Not connected to network\")\n        print(\"  / CONSTANTLY Re-CHECKING CONNECTIVITY... /\")\n        while True:\n            if not ping(host):\n                continue\n            else:\n                break",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.network.are_you_connected_to_world",
        "documentation": {}
    },
    {
        "label": "exit_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.network.are_you_connected_to_world",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.network.are_you_connected_to_world",
        "peekOfCode": "def exit_(status):\n    if status == 0 or status == 1:\n        print(\"\\n ~ See you soon!\")\n        sys.exit(status)\n    else:\n        return None\n# User\n# Shell Interface\nwhile True:\n    if raw_input(\"\\nStart [Y/n]? \").strip().lower() == \"y\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.network.are_you_connected_to_world",
        "documentation": {}
    },
    {
        "label": "BattleShip",
        "kind": 6,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.battleship",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.battleship",
        "peekOfCode": "class BattleShip:\n    def __init__(self, rows_grid, columns_grid, co_ord_symbol):\n        # Initializes battleship board of n * m size\n        self.board = self.create_board(rows_grid, columns_grid, co_ord_symbol)\n        # Placing ship randomly on board x refers to\n        # array, y refers to index in array\n        self.ship_x = randint(0, rows_grid)\n        self.ship_y = randint(0, columns_grid)\n    def create_board(self, x_length, y_length, co_ord_symbol=\"o \"):\n        # creates a multi-dimensional array of",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.battleship",
        "documentation": {}
    },
    {
        "label": "battleshipUI",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.battleship",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.battleship",
        "peekOfCode": "def battleshipUI():\n    # Maximum n turns for player to guess the position of ship\n    max_turns = 5\n    turns = 0\n    # Board of rows * columns for playing\n    rows = int(input(\"How many rows? \"))\n    cols = int(input(\"How many columns? \"))\n    lets_battle = BattleShip(rows, cols, \"o \")\n    # Execute until user runs out of chances\n    while turns < max_turns:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.battleship",
        "documentation": {}
    },
    {
        "label": "DiceRollSim",
        "kind": 6,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.dice_rolling_simulator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.dice_rolling_simulator",
        "peekOfCode": "class DiceRollSim:\n    def __init__(self, no_of_players, no_of_dies):\n        self.players = self.assign_names(no_of_players)\n        self.die_n = no_of_dies\n    def assign_names(self, n):\n        # Assigns names to 'n' players playing\n        dict_players = {}\n        # All members are indentified by name\n        # and not number\n        for i in range(n):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.dice_rolling_simulator",
        "documentation": {}
    },
    {
        "label": "main_interface",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.dice_rolling_simulator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.dice_rolling_simulator",
        "peekOfCode": "def main_interface():\n    # Indroductions\n    print(\" \" * 7 + \"| Dice Rolling Simulator | \\n\\n\")\n    # Initializations/Declarations\n    players_n = abs(int(input(\"> How many players?  \")))\n    die_n = abs(int(input(\"> Number of dies?  \")))\n    print(\"\\n\\n\")\n    die_rolling_simulator = DiceRollSim(players_n, die_n)\n    print(\"\\nNumber of players playing -> %d\\nWith %d dies.\" % (players_n, die_n))\n    # And the game begins",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.dice_rolling_simulator",
        "documentation": {}
    },
    {
        "label": "get_guess",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.number_guessing_game",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.number_guessing_game",
        "peekOfCode": "def get_guess():\n    while True:  # Run forever, until broken\n        try:  # Try the following, if fails, run the except statment\n            user_input = int(\n                input(\"Guess a number: \")\n            )  # Get user input and covert it to an int (number)\n            break  # If the input can be converted, break the loop\n        except ValueError:  # This runs if the input could not be converted - text was entered\n            print(\n                \"Enter a number!\\n\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.number_guessing_game",
        "documentation": {}
    },
    {
        "label": "MAX_",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.number_guessing_game",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.number_guessing_game",
        "peekOfCode": "MAX_ = 500  # Specify biggest possible value from random number generation\n# Asks user for a guess and returns this when successful\ndef get_guess():\n    while True:  # Run forever, until broken\n        try:  # Try the following, if fails, run the except statment\n            user_input = int(\n                input(\"Guess a number: \")\n            )  # Get user input and covert it to an int (number)\n            break  # If the input can be converted, break the loop\n        except ValueError:  # This runs if the input could not be converted - text was entered",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.number_guessing_game",
        "documentation": {}
    },
    {
        "label": "num_to_guess",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.number_guessing_game",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.number_guessing_game",
        "peekOfCode": "num_to_guess = randint(0, MAX_)  # Generates a random number between 0 and value of MAX_\nprint(\n    \"Welcome to my random number guessing game!\\nGuess a number between 0 and \",\n    MAX_,\n    \"\\n\",\n)\nwhile True:\n    guess = get_guess()\n    if guess >= 0 and guess <= MAX_:  # Check if guess between 0 and max\n        # Correct number!",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.shell_games.number_guessing_game",
        "documentation": {}
    },
    {
        "label": "add_numbers",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.args_example",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.args_example",
        "peekOfCode": "def add_numbers(*args):\n    res = 0\n    for i in args:\n        res += i\n    return res\n# Quick Test\nt1 = add_numbers(123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87)\nif t1 == sum([123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87]):\n    print(\"Sum: \" + str(t1))\nelse:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.args_example",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.args_example",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.args_example",
        "peekOfCode": "t1 = add_numbers(123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87)\nif t1 == sum([123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87]):\n    print(\"Sum: \" + str(t1))\nelse:\n    print(\"Something went wrong!\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.args_example",
        "documentation": {}
    },
    {
        "label": "squared",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.args_example_1",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.args_example_1",
        "peekOfCode": "def squared(*params):\n    for arg in params:\n        yield ((arg, arg % 2 == 0))\n# Quick Test\nprint(\"Divisibility Test(by 2): \")\nfor n, bool_ in squared(12, 13, 34, 4576, 234536, 2341):\n    if bool_:\n        print(\"  [\" + str(n) + \"] -> is divisible by 2!\")\n    else:\n        print(\"  [\" + str(n) + \"] -> is NOT divisible by 2!\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.args_example_1",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_animal_attributes_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_animal_attributes_examples",
        "peekOfCode": "class Animal:\n    def __init__(self, species, name, legs, color, voices):\n        self.species = species\n        self.name = name\n        self.legs = legs\n        self.color = color\n        self.voices = voices\ncat = Animal(\"Cat\", \"Pussy-Cat\", 4, \"white\", \"meow\")\ndog = Animal(\"Dog\", \"Cloudy\", 4, \"brownie\", \"bark\")\nprint(\"Species of animal : \", dog.species)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_animal_attributes_examples",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_animal_attributes_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_animal_attributes_examples",
        "peekOfCode": "cat = Animal(\"Cat\", \"Pussy-Cat\", 4, \"white\", \"meow\")\ndog = Animal(\"Dog\", \"Cloudy\", 4, \"brownie\", \"bark\")\nprint(\"Species of animal : \", dog.species)\nprint(\"name of animal : \", dog.name)\nprint(\"no. of legs       : \", dog.legs)\nprint(\"color of animal : \", dog.color)\nprint(\"voice of animal : \", dog.voices)\nprint(\"  \")\nprint(\"Species of animal : \", cat.species)\nprint(\"name of animal : \", cat.name)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_animal_attributes_examples",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_animal_attributes_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_animal_attributes_examples",
        "peekOfCode": "dog = Animal(\"Dog\", \"Cloudy\", 4, \"brownie\", \"bark\")\nprint(\"Species of animal : \", dog.species)\nprint(\"name of animal : \", dog.name)\nprint(\"no. of legs       : \", dog.legs)\nprint(\"color of animal : \", dog.color)\nprint(\"voice of animal : \", dog.voices)\nprint(\"  \")\nprint(\"Species of animal : \", cat.species)\nprint(\"name of animal : \", cat.name)\nprint(\"no. of legs        : \", cat.legs)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_animal_attributes_examples",
        "documentation": {}
    },
    {
        "label": "movie",
        "kind": 6,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_example_movies",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_example_movies",
        "peekOfCode": "class movie:\n    def __init__(self, name, rating, director, budget, description):\n        self.name = name\n        self.rating = rating\n        self.director = director\n        self.budget = budget\n        self.description = description\n    def good_movie(self):\n        if self.rating >= 4:\n            return \"It's a good movie.\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_example_movies",
        "documentation": {}
    },
    {
        "label": "toy_story",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_example_movies",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_example_movies",
        "peekOfCode": "toy_story = movie(\n    \"ToyStory2\",\n    4,\n    \"John Lasseter , Lee Unkrich , Ash Brannon\",\n    \"90 millon USD\",\n    \"\"\"When Woody is toy-napped by a greedy toy collector and is nowhere to be found, Buzz and his friends set out to rescue him.But Woody too is tempted by the idea of becoming immortal in a museum.\n\"\"\",\n)\nprint(\"Title : \" + str(toy_story.name))\nprint(\"Rating : \" + str(toy_story.rating))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_example_movies",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_movies",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_movies",
        "peekOfCode": "class Movie:\n    def __init__(self, name, rating, director, budget, description):\n        self.name = name\n        self.rating = rating\n        self.director = director\n        self.budget = budget\n        self.description = description\n    def good_movie(self):\n        if self.rating >= 4:\n            return \"Good Movie\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_movies",
        "documentation": {}
    },
    {
        "label": "toy_story",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_movies",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_movies",
        "peekOfCode": "toy_story = Movie(\n    \"ToyStory2\",\n    4,\n    \"John Lasseter , Lee Unkrich , Ash Brannon\",\n    \"90 millon USD\",\n    \"When Woody is toy-napped by a greedy toy collector and is nowhere to be found, \\nBuzz and his friends set out to rescue him.\\nBut Woody too is tempted by the idea of becoming immortal in a museum.\",\n)\nprint(\"Title : \" + toy_story.name)\nprint(\"Rating : \" + str(toy_story.rating))\nprint(\"Director : \" + toy_story.director)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.class_movies",
        "documentation": {}
    },
    {
        "label": "robotMoving",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "robotMoving = True\nif robotMoving == True:\n\tprint('Move 20 steps')\n# Okay what about if robot is not moving\n# This is where else : statement comes in \nrobotMoving = False\nelse :\n\tprint('You are not moving')\t\n# elif \n# What if there are multiple things to check like if",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "robotMoving",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "robotMoving = False\nelse :\n\tprint('You are not moving')\t\n# elif \n# What if there are multiple things to check like if\n# We need more if statements but each if will run\n# Thus we need elif(else if) statement \n# Only else : statements dont contain values to check\nstart = str(input('Enter a or b or c : '))\n# we need to check if entered value is equal to a or b or c",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "start = str(input('Enter a or b or c : '))\n# we need to check if entered value is equal to a or b or c\nif start == 'a':\n\tprint('You entered ' + start)\nelif start == 'b':\n\tprint('You entered ' + start)\nelif start == 'c':\n\tprint('You entered ' + start)\t\nelse:\n\tprint('Invalid Input')",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "numsA",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "numsA = input('Enter a : ')\nnumsB = input('Enter b : ')\nif numsA > numsB:\n\tprint(str(numsA) + ' is greater than ' + str(numsB))\nelif numsA < numsB:\t\n\tprint(str(numsB) + ' is greater than ' + str(numsA))\nelse : \n\tprint('Numbers are equal')\t\n# nested if else\n# You can nest conditionals inside other conditionals",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "numsB",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "numsB = input('Enter b : ')\nif numsA > numsB:\n\tprint(str(numsA) + ' is greater than ' + str(numsB))\nelif numsA < numsB:\t\n\tprint(str(numsB) + ' is greater than ' + str(numsA))\nelse : \n\tprint('Numbers are equal')\t\n# nested if else\n# You can nest conditionals inside other conditionals\nstartProgram = True",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "startProgram",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "startProgram = True\nnumsA = input('Enter a : ')\nnumsB = input('Enter b : ')\nif startProgram == True:\n\tif numsA > numsB:\n\t\tprint(str(numsA) + ' is greater than ' + str(numsB))\n\telif numsA < numsB:\t\n\t\tprint(str(numsB) + ' is greater than ' + str(numsA))\n\telse : \n\t\tprint('Numbers are equal')",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "numsA",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "numsA = input('Enter a : ')\nnumsB = input('Enter b : ')\nif startProgram == True:\n\tif numsA > numsB:\n\t\tprint(str(numsA) + ' is greater than ' + str(numsB))\n\telif numsA < numsB:\t\n\t\tprint(str(numsB) + ' is greater than ' + str(numsA))\n\telse : \n\t\tprint('Numbers are equal')\nelse:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "numsB",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "numsB = input('Enter b : ')\nif startProgram == True:\n\tif numsA > numsB:\n\t\tprint(str(numsA) + ' is greater than ' + str(numsB))\n\telif numsA < numsB:\t\n\t\tprint(str(numsB) + ' is greater than ' + str(numsA))\n\telse : \n\t\tprint('Numbers are equal')\nelse:\n\tprint('Can\\'t access program')\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "youHaveBike",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "youHaveBike = True\nfuel = 30 \nif youHaveBike == True and  fuel > 65:\n\tprint('You are good to go')\nelse:\n\tprint('You need to refill fuel')\n# or\nextraFuel = True\nif extraFuel = True or  fuel > 65:\n\tprint('You are good to go')",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "fuel",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "fuel = 30 \nif youHaveBike == True and  fuel > 65:\n\tprint('You are good to go')\nelse:\n\tprint('You need to refill fuel')\n# or\nextraFuel = True\nif extraFuel = True or  fuel > 65:\n\tprint('You are good to go')\nelse:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "extraFuel",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "extraFuel = True\nif extraFuel = True or  fuel > 65:\n\tprint('You are good to go')\nelse:\n\tprint('You need to refill fuel')\n# not\nnumber = 12\nif not(number != 11):\n\tprint('True')\nelse:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "peekOfCode": "number = 12\nif not(number != 11):\n\tprint('True')\nelse:\n\tprint('False')",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.for_loop_mountain",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.for_loop_mountain",
        "peekOfCode": "n = int(raw_input(\"How big? \"))\n# Building block of our mountain of money\ns = \"$\"\n# Process for constructing mountain\n# Since n = 4,\n# range (1, n+1) would be all the integers from 1 to 4 including 1 and 4\n# Mountain formed would be:\n#    $    i = 1,   ' ' * n-i = 4-1 = 3  is empty space taken 3 times,    s*i is '$' taken once(i times)\n#   $$    i = 2,   ' ' * n-i = 4-2 = 2  ,  s*i is '$' taken twice(i times)\n#  $$$    and so on",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.for_loop_mountain",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.for_loop_mountain",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.for_loop_mountain",
        "peekOfCode": "s = \"$\"\n# Process for constructing mountain\n# Since n = 4,\n# range (1, n+1) would be all the integers from 1 to 4 including 1 and 4\n# Mountain formed would be:\n#    $    i = 1,   ' ' * n-i = 4-1 = 3  is empty space taken 3 times,    s*i is '$' taken once(i times)\n#   $$    i = 2,   ' ' * n-i = 4-2 = 2  ,  s*i is '$' taken twice(i times)\n#  $$$    and so on\n# $$$$\n# Again, notice how i and n change for each iteration",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.for_loop_mountain",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.for_loop_mountain",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.for_loop_mountain",
        "peekOfCode": "s = \"$$\"\nfor i in range(1, n + 1):\n    print(\" \" * (n - i) + s * i)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.for_loop_mountain",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.ListExample",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.ListExample",
        "peekOfCode": "my_list = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n# Output: p\nprint(my_list[0])\n# Output: t\nprint(my_list[2])\n# Output: o\nprint(my_list[4])\n# Error! Only integer can be used for indexing\n# my_list[4.0]\n# Nested List",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.ListExample",
        "documentation": {}
    },
    {
        "label": "n_list",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.ListExample",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.ListExample",
        "peekOfCode": "n_list = [\"Happy\", [2, 0, 1, 5]]\n# Nested indexing\n# Output: a\nprint(n_list[0][1])\n# Output: 5\nprint(n_list[1][3])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.ListExample",
        "documentation": {}
    },
    {
        "label": "personalities",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.personality_teller",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.personality_teller",
        "peekOfCode": "personalities = [\n    \"Arrogant and Rude\",\n    \"Funny and Polite\",\n    \"Insane and Crazy\",\n    \"Lover and Cute\",\n    \"Nerd and Boring\",\n    \"Cool and Rude\",\n    \"Cute but arrogant\",\n    \"Intelligent and Geek\",\n    \"Cool and Funny\",",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.personality_teller",
        "documentation": {}
    },
    {
        "label": "get_ascii",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.unicode",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.unicode",
        "peekOfCode": "def get_ascii(S):\n    # even if string has only 1 character\n    # it yields same for all\n    if len(S) > 0:\n        for char_ in list(S):\n            yield ((char_, ord(char_)))\n    # ord returns unicode value of given string of length 1\n    # we only increased it's capacity\n    # simple ..eh\n# test",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.unicode",
        "documentation": {}
    },
    {
        "label": "test_characters",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.unicode",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.unicode",
        "peekOfCode": "test_characters = [\"A\", \"x\", \"Y\", \"Z\", \"m\", \"K\", \"STack\"]\nfor test_case in test_characters:\n    print(\"Test Case: \" + test_case)\n    codes = list(get_ascii(test_case))\n    for code in codes:\n        print(\"  character: {}, unicode_val: {}\".format(code[0], code[1]))\n    print(\" \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.unicode",
        "documentation": {}
    },
    {
        "label": "open_website",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.website_opener",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.website_opener",
        "peekOfCode": "def open_website(link):\n    try:\n        print(\"Opening link: \" + link)\n        web_open(link)\n    except Exception as e:\n        print(\"Error Occurred:\\n {}\".format(e))\n# Just for test\nget_link = raw_input(\"Link to open: \")\nopen_website(get_link)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.website_opener",
        "documentation": {}
    },
    {
        "label": "get_link",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.website_opener",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.website_opener",
        "peekOfCode": "get_link = raw_input(\"Link to open: \")\nopen_website(get_link)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.simple_scripts.website_opener",
        "documentation": {}
    },
    {
        "label": "binary_to_decimal_conv",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.binary_to_decimal_conversion",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.binary_to_decimal_conversion",
        "peekOfCode": "def binary_to_decimal_conv(binary_string):\n    res = 0\n    binary_l = list(binary_string)\n    for bit_i in range(len(binary_l)):\n        res += int(binary_l[bit_i]) * (2 ** bit_i)\n    return res\n# Test\n# Testing interface\ni = 0\nwhile True:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.binary_to_decimal_conversion",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.binary_to_decimal_conversion",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.binary_to_decimal_conversion",
        "peekOfCode": "i = 0\nwhile True:\n    if (\n        raw_input(\"\\n[{}] Exit(press e) or Continue(press c): \".format(i))\n        .strip()\n        .lower()\n        == \"c\"\n    ):\n        print(\"Decimal form: \" + str(binary_to_decimal_conv(raw_input(\"\\nBinary?: \"))))\n    else:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.binary_to_decimal_conversion",
        "documentation": {}
    },
    {
        "label": "body_mass_index",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.bmi_body_mass_index_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.bmi_body_mass_index_calculator",
        "peekOfCode": "body_mass_index = lambda w, h: round((w) / ((h * 0.01) ** 2), 1)\n# Test\n# Playing/Testing Interface\ni = 0\nwhile True:\n    if (\n        raw_input(\"\\n[{}] Exit(press e) or To count BMI(press c):\".format(i))\n        .strip()\n        .lower()\n        == \"c\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.bmi_body_mass_index_calculator",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.bmi_body_mass_index_calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.bmi_body_mass_index_calculator",
        "peekOfCode": "i = 0\nwhile True:\n    if (\n        raw_input(\"\\n[{}] Exit(press e) or To count BMI(press c):\".format(i))\n        .strip()\n        .lower()\n        == \"c\"\n    ):\n        cal = body_mass_index(\n            float(raw_input(\"\\nWeight(in kgs)?: \")),",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.bmi_body_mass_index_calculator",
        "documentation": {}
    },
    {
        "label": "caesars_cipher_encoding",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.caesars_cipher_encryption",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.caesars_cipher_encryption",
        "peekOfCode": "def caesars_cipher_encoding(s, k, lowercase=True, uppercase=False):\n    # To encrypt plain text in either\n    # uppercase letters or lowercase letters\n    if lowercase:\n        alphas = list(string.lowercase)\n    elif uppercase:\n        alphas = list(string.uppercase)\n    encrypted = \"\"\n    # List characters in orignal string\n    char_s = list(s)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.caesars_cipher_encryption",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.caesars_cipher_encryption",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.caesars_cipher_encryption",
        "peekOfCode": "i = 0\nwhile True:\n    if raw_input(\"[{}] Exit(press e), To continue(press c): \".format(i)).lower() == \"c\":\n        # Number of times\n        i += 1\n        # Input for String and key for char shift\n        S, K = raw_input(\"\\nString: \"), int(raw_input(\"Key: \"))\n        # Results\n        print(\"\\nOrignal string: \" + S + \" ,  Key: \" + str(K))\n        print(\"Encrypted text: \" + caesars_cipher_encoding(S, K, True, False) + \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.caesars_cipher_encryption",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "peekOfCode": "add = lambda a, b: a + b\nsubtract = lambda a, b: a - b\nmultiply = lambda a, b: a * b\ndivide = lambda a, b: a / b\nmodulus = lambda a, b: a % b\n# CLI\n# Testing/Playing Interface\ni = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "peekOfCode": "subtract = lambda a, b: a - b\nmultiply = lambda a, b: a * b\ndivide = lambda a, b: a / b\nmodulus = lambda a, b: a % b\n# CLI\n# Testing/Playing Interface\ni = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":\n        op = (",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "peekOfCode": "multiply = lambda a, b: a * b\ndivide = lambda a, b: a / b\nmodulus = lambda a, b: a % b\n# CLI\n# Testing/Playing Interface\ni = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":\n        op = (\n            raw_input(",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "peekOfCode": "divide = lambda a, b: a / b\nmodulus = lambda a, b: a % b\n# CLI\n# Testing/Playing Interface\ni = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":\n        op = (\n            raw_input(\n                \"\\nAdd(press a), Subtract(press s), Multiply(press m),\\nDivide(press d), Modulus(press mo): \"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "documentation": {}
    },
    {
        "label": "modulus",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "peekOfCode": "modulus = lambda a, b: a % b\n# CLI\n# Testing/Playing Interface\ni = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":\n        op = (\n            raw_input(\n                \"\\nAdd(press a), Subtract(press s), Multiply(press m),\\nDivide(press d), Modulus(press mo): \"\n            )",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "peekOfCode": "i = 0\nwhile True:\n    if raw_input(\"\\n\\n[{}] Exit(press e) or Calculate(press c): \".format(i)) == \"c\":\n        op = (\n            raw_input(\n                \"\\nAdd(press a), Subtract(press s), Multiply(press m),\\nDivide(press d), Modulus(press mo): \"\n            )\n            .strip()\n            .lower()\n        )",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calculator",
        "documentation": {}
    },
    {
        "label": "viewCalender",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calendar",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calendar",
        "peekOfCode": "viewCalender = lambda yy, mm: print(\"\\n\\n Calendar > \\n %s\\n\" % calendar.month(yy, mm))\n# UI\nwhile True:\n    if str(input(\"[+] Start [Y/n] ?  \")).strip().lower() == \"y\":\n        try:\n            viewCalender(int(input(\"\\nYear: \")), int(input(\"Month: \")))\n        except IndexError:\n            print(\"  -> Try Again! With valid numbers!\\n\")\n    else:\n        print(\"\\nSee Ya Soon!\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.calendar",
        "documentation": {}
    },
    {
        "label": "generate_random_password",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.password_generator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.password_generator",
        "peekOfCode": "def generate_random_password(n):\n    # For password to be strong it should\n    # be at least 8 characters long\n    if n < 8:\n        return \"Invalid Input,\\nPassword should be at least 8 characters long!\"\n    # Chooses a random character from data_set\n    # after password of given length is created\n    # returns it to user\n    password = \"\"\n    for x in range(n):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.password_generator",
        "documentation": {}
    },
    {
        "label": "data_set",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.password_generator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.password_generator",
        "peekOfCode": "data_set = list(string.ascii_letters) + list(string.digits) + list(string.punctuation)\n# generates a random password\n# very strong due to random ness\n# primary protection against dictionary attack on hash tables\ndef generate_random_password(n):\n    # For password to be strong it should\n    # be at least 8 characters long\n    if n < 8:\n        return \"Invalid Input,\\nPassword should be at least 8 characters long!\"\n    # Chooses a random character from data_set",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.password_generator",
        "documentation": {}
    },
    {
        "label": "timer",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.timer",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.timer",
        "peekOfCode": "def timer(s, hrs, mins, secs):\n    # Convert time into seconds\n    _n = secs + mins * 60 + hrs * 60 * 60\n    print(\"\\nTimer Started...\")\n    print(\"> Countdown for: %i hours:%i minutes:%i seconds\" % (hrs, mins, secs))\n    # This is where real timer works\n    # -0.01 is assumed time for execution of above instructions\n    time.sleep(_n - 0.01)\n    print(\"Time's up!\")\n    print(\"...\\...Playing Sound.../...\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.useful_scripts.timer",
        "documentation": {}
    },
    {
        "label": "complementary",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Angle",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Angle",
        "peekOfCode": "def complementary():\n    while True:\n        complementary = float(input(\"Complementary of : \"))\n        if complementary <= 90:\n            complement = 90 - complementary\n            return complement\n            break\n        else:\n            print(\"Number greater than 90 degree. Try again\")\n            continue",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Angle",
        "documentation": {}
    },
    {
        "label": "supplementary",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Angle",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Angle",
        "peekOfCode": "def supplementary():\n    while True:\n        supplementary = float(input(\"Supplementary of : \"))\n        if supplementary <= 180:\n            supplement = 180 - supplementary\n            return supplement\n            break\n        else:\n            print(\"Number greater than 180 degree. Try again\")\n            continue",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Angle",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.armstrong_number",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.armstrong_number",
        "peekOfCode": "num = int(input(\"Enter a number: \"))\n# initialize sum\nsum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n# display the result",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.armstrong_number",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.armstrong_number",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.armstrong_number",
        "peekOfCode": "sum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n# display the result\nif num == sum:\n    print(num, \"is an Armstrong number.\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.armstrong_number",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.armstrong_number",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.armstrong_number",
        "peekOfCode": "temp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n# display the result\nif num == sum:\n    print(num, \"is an Armstrong number.\")\nelse:\n    print(num, \"is not an Armstrong number.\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.armstrong_number",
        "documentation": {}
    },
    {
        "label": "avgSums",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "peekOfCode": "def avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "peekOfCode": "m = [1, 43, 656, 8, 54, 908, 4, 5, 23, 78, 435, 89, 45, 476, 89]\nn = [234, 56, 90, 675, 56, 786, 90, 564, 8, 657, 87, 64, 354, 2, 75]\nq = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "peekOfCode": "n = [234, 56, 90, 675, 56, 786, 90, 564, 8, 657, 87, 64, 354, 2, 75]\nq = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "peekOfCode": "q = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Average",
        "documentation": {}
    },
    {
        "label": "addMoney",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "peekOfCode": "def addMoney():\n    print(\" \")\n    userAdd = float(raw_input(\"Add money : \"))\n    print(\" \")\n    money = money + userAdd\n    print(\"After adding current Money you have is \" + str(money) + \" rupees\")\n# function to withdraw money from current amount\ndef withdrawMoney():\n    print(\" \")\n    userWithdraw = float(raw_input(\"Add money : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "documentation": {}
    },
    {
        "label": "withdrawMoney",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "peekOfCode": "def withdrawMoney():\n    print(\" \")\n    userWithdraw = float(raw_input(\"Add money : \"))\n    print(\" \")\n    money = money + userWithdraw\n    print(\"After adding current Money you have is \" + str(money) + \" rupees\")\n# function to display current amount\ndef currentMoney():\n    print(\" \")\n    current = \"Current money you have is \" + str(money) + \" rupees\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "documentation": {}
    },
    {
        "label": "currentMoney",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "peekOfCode": "def currentMoney():\n    print(\" \")\n    current = \"Current money you have is \" + str(money) + \" rupees\"\n# main code\nprint(\" \")\nprint(\"--------------------Start-------------------\")\nwhile True:\n    print(\" \")\n    user = raw_input(\"Start or End : \")\n    if user.strip() == \"Start\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "documentation": {}
    },
    {
        "label": "money",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "peekOfCode": "money = 0\n# function to add money to current amount\ndef addMoney():\n    print(\" \")\n    userAdd = float(raw_input(\"Add money : \"))\n    print(\" \")\n    money = money + userAdd\n    print(\"After adding current Money you have is \" + str(money) + \" rupees\")\n# function to withdraw money from current amount\ndef withdrawMoney():",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Bank",
        "documentation": {}
    },
    {
        "label": "percentToOrig",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Calc",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Calc",
        "peekOfCode": "def percentToOrig():\n    whatPercent = float(input(\"What Percent : \"))\n    ofWhat = float(input(\"Of What Percent : \"))\n    orignal = whatPercent / 100 * ofWhat\n    print(orignal)\nprint(percentToOrig())",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Calc",
        "documentation": {}
    },
    {
        "label": "determine_quadrant",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.cartesian_plane_quadrant",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.cartesian_plane_quadrant",
        "peekOfCode": "def determine_quadrant(x, y):\n    try:\n        if x > 0 and y > 0:\n            return \"I(+,+)\"\n        elif x < 0 and y > 0:\n            return \"II(-,+)\"\n        elif x < 0 and y < 0:\n            return \"III(-,-)\"\n        elif x > 0 and y < 0:\n            return \"IV(+,-)\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.cartesian_plane_quadrant",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.cartesian_plane_quadrant",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.cartesian_plane_quadrant",
        "peekOfCode": "result = determine_quadrant(\n    float(input(\"X co-ordinate: \")), float(input(\"Y co-ordinate: \"))\n)\nprint(\"Quadrant is \" + result)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.cartesian_plane_quadrant",
        "documentation": {}
    },
    {
        "label": "count_cpu_microtime",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.count_algorithm_execution_time",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.count_algorithm_execution_time",
        "peekOfCode": "def count_cpu_microtime(func_name, *args):\n    tmp = [i for i in args]\n    t1 = datetime.now().microsecond\n    func_name(*tmp)\n    time_took = datetime.now().microsecond - t1\n    return round(time_took, 5)\n# Testing\n# \"Test\" algorithm\ndef binary_search(array, n):\n    arr = sorted(array)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.count_algorithm_execution_time",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.count_algorithm_execution_time",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.count_algorithm_execution_time",
        "peekOfCode": "def binary_search(array, n):\n    arr = sorted(array)\n    to_return = False\n    first_elem = 0\n    last_elem = len(arr) - 1\n    while first_elem <= last_elem:\n        mid = (first_elem + last_elem) // 2\n        if arr[mid] == n:\n            to_return = True\n            break",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.count_algorithm_execution_time",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.count_algorithm_execution_time",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.count_algorithm_execution_time",
        "peekOfCode": "result = count_cpu_microtime(binary_search, [12, 324, 23, 213, 3, 2, 1], 1)\nprint(str(result) + \" microsecs\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.count_algorithm_execution_time",
        "documentation": {}
    },
    {
        "label": "daysBetweenDates",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.days_you_lived",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.days_you_lived",
        "peekOfCode": "def daysBetweenDates(year1, month1, day1, year2, month2, day2):\n    dom = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    domleap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if isleap(year1) and isleap(year2):\n        e1 = sum(domleap) + sum(domleap[: month1 - 1]) + day1\n        e2 = sum(domleap) + sum(domleap[: month2 - 1]) + day2\n        return e2 - e1\n    days = 0\n    if isleap(year1):\n        days += (sum(domleap[month1 - 1 :]) - day1) + sum(dom[: month2 - 1]) + day2",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.days_you_lived",
        "documentation": {}
    },
    {
        "label": "concat",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.decimal_to_binary_converter",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.decimal_to_binary_converter",
        "peekOfCode": "def concat(S):\n    res = \"\"\n    for i in S:\n        if not isinstance(i, str):\n            res += str(i)\n        else:\n            res += i\n    return res\n# Simple Base 10 number(Decimal) number converter to Base 2 number(binary) number\n# Function returns answer in str datatype",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.decimal_to_binary_converter",
        "documentation": {}
    },
    {
        "label": "decimal_to_binary",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.decimal_to_binary_converter",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.decimal_to_binary_converter",
        "peekOfCode": "def decimal_to_binary(n):\n    res = []\n    while n != 0:\n        res.append(n % 2)\n        n = n // 2\n    final = concat(res) + \"0\"\n    return final[::-1]\n# Test\ncases = [123, 23455, 253552, 87985, 3479434, 76, 246572, 231, 69, 2, 7, 2, 543]\nfor case in cases:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.decimal_to_binary_converter",
        "documentation": {}
    },
    {
        "label": "cases",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.decimal_to_binary_converter",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.decimal_to_binary_converter",
        "peekOfCode": "cases = [123, 23455, 253552, 87985, 3479434, 76, 246572, 231, 69, 2, 7, 2, 543]\nfor case in cases:\n    built_in = str(bin(case))[2:]\n    my_func = decimal_to_binary(case)[1:]  # For test purposes\n    if built_in == my_func:\n        print(\"Decimal: \" + str(case))\n        print(\"Binary: \" + my_func + \"\\nTest Passed!\\n\")\n    else:\n        print(\"Test Failed! Badly!!\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.decimal_to_binary_converter",
        "documentation": {}
    },
    {
        "label": "concat_elements",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "peekOfCode": "def concat_elements(n):\n    res = \"\"\n    for i in n:\n        res += i\n    return res\ndef decrypt(message, key):\n    string_chars = (\n        list(string.ascii_uppercase)\n        + list(string.ascii_lowercase)\n        + list(string.digits)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "decrypt",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "peekOfCode": "def decrypt(message, key):\n    string_chars = (\n        list(string.ascii_uppercase)\n        + list(string.ascii_lowercase)\n        + list(string.digits)\n        + list(string.punctuation)\n        + [\" \"]\n    )\n    try:\n        splitted_message = list(message)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "decrypt_generator",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "peekOfCode": "def decrypt_generator(message, n):\n    # range(0, 96) because len(string_chars) == 95\n    for i in range(0, n + 1):\n        case = decrypt(message, i)\n        yield case\n# Test\ntest_case = \"lq01Ir1I2xyI1ncrn2*\"\nresult = decrypt(test_case, 9)\nprint(\"Decrypted Text: \" + result, \"\\n\")\n_result = list(decrypt_generator(test_case, 95))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "test_case",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "peekOfCode": "test_case = \"lq01Ir1I2xyI1ncrn2*\"\nresult = decrypt(test_case, 9)\nprint(\"Decrypted Text: \" + result, \"\\n\")\n_result = list(decrypt_generator(test_case, 95))\nfor res in _result:\n    print(\"Possible text: \" + res)\n# Look at ninth result",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "peekOfCode": "result = decrypt(test_case, 9)\nprint(\"Decrypted Text: \" + result, \"\\n\")\n_result = list(decrypt_generator(test_case, 95))\nfor res in _result:\n    print(\"Possible text: \" + res)\n# Look at ninth result",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "_result",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "peekOfCode": "_result = list(decrypt_generator(test_case, 95))\nfor res in _result:\n    print(\"Possible text: \" + res)\n# Look at ninth result",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "peekOfCode": "a = {1, 23, 55, 76, 13, 90, 34, 78}\nb = {12, 345, 8, 4, 0, 7, 4, 3, 53, 4, 6, 3}\nabInteraction = a & b  # & operator interacts two sets\nabUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "peekOfCode": "b = {12, 345, 8, 4, 0, 7, 4, 3, 53, 4, 6, 3}\nabInteraction = a & b  # & operator interacts two sets\nabUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "documentation": {}
    },
    {
        "label": "abInteraction",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "peekOfCode": "abInteraction = a & b  # & operator interacts two sets\nabUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "documentation": {}
    },
    {
        "label": "abUnion",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "peekOfCode": "abUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "documentation": {}
    },
    {
        "label": "eqn",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "peekOfCode": "eqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.deMorgans_law",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 6,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "class Dict:\n\tdef __init__(self, word, meaning):\n\t\tself.word = word\n\t\tself.meaning = meaning\n\tdef add_new(self):\n\t\tdictionary[self.word] = self.meaning\n\t\tprint \"Word Successfully Added\"\n\tdef delete_word(self):\n\t\ttry:\n\t\t\tdel dictionary[self.word]",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "def start():\n\tget_op = raw_input(\"Add, Delete, Edit, View, View all : \")\n\tif get_op in [\"add\", \"Add\"]:\n\t\tget_word = raw_input(\"Word to add : \")\n\t\tget_meaning = raw_input(\"Meaning : \")\n\t\tnew = Dict(get_word, get_meaning)\n\t\tnew.add_new()\n\telif get_op in [\"delete\", \"Delete\"]:\t\n\t\tget_word_to_del = raw_input(\"Word to delete : \")\n\t\tdelete = Dict(get_word_to_del, None)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "def end():\n\tquit()\ndef main():\n\twhile True:\n\t\ts_or_e = raw_input(\"Start or End : \")\n\t\tif s_or_e == \"Start\":\n\t\t\tstart()\n\t\t\tprint(\"  \")\n\t\t\tcontinue\n\t\telse:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "def main():\n\twhile True:\n\t\ts_or_e = raw_input(\"Start or End : \")\n\t\tif s_or_e == \"Start\":\n\t\t\tstart()\n\t\t\tprint(\"  \")\n\t\t\tcontinue\n\t\telse:\n\t\t\tend()\t\nif __name__ == \"__main__\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "dictionary",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "dictionary = {}\nclass Dict:\n\tdef __init__(self, word, meaning):\n\t\tself.word = word\n\t\tself.meaning = meaning\n\tdef add_new(self):\n\t\tdictionary[self.word] = self.meaning\n\t\tprint \"Word Successfully Added\"\n\tdef delete_word(self):\n\t\ttry:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tself.word",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tself.word = word\n\t\tself.meaning = meaning\n\tdef add_new(self):\n\t\tdictionary[self.word] = self.meaning\n\t\tprint \"Word Successfully Added\"\n\tdef delete_word(self):\n\t\ttry:\n\t\t\tdel dictionary[self.word]\n\t\t\tprint \"Word Successfully Deleted\"\n\t\texcept KeyError:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tself.meaning",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tself.meaning = meaning\n\tdef add_new(self):\n\t\tdictionary[self.word] = self.meaning\n\t\tprint \"Word Successfully Added\"\n\tdef delete_word(self):\n\t\ttry:\n\t\t\tdel dictionary[self.word]\n\t\t\tprint \"Word Successfully Deleted\"\n\t\texcept KeyError:\n\t\t\tprint \"The Word Does Not Exist in Dictionary. Try Again!\"\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tdictionary[self.word]",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tdictionary[self.word] = self.meaning\n\t\tprint \"Word Successfully Added\"\n\tdef delete_word(self):\n\t\ttry:\n\t\t\tdel dictionary[self.word]\n\t\t\tprint \"Word Successfully Deleted\"\n\t\texcept KeyError:\n\t\t\tprint \"The Word Does Not Exist in Dictionary. Try Again!\"\t\n\tdef edit_word(self):\n\t\ttry:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\t\tdictionary[self.word]",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\t\tdictionary[self.word] = self.meaning\n\t\t\tprint \"Word Was Successfully Edited\"\n\t\texcept KeyError:\n\t\t\tprint \"The Word You Trying To Edit Does Not Exist in Dictionary!\"\t\n\tdef view_word(self):\n\t\ttry:\n\t\t\tprint dictionary[self.word]\n\t\texcept KeyError:\n\t\t\tprint \"The Word is not in Dictionary.\"\n\tdef view_all(self):\t\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\tget_op",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\tget_op = raw_input(\"Add, Delete, Edit, View, View all : \")\n\tif get_op in [\"add\", \"Add\"]:\n\t\tget_word = raw_input(\"Word to add : \")\n\t\tget_meaning = raw_input(\"Meaning : \")\n\t\tnew = Dict(get_word, get_meaning)\n\t\tnew.add_new()\n\telif get_op in [\"delete\", \"Delete\"]:\t\n\t\tget_word_to_del = raw_input(\"Word to delete : \")\n\t\tdelete = Dict(get_word_to_del, None)\n\t\tdelete.delete_word()",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tget_word",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tget_word = raw_input(\"Word to add : \")\n\t\tget_meaning = raw_input(\"Meaning : \")\n\t\tnew = Dict(get_word, get_meaning)\n\t\tnew.add_new()\n\telif get_op in [\"delete\", \"Delete\"]:\t\n\t\tget_word_to_del = raw_input(\"Word to delete : \")\n\t\tdelete = Dict(get_word_to_del, None)\n\t\tdelete.delete_word()\n\telif get_op in [\"edit\", \"Edit\"]:\n\t\tget_word_to_edit = raw_input(\"Word to edit : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tget_meaning",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tget_meaning = raw_input(\"Meaning : \")\n\t\tnew = Dict(get_word, get_meaning)\n\t\tnew.add_new()\n\telif get_op in [\"delete\", \"Delete\"]:\t\n\t\tget_word_to_del = raw_input(\"Word to delete : \")\n\t\tdelete = Dict(get_word_to_del, None)\n\t\tdelete.delete_word()\n\telif get_op in [\"edit\", \"Edit\"]:\n\t\tget_word_to_edit = raw_input(\"Word to edit : \")\n\t\tget_new_meaning = raw_input(\"New meaning : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tnew",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tnew = Dict(get_word, get_meaning)\n\t\tnew.add_new()\n\telif get_op in [\"delete\", \"Delete\"]:\t\n\t\tget_word_to_del = raw_input(\"Word to delete : \")\n\t\tdelete = Dict(get_word_to_del, None)\n\t\tdelete.delete_word()\n\telif get_op in [\"edit\", \"Edit\"]:\n\t\tget_word_to_edit = raw_input(\"Word to edit : \")\n\t\tget_new_meaning = raw_input(\"New meaning : \")\n\t\tmean = Dict(get_word_to_edit, get_new_meaning)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tget_word_to_del",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tget_word_to_del = raw_input(\"Word to delete : \")\n\t\tdelete = Dict(get_word_to_del, None)\n\t\tdelete.delete_word()\n\telif get_op in [\"edit\", \"Edit\"]:\n\t\tget_word_to_edit = raw_input(\"Word to edit : \")\n\t\tget_new_meaning = raw_input(\"New meaning : \")\n\t\tmean = Dict(get_word_to_edit, get_new_meaning)\n\t\tmean.edit_word()\t\n\telif get_op in [\"view\", \"View\"]:\n\t\tget_word_to_view = raw_input(\"Word to view : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tdelete",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tdelete = Dict(get_word_to_del, None)\n\t\tdelete.delete_word()\n\telif get_op in [\"edit\", \"Edit\"]:\n\t\tget_word_to_edit = raw_input(\"Word to edit : \")\n\t\tget_new_meaning = raw_input(\"New meaning : \")\n\t\tmean = Dict(get_word_to_edit, get_new_meaning)\n\t\tmean.edit_word()\t\n\telif get_op in [\"view\", \"View\"]:\n\t\tget_word_to_view = raw_input(\"Word to view : \")\n\t\tview = Dict(get_word_to_view, None)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tget_word_to_edit",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tget_word_to_edit = raw_input(\"Word to edit : \")\n\t\tget_new_meaning = raw_input(\"New meaning : \")\n\t\tmean = Dict(get_word_to_edit, get_new_meaning)\n\t\tmean.edit_word()\t\n\telif get_op in [\"view\", \"View\"]:\n\t\tget_word_to_view = raw_input(\"Word to view : \")\n\t\tview = Dict(get_word_to_view, None)\n\t\tview.view_word()\n\telif get_op in [\"view all\", \"View All\", \"View all\"]:\n\t\tnothing = Dict(None, None)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tget_new_meaning",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tget_new_meaning = raw_input(\"New meaning : \")\n\t\tmean = Dict(get_word_to_edit, get_new_meaning)\n\t\tmean.edit_word()\t\n\telif get_op in [\"view\", \"View\"]:\n\t\tget_word_to_view = raw_input(\"Word to view : \")\n\t\tview = Dict(get_word_to_view, None)\n\t\tview.view_word()\n\telif get_op in [\"view all\", \"View All\", \"View all\"]:\n\t\tnothing = Dict(None, None)\n\t\tnothing.view_all()",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tmean",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tmean = Dict(get_word_to_edit, get_new_meaning)\n\t\tmean.edit_word()\t\n\telif get_op in [\"view\", \"View\"]:\n\t\tget_word_to_view = raw_input(\"Word to view : \")\n\t\tview = Dict(get_word_to_view, None)\n\t\tview.view_word()\n\telif get_op in [\"view all\", \"View All\", \"View all\"]:\n\t\tnothing = Dict(None, None)\n\t\tnothing.view_all()\n\telse:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tget_word_to_view",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tget_word_to_view = raw_input(\"Word to view : \")\n\t\tview = Dict(get_word_to_view, None)\n\t\tview.view_word()\n\telif get_op in [\"view all\", \"View All\", \"View all\"]:\n\t\tnothing = Dict(None, None)\n\t\tnothing.view_all()\n\telse:\n\t\tprint \"Invalid Input. Try again!\"\t\t\t\ndef end():\n\tquit()",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tview",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tview = Dict(get_word_to_view, None)\n\t\tview.view_word()\n\telif get_op in [\"view all\", \"View All\", \"View all\"]:\n\t\tnothing = Dict(None, None)\n\t\tnothing.view_all()\n\telse:\n\t\tprint \"Invalid Input. Try again!\"\t\t\t\ndef end():\n\tquit()\ndef main():",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\tnothing",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\tnothing = Dict(None, None)\n\t\tnothing.view_all()\n\telse:\n\t\tprint \"Invalid Input. Try again!\"\t\t\t\ndef end():\n\tquit()\ndef main():\n\twhile True:\n\t\ts_or_e = raw_input(\"Start or End : \")\n\t\tif s_or_e == \"Start\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "\t\ts_or_e",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "peekOfCode": "\t\ts_or_e = raw_input(\"Start or End : \")\n\t\tif s_or_e == \"Start\":\n\t\t\tstart()\n\t\t\tprint(\"  \")\n\t\t\tcontinue\n\t\telse:\n\t\t\tend()\t\nif __name__ == \"__main__\":\n\tmain()",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.dictionary",
        "documentation": {}
    },
    {
        "label": "find_difference_matching",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "peekOfCode": "def find_difference_matching(x, y, diff=0):\n    res = []\n    for i in range(len(x)):\n        if abs(x[i] - y[i]) == diff:\n            res.append((x[i], y[i]))\n    return res\n# Test\na = [12, 10, 123, 76, 9990]\nb = [2, 0, 45, 66, 10000]\nresult = find_difference_matching(a, b, 10)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "peekOfCode": "a = [12, 10, 123, 76, 9990]\nb = [2, 0, 45, 66, 10000]\nresult = find_difference_matching(a, b, 10)\nprint(\"Matches:\")\nfor i in result:\n    print(\"   \" + str(i))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "peekOfCode": "b = [2, 0, 45, 66, 10000]\nresult = find_difference_matching(a, b, 10)\nprint(\"Matches:\")\nfor i in result:\n    print(\"   \" + str(i))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "peekOfCode": "result = find_difference_matching(a, b, 10)\nprint(\"Matches:\")\nfor i in result:\n    print(\"   \" + str(i))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.difference_testing",
        "documentation": {}
    },
    {
        "label": "percToDiscount",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.discount",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.discount",
        "peekOfCode": "def percToDiscount(percent, mp):\n    discount = percent / 100 * mp\n    return \"Discount is : \" + str(discount)\nprint(\"Hello\\n\")\nprint(\"Press Enter to exit\")\nwhile (\n    True\n):  # I've put counting discount in a loop cause if you want to count on multiple items\n    more = str(input(\"Count or End : \"))\n    if more == \"Count\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.discount",
        "documentation": {}
    },
    {
        "label": "iLoveDiscount",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.discountPercent",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.discountPercent",
        "peekOfCode": "def iLoveDiscount(discount, mp):  # mp is market price\n    discountPerc = discount / mp * 100\n    return \"Discount is \" + str(discountPerc) + \"%\"\nprint(\"Hello\\n\")\nprint(\"Press Enter to exit\")\nwhile (\n    True\n):  # I've put counting discount in a loop cause if you want to count on multiple items\n    more = str(input(\"Count or End : \"))\n    if more == \"Count\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.discountPercent",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.distance_on_number_line",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.distance_on_number_line",
        "peekOfCode": "def distance(x, y):\n    return abs(x - y)\nflag = True\nwhile flag:\n    usr = str(input(\"start [Y/n]: \")).strip().lower()\n    if usr == \"y\":\n        print(\n            distance(\n                float(input(\"Value of X co-ordinate: \")),\n                float(input(\"Value of Y co-ordinate: \")),",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.distance_on_number_line",
        "documentation": {}
    },
    {
        "label": "flag",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.distance_on_number_line",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.distance_on_number_line",
        "peekOfCode": "flag = True\nwhile flag:\n    usr = str(input(\"start [Y/n]: \")).strip().lower()\n    if usr == \"y\":\n        print(\n            distance(\n                float(input(\"Value of X co-ordinate: \")),\n                float(input(\"Value of Y co-ordinate: \")),\n            ),\n            \"\\n\",",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.distance_on_number_line",
        "documentation": {}
    },
    {
        "label": "sendMail",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "peekOfCode": "def sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address\n    messageHead = str(input(\"Message Head : \"))  # Message head\n    messageBody = str(input(\"Message : \"))  # main message\n    fullMessage = messageHead + \"\\n\" + messageBody  # full message\n    serverToLogin.sendmail(\n        yourEmail, toSendEmail, fullMessage\n    )  # sending email address through server\nwhile True:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "documentation": {}
    },
    {
        "label": "serverToLogin",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "peekOfCode": "serverToLogin = smtplib.SMTP(\"smtp.gmail.com\", 587)\n# Username\nuserName = str(input(\"Username for Gmail : \"))\n# password\npassword = str(input(\"Password Of Account : \"))\n# Logging in\nserverToLogin.login(userName, password)\ndef sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "documentation": {}
    },
    {
        "label": "userName",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "peekOfCode": "userName = str(input(\"Username for Gmail : \"))\n# password\npassword = str(input(\"Password Of Account : \"))\n# Logging in\nserverToLogin.login(userName, password)\ndef sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address\n    messageHead = str(input(\"Message Head : \"))  # Message head\n    messageBody = str(input(\"Message : \"))  # main message",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "peekOfCode": "password = str(input(\"Password Of Account : \"))\n# Logging in\nserverToLogin.login(userName, password)\ndef sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address\n    messageHead = str(input(\"Message Head : \"))  # Message head\n    messageBody = str(input(\"Message : \"))  # main message\n    fullMessage = messageHead + \"\\n\" + messageBody  # full message\n    serverToLogin.sendmail(",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.EmailsInPython",
        "documentation": {}
    },
    {
        "label": "tupA",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "peekOfCode": "tupA = ()  # Empty tuple\nprint(tupA)\nc = 12, 56, 78\ntupC = tuple(c)  # tuple() is built-in\nprint(tupC)\nx, y, z = (12, 45, 42)\na = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "peekOfCode": "c = 12, 56, 78\ntupC = tuple(c)  # tuple() is built-in\nprint(tupC)\nx, y, z = (12, 45, 42)\na = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples\nprint(tupC[0])\nprint(a[1])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "documentation": {}
    },
    {
        "label": "tupC",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "peekOfCode": "tupC = tuple(c)  # tuple() is built-in\nprint(tupC)\nx, y, z = (12, 45, 42)\na = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples\nprint(tupC[0])\nprint(a[1])\nprint(tupC[2], \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "peekOfCode": "a = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples\nprint(tupC[0])\nprint(a[1])\nprint(tupC[2], \"\\n\")\n# tuples cant be reassigned\n# tupC[1] = 18 # uncomment this line to see the error  this should cause a error 'TypeError'\n# iterating through tuples",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Example",
        "documentation": {}
    },
    {
        "label": "fileName",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Files",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Files",
        "peekOfCode": "fileName = str(input(\"File name : \"))\nfileToRead = open(fileName, \"r\")  # 'r' reads the file\nprint(fileToRead.read())  # reading file\nfileToRead.close()  # closing the file",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Files",
        "documentation": {}
    },
    {
        "label": "fileToRead",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Files",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Files",
        "peekOfCode": "fileToRead = open(fileName, \"r\")  # 'r' reads the file\nprint(fileToRead.read())  # reading file\nfileToRead.close()  # closing the file",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Files",
        "documentation": {}
    },
    {
        "label": "findLcm",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.findLcm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.findLcm",
        "peekOfCode": "def findLcm(i, v):\n    if i > v:\n        x = i\n    else:\n        x = v\n    while True:\n        if (x % i == 0) and (x % v == 0):\n            lcm = x\n            return x\n            break",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.findLcm",
        "documentation": {}
    },
    {
        "label": "find_cube_root",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_cube_root",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_cube_root",
        "peekOfCode": "def find_cube_root(x):\n    if type(x) == str:\n        return \"Expected an integer! Cannot find cube root of an string!\"\n    for i in range(0, x):\n        if i ** 3 == x:\n            return i\n    return \"{} is not a perfect cube\".format(x)\n# Test\nx = 27\nresult = find_cube_root(x)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_cube_root",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_cube_root",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_cube_root",
        "peekOfCode": "x = 27\nresult = find_cube_root(x)\nprint(\"Cube root of {} is {}\".format(x, result))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_cube_root",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_cube_root",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_cube_root",
        "peekOfCode": "result = find_cube_root(x)\nprint(\"Cube root of {} is {}\".format(x, result))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_cube_root",
        "documentation": {}
    },
    {
        "label": "find_variable",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "peekOfCode": "def find_variable(string):\n    splitted = string.split()\n    for i in splitted:\n        if i in ascii_letters:\n            return i\n        else:\n            continue\n    return None\n# Input format for function:\n# \"z ** 2 + 97 * z + (-4)\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "documentation": {}
    },
    {
        "label": "find_roots",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "peekOfCode": "def find_roots(S, rng=[-10000, 10000]):\n    res = []\n    for v in range(rng[0], rng[1]):\n        try:\n            test_case = S.replace(find_variable(S), str(v))\n        except Exception as e:\n            print(e)\n            return \"\"\n        if eval(test_case) == 0:\n            res.append(v)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "documentation": {}
    },
    {
        "label": "test_str",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "peekOfCode": "test_str = \"x ** 2 + 5 * x - 6\"\nresult = find_roots(test_str, [-10, -2])\nfor i in result:\n\tprint(\"Root of the equation is {}\".format(i))\n\"\"\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "peekOfCode": "result = find_roots(test_str, [-10, -2])\nfor i in result:\n\tprint(\"Root of the equation is {}\".format(i))\n\"\"\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_roots",
        "documentation": {}
    },
    {
        "label": "find_square_root",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root",
        "peekOfCode": "def find_square_root(x):\n    if type(x) == str:\n        return \"Expected an integer! Cannot find square root of an string!\"\n    for i in range(x):\n        if i ** 2 == x:\n            return i\n    return \"{} is not a perfect square\".format(x)\n# Test\nx = 2\nresult = find_square_root(x)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root",
        "peekOfCode": "x = 2\nresult = find_square_root(x)\nprint(\"Square root of {} is {}\".format(x, result))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root",
        "peekOfCode": "result = find_square_root(x)\nprint(\"Square root of {} is {}\".format(x, result))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root",
        "documentation": {}
    },
    {
        "label": "is_perfect_square",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "peekOfCode": "def is_perfect_square(n):\n    if isinstance(n, float):\n        return (False, None)\n    for i in range(n + 1):\n        if i * i == n:\n            return (True, i)\n    return (False, None)\n# Average\ndef average(*args):\n    hold = list(args)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "peekOfCode": "def average(*args):\n    hold = list(args)\n    return sum(hold) / len(hold)\n# Method\n# Just implementation of steps on above webpage\ndef sqrt_of_imperfect_square(a, certainty=6):\n    is_square = is_perfect_square(a)\n    if is_square[0]:\n        return \"{} is a perfect square .It's root is {}.\".format(a, is_square[1])\n    else:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "documentation": {}
    },
    {
        "label": "sqrt_of_imperfect_square",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "peekOfCode": "def sqrt_of_imperfect_square(a, certainty=6):\n    is_square = is_perfect_square(a)\n    if is_square[0]:\n        return \"{} is a perfect square .It's root is {}.\".format(a, is_square[1])\n    else:\n        a = int(a)\n        tmp = None\n        s1 = max([float(x * x) for x in range(0, a)])\n        while True:\n            s2 = a / s1",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "documentation": {}
    },
    {
        "label": "case",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "peekOfCode": "case = 2613\nres = sqrt_of_imperfect_square(case, 9)\nprint(\"Test case: \" + str(case))\nprint(\"Root: \" + str(res))\nprint(\"Root Squared: \" + str(res * res))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "peekOfCode": "res = sqrt_of_imperfect_square(case, 9)\nprint(\"Test case: \" + str(case))\nprint(\"Root: \" + str(res))\nprint(\"Root Squared: \" + str(res * res))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.find_square_root_of_imperfect_square",
        "documentation": {}
    },
    {
        "label": "bubbleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "peekOfCode": "def bubbleSort(g): # g argument is for list\n    for x in range(len(g) - 2):\n\t    a = g[x]\n\t    b = g[x + 1 + 1]\n\t    if a > b :\n\t\t    return(a)\n\t    else :\n\t\t    return(b)\n# use this to convert output into list\n# result = list(map(bubbleSort , g)) replace g with parameter",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "documentation": {}
    },
    {
        "label": "oddSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "peekOfCode": "def oddSort(odd):# odd can be list or variable\n    for x in odd:\n        if x % 3 == 0:\n    return(x)\n# use this to get list as output\n# result = list(filter(oddSort , odd)) replace odd with parameter\n# this function checks even num\ndef evenSort(eve):# eve can be list or variable\n    for a in eve:\n        if a % 2 == 0:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "documentation": {}
    },
    {
        "label": "evenSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "peekOfCode": "def evenSort(eve):# eve can be list or variable\n    for a in eve:\n        if a % 2 == 0:\n    return(a)\n# use this to get list as output\n# result = list(filter(evenSort , eve)) replace eve with parameter\n# this function checks divisibility\ndef divisibleSort(divi , get):# here divi is list and get is an variable set to integer or float\n    for r in divi:\n        if r % get == 0:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "documentation": {}
    },
    {
        "label": "divisibleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "peekOfCode": "def divisibleSort(divi , get):# here divi is list and get is an variable set to integer or float\n    for r in divi:\n        if r % get == 0:\n    return(r)\n# use this to get output\n# result = list(filter(divisibleSort , divi , get)) replace arguments with suitable parameters\n# this function checks if addition of group of two elements has desired answer\ndef addBubbleSort(f,user):# here f is list and user is integer or float\n    for x in range(len(f) - 2):\n        a = f[x]",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "documentation": {}
    },
    {
        "label": "addBubbleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "peekOfCode": "def addBubbleSort(f,user):# here f is list and user is integer or float\n    for x in range(len(f) - 2):\n        a = f[x]\n        b = f[x + 1 + 1]\n        if a + b == user:\n            return(a,b)\n# i havent checked this function check for bugs\n# this is how it works\n# res = list(filter(addBubbleSort , f , user)) replace arguments with suitable parameters\n# this function checks if subtraction of group of two elements has desired answer",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "documentation": {}
    },
    {
        "label": "subBubbleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "peekOfCode": "def subBubbleSort(z,userSub):\n    for x in range(len(z) - 2):\n        a = z[x]\n        b = z[x + 1 + 1]\n        if a - b == useSubr:\n            return(a,b)\n# i havent checked this function check for bugs\n#res = list(filter(subBubbleSort , z , userSub)) replace arguments with suitable parameters",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "documentation": {}
    },
    {
        "label": "#res",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "peekOfCode": "#res = list(filter(subBubbleSort , z , userSub)) replace arguments with suitable parameters",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Functions",
        "documentation": {}
    },
    {
        "label": "build_geo_sequence",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.geometric_progression_builder",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.geometric_progression_builder",
        "peekOfCode": "def build_geo_sequence(start, end, constant):\n    temp = [start]\n    try:\n        for i in range(start, end):\n            temp.append(temp[-1] * constant)\n    except TypeError as te:\n        print(te)\n    except Exception as e:\n        print(e)\n    else:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.geometric_progression_builder",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.geometric_progression_builder",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.geometric_progression_builder",
        "peekOfCode": "res = build_geo_sequence(1, 10, 3)\nprint(\"Geo Sequence:\")\nfor i in res:\n    print(\"  \" + str(i))\n# Expected -> 1, 3, 9, 27, 81, ....\n# Here a = 1, d = 3",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.geometric_progression_builder",
        "documentation": {}
    },
    {
        "label": "healthScore",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.healthScore",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.healthScore",
        "peekOfCode": "def healthScore():\n    print(\" \")\n    numberOfFruits = int(input(\"Number Of Fruits You Eat in Week : \"))\n    numberOftimesFastFood = int(input(\"Number of Times You Eat FastFood in a Week : \"))\n    cigars = int(input(\"Cigars You Smoke In A Week : \"))\n    workoutTime = int(input(\"How Much minutes You Workout EveryDay : \"))\n    bodyMassIndex = int(input(\"Whats Your BodyMassIndex(BMI) : \"))\n    if 18 < bodyMassIndex < 26:\n        print(\" \")\n        healthScore = (numberOfFruits + workoutTime + bodyMassIndex) - (",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.healthScore",
        "documentation": {}
    },
    {
        "label": "get_html",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.html_source",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.html_source",
        "peekOfCode": "def get_html(url, fname):\n    try:\n        responsive = urllib.urlopen(url)\n        save_file = open(fname + \".html\", \"w\")\n        save_file.write(responsive.read())\n        save_file.close()\n    except IOError:\n        return \"Make sure url entered is correct and valid!\"\n    except Exception as e:\n        return \"An Error occured, make sure information enerted is correct!\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.html_source",
        "documentation": {}
    },
    {
        "label": "is_identity_matrix",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "peekOfCode": "def is_identity_matrix(matrix):\n    total_elems = 0\n    last_pos = 0\n    for row in matrix:\n        total_elems += len(row)\n        if row[last_pos] == 1 and row.count(0) == len(row) - 1:\n            last_pos += 1\n        else:\n            return False\n    if total_elems == len(matrix[0]) * len(matrix[0]):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix1",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "peekOfCode": "matrix1 = [[1,0,0,0],\n           [0,1,0,0],\n           [0,0,1,0],\n           [0,0,0,1]]\nprint is_identity_matrix(matrix1)\n#>>>True\nmatrix2 = [[1,0,0],\n           [0,1,0],\n           [0,0,0]]\nprint is_identity_matrix(matrix2)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix2",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "peekOfCode": "matrix2 = [[1,0,0],\n           [0,1,0],\n           [0,0,0]]\nprint is_identity_matrix(matrix2)\n#>>>False\nmatrix3 = [[2,0,0],\n           [0,2,0],\n           [0,0,2]]\nprint is_identity_matrix(matrix3)\n#>>>False",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix3",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "peekOfCode": "matrix3 = [[2,0,0],\n           [0,2,0],\n           [0,0,2]]\nprint is_identity_matrix(matrix3)\n#>>>False\nmatrix4 = [[1,0,0,0],\n           [0,1,1,0],\n           [0,0,0,1]]\nprint is_identity_matrix(matrix4)\n#>>>False",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix4",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "peekOfCode": "matrix4 = [[1,0,0,0],\n           [0,1,1,0],\n           [0,0,0,1]]\nprint is_identity_matrix(matrix4)\n#>>>False\nmatrix5 = [[1,0,0,0,0,0,0,0,0]]\nprint is_identity_matrix(matrix5)\n#>>>False\nmatrix6 = [[1,0,0,0],  \n           [0,1,0,1],  ",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix5",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "peekOfCode": "matrix5 = [[1,0,0,0,0,0,0,0,0]]\nprint is_identity_matrix(matrix5)\n#>>>False\nmatrix6 = [[1,0,0,0],  \n           [0,1,0,1],  \n           [0,0,1,0],  \n           [0,0,0,1]]\nprint is_identity_matrix(matrix6)\n#>>>False\nmatrix7 = [[1, -1, 1],",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix6",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "peekOfCode": "matrix6 = [[1,0,0,0],  \n           [0,1,0,1],  \n           [0,0,1,0],  \n           [0,0,0,1]]\nprint is_identity_matrix(matrix6)\n#>>>False\nmatrix7 = [[1, -1, 1],\n           [0, 1, 0],\n           [0, 0, 1]]\nprint is_identity_matrix(matrix7)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix7",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "peekOfCode": "matrix7 = [[1, -1, 1],\n           [0, 1, 0],\n           [0, 0, 1]]\nprint is_identity_matrix(matrix7)\n#>>>False",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "download_image",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.image_downloader",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.image_downloader",
        "peekOfCode": "def download_image(url):\n    name = random.randrange(1, 1000)\n    full_name = str(name) + \".jpg\"\n    urllib.request.urlretrieve(url, full_name)\nprint(download_image(get))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.image_downloader",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.image_downloader",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.image_downloader",
        "peekOfCode": "get = str(input(\"Enter url of image to download :  \"))\ndef download_image(url):\n    name = random.randrange(1, 1000)\n    full_name = str(name) + \".jpg\"\n    urllib.request.urlretrieve(url, full_name)\nprint(download_image(get))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.image_downloader",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Indexing",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Indexing",
        "peekOfCode": "message = \"Hello\"\nprint(message[0])  # this will print H that is first letter in the string\nprint(message[1:4])  # this will print from index one to index four\nprint(message[:3])  # this will print from starting to index 3\nprint(message[2:])  # this will print from index 2 till end\nprint(message[:])  # this prints whole string\nprint(message[0:4:2])  # this escapes 2 characters from string\n# negative Indexing\n\"\"\"\nnegative Indexing",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Indexing",
        "documentation": {}
    },
    {
        "label": "awesome",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Indexing",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Indexing",
        "peekOfCode": "awesome = \"Python is awesome\"\nprint(awesome[:-1])  # -1 prints last character\nprint(awesome[-2])  # this prints m from starting\nprint(awesome[-7:])  # try this one out in interpreter\nprint(\"You are \" + awesome[10:] + \" you are learning \" + awesome[:6])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Indexing",
        "documentation": {}
    },
    {
        "label": "noun_lib",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.in_the_something",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.in_the_something",
        "peekOfCode": "noun_lib = [\n    \"cat\",\n    \"dog\",\n    \"lizard\",\n    \"bald\",\n    \"insane guy\",\n    \"CEO\",\n    \"monkey\",\n    \"teacher\",\n    \"ballerina\",",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.in_the_something",
        "documentation": {}
    },
    {
        "label": "place_lib",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.in_the_something",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.in_the_something",
        "peekOfCode": "place_lib = [\n    \"in Hungary\",\n    \"in the toilet\",\n    \"in a car\",\n    \"in a zoo\",\n    \"in a lions cave\",\n    \"in a park\",\n    \"in Norway\",\n    \"in Rio\",\n    \"on Mars\",",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.in_the_something",
        "documentation": {}
    },
    {
        "label": "flag",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.in_the_something",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.in_the_something",
        "peekOfCode": "flag = True\nwhile flag:\n    inp = str(input(\"\\nDo you want more? [Y/n] \"))\n    if inp.strip().lower() == \"y\":\n        print(\n            \"-> The\"\n            + \" \"\n            + random.choice(noun_lib)\n            + \" \"\n            + random.choice(place_lib)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.in_the_something",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "peekOfCode": "def index(array, item):\n\tindex = 0\n\tfound = False\n\twhile (not found):\n\t\tif (array[index] == item):\n\t\t\tfound = True\n\t\telse:\n\t\t\tindex = index + 1\n\treturn index \nprint index([12, 34], 34)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "documentation": {}
    },
    {
        "label": "\tindex",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "peekOfCode": "\tindex = 0\n\tfound = False\n\twhile (not found):\n\t\tif (array[index] == item):\n\t\t\tfound = True\n\t\telse:\n\t\t\tindex = index + 1\n\treturn index \nprint index([12, 34], 34)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "documentation": {}
    },
    {
        "label": "\tfound",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "peekOfCode": "\tfound = False\n\twhile (not found):\n\t\tif (array[index] == item):\n\t\t\tfound = True\n\t\telse:\n\t\t\tindex = index + 1\n\treturn index \nprint index([12, 34], 34)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "documentation": {}
    },
    {
        "label": "\t\t\tfound",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "peekOfCode": "\t\t\tfound = True\n\t\telse:\n\t\t\tindex = index + 1\n\treturn index \nprint index([12, 34], 34)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "documentation": {}
    },
    {
        "label": "\t\t\tindex",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "peekOfCode": "\t\t\tindex = index + 1\n\treturn index \nprint index([12, 34], 34)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.item_index",
        "documentation": {}
    },
    {
        "label": "kay_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "peekOfCode": "def kay_sort(array):\n\tprint \"Orignal List : {}\".format(array)\n\tfor i in range(len(array)):\n\t\tfor n in range(len(array) - 1):\n\t\t\ta = array[n]\n\t\t\tif (a > array[i]):\n\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\ta",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "peekOfCode": "\t\t\ta = array[n]\n\t\t\tif (a > array[i]):\n\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttem",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "peekOfCode": "\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tarray[i]",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "peekOfCode": "\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tarray[n]",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "peekOfCode": "\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.kay_sort",
        "documentation": {}
    },
    {
        "label": "pythonKeywords",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Keywords",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Keywords",
        "peekOfCode": "pythonKeywords = keyword.kwlist\ngetToCheck = str(input(\"Keyword to check : \"))\ncheck = keyword.iskeyword(getToCheck)\nif check == True:\n    print(getToCheck + \" is a python keyword.\")\nelse:\n    print(getToCheck + \" is not a python keyword.\")\nprint(\"\\nShowing all keywords in python : \\n\")\nprint(pythonKeywords)\n# remember to test the code",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Keywords",
        "documentation": {}
    },
    {
        "label": "getToCheck",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Keywords",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Keywords",
        "peekOfCode": "getToCheck = str(input(\"Keyword to check : \"))\ncheck = keyword.iskeyword(getToCheck)\nif check == True:\n    print(getToCheck + \" is a python keyword.\")\nelse:\n    print(getToCheck + \" is not a python keyword.\")\nprint(\"\\nShowing all keywords in python : \\n\")\nprint(pythonKeywords)\n# remember to test the code",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Keywords",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Keywords",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Keywords",
        "peekOfCode": "check = keyword.iskeyword(getToCheck)\nif check == True:\n    print(getToCheck + \" is a python keyword.\")\nelse:\n    print(getToCheck + \" is not a python keyword.\")\nprint(\"\\nShowing all keywords in python : \\n\")\nprint(pythonKeywords)\n# remember to test the code",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Keywords",
        "documentation": {}
    },
    {
        "label": "alterWords",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Latin",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Latin",
        "peekOfCode": "def alterWords():\n    wordToAlter = str(input(\"Word To Translate : \"))\n    alteredWord = (\n        wordToAlter[1:] + wordToAlter[0:2] + \"y\"\n    )  # translating word to pig latin\n    if len(wordToAlter) < 46:\n        print(alteredWord)\n    else:\n        print(\"Too Big . Biggest Word in English Contains 45 characters.\")\n# main interaction code",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Latin",
        "documentation": {}
    },
    {
        "label": "findLcm",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Lcm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Lcm",
        "peekOfCode": "def findLcm(i, v):\n    if i > v:\n        x = i\n    else:\n        x = v\n    while True:\n        if (x % i == 0) and (x % v == 0):\n            lcm = x\n            return x\n            break",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Lcm",
        "documentation": {}
    },
    {
        "label": "compareMore",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "peekOfCode": "def compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)\nget = int(input(\"To Compare More Than : \"))\ngetAgain = int(input(\"To Compare Less Than : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "compareLess",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "peekOfCode": "def compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)\nget = int(input(\"To Compare More Than : \"))\ngetAgain = int(input(\"To Compare Less Than : \"))\nprint(\"\\nMore Than Values : \")\nprint(compareMore(get))\nprint(finalNums, \"\\n\")\nprint(\"\\nLess Than Values : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "peekOfCode": "nums = [12, 34, 65, 43, 21, 97, 13, 57, 10, 32]\nfinalNums = []\nmoreFinalNums = []\ndef compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "finalNums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "peekOfCode": "finalNums = []\nmoreFinalNums = []\ndef compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "moreFinalNums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "peekOfCode": "moreFinalNums = []\ndef compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)\nget = int(input(\"To Compare More Than : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "peekOfCode": "get = int(input(\"To Compare More Than : \"))\ngetAgain = int(input(\"To Compare Less Than : \"))\nprint(\"\\nMore Than Values : \")\nprint(compareMore(get))\nprint(finalNums, \"\\n\")\nprint(\"\\nLess Than Values : \")\nprint(compareLess(getAgain))\nprint(moreFinalNums, \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "getAgain",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "peekOfCode": "getAgain = int(input(\"To Compare Less Than : \"))\nprint(\"\\nMore Than Values : \")\nprint(compareMore(get))\nprint(finalNums, \"\\n\")\nprint(\"\\nLess Than Values : \")\nprint(compareLess(getAgain))\nprint(moreFinalNums, \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "dragonFreak",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Libs",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Libs",
        "peekOfCode": "def dragonFreak():\n    colorDrag = raw_input(\"Color : \")\n    superLatDrag = raw_input(\"Superlative (ending in est) : \")\n    adj1Drag = raw_input(\"Adjective : \")\n    bodyDragPlu = raw_input(\"Body Part Plural : \")\n    bodyDrag = raw_input(\"Body Part : \")\n    nounDrag = raw_input(\"Noun : \")\n    animalDrag = raw_input(\"Animal(Plural) : \")\n    adj2Drag = raw_input(\"Adjective : \")\n    adj3Drag = raw_input(\"Adjective : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Libs",
        "documentation": {}
    },
    {
        "label": "excuses",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Libs",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Libs",
        "peekOfCode": "def excuses():\n    place = raw_input(\"Place : \")\n    adjExcuse = raw_input(\"Adjective : \")\n    bodyPart = raw_input(\"Bodypart : \")\n    fMadLib = \"\"\"\n    I cannot come to %s ,\n    because there is %s %s flu\n    \"\"\" % (\n        place,\n        adjExcuse,",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Libs",
        "documentation": {}
    },
    {
        "label": "libs",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Libs",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Libs",
        "peekOfCode": "libs = [\"Dragon Freak\", \"Excuses\"]\n# precode\ndef dragonFreak():\n    colorDrag = raw_input(\"Color : \")\n    superLatDrag = raw_input(\"Superlative (ending in est) : \")\n    adj1Drag = raw_input(\"Adjective : \")\n    bodyDragPlu = raw_input(\"Body Part Plural : \")\n    bodyDrag = raw_input(\"Body Part : \")\n    nounDrag = raw_input(\"Noun : \")\n    animalDrag = raw_input(\"Animal(Plural) : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Libs",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "peekOfCode": "def linear_search(array, to_find):\n\tpos = 0\t\t\t# Starting position or index\n\tto_return = (False, 0)\n\twhile (pos < len(array)):\t\t# while index is less than length of array\n\t\tif (array[pos] == to_find):\t\t# if array with index of var pos is equal to find\n\t\t\tto_return = (True, pos)\t\t\t# no need to break loop cuz return appends func\n\t\t\treturn to_return\n\t\telse: \n\t\t\tpos = pos + 1\t\t# if elem not found continue to next pos \n\treturn to_return",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "documentation": {}
    },
    {
        "label": "\tpos",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "peekOfCode": "\tpos = 0\t\t\t# Starting position or index\n\tto_return = (False, 0)\n\twhile (pos < len(array)):\t\t# while index is less than length of array\n\t\tif (array[pos] == to_find):\t\t# if array with index of var pos is equal to find\n\t\t\tto_return = (True, pos)\t\t\t# no need to break loop cuz return appends func\n\t\t\treturn to_return\n\t\telse: \n\t\t\tpos = pos + 1\t\t# if elem not found continue to next pos \n\treturn to_return\nnums = [12, 34, 54, 88, 21]\t\t\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "documentation": {}
    },
    {
        "label": "\tto_return",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "peekOfCode": "\tto_return = (False, 0)\n\twhile (pos < len(array)):\t\t# while index is less than length of array\n\t\tif (array[pos] == to_find):\t\t# if array with index of var pos is equal to find\n\t\t\tto_return = (True, pos)\t\t\t# no need to break loop cuz return appends func\n\t\t\treturn to_return\n\t\telse: \n\t\t\tpos = pos + 1\t\t# if elem not found continue to next pos \n\treturn to_return\nnums = [12, 34, 54, 88, 21]\t\t\t\nprint linear_search(nums, 88)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "documentation": {}
    },
    {
        "label": "\t\t\tto_return",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "peekOfCode": "\t\t\tto_return = (True, pos)\t\t\t# no need to break loop cuz return appends func\n\t\t\treturn to_return\n\t\telse: \n\t\t\tpos = pos + 1\t\t# if elem not found continue to next pos \n\treturn to_return\nnums = [12, 34, 54, 88, 21]\t\t\t\nprint linear_search(nums, 88)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "documentation": {}
    },
    {
        "label": "\t\t\tpos",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "peekOfCode": "\t\t\tpos = pos + 1\t\t# if elem not found continue to next pos \n\treturn to_return\nnums = [12, 34, 54, 88, 21]\t\t\t\nprint linear_search(nums, 88)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "peekOfCode": "nums = [12, 34, 54, 88, 21]\t\t\t\nprint linear_search(nums, 88)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.linear_search",
        "documentation": {}
    },
    {
        "label": "numsAndAlphas",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.listOperations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.listOperations",
        "peekOfCode": "numsAndAlphas = [\"a\", 1, \"hello\", 3.14159265359, \"are you okay\", True, \"good\", False]\n# this is going to work\nprint(numsAndAlphas)\n# list accessing\n# You can access single items from the list similar to string indexing\n# if you dont know string indexing look for my program called stringOperations.py\nprint(numsAndAlphas[0])\nprint(numsAndAlphas[1:5])\nprint(numsAndAlphas[0:])\nprint(numsAndAlphas[:6])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.listOperations",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.listOperations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.listOperations",
        "peekOfCode": "list2 = [2, 9, 16, 25, 36, 49, 64, 81, 100, 144]\nnewList = numsAndAlphas + list2",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.listOperations",
        "documentation": {}
    },
    {
        "label": "newList",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.listOperations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.listOperations",
        "peekOfCode": "newList = numsAndAlphas + list2",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.listOperations",
        "documentation": {}
    },
    {
        "label": "siliconValley",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.listOperationsMethods",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.listOperationsMethods",
        "peekOfCode": "siliconValley = [\n    \"Google\",\n    \"Apple\",\n    \"Dropbox\",\n    \"Facebook\",\n    \"Cisco\",\n    \"Adobe\",\n    \"Oracle\",\n    \"Samsung\",\n]",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.listOperationsMethods",
        "documentation": {}
    },
    {
        "label": "poppedElement",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.listOperationsMethods",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.listOperationsMethods",
        "peekOfCode": "poppedElement = siliconValley.pop(4)\nprint(\"Popped element is \" + poppedElement)\n# Oops I Samsung isnt in silicon valley, I have to remove Samsung from list\n# How am I gonna do thats\n# You have to enter the element in parenthesis and not it's index\nsiliconValley.remove(\"Samsung\")\nprint(siliconValley)\n# I want to sort the list in alphabetical order\n# How to do thats\n# simple",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.listOperationsMethods",
        "documentation": {}
    },
    {
        "label": "googleIndex",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.listOperationsMethods",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.listOperationsMethods",
        "peekOfCode": "googleIndex = siliconValley.index(\"Google\")\nprint(siliconValley[googleIndex])\n# I am tired of watching those elements again and again\n# How I am going to do thats\n# easy\ndel siliconValley\nprint(siliconValley)  # this should probably give you an NameError",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.listOperationsMethods",
        "documentation": {}
    },
    {
        "label": "getLi",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.listReverse",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.listReverse",
        "peekOfCode": "getLi = [12, 43, 7, 43, 87, 89, 56, 9809, 9878, 56, 78, 98, True, 56, 76]\nreverseList = getLi[::-1]  # [::-1] tells to step from end without difference\nprint(reverseList)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.listReverse",
        "documentation": {}
    },
    {
        "label": "reverseList",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.listReverse",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.listReverse",
        "peekOfCode": "reverseList = getLi[::-1]  # [::-1] tells to step from end without difference\nprint(reverseList)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.listReverse",
        "documentation": {}
    },
    {
        "label": "list_of_even_squares",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "peekOfCode": "list_of_even_squares = [num ** 2 for num in range(0, 101, 2)]\nprint(list_of_even_squares, \"\\n\")\nlist_of_odd_squares = [num ** 2 for num in range(1, 102, 2)]\nprint(list_of_odd_squares, \"\\n\")\nlist_of_even_cubes = [num ** 3 for num in range(0, 101, 2)]\nprint(list_of_even_cubes, \"\\n\")\nlist_of_odd_cubes = [num ** 3 for num in range(1, 102, 2)]\nprint(list_of_odd_cubes, \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "list_of_odd_squares",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "peekOfCode": "list_of_odd_squares = [num ** 2 for num in range(1, 102, 2)]\nprint(list_of_odd_squares, \"\\n\")\nlist_of_even_cubes = [num ** 3 for num in range(0, 101, 2)]\nprint(list_of_even_cubes, \"\\n\")\nlist_of_odd_cubes = [num ** 3 for num in range(1, 102, 2)]\nprint(list_of_odd_cubes, \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "list_of_even_cubes",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "peekOfCode": "list_of_even_cubes = [num ** 3 for num in range(0, 101, 2)]\nprint(list_of_even_cubes, \"\\n\")\nlist_of_odd_cubes = [num ** 3 for num in range(1, 102, 2)]\nprint(list_of_odd_cubes, \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "list_of_odd_cubes",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "peekOfCode": "list_of_odd_cubes = [num ** 3 for num in range(1, 102, 2)]\nprint(list_of_odd_cubes, \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "logarithm_integer",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.logarithm_integer",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.logarithm_integer",
        "peekOfCode": "def logarithm_integer(b, x):\n    if (b > 0 and b != 1) and x > 0:\n        for i in range(x):\n            if b ** i == x:\n                return i\n        return -1\n    else:\n        return \"Invalid input for logarithm\"\n# Test\nprint(\"log(6, 216) -> \" + str(logarithm_integer(6, 216)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.logarithm_integer",
        "documentation": {}
    },
    {
        "label": "profit",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "peekOfCode": "def profit(sellP, costP):\n    profit = sellP - costP\n    return profit  # Function for calculating profit\ndef loss(costP, sellP):\n    loss = costP - sellP\n    return loss  # Function for calculating loss\ndef profitPercent(prof, costP):\n    profitPerc = prof / costP * 100\n    return str(profitPerc) + \"%\"  # func to calculate profit percent\ndef lossPercent(loss, costP):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "documentation": {}
    },
    {
        "label": "loss",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "peekOfCode": "def loss(costP, sellP):\n    loss = costP - sellP\n    return loss  # Function for calculating loss\ndef profitPercent(prof, costP):\n    profitPerc = prof / costP * 100\n    return str(profitPerc) + \"%\"  # func to calculate profit percent\ndef lossPercent(loss, costP):\n    lossPerc = loss / costP * 100\n    return str(lossPerc) + \"%\"  # Func to calculate loss percent\nprint(\"Hello\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "documentation": {}
    },
    {
        "label": "profitPercent",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "peekOfCode": "def profitPercent(prof, costP):\n    profitPerc = prof / costP * 100\n    return str(profitPerc) + \"%\"  # func to calculate profit percent\ndef lossPercent(loss, costP):\n    lossPerc = loss / costP * 100\n    return str(lossPerc) + \"%\"  # Func to calculate loss percent\nprint(\"Hello\\n\")\nprint(\"Press Enter To Exit\")\nwhile True:\n    google = str(input(\"Profit or Loss : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "documentation": {}
    },
    {
        "label": "lossPercent",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "peekOfCode": "def lossPercent(loss, costP):\n    lossPerc = loss / costP * 100\n    return str(lossPerc) + \"%\"  # Func to calculate loss percent\nprint(\"Hello\\n\")\nprint(\"Press Enter To Exit\")\nwhile True:\n    google = str(input(\"Profit or Loss : \"))\n    if google.strip() == \"Profit\":  # condition for profit\n        sellPrice = float(input(\"Selling Price : \"))  # getting selling price\n        costPrice = float(input(\"Cost Price : \"))  # getting costprice",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Loss",
        "documentation": {}
    },
    {
        "label": "dragonFreak",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.madLibs",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.madLibs",
        "peekOfCode": "def dragonFreak():\n    colorDrag = raw_input(\"Color : \")\n    superLatDrag = raw_input(\"Superlative (ending in est) : \")\n    adj1Drag = raw_input(\"Adjective : \")\n    bodyDragPlu = raw_input(\"Body Part Plural : \")\n    bodyDrag = raw_input(\"Body Part : \")\n    nounDrag = raw_input(\"Noun : \")\n    animalDrag = raw_input(\"Animal(Plural) : \")\n    adj2Drag = raw_input(\"Adjective : \")\n    adj3Drag = raw_input(\"Adjective : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.madLibs",
        "documentation": {}
    },
    {
        "label": "excuses",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.madLibs",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.madLibs",
        "peekOfCode": "def excuses():\n    place = raw_input(\"Place : \")\n    adjExcuse = raw_input(\"Adjective : \")\n    bodyPart = raw_input(\"Bodypart : \")\n    fMadLib = \"\"\"\n    I cannot come to %s ,\n    because there is %s %s flu\n    \"\"\" % (\n        place,\n        adjExcuse,",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.madLibs",
        "documentation": {}
    },
    {
        "label": "libs",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.madLibs",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.madLibs",
        "peekOfCode": "libs = [\"Dragon Freak\", \"Excuses\"]\n# precode\ndef dragonFreak():\n    colorDrag = raw_input(\"Color : \")\n    superLatDrag = raw_input(\"Superlative (ending in est) : \")\n    adj1Drag = raw_input(\"Adjective : \")\n    bodyDragPlu = raw_input(\"Body Part Plural : \")\n    bodyDrag = raw_input(\"Body Part : \")\n    nounDrag = raw_input(\"Noun : \")\n    animalDrag = raw_input(\"Animal(Plural) : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.madLibs",
        "documentation": {}
    },
    {
        "label": "magic",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.magicball_8",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.magicball_8",
        "peekOfCode": "def magic():\n    input(\"Ask me a question . Try me: \")\n    return random.choice(\n        [\n            \"It is certain\",\n            \"Outlook good\",\n            \"You may rely on it\",\n            \"Ask again later\",\n            \"Concentrate and ask again\",\n            \"Reply hazy, try again\",",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.magicball_8",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "peekOfCode": "add = 24 + 1004\n# - operator subtracts second number from First\nsubtract = 546 - 132\n# * multiplies numbers\nmultiply = 90 * 4\n# / divides numbers\ndivide = 36 / 6\n# returns the remainder of the division\nmodulo = 17 % 3\n# FLOAT",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "peekOfCode": "subtract = 546 - 132\n# * multiplies numbers\nmultiply = 90 * 4\n# / divides numbers\ndivide = 36 / 6\n# returns the remainder of the division\nmodulo = 17 % 3\n# FLOAT\n# floats are decimal point numbers positive or negative\naddFloat = 24.5 + 1004.005",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "peekOfCode": "multiply = 90 * 4\n# / divides numbers\ndivide = 36 / 6\n# returns the remainder of the division\nmodulo = 17 % 3\n# FLOAT\n# floats are decimal point numbers positive or negative\naddFloat = 24.5 + 1004.005\nsubtractFloat = 546.90 - 132.56\nmultiplyFloat = 90.0 * 4.2",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "peekOfCode": "divide = 36 / 6\n# returns the remainder of the division\nmodulo = 17 % 3\n# FLOAT\n# floats are decimal point numbers positive or negative\naddFloat = 24.5 + 1004.005\nsubtractFloat = 546.90 - 132.56\nmultiplyFloat = 90.0 * 4.2\ndivideFloat = 36.6 / 6.6\nmoduloFloat = 17.0 % 3.0",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "documentation": {}
    },
    {
        "label": "modulo",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "peekOfCode": "modulo = 17 % 3\n# FLOAT\n# floats are decimal point numbers positive or negative\naddFloat = 24.5 + 1004.005\nsubtractFloat = 546.90 - 132.56\nmultiplyFloat = 90.0 * 4.2\ndivideFloat = 36.6 / 6.6\nmoduloFloat = 17.0 % 3.0\n# all operators work same on both floats or integers",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "documentation": {}
    },
    {
        "label": "addFloat",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "peekOfCode": "addFloat = 24.5 + 1004.005\nsubtractFloat = 546.90 - 132.56\nmultiplyFloat = 90.0 * 4.2\ndivideFloat = 36.6 / 6.6\nmoduloFloat = 17.0 % 3.0\n# all operators work same on both floats or integers",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "documentation": {}
    },
    {
        "label": "subtractFloat",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "peekOfCode": "subtractFloat = 546.90 - 132.56\nmultiplyFloat = 90.0 * 4.2\ndivideFloat = 36.6 / 6.6\nmoduloFloat = 17.0 % 3.0\n# all operators work same on both floats or integers",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "documentation": {}
    },
    {
        "label": "multiplyFloat",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "peekOfCode": "multiplyFloat = 90.0 * 4.2\ndivideFloat = 36.6 / 6.6\nmoduloFloat = 17.0 % 3.0\n# all operators work same on both floats or integers",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "documentation": {}
    },
    {
        "label": "divideFloat",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "peekOfCode": "divideFloat = 36.6 / 6.6\nmoduloFloat = 17.0 % 3.0\n# all operators work same on both floats or integers",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "documentation": {}
    },
    {
        "label": "moduloFloat",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "peekOfCode": "moduloFloat = 17.0 % 3.0\n# all operators work same on both floats or integers",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mathoperators",
        "documentation": {}
    },
    {
        "label": "lower_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "peekOfCode": "def lower_(arr):\n    \"\"\"\n\tFor conversion of every element in list to lower \n\t\"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].lower()\ndef max_alphabetical_order(s):\n    \"\"\"\n\tUseful on lists containing strings that start from alphabets,\n\tbecause the algorithm is written for it in the first place!",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "max_alphabetical_order",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "peekOfCode": "def max_alphabetical_order(s):\n    \"\"\"\n\tUseful on lists containing strings that start from alphabets,\n\tbecause the algorithm is written for it in the first place!\n\t\"\"\"\n    copy = s[:]\n    useful = list(string.ascii_lowercase)\n    lower_(s)\n    res = s[0]\n    for word in s[1:]:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "case1",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "peekOfCode": "case1 = [\"Alpha\", \"Beta\", \"Gist\", \"exotic\", \"hells kitchen\", \"word\", \"Ultra\", \"zip\"]\ncall = max_alphabetical_order(case1)\nprint(\"Max element in list by alphabet order:\\n\" + call)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "peekOfCode": "call = max_alphabetical_order(case1)\nprint(\"Max element in list by alphabet order:\\n\" + call)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  compare(li):\n\tres = 0\n\tfor i in range(len(li) - 1):\n\t\ta = li[i]\n\t\tb = li[i + 1]\n\t\tif (a > b):\n\t\t\tif (a > res):\n\t\t\t\tres = a \n\t\telse:\n\t\t\tif (b > res):"
        },
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "peekOfCode": "def  compare(li):\n\tres = 0\n\tfor i in range(len(li) - 1):\n\t\ta = li[i]\n\t\tb = li[i + 1]\n\t\tif (a > b):\n\t\t\tif (a > res):\n\t\t\t\tres = a \n\t\telse:\n\t\t\tif (b > res):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "peekOfCode": "def convert():\t\n\tget_input = raw_input(\"Enter Space Seperated Numbers : \")\n\traw = get_input.split()\n\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))\n\treturn nums\nif __name__ == \"__main__\":\t\n\tprint compare(convert())",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "documentation": {}
    },
    {
        "label": "\tres",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "peekOfCode": "\tres = 0\n\tfor i in range(len(li) - 1):\n\t\ta = li[i]\n\t\tb = li[i + 1]\n\t\tif (a > b):\n\t\t\tif (a > res):\n\t\t\t\tres = a \n\t\telse:\n\t\t\tif (b > res):\n\t\t\t\tres = b\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "documentation": {}
    },
    {
        "label": "\t\ta",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "peekOfCode": "\t\ta = li[i]\n\t\tb = li[i + 1]\n\t\tif (a > b):\n\t\t\tif (a > res):\n\t\t\t\tres = a \n\t\telse:\n\t\t\tif (b > res):\n\t\t\t\tres = b\t\n\treturn res \ndef convert():\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "documentation": {}
    },
    {
        "label": "\t\tb",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "peekOfCode": "\t\tb = li[i + 1]\n\t\tif (a > b):\n\t\t\tif (a > res):\n\t\t\t\tres = a \n\t\telse:\n\t\t\tif (b > res):\n\t\t\t\tres = b\t\n\treturn res \ndef convert():\t\n\tget_input = raw_input(\"Enter Space Seperated Numbers : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tres",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "peekOfCode": "\t\t\t\tres = a \n\t\telse:\n\t\t\tif (b > res):\n\t\t\t\tres = b\t\n\treturn res \ndef convert():\t\n\tget_input = raw_input(\"Enter Space Seperated Numbers : \")\n\traw = get_input.split()\n\tnums = []\n\tfor i in raw:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tres",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "peekOfCode": "\t\t\t\tres = b\t\n\treturn res \ndef convert():\t\n\tget_input = raw_input(\"Enter Space Seperated Numbers : \")\n\traw = get_input.split()\n\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))\n\treturn nums\nif __name__ == \"__main__\":\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "documentation": {}
    },
    {
        "label": "\tget_input",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "peekOfCode": "\tget_input = raw_input(\"Enter Space Seperated Numbers : \")\n\traw = get_input.split()\n\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))\n\treturn nums\nif __name__ == \"__main__\":\t\n\tprint compare(convert())",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "documentation": {}
    },
    {
        "label": "\traw",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "peekOfCode": "\traw = get_input.split()\n\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))\n\treturn nums\nif __name__ == \"__main__\":\t\n\tprint compare(convert())",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "documentation": {}
    },
    {
        "label": "\tnums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "peekOfCode": "\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))\n\treturn nums\nif __name__ == \"__main__\":\t\n\tprint compare(convert())",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.max_int_in_list",
        "documentation": {}
    },
    {
        "label": "lower_",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "peekOfCode": "def lower_(arr):\n    \"\"\"\n\tFor conversion of every element in list to lower \n\t\"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].lower()\ndef min_alphabetical_order(s):\n    \"\"\"\n\tUseful on lists containing strings that start from alphabets,\n\tbecause the algorithm is written for it in the first place!",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "min_alphabetical_order",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "peekOfCode": "def min_alphabetical_order(s):\n    \"\"\"\n\tUseful on lists containing strings that start from alphabets,\n\tbecause the algorithm is written for it in the first place!\n\t\"\"\"\n    copy = s[:]\n    useful = list(string.ascii_lowercase)\n    lower_(s)\n    res = s[0]\n    for word in s[1:]:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "case1",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "peekOfCode": "case1 = [\"Alpha\", \"Beta\", \"Gist\", \"exotic\", \"hells kitchen\", \"word\", \"Ultra\", \"zip\"]\ncall = min_alphabetical_order(case1)\nprint(\"Max element in list by alphabet order:\\n\" + call)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "peekOfCode": "call = min_alphabetical_order(case1)\nprint(\"Max element in list by alphabet order:\\n\" + call)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  compare(li):\n\tif (len(li) == 1):\n\t\treturn \"Single Value To Compare {} in List\".format(li[0])\n\tres = 0\n\tfor i in range(len(li) - 1):\n\t\ta = li[i]\n\t\tb = li[i + 1]\n\t\tif (a < b):\n\t\t\tif (i != 0): \n\t\t\t\tif (a < res):"
        },
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "def  compare(li):\n\tif (len(li) == 1):\n\t\treturn \"Single Value To Compare {} in List\".format(li[0])\n\tres = 0\n\tfor i in range(len(li) - 1):\n\t\ta = li[i]\n\t\tb = li[i + 1]\n\t\tif (a < b):\n\t\t\tif (i != 0): \n\t\t\t\tif (a < res):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "def convert():\t\n\tget_input = raw_input(\"Enter Space Seperated Numbers : \")\n\traw = get_input.split()\n\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))\n\treturn nums\nif __name__ == \"__main__\":\t\n\tprint compare(convert())",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "\tres",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "\tres = 0\n\tfor i in range(len(li) - 1):\n\t\ta = li[i]\n\t\tb = li[i + 1]\n\t\tif (a < b):\n\t\t\tif (i != 0): \n\t\t\t\tif (a < res):\n\t\t\t\t\tres = a\n\t\t\telse:\n\t\t\t\tres = a \t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "\t\ta",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "\t\ta = li[i]\n\t\tb = li[i + 1]\n\t\tif (a < b):\n\t\t\tif (i != 0): \n\t\t\t\tif (a < res):\n\t\t\t\t\tres = a\n\t\t\telse:\n\t\t\t\tres = a \t\n\t\telse:\n\t\t\tif (i != 0):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "\t\tb",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "\t\tb = li[i + 1]\n\t\tif (a < b):\n\t\t\tif (i != 0): \n\t\t\t\tif (a < res):\n\t\t\t\t\tres = a\n\t\t\telse:\n\t\t\t\tres = a \t\n\t\telse:\n\t\t\tif (i != 0):\n\t\t\t\tif (b < res):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tres",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "\t\t\t\t\tres = a\n\t\t\telse:\n\t\t\t\tres = a \t\n\t\telse:\n\t\t\tif (i != 0):\n\t\t\t\tif (b < res):\n\t\t\t\t\tres = b\n\t\t\telse:\n\t\t\t\tres = b\t\n\treturn res ",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tres",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "\t\t\t\tres = a \t\n\t\telse:\n\t\t\tif (i != 0):\n\t\t\t\tif (b < res):\n\t\t\t\t\tres = b\n\t\t\telse:\n\t\t\t\tres = b\t\n\treturn res \ndef convert():\t\n\tget_input = raw_input(\"Enter Space Seperated Numbers : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tres",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "\t\t\t\t\tres = b\n\t\t\telse:\n\t\t\t\tres = b\t\n\treturn res \ndef convert():\t\n\tget_input = raw_input(\"Enter Space Seperated Numbers : \")\n\traw = get_input.split()\n\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tres",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "\t\t\t\tres = b\t\n\treturn res \ndef convert():\t\n\tget_input = raw_input(\"Enter Space Seperated Numbers : \")\n\traw = get_input.split()\n\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))\n\treturn nums\nif __name__ == \"__main__\":\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "\tget_input",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "\tget_input = raw_input(\"Enter Space Seperated Numbers : \")\n\traw = get_input.split()\n\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))\n\treturn nums\nif __name__ == \"__main__\":\t\n\tprint compare(convert())",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "\traw",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "\traw = get_input.split()\n\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))\n\treturn nums\nif __name__ == \"__main__\":\t\n\tprint compare(convert())",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "\tnums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "peekOfCode": "\tnums = []\n\tfor i in raw:\n\t\tnums.append(float(i))\n\treturn nums\nif __name__ == \"__main__\":\t\n\tprint compare(convert())",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.min_int_in_list",
        "documentation": {}
    },
    {
        "label": "selection_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.modified_selection_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.modified_selection_sort",
        "peekOfCode": "def selection_sort(array):\n    temp_num = len(array)\n    temp_arr = []\n    while len(temp_arr) != temp_num:\n        a = min(array)\n        temp_arr.append(a)\n        del array[array.index(a)]\n    return temp_arr\n# Test\ntest_case = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90]",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.modified_selection_sort",
        "documentation": {}
    },
    {
        "label": "test_case",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.modified_selection_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.modified_selection_sort",
        "peekOfCode": "test_case = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90]\nprint(\"By Builtin method: {}\".format(sorted(test_case)))\nprint(\"By SelectionSort method: {}\".format(selection_sort(test_case)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.modified_selection_sort",
        "documentation": {}
    },
    {
        "label": "inside",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Module",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Module",
        "peekOfCode": "inside = random.randint(1, 37890)  # choses a random integer between given range\nprint(inside)\noutside = random.randrange(1, 1000)  # choses a random number number in given range\nprint(outside)\ncolors = [\"green\", \"black\", \"blue\", \"yellow\", \"white\"]\nprint(random.choice(colors))  # choses random element from list",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Module",
        "documentation": {}
    },
    {
        "label": "outside",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Module",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Module",
        "peekOfCode": "outside = random.randrange(1, 1000)  # choses a random number number in given range\nprint(outside)\ncolors = [\"green\", \"black\", \"blue\", \"yellow\", \"white\"]\nprint(random.choice(colors))  # choses random element from list",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Module",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Module",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Module",
        "peekOfCode": "colors = [\"green\", \"black\", \"blue\", \"yellow\", \"white\"]\nprint(random.choice(colors))  # choses random element from list",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Module",
        "documentation": {}
    },
    {
        "label": "downloadImage",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.mod_example",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.mod_example",
        "peekOfCode": "def downloadImage(url):\n    filename = str(random.randrange(1, 1000))\n    download = urllib.request.urlretrieve(url, filename)\ndownloadImage()",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.mod_example",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "peekOfCode": "a = {1, 23, 55, 76, 13, 90, 34, 78}\nb = {12, 345, 8, 4, 0, 7, 4, 3, 53, 4, 6, 3}\nabInteraction = a & b  # & operator interacts two sets\nabUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "peekOfCode": "b = {12, 345, 8, 4, 0, 7, 4, 3, 53, 4, 6, 3}\nabInteraction = a & b  # & operator interacts two sets\nabUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "documentation": {}
    },
    {
        "label": "abInteraction",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "peekOfCode": "abInteraction = a & b  # & operator interacts two sets\nabUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "documentation": {}
    },
    {
        "label": "abUnion",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "peekOfCode": "abUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "documentation": {}
    },
    {
        "label": "eqn",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "peekOfCode": "eqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Morgans_law",
        "documentation": {}
    },
    {
        "label": "decodeMorse",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.morse_code_decoder",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.morse_code_decoder",
        "peekOfCode": "def decodeMorse(morseCode):\n    # ToDo: Accept dots, dashes and spaces, return human-readable message\n    morse_code = {\".-\" : \"A\",\n                  \"-...\" : \"B\",\n                  \"-.-.\" : \"C\",\n                  \"-..\" : \"D\",\n                  \".\" : \"E\",\n                  \"..-.\" : \"F\",\n                  \"--.\" : \"G\",\n                  \"....\" : \"H\",",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.morse_code_decoder",
        "documentation": {}
    },
    {
        "label": "inside",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.my_name",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.my_name",
        "peekOfCode": "inside = list(\"abcdefghijklmnopqrs tuvwyxyz\")\nprint(\n    inside[10]\n    + inside[0]\n    + inside[11]\n    + inside[15]\n    + inside[0]\n    + inside[10]\n    + inside[19]\n    + inside[20]",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.my_name",
        "documentation": {}
    },
    {
        "label": "nearest_square",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.nearest_square_and_its_root",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.nearest_square_and_its_root",
        "peekOfCode": "def nearest_square(n):\n    i = 0\n    found = False\n    while not found:\n        if i ** 2 <= n < ((i + 1) ** 2):\n            found = True\n        else:\n            i += 1\n    return (i, i ** 2)\n# Test",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.nearest_square_and_its_root",
        "documentation": {}
    },
    {
        "label": "case",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.nearest_square_and_its_root",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.nearest_square_and_its_root",
        "peekOfCode": "case = 40\nres = nearest_square(case)\nprint(\"Nearest square to {}: \\n{}\".format(case, res[1]))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.nearest_square_and_its_root",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.nearest_square_and_its_root",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.nearest_square_and_its_root",
        "peekOfCode": "res = nearest_square(case)\nprint(\"Nearest square to {}: \\n{}\".format(case, res[1]))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.nearest_square_and_its_root",
        "documentation": {}
    },
    {
        "label": "newContact",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "peekOfCode": "def newContact():\n    while True:\n        newContact = raw_input(\"Name for new Contact : \")\n        numForNewContact = raw_input(\"Number for Contact : \")\n        add = raw_input(\"Add or Try again :\")\n        if add.strip() == \"Add\":\n            contacts[newContact] = numForNewContact\n            print(\"Contact Successfully added.\")\n            break\n        elif add.strip() == \"Try again\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "documentation": {}
    },
    {
        "label": "searchContact",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "peekOfCode": "def searchContact():\n    while True:\n        search = raw_input(\"Search for contact : \")\n        toShow = str(search) + contacts[search]\n        print(toShow)\n        startAgain = raw_input(\"Search more or continue : \")\n        if startAgain.strip() == \"Search more\":\n            print(\" \")\n            continue\n        elif startAgain.strip() == \"continue\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "documentation": {}
    },
    {
        "label": "editContact",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "peekOfCode": "def editContact():\n    while True:\n        whichToEdit = raw_input(\"Name of Contact of which Number to Edit : \")\n        contacts[whichToEdit] = raw_input(\"Number to add : \")\n        startAgain = raw_input(\"Edit more or continue : \")\n        if startAgain.strip() == \"Edit more\":\n            print(\" \")\n            continue\n        elif startAgain.strip() == \"continue\":\n            print(\" \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "documentation": {}
    },
    {
        "label": "contacts",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "peekOfCode": "contacts = {}\n# funcs of pre code\n# func to add new contact\ndef newContact():\n    while True:\n        newContact = raw_input(\"Name for new Contact : \")\n        numForNewContact = raw_input(\"Number for Contact : \")\n        add = raw_input(\"Add or Try again :\")\n        if add.strip() == \"Add\":\n            contacts[newContact] = numForNewContact",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.newOnContacts",
        "documentation": {}
    },
    {
        "label": "number_to_check",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.non_multiples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.non_multiples",
        "peekOfCode": "number_to_check = int(input(\"Number : \"))\ntill_where = int(input(\"Till where to check : \"))\nlist_of_non_multiples = []\nfor num in range(0, till_where + 1):\n    if num % number_to_check != 0:\n        list_of_non_multiples.append(num)\nprint(list_of_non_multiples)\n# or you can do\n# this\nprint(\" \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.non_multiples",
        "documentation": {}
    },
    {
        "label": "till_where",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.non_multiples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.non_multiples",
        "peekOfCode": "till_where = int(input(\"Till where to check : \"))\nlist_of_non_multiples = []\nfor num in range(0, till_where + 1):\n    if num % number_to_check != 0:\n        list_of_non_multiples.append(num)\nprint(list_of_non_multiples)\n# or you can do\n# this\nprint(\" \")\nfor element in list_of_non_multiples:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.non_multiples",
        "documentation": {}
    },
    {
        "label": "list_of_non_multiples",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.non_multiples",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.non_multiples",
        "peekOfCode": "list_of_non_multiples = []\nfor num in range(0, till_where + 1):\n    if num % number_to_check != 0:\n        list_of_non_multiples.append(num)\nprint(list_of_non_multiples)\n# or you can do\n# this\nprint(\" \")\nfor element in list_of_non_multiples:\n    print(element)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.non_multiples",
        "documentation": {}
    },
    {
        "label": "is_number_prime",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Numbers",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Numbers",
        "peekOfCode": "def is_number_prime(number):\n    \"\"\"\n    Function which checks whether the number is a prime number or not\n    :param number: integer - to be checked for prime-ness\n    :return: boolean - true if prime, else false\n    \"\"\"\n    \"\"\"\n    This is the main logic behind reducing the numbers to check for as factors\n        if N = a * b; where a<=b and a,b C (1, N)\n        then, a * b >= a*a;",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Numbers",
        "documentation": {}
    },
    {
        "label": "POSITIVE_MESSAGE",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Numbers",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Numbers",
        "peekOfCode": "POSITIVE_MESSAGE = \" is a prime number\"\nNEGATIVE_MESSAGE = \" is not a prime number\"\ndef is_number_prime(number):\n    \"\"\"\n    Function which checks whether the number is a prime number or not\n    :param number: integer - to be checked for prime-ness\n    :return: boolean - true if prime, else false\n    \"\"\"\n    \"\"\"\n    This is the main logic behind reducing the numbers to check for as factors",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Numbers",
        "documentation": {}
    },
    {
        "label": "NEGATIVE_MESSAGE",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Numbers",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Numbers",
        "peekOfCode": "NEGATIVE_MESSAGE = \" is not a prime number\"\ndef is_number_prime(number):\n    \"\"\"\n    Function which checks whether the number is a prime number or not\n    :param number: integer - to be checked for prime-ness\n    :return: boolean - true if prime, else false\n    \"\"\"\n    \"\"\"\n    This is the main logic behind reducing the numbers to check for as factors\n        if N = a * b; where a<=b and a,b C (1, N)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Numbers",
        "documentation": {}
    },
    {
        "label": "newContact",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "peekOfCode": "def newContact():\n    while True:\n        newContact = raw_input(\"Name for new Contact : \")\n        numForNewContact = raw_input(\"Number for Contact : \")\n        add = raw_input(\"Add or Try again :\")\n        if add.strip() == \"Add\":\n            contacts[newContact] = numForNewContact\n            print(\"Contact Successfully added.\")\n            break\n        elif add.strip() == \"Try again\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "documentation": {}
    },
    {
        "label": "searchContact",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "peekOfCode": "def searchContact():\n    while True:\n        search = raw_input(\"Search for contact : \")\n        toShow = str(search) + contacts[search]\n        print(toShow)\n        startAgain = raw_input(\"Search more or continue : \")\n        if startAgain.strip() == \"Search more\":\n            print(\" \")\n            continue\n        elif startAgain.strip() == \"continue\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "documentation": {}
    },
    {
        "label": "editContact",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "peekOfCode": "def editContact():\n    while True:\n        whichToEdit = raw_input(\"Name of Contact of which Number to Edit : \")\n        contacts[whichToEdit] = raw_input(\"Number to add : \")\n        startAgain = raw_input(\"Edit more or continue : \")\n        if startAgain.strip() == \"Edit more\":\n            print(\" \")\n            continue\n        elif startAgain.strip() == \"continue\":\n            print(\" \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "documentation": {}
    },
    {
        "label": "contacts",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "peekOfCode": "contacts = {}\n# funcs of pre code\n# func to add new contact\ndef newContact():\n    while True:\n        newContact = raw_input(\"Name for new Contact : \")\n        numForNewContact = raw_input(\"Number for Contact : \")\n        add = raw_input(\"Add or Try again :\")\n        if add.strip() == \"Add\":\n            contacts[newContact] = numForNewContact",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.OnContacts",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "peekOfCode": "name = \"Kalpak\"\nprint(\"My name is \" + name)  # I have given space after is notice\nage = 14\nprint(\"My age is \", age)  # comma seprates two different things you want to print\nprint(\"This isn't going away too soon.\")  # that \\ is called as an escape character\n# the \\ is used to use same quote in a string\nprint(\n    \"I love newlines \\n\"\n)  # \\n prints new line after string or according to its position\nprint(\"\\t I love tabs\")  # \\t adds a tab according to its position",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "peekOfCode": "age = 14\nprint(\"My age is \", age)  # comma seprates two different things you want to print\nprint(\"This isn't going away too soon.\")  # that \\ is called as an escape character\n# the \\ is used to use same quote in a string\nprint(\n    \"I love newlines \\n\"\n)  # \\n prints new line after string or according to its position\nprint(\"\\t I love tabs\")  # \\t adds a tab according to its position\nmultiple = \"Iron Man\"\nprint(multiple * 5)  # this will print string 5 times",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "documentation": {}
    },
    {
        "label": "multiple",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "peekOfCode": "multiple = \"Iron Man\"\nprint(multiple * 5)  # this will print string 5 times\n# string methods in built\ncountry = \"Norway\"\nprint(country.upper())  # prints all letters in upper case\nprint(country.lower())  # prints all letters in lower case\nprint(country.title())  # converts into title\n# string formatting\nprint(\"%s %s %s\" % (\"I\", \"am\", \"cool\"))\nexpression = \"I love\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "documentation": {}
    },
    {
        "label": "country",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "peekOfCode": "country = \"Norway\"\nprint(country.upper())  # prints all letters in upper case\nprint(country.lower())  # prints all letters in lower case\nprint(country.title())  # converts into title\n# string formatting\nprint(\"%s %s %s\" % (\"I\", \"am\", \"cool\"))\nexpression = \"I love\"\nmovie = \"Captain America 3\"\nprint(\"%s %s\" % (expression, movie))\n# type conversion",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "documentation": {}
    },
    {
        "label": "expression",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "peekOfCode": "expression = \"I love\"\nmovie = \"Captain America 3\"\nprint(\"%s %s\" % (expression, movie))\n# type conversion\naddition = 12343 + 3349\nprint(\"The answer is \" + str(addition))  # str() method converts non-string into string",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "documentation": {}
    },
    {
        "label": "movie",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "peekOfCode": "movie = \"Captain America 3\"\nprint(\"%s %s\" % (expression, movie))\n# type conversion\naddition = 12343 + 3349\nprint(\"The answer is \" + str(addition))  # str() method converts non-string into string",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "peekOfCode": "addition = 12343 + 3349\nprint(\"The answer is \" + str(addition))  # str() method converts non-string into string",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Operations",
        "documentation": {}
    },
    {
        "label": "siliconValley",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.OperationsMethods",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.OperationsMethods",
        "peekOfCode": "siliconValley = [\n    \"Google\",\n    \"Apple\",\n    \"Dropbox\",\n    \"Facebook\",\n    \"Cisco\",\n    \"Adobe\",\n    \"Oracle\",\n    \"Samsung\",\n]",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.OperationsMethods",
        "documentation": {}
    },
    {
        "label": "poppedElement",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.OperationsMethods",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.OperationsMethods",
        "peekOfCode": "poppedElement = siliconValley.pop(4)\nprint(\"Popped element is \" + poppedElement)\n# Oops I Samsung isnt in silicon valley, I have to remove Samsung from list\n# How am I gonna do thats\n# You have to enter the element in parenthesis and not it's index\nsiliconValley.remove(\"Samsung\")\nprint(siliconValley)\n# I want to sort the list in alphabetical order\n# How to do thats\n# simple",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.OperationsMethods",
        "documentation": {}
    },
    {
        "label": "googleIndex",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.OperationsMethods",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.OperationsMethods",
        "peekOfCode": "googleIndex = siliconValley.index(\"Google\")\nprint(siliconValley[googleIndex])\n# I am tired of watching those elements again and again\n# How I am going to do thats\n# easy\ndel siliconValley\nprint(siliconValley)  # this should probably give you an NameError",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.OperationsMethods",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "def binary_search(array, n):\n\tarr = sorted(array)\n\tto_return = False \n\tfirst_elem = 0\n\tlast_elem = len(arr) - 1\n\twhile (first_elem <= last_elem):\n\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "Ordered_binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "def Ordered_binary_search(arra, elem):\n\tif (len(arra) == 0):\n\t\treturn False\n\tmiddle = len(arra) // 2\t\n\tif (arra[middle] == elem):\n\t\treturn True \n\telse:\t\n\t\tif (elem > arra[middle]):\n\t\t\treturn binary_search(arra[middle:], elem)\n\t\telse: ",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\tarr",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "\tarr = sorted(array)\n\tto_return = False \n\tfirst_elem = 0\n\tlast_elem = len(arr) - 1\n\twhile (first_elem <= last_elem):\n\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\tto_return",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "\tto_return = False \n\tfirst_elem = 0\n\tlast_elem = len(arr) - 1\n\twhile (first_elem <= last_elem):\n\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:\n\t\t\tif (n > arr[mid]):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\tfirst_elem",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "\tfirst_elem = 0\n\tlast_elem = len(arr) - 1\n\twhile (first_elem <= last_elem):\n\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:\n\t\t\tif (n > arr[mid]):\n\t\t\t\tfirst_elem = mid + 1",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\tlast_elem",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "\tlast_elem = len(arr) - 1\n\twhile (first_elem <= last_elem):\n\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:\n\t\t\tif (n > arr[mid]):\n\t\t\t\tfirst_elem = mid + 1\n\t\t\telse:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\t\tmid",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:\n\t\t\tif (n > arr[mid]):\n\t\t\t\tfirst_elem = mid + 1\n\t\t\telse:\n\t\t\t\tlast_elem = mid - 1\n\treturn to_return\t\t\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\t\t\tto_return",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:\n\t\t\tif (n > arr[mid]):\n\t\t\t\tfirst_elem = mid + 1\n\t\t\telse:\n\t\t\t\tlast_elem = mid - 1\n\treturn to_return\t\t\t\ndef Ordered_binary_search(arra, elem):\n\tif (len(arra) == 0):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfirst_elem",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "\t\t\t\tfirst_elem = mid + 1\n\t\t\telse:\n\t\t\t\tlast_elem = mid - 1\n\treturn to_return\t\t\t\ndef Ordered_binary_search(arra, elem):\n\tif (len(arra) == 0):\n\t\treturn False\n\tmiddle = len(arra) // 2\t\n\tif (arra[middle] == elem):\n\t\treturn True ",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tlast_elem",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "\t\t\t\tlast_elem = mid - 1\n\treturn to_return\t\t\t\ndef Ordered_binary_search(arra, elem):\n\tif (len(arra) == 0):\n\t\treturn False\n\tmiddle = len(arra) // 2\t\n\tif (arra[middle] == elem):\n\t\treturn True \n\telse:\t\n\t\tif (elem > arra[middle]):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\tmiddle",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "\tmiddle = len(arra) // 2\t\n\tif (arra[middle] == elem):\n\t\treturn True \n\telse:\t\n\t\tif (elem > arra[middle]):\n\t\t\treturn binary_search(arra[middle:], elem)\n\t\telse: \n\t\t\treturn binary_search(arra[:middle], elem) \t\nnums = [0,23,54,5,32,78]\t\nprint Ordered_binary_search(nums, 32)\t",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "peekOfCode": "nums = [0,23,54,5,32,78]\t\nprint Ordered_binary_search(nums, 32)\t\nprint Ordered_binary_search(nums, 5)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "complementary",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.otherAngle",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.otherAngle",
        "peekOfCode": "def complementary():\n    while True:\n        complementary = float(input(\"Complementary of : \"))\n        if complementary <= 90:\n            complement = 90 - complementary\n            return complement\n            break\n        else:\n            print(\"Number greater than 90 degree. Try again\")\n            continue",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.otherAngle",
        "documentation": {}
    },
    {
        "label": "supplementary",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.otherAngle",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.otherAngle",
        "peekOfCode": "def supplementary():\n    while True:\n        supplementary = float(input(\"Supplementary of : \"))\n        if supplementary <= 180:\n            supplement = 180 - supplementary\n            return supplement\n            break\n        else:\n            print(\"Number greater than 180 degree. Try again\")\n            continue",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.otherAngle",
        "documentation": {}
    },
    {
        "label": "create_password",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.password_creator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.password_creator",
        "peekOfCode": "def create_password(n):\n    allChars = (\n        list(string.ascii_letters) + list(string.digits) + list(string.punctuation)\n    )\n    passphrase = []\n    for i in range(n):\n        tmp = random.choice(allChars)\n        passphrase.append(tmp)\n    res = \"\".join(passphrase)\n    return res",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.password_creator",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.password_creator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.password_creator",
        "peekOfCode": "test1 = create_password(16)\nprint(test1)\n# Test 2\ntest2 = create_password(32)\nprint(test2)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.password_creator",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.password_creator",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.password_creator",
        "peekOfCode": "test2 = create_password(32)\nprint(test2)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.password_creator",
        "documentation": {}
    },
    {
        "label": "iLoveDiscount",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Percent",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Percent",
        "peekOfCode": "def iLoveDiscount(discount, mp):  # mp is market price\n    discountPerc = discount / mp * 100\n    return \"Discount is \" + str(discountPerc) + \"%\"\nprint(\"Hello\\n\")\nprint(\"Press Enter to exit\")\nwhile (\n    True\n):  # I've put counting discount in a loop cause if you want to count on multiple items\n    more = str(input(\"Count or End : \"))\n    if more == \"Count\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Percent",
        "documentation": {}
    },
    {
        "label": "percentToOrig",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.percentageCalc",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.percentageCalc",
        "peekOfCode": "def percentToOrig():\n    whatPercent = float(input(\"What Percent : \"))\n    ofWhat = float(input(\"Of What Percent : \"))\n    orignal = whatPercent / 100 * ofWhat\n    print(orignal)\nprint(percentToOrig())",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.percentageCalc",
        "documentation": {}
    },
    {
        "label": "increasePercent",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.percentage_increase_decrease",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.percentage_increase_decrease",
        "peekOfCode": "def increasePercent(increase, origValue):\n    return str(increase / origValue * 100) + \"%\"\ndef decreasePercent(decrease, origValue):\n    return str(decrease / origValue * 100) + \"%\"\nprint(\"Hello,\\nPress Enter To Exit\")\nincOrDec = str(input(\"increase or decrease: \")).strip().lower()\nif incOrDec == \"increase\":\n    print(\n        increasePercent(\n            float(input(\"Increased Value : \")), float(input(\"Orignal Value : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.percentage_increase_decrease",
        "documentation": {}
    },
    {
        "label": "decreasePercent",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.percentage_increase_decrease",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.percentage_increase_decrease",
        "peekOfCode": "def decreasePercent(decrease, origValue):\n    return str(decrease / origValue * 100) + \"%\"\nprint(\"Hello,\\nPress Enter To Exit\")\nincOrDec = str(input(\"increase or decrease: \")).strip().lower()\nif incOrDec == \"increase\":\n    print(\n        increasePercent(\n            float(input(\"Increased Value : \")), float(input(\"Orignal Value : \"))\n        )\n    )",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.percentage_increase_decrease",
        "documentation": {}
    },
    {
        "label": "incOrDec",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.percentage_increase_decrease",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.percentage_increase_decrease",
        "peekOfCode": "incOrDec = str(input(\"increase or decrease: \")).strip().lower()\nif incOrDec == \"increase\":\n    print(\n        increasePercent(\n            float(input(\"Increased Value : \")), float(input(\"Orignal Value : \"))\n        )\n    )\nelif incOrDec == \"decrease\":\n    print(\n        increasePercent(",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.percentage_increase_decrease",
        "documentation": {}
    },
    {
        "label": "preassure",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "peekOfCode": "def preassure():\n    print(\" \")\n    force = int(raw_input(\"Enter force : \"))\n    print(\" \")\n    area = int(raw_input(\"Enter area : \"))\n    preassure = force / area\n    print(\" \")\n    print(\"Preassure is \" + str(preassure) + \"pascal\")\n# force function to calculate force\ndef force():",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "documentation": {}
    },
    {
        "label": "force",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "peekOfCode": "def force():\n    print(\" \")\n    mass = int(raw_input(\"Enter mass : \"))\n    print(\" \")\n    accelaration = int(raw_input(\"Enter accelaration : \"))\n    force = mass * accelaration\n    print(\" \")\n    print(\"Force is \" + str(force) + \"newton\")\n# speed func to calculate speed of object\ndef speed():",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "documentation": {}
    },
    {
        "label": "speed",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "peekOfCode": "def speed():\n    print(\" \")\n    distance = int(raw_input(\"Enter distance : \"))\n    print(\" \")\n    time = int(raw_input(\"Enter time taken : \"))\n    speed = distance / time\n    print(\" \")\n    print(\"Speed of object is \" + str(speed))\n# velocity func to calculate velocity of object\ndef velocity():",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "documentation": {}
    },
    {
        "label": "velocity",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "peekOfCode": "def velocity():\n    print(\" \")\n    displacement = int(raw_input(\"Enter displacement : \"))\n    print(\" \")\n    time = int(raw_input(\"Enter time taken : \"))\n    velocity = displacement / time\n    print(\" \")\n    print(\"Velocity of object is \" + str(velocity))\n# accelaration func to calculate accelaration\ndef accelaration():",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "documentation": {}
    },
    {
        "label": "accelaration",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "peekOfCode": "def accelaration():\n    print(\" \")\n    initialV = int(raw_input(\"Enter initial velocity : \"))\n    print(\" \")\n    finalV = int(raw_input(\"Enter final velocity : \"))\n    print(\" \")\n    time = int(raw_input(\"Enter time taken : \"))\n    acce = (finalV - initialV) / time\n    print(\" \")\n    print(\"Accelaration is \" + str(acce) + \"m/s sq.\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "documentation": {}
    },
    {
        "label": "moment",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "peekOfCode": "def moment():\n    print(\" \")\n    mass = int(raw_input(\"Enter mass : \"))\n    print(\" \")\n    velocity = int(raw_input(\"Enter velocity : \"))\n    print(\" \")\n    momentum = mass * velocity\n    print(\" \")\n    print(\"Momentum is \" + str(momentum))\n# CLI code sector II",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "documentation": {}
    },
    {
        "label": "operations",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "peekOfCode": "operations = [\"Preassure\", \"Force\", \"Speed\", \"Velocity\", \"Accelaration\", \"Momentum\"]\n# pre code sector I\n# preassure function to calculate preassure\ndef preassure():\n    print(\" \")\n    force = int(raw_input(\"Enter force : \"))\n    print(\" \")\n    area = int(raw_input(\"Enter area : \"))\n    preassure = force / area\n    print(\" \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.physics",
        "documentation": {}
    },
    {
        "label": "addMoney",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "peekOfCode": "def addMoney():\n    print(\" \")\n    userAdd = float(raw_input(\"Add money : \"))\n    print(\" \")\n    money = money + userAdd\n    print(\"After adding current Money you have is \" + str(money) + \" rupees\")\n# function to withdraw money from current amount\ndef withdrawMoney():\n    print(\" \")\n    userWithdraw = float(raw_input(\"Add money : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "documentation": {}
    },
    {
        "label": "withdrawMoney",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "peekOfCode": "def withdrawMoney():\n    print(\" \")\n    userWithdraw = float(raw_input(\"Add money : \"))\n    print(\" \")\n    money = money + userWithdraw\n    print(\"After adding current Money you have is \" + str(money) + \" rupees\")\n# function to display current amount\ndef currentMoney():\n    print(\" \")\n    current = \"Current money you have is \" + str(money) + \" rupees\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "documentation": {}
    },
    {
        "label": "currentMoney",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "peekOfCode": "def currentMoney():\n    print(\" \")\n    current = \"Current money you have is \" + str(money) + \" rupees\"\n# main code\nprint(\" \")\nprint(\"--------------------Start-------------------\")\nwhile True:\n    print(\" \")\n    user = raw_input(\"Start or End : \")\n    if user.strip() == \"Start\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "documentation": {}
    },
    {
        "label": "money",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "peekOfCode": "money = 0\n# function to add money to current amount\ndef addMoney():\n    print(\" \")\n    userAdd = float(raw_input(\"Add money : \"))\n    print(\" \")\n    money = money + userAdd\n    print(\"After adding current Money you have is \" + str(money) + \" rupees\")\n# function to withdraw money from current amount\ndef withdrawMoney():",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.piggyBank",
        "documentation": {}
    },
    {
        "label": "alterWords",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.pigLatin",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.pigLatin",
        "peekOfCode": "def alterWords():\n    wordToAlter = str(input(\"Word To Translate : \"))\n    alteredWord = (\n        wordToAlter[1:] + wordToAlter[0:2] + \"y\"\n    )  # translating word to pig latin\n    if len(wordToAlter) < 46:\n        print(alteredWord)\n    else:\n        print(\"Too Big . Biggest Word in English Contains 45 characters.\")\n# main interaction code",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.pigLatin",
        "documentation": {}
    },
    {
        "label": "ping_host",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ping_host",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ping_host",
        "peekOfCode": "def ping_host(host_name):\n    ping_str = \"-c 1\"\n    if plt.system().lower() == \"Windows\":\n        ping_str = \"-n 1\"\n    ping = \"ping \" + ping_str + \" \" + host_name\n    resp = os.system(ping)\n    return resp == 0\n# Test\ntest_host = \"www.google.co.in\"\nresult = ping_host(test_host)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ping_host",
        "documentation": {}
    },
    {
        "label": "test_host",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ping_host",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ping_host",
        "peekOfCode": "test_host = \"www.google.co.in\"\nresult = ping_host(test_host)\nif result:\n    print(\"\\nStatus ({}): Is Alive\".format(test_host))\nelse:\n    print(\"\\nStatus ({}): Is Dead\".format(test_host))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ping_host",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ping_host",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ping_host",
        "peekOfCode": "result = ping_host(test_host)\nif result:\n    print(\"\\nStatus ({}): Is Alive\".format(test_host))\nelse:\n    print(\"\\nStatus ({}): Is Dead\".format(test_host))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ping_host",
        "documentation": {}
    },
    {
        "label": "is_number_prime",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.primeNumbers",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.primeNumbers",
        "peekOfCode": "def is_number_prime(number):\n    \"\"\"\n    Function which checks whether the number is a prime number or not\n    :param number: integer - to be checked for prime-ness\n    :return: boolean - true if prime, else false\n    \"\"\"\n    \"\"\"\n    This is the main logic behind reducing the numbers to check for as factors\n        if N = a * b; where a<=b and a,b C (1, N)\n        then, a * b >= a*a;",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.primeNumbers",
        "documentation": {}
    },
    {
        "label": "POSITIVE_MESSAGE",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.primeNumbers",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.primeNumbers",
        "peekOfCode": "POSITIVE_MESSAGE = \" is a prime number\"\nNEGATIVE_MESSAGE = \" is not a prime number\"\ndef is_number_prime(number):\n    \"\"\"\n    Function which checks whether the number is a prime number or not\n    :param number: integer - to be checked for prime-ness\n    :return: boolean - true if prime, else false\n    \"\"\"\n    \"\"\"\n    This is the main logic behind reducing the numbers to check for as factors",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.primeNumbers",
        "documentation": {}
    },
    {
        "label": "NEGATIVE_MESSAGE",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.primeNumbers",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.primeNumbers",
        "peekOfCode": "NEGATIVE_MESSAGE = \" is not a prime number\"\ndef is_number_prime(number):\n    \"\"\"\n    Function which checks whether the number is a prime number or not\n    :param number: integer - to be checked for prime-ness\n    :return: boolean - true if prime, else false\n    \"\"\"\n    \"\"\"\n    This is the main logic behind reducing the numbers to check for as factors\n        if N = a * b; where a<=b and a,b C (1, N)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.primeNumbers",
        "documentation": {}
    },
    {
        "label": "profit",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "peekOfCode": "def profit(sellP, costP):\n    profit = sellP - costP\n    return profit  # Function for calculating profit\ndef loss(costP, sellP):\n    loss = costP - sellP\n    return loss  # Function for calculating loss\ndef profitPercent(prof, costP):\n    profitPerc = prof / costP * 100\n    return str(profitPerc) + \"%\"  # func to calculate profit percent\ndef lossPercent(loss, costP):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "documentation": {}
    },
    {
        "label": "loss",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "peekOfCode": "def loss(costP, sellP):\n    loss = costP - sellP\n    return loss  # Function for calculating loss\ndef profitPercent(prof, costP):\n    profitPerc = prof / costP * 100\n    return str(profitPerc) + \"%\"  # func to calculate profit percent\ndef lossPercent(loss, costP):\n    lossPerc = loss / costP * 100\n    return str(lossPerc) + \"%\"  # Func to calculate loss percent\nprint(\"Hello\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "documentation": {}
    },
    {
        "label": "profitPercent",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "peekOfCode": "def profitPercent(prof, costP):\n    profitPerc = prof / costP * 100\n    return str(profitPerc) + \"%\"  # func to calculate profit percent\ndef lossPercent(loss, costP):\n    lossPerc = loss / costP * 100\n    return str(lossPerc) + \"%\"  # Func to calculate loss percent\nprint(\"Hello\\n\")\nprint(\"Press Enter To Exit\")\nwhile True:\n    google = str(input(\"Profit or Loss : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "documentation": {}
    },
    {
        "label": "lossPercent",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "peekOfCode": "def lossPercent(loss, costP):\n    lossPerc = loss / costP * 100\n    return str(lossPerc) + \"%\"  # Func to calculate loss percent\nprint(\"Hello\\n\")\nprint(\"Press Enter To Exit\")\nwhile True:\n    google = str(input(\"Profit or Loss : \"))\n    if google.strip() == \"Profit\":  # condition for profit\n        sellPrice = float(input(\"Selling Price : \"))  # getting selling price\n        costPrice = float(input(\"Cost Price : \"))  # getting costprice",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.profitLoss",
        "documentation": {}
    },
    {
        "label": "pythonKeywords",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.pyKeywords",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.pyKeywords",
        "peekOfCode": "pythonKeywords = keyword.kwlist\ngetToCheck = str(input(\"Keyword to check : \"))\ncheck = keyword.iskeyword(getToCheck)\nif check == True:\n    print(getToCheck + \" is a python keyword.\")\nelse:\n    print(getToCheck + \" is not a python keyword.\")\nprint(\"\\nShowing all keywords in python : \\n\")\nprint(pythonKeywords)\n# remember to test the code",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.pyKeywords",
        "documentation": {}
    },
    {
        "label": "getToCheck",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.pyKeywords",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.pyKeywords",
        "peekOfCode": "getToCheck = str(input(\"Keyword to check : \"))\ncheck = keyword.iskeyword(getToCheck)\nif check == True:\n    print(getToCheck + \" is a python keyword.\")\nelse:\n    print(getToCheck + \" is not a python keyword.\")\nprint(\"\\nShowing all keywords in python : \\n\")\nprint(pythonKeywords)\n# remember to test the code",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.pyKeywords",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.pyKeywords",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.pyKeywords",
        "peekOfCode": "check = keyword.iskeyword(getToCheck)\nif check == True:\n    print(getToCheck + \" is a python keyword.\")\nelse:\n    print(getToCheck + \" is not a python keyword.\")\nprint(\"\\nShowing all keywords in python : \\n\")\nprint(pythonKeywords)\n# remember to test the code",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.pyKeywords",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.pythagoras",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.pythagoras",
        "peekOfCode": "a = float(input(\"Value for A : \"))\nb = float(input(\"Value for B : \"))\nc = math.sqrt(a ** 2 + b ** 2)\n# here's the answer\nprint(c)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.pythagoras",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.pythagoras",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.pythagoras",
        "peekOfCode": "b = float(input(\"Value for B : \"))\nc = math.sqrt(a ** 2 + b ** 2)\n# here's the answer\nprint(c)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.pythagoras",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.pythagoras",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.pythagoras",
        "peekOfCode": "c = math.sqrt(a ** 2 + b ** 2)\n# here's the answer\nprint(c)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.pythagoras",
        "documentation": {}
    },
    {
        "label": "nameOfExec",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "peekOfCode": "nameOfExec = input(\"Name for Executable: \")\nversionNumber = input(\"Version: \")\nauth = input(\"Name of Author: \")\nauth_email = input(\"Email of Author: \")\ndescript = input(\"Description: \")\nfilename = input(\"File to Compile(Add .py to file): \")\n# run this file in cmd \"python CompileFiles.py build\" or \"python CompileFiles.py build_exe\"\n# This setup in minimialistic\nsetup(\n    name=nameOfExec,",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "documentation": {}
    },
    {
        "label": "versionNumber",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "peekOfCode": "versionNumber = input(\"Version: \")\nauth = input(\"Name of Author: \")\nauth_email = input(\"Email of Author: \")\ndescript = input(\"Description: \")\nfilename = input(\"File to Compile(Add .py to file): \")\n# run this file in cmd \"python CompileFiles.py build\" or \"python CompileFiles.py build_exe\"\n# This setup in minimialistic\nsetup(\n    name=nameOfExec,\n    version=versionNumber,",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "peekOfCode": "auth = input(\"Name of Author: \")\nauth_email = input(\"Email of Author: \")\ndescript = input(\"Description: \")\nfilename = input(\"File to Compile(Add .py to file): \")\n# run this file in cmd \"python CompileFiles.py build\" or \"python CompileFiles.py build_exe\"\n# This setup in minimialistic\nsetup(\n    name=nameOfExec,\n    version=versionNumber,\n    description=descript,",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "documentation": {}
    },
    {
        "label": "auth_email",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "peekOfCode": "auth_email = input(\"Email of Author: \")\ndescript = input(\"Description: \")\nfilename = input(\"File to Compile(Add .py to file): \")\n# run this file in cmd \"python CompileFiles.py build\" or \"python CompileFiles.py build_exe\"\n# This setup in minimialistic\nsetup(\n    name=nameOfExec,\n    version=versionNumber,\n    description=descript,\n    author=auth,",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "documentation": {}
    },
    {
        "label": "descript",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "peekOfCode": "descript = input(\"Description: \")\nfilename = input(\"File to Compile(Add .py to file): \")\n# run this file in cmd \"python CompileFiles.py build\" or \"python CompileFiles.py build_exe\"\n# This setup in minimialistic\nsetup(\n    name=nameOfExec,\n    version=versionNumber,\n    description=descript,\n    author=auth,\n    author_email=auth_email,",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "peekOfCode": "filename = input(\"File to Compile(Add .py to file): \")\n# run this file in cmd \"python CompileFiles.py build\" or \"python CompileFiles.py build_exe\"\n# This setup in minimialistic\nsetup(\n    name=nameOfExec,\n    version=versionNumber,\n    description=descript,\n    author=auth,\n    author_email=auth_email,\n    executables=[Executable(filename)],",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.python_files_compiler",
        "documentation": {}
    },
    {
        "label": "inside",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.randomModule",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.randomModule",
        "peekOfCode": "inside = random.randint(1, 37890)  # choses a random integer between given range\nprint(inside)\noutside = random.randrange(1, 1000)  # choses a random number number in given range\nprint(outside)\ncolors = [\"green\", \"black\", \"blue\", \"yellow\", \"white\"]\nprint(random.choice(colors))  # choses random element from list",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.randomModule",
        "documentation": {}
    },
    {
        "label": "outside",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.randomModule",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.randomModule",
        "peekOfCode": "outside = random.randrange(1, 1000)  # choses a random number number in given range\nprint(outside)\ncolors = [\"green\", \"black\", \"blue\", \"yellow\", \"white\"]\nprint(random.choice(colors))  # choses random element from list",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.randomModule",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.randomModule",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.randomModule",
        "peekOfCode": "colors = [\"green\", \"black\", \"blue\", \"yellow\", \"white\"]\nprint(random.choice(colors))  # choses random element from list",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.randomModule",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.RandomWeb",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.RandomWeb",
        "peekOfCode": "t = turtle.Pen()\nfor i in range(150):\n    t.color(random.choice([\"green\", \"red\", \"violet\"]))\n    t.width(5)\n    t.forward(i)\n    t.right(30)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.RandomWeb",
        "documentation": {}
    },
    {
        "label": "fileName",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.readFiles",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.readFiles",
        "peekOfCode": "fileName = str(input(\"File name : \"))\nfileToRead = open(fileName, \"r\")  # 'r' reads the file\nprint(fileToRead.read())  # reading file\nfileToRead.close()  # closing the file",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.readFiles",
        "documentation": {}
    },
    {
        "label": "fileToRead",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.readFiles",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.readFiles",
        "peekOfCode": "fileToRead = open(fileName, \"r\")  # 'r' reads the file\nprint(fileToRead.read())  # reading file\nfileToRead.close()  # closing the file",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.readFiles",
        "documentation": {}
    },
    {
        "label": "getLi",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Reverse",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Reverse",
        "peekOfCode": "getLi = [12, 43, 7, 43, 87, 89, 56, 9809, 9878, 56, 78, 98, True, 56, 76]\nreverseList = getLi[::-1]  # [::-1] tells to step from end without difference\nprint(reverseList)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Reverse",
        "documentation": {}
    },
    {
        "label": "reverseList",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Reverse",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Reverse",
        "peekOfCode": "reverseList = getLi[::-1]  # [::-1] tells to step from end without difference\nprint(reverseList)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Reverse",
        "documentation": {}
    },
    {
        "label": "reverse_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "peekOfCode": "def reverse_sort(array):\n\tfor i in range(len(array) - 1):\n\t\tfor n in range(len(array) - 1):\n\t\t\ta = array[n]\n\t\t\tif (a < array[i]):\n\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn array\t\t\t\nprint reverse_sort([123, 3455, 6577, 546, 345, 22, 56, 7])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\ta",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "peekOfCode": "\t\t\ta = array[n]\n\t\t\tif (a < array[i]):\n\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn array\t\t\t\nprint reverse_sort([123, 3455, 6577, 546, 345, 22, 56, 7])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttem",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "peekOfCode": "\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn array\t\t\t\nprint reverse_sort([123, 3455, 6577, 546, 345, 22, 56, 7])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tarray[i]",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "peekOfCode": "\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn array\t\t\t\nprint reverse_sort([123, 3455, 6577, 546, 345, 22, 56, 7])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tarray[n]",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "peekOfCode": "\t\t\t\tarray[n] = tem \n\treturn array\t\t\t\nprint reverse_sort([123, 3455, 6577, 546, 345, 22, 56, 7])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.reverse_sort",
        "documentation": {}
    },
    {
        "label": "healthScore",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Score",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Score",
        "peekOfCode": "def healthScore():\n    print(\" \")\n    numberOfFruits = int(input(\"Number Of Fruits You Eat in Week : \"))\n    numberOftimesFastFood = int(input(\"Number of Times You Eat FastFood in a Week : \"))\n    cigars = int(input(\"Cigars You Smoke In A Week : \"))\n    workoutTime = int(input(\"How Much minutes You Workout EveryDay : \"))\n    bodyMassIndex = int(input(\"Whats Your BodyMassIndex(BMI) : \"))\n    if 18 < bodyMassIndex < 26:\n        print(\" \")\n        healthScore = (numberOfFruits + workoutTime + bodyMassIndex) - (",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Score",
        "documentation": {}
    },
    {
        "label": "selection_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.selection_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.selection_sort",
        "peekOfCode": "def selection_sort(l):\n    # Scan slices l[0:len(l)], l[1:len(l)], …\n    for start in range(len(l)):\n        # Find minimum value in slice . . .\n        minpos = start\n        for i in range(start, len(l)):\n            if l[i] < l[minpos]:\n                minpos = i\n                # . . . and move it to start of slice\n        (l[start], l[minpos]) = (l[minpos], l[start])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.selection_sort",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.selection_sort",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.selection_sort",
        "peekOfCode": "result = selection_sort([9, 8, 7, 6, 5, 4, 3, 2, 1])\nprint(\"Builtin Method Result: {}\".format(sorted([9, 8, 7, 6, 5, 4, 3, 2, 1])))\nprint(\"Selection Sort Method Result: {}\".format(result))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.selection_sort",
        "documentation": {}
    },
    {
        "label": "sendMail",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "peekOfCode": "def sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address\n    messageHead = str(input(\"Message Head : \"))  # Message head\n    messageBody = str(input(\"Message : \"))  # main message\n    fullMessage = messageHead + \"\\n\" + messageBody  # full message\n    serverToLogin.sendmail(\n        yourEmail, toSendEmail, fullMessage\n    )  # sending email address through server\nwhile True:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "documentation": {}
    },
    {
        "label": "serverToLogin",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "peekOfCode": "serverToLogin = smtplib.SMTP(\"smtp.gmail.com\", 587)\n# Username\nuserName = str(input(\"Username for Gmail : \"))\n# password\npassword = str(input(\"Password Of Account : \"))\n# Logging in\nserverToLogin.login(userName, password)\ndef sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "documentation": {}
    },
    {
        "label": "userName",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "peekOfCode": "userName = str(input(\"Username for Gmail : \"))\n# password\npassword = str(input(\"Password Of Account : \"))\n# Logging in\nserverToLogin.login(userName, password)\ndef sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address\n    messageHead = str(input(\"Message Head : \"))  # Message head\n    messageBody = str(input(\"Message : \"))  # main message",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "peekOfCode": "password = str(input(\"Password Of Account : \"))\n# Logging in\nserverToLogin.login(userName, password)\ndef sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address\n    messageHead = str(input(\"Message Head : \"))  # Message head\n    messageBody = str(input(\"Message : \"))  # main message\n    fullMessage = messageHead + \"\\n\" + messageBody  # full message\n    serverToLogin.sendmail(",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sendingEmailsInPython",
        "documentation": {}
    },
    {
        "label": "alarm",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "peekOfCode": "def alarm(h, m, s):\n    timeToSleep = h * 3600 + m * 60 + s\n    sleepingTime = sleep(timeToSleep)\n    playSound = webbrowser.open_new(random.choice(linksToSounds))\n# Main code\nprint(ctime(), \"\\n\")\nstartOrEnd = str(input(\"Set alarm or End : \"))\nif startOrEnd.strip() == \"Set alarm\":\n    hours = int(input(\"Hours : \"))\n    minutes = int(input(\"Minutes : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "peekOfCode": "now = datetime.datetime.now()\nlinksToSounds = [\n    \"https://www.youtube.com/watch?v=6pR5cyH63mA\",\n    \"https://www.youtube.com/watch?v=e12KryuLcbs\",\n    \"https://www.youtube.com/watch?v=nbjwmC8K4K4\",\n    \"https://www.youtube.com/watch?v=UqSww10eeKw\",\n    \"https://www.youtube.com/watch?v=9f06QZCVUHg\",\n    \"https://www.youtube.com/watch?v=kffacxfA7G4\",\n]  # remember to add links and test the code\ndef alarm(h, m, s):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "documentation": {}
    },
    {
        "label": "linksToSounds",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "peekOfCode": "linksToSounds = [\n    \"https://www.youtube.com/watch?v=6pR5cyH63mA\",\n    \"https://www.youtube.com/watch?v=e12KryuLcbs\",\n    \"https://www.youtube.com/watch?v=nbjwmC8K4K4\",\n    \"https://www.youtube.com/watch?v=UqSww10eeKw\",\n    \"https://www.youtube.com/watch?v=9f06QZCVUHg\",\n    \"https://www.youtube.com/watch?v=kffacxfA7G4\",\n]  # remember to add links and test the code\ndef alarm(h, m, s):\n    timeToSleep = h * 3600 + m * 60 + s",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "documentation": {}
    },
    {
        "label": "startOrEnd",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "peekOfCode": "startOrEnd = str(input(\"Set alarm or End : \"))\nif startOrEnd.strip() == \"Set alarm\":\n    hours = int(input(\"Hours : \"))\n    minutes = int(input(\"Minutes : \"))\n    seconds = int(input(\"Seconds : \"))\n    print(\"Alarm started at %s : %s\" % (now.hour, now.minute))\n    print(alarm(hours, minutes, seconds))\n    wakedUp = False\n    while wakedUp == False:\n        get = str(input(\"Have you waked up : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sleepWellAlarm",
        "documentation": {}
    },
    {
        "label": "bubbleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "peekOfCode": "def bubbleSort(g): # g argument is for list\n    for x in range(len(g) - 2):\n\t    a = g[x]\n\t    b = g[x + 1 + 1]\n\t    if a > b :\n\t\t    return(a)\n\t    else :\n\t\t    return(b)\n# use this to convert output into list\n# result = list(map(bubbleSort , g)) replace g with parameter",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "oddSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "peekOfCode": "def oddSort(odd):# odd can be list or variable\n    for x in odd:\n        if x % 3 == 0:\n    return(x)\n# use this to get list as output\n# result = list(filter(oddSort , odd)) replace odd with parameter\n# this function checks even num\ndef evenSort(eve):# eve can be list or variable\n    for a in eve:\n        if a % 2 == 0:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "evenSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "peekOfCode": "def evenSort(eve):# eve can be list or variable\n    for a in eve:\n        if a % 2 == 0:\n    return(a)\n# use this to get list as output\n# result = list(filter(evenSort , eve)) replace eve with parameter\n# this function checks divisibility\ndef divisibleSort(divi , get):# here divi is list and get is an variable set to integer or float\n    for r in divi:\n        if r % get == 0:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "divisibleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "peekOfCode": "def divisibleSort(divi , get):# here divi is list and get is an variable set to integer or float\n    for r in divi:\n        if r % get == 0:\n    return(r)\n# use this to get output\n# result = list(filter(divisibleSort , divi , get)) replace arguments with suitable parameters\n# this function checks if addition of group of two elements has desired answer\ndef addBubbleSort(f,user):# here f is list and user is integer or float\n    for x in range(len(f) - 2):\n        a = f[x]",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "addBubbleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "peekOfCode": "def addBubbleSort(f,user):# here f is list and user is integer or float\n    for x in range(len(f) - 2):\n        a = f[x]\n        b = f[x + 1 + 1]\n        if a + b == user:\n            return(a,b)\n# i havent checked this function check for bugs\n# this is how it works\n# res = list(filter(addBubbleSort , f , user)) replace arguments with suitable parameters\n# this function checks if subtraction of group of two elements has desired answer",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "subBubbleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "peekOfCode": "def subBubbleSort(z,userSub):\n    for x in range(len(z) - 2):\n        a = z[x]\n        b = z[x + 1 + 1]\n        if a - b == useSubr:\n            return(a,b)\n# i havent checked this function check for bugs\n#res = list(filter(subBubbleSort , z , userSub)) replace arguments with suitable parameters",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "#res",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "peekOfCode": "#res = list(filter(subBubbleSort , z , userSub)) replace arguments with suitable parameters",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "sortString",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sortString",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sortString",
        "peekOfCode": "def sortString():\n    strr = str(input(\"Enter : \"))\n    words = strr.split()\n    words.sort()\n    print(\" \")\n    for word in words:\n        print(word)\n# main code\nprint(\"Hello,\")\nwhile True:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sortString",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.squarecube",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.squarecube",
        "peekOfCode": "def square():\n    print(\" \")\n    makeUse = raw_input(\"Square or Cube : \")\n    if makeUse.strip() == \"Square\":\n        print(\" \")\n        user = int(raw_input(\"Enter number to get square : \"))\n        square = user ** 2\n        print(\" \")\n        print(\"Square of the number \" + str(user) + \" is \" + str(square))\n    elif makeUse.strip() == \"Cube\":",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.squarecube",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.squareTurtle",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.squareTurtle",
        "peekOfCode": "def square():\n    win = turtle.Screen()\n    win.bgcolor(\"white\")\n    jack = turtle.Turtle()\n    for x in range(1, 5):\n        jack.forward(100)\n        jack.right(90)\n    win.exitonclick()\nsquare()",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.squareTurtle",
        "documentation": {}
    },
    {
        "label": "prime_factors",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "def prime_factors(c):\n\tpos = 2\n\tfactors = []\n\twhile (pos <= c):\n\t\tif (c % pos == 0):\n\t\t\tc = c // pos\n\t\t\tfactors.append(pos)\n\t\t\tcontinue\n\t\telse:\n\t\t\tpos = pos + 1",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "extract_common",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "def extract_common(li):\n\tfinal = []\n\tif (len(li) % 2 != 0):\n\t\treturn \"Number is not perfect root.\"\n\telse:\n\t\tpre = len(li) - 1\n\t\tfor n in range(0, pre, 2):\n\t\t\ta = li[n]\n\t\t\tb = li[n + 1]\n\t\t\tif (a == b):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "square_root",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "def square_root(take_in):\n\tres = 1\n\tfor c in take_in:\n\t\tres *= c \n\treturn res \nget_num = int(raw_input(\"\\nNumber : \"))\t\nprint square_root(extract_common(prime_factors(get_num))), \" \"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "\tpos",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "\tpos = 2\n\tfactors = []\n\twhile (pos <= c):\n\t\tif (c % pos == 0):\n\t\t\tc = c // pos\n\t\t\tfactors.append(pos)\n\t\t\tcontinue\n\t\telse:\n\t\t\tpos = pos + 1\n\treturn factors",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "\tfactors",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "\tfactors = []\n\twhile (pos <= c):\n\t\tif (c % pos == 0):\n\t\t\tc = c // pos\n\t\t\tfactors.append(pos)\n\t\t\tcontinue\n\t\telse:\n\t\t\tpos = pos + 1\n\treturn factors\ndef extract_common(li):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "\t\t\tc",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "\t\t\tc = c // pos\n\t\t\tfactors.append(pos)\n\t\t\tcontinue\n\t\telse:\n\t\t\tpos = pos + 1\n\treturn factors\ndef extract_common(li):\n\tfinal = []\n\tif (len(li) % 2 != 0):\n\t\treturn \"Number is not perfect root.\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "\t\t\tpos",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "\t\t\tpos = pos + 1\n\treturn factors\ndef extract_common(li):\n\tfinal = []\n\tif (len(li) % 2 != 0):\n\t\treturn \"Number is not perfect root.\"\n\telse:\n\t\tpre = len(li) - 1\n\t\tfor n in range(0, pre, 2):\n\t\t\ta = li[n]",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "\tfinal",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "\tfinal = []\n\tif (len(li) % 2 != 0):\n\t\treturn \"Number is not perfect root.\"\n\telse:\n\t\tpre = len(li) - 1\n\t\tfor n in range(0, pre, 2):\n\t\t\ta = li[n]\n\t\t\tb = li[n + 1]\n\t\t\tif (a == b):\n\t\t\t\tfinal.append(b)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "\t\tpre",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "\t\tpre = len(li) - 1\n\t\tfor n in range(0, pre, 2):\n\t\t\ta = li[n]\n\t\t\tb = li[n + 1]\n\t\t\tif (a == b):\n\t\t\t\tfinal.append(b)\n\t\t\telse:\t\n\t\t\t\treturn \"Number is not perfect root.\"\n\treturn final \ndef square_root(take_in):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "\t\t\ta",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "\t\t\ta = li[n]\n\t\t\tb = li[n + 1]\n\t\t\tif (a == b):\n\t\t\t\tfinal.append(b)\n\t\t\telse:\t\n\t\t\t\treturn \"Number is not perfect root.\"\n\treturn final \ndef square_root(take_in):\n\tres = 1\n\tfor c in take_in:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "\t\t\tb",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "\t\t\tb = li[n + 1]\n\t\t\tif (a == b):\n\t\t\t\tfinal.append(b)\n\t\t\telse:\t\n\t\t\t\treturn \"Number is not perfect root.\"\n\treturn final \ndef square_root(take_in):\n\tres = 1\n\tfor c in take_in:\n\t\tres *= c ",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "\tres",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "\tres = 1\n\tfor c in take_in:\n\t\tres *= c \n\treturn res \nget_num = int(raw_input(\"\\nNumber : \"))\t\nprint square_root(extract_common(prime_factors(get_num))), \" \"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "get_num",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "peekOfCode": "get_num = int(raw_input(\"\\nNumber : \"))\t\nprint square_root(extract_common(prime_factors(get_num))), \" \"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.square_root_algorithm",
        "documentation": {}
    },
    {
        "label": "sortString",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.String",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.String",
        "peekOfCode": "def sortString():\n    strr = str(input(\"Enter : \"))\n    words = strr.split()\n    words.sort()\n    print(\" \")\n    for word in words:\n        print(word)\n# main code\nprint(\"Hello,\")\nwhile True:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.String",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringIndexing",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringIndexing",
        "peekOfCode": "message = \"Hello\"\nprint(message[0])  # this will print H that is first letter in the string\nprint(message[1:4])  # this will print from index one to index four\nprint(message[:3])  # this will print from starting to index 3\nprint(message[2:])  # this will print from index 2 till end\nprint(message[:])  # this prints whole string\nprint(message[0:4:2])  # this escapes 2 characters from string\n# negative Indexing\n\"\"\"\nnegative Indexing",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringIndexing",
        "documentation": {}
    },
    {
        "label": "awesome",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringIndexing",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringIndexing",
        "peekOfCode": "awesome = \"Python is awesome\"\nprint(awesome[:-1])  # -1 prints last character\nprint(awesome[-2])  # this prints m from starting\nprint(awesome[-7:])  # try this one out in interpreter\nprint(\"You are \" + awesome[10:] + \" you are learning \" + awesome[:6])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringIndexing",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "peekOfCode": "name = \"Kalpak\"\nprint(\"My name is \" + name)  # I have given space after is notice\nage = 14\nprint(\"My age is \", age)  # comma seprates two different things you want to print\nprint(\"This isn't going away too soon.\")  # that \\ is called as an escape character\n# the \\ is used to use same quote in a string\nprint(\n    \"I love newlines \\n\"\n)  # \\n prints new line after string or according to its position\nprint(\"\\t I love tabs\")  # \\t adds a tab according to its position",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "peekOfCode": "age = 14\nprint(\"My age is \", age)  # comma seprates two different things you want to print\nprint(\"This isn't going away too soon.\")  # that \\ is called as an escape character\n# the \\ is used to use same quote in a string\nprint(\n    \"I love newlines \\n\"\n)  # \\n prints new line after string or according to its position\nprint(\"\\t I love tabs\")  # \\t adds a tab according to its position\nmultiple = \"Iron Man\"\nprint(multiple * 5)  # this will print string 5 times",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "documentation": {}
    },
    {
        "label": "multiple",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "peekOfCode": "multiple = \"Iron Man\"\nprint(multiple * 5)  # this will print string 5 times\n# string methods in built\ncountry = \"Norway\"\nprint(country.upper())  # prints all letters in upper case\nprint(country.lower())  # prints all letters in lower case\nprint(country.title())  # converts into title\n# string formatting\nprint(\"%s %s %s\" % (\"I\", \"am\", \"cool\"))\nexpression = \"I love\"",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "documentation": {}
    },
    {
        "label": "country",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "peekOfCode": "country = \"Norway\"\nprint(country.upper())  # prints all letters in upper case\nprint(country.lower())  # prints all letters in lower case\nprint(country.title())  # converts into title\n# string formatting\nprint(\"%s %s %s\" % (\"I\", \"am\", \"cool\"))\nexpression = \"I love\"\nmovie = \"Captain America 3\"\nprint(\"%s %s\" % (expression, movie))\n# type conversion",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "documentation": {}
    },
    {
        "label": "expression",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "peekOfCode": "expression = \"I love\"\nmovie = \"Captain America 3\"\nprint(\"%s %s\" % (expression, movie))\n# type conversion\naddition = 12343 + 3349\nprint(\"The answer is \" + str(addition))  # str() method converts non-string into string",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "documentation": {}
    },
    {
        "label": "movie",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "peekOfCode": "movie = \"Captain America 3\"\nprint(\"%s %s\" % (expression, movie))\n# type conversion\naddition = 12343 + 3349\nprint(\"The answer is \" + str(addition))  # str() method converts non-string into string",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "peekOfCode": "addition = 12343 + 3349\nprint(\"The answer is \" + str(addition))  # str() method converts non-string into string",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringOperations",
        "documentation": {}
    },
    {
        "label": "getString",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringReverse",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringReverse",
        "peekOfCode": "getString = str(input(\"Word to Reverse : \"))\nreverseString = getString[::-1]  # [::-1] tells to step from end without difference\nprint(reverseString)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringReverse",
        "documentation": {}
    },
    {
        "label": "reverseString",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.stringReverse",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.stringReverse",
        "peekOfCode": "reverseString = getString[::-1]  # [::-1] tells to step from end without difference\nprint(reverseString)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.stringReverse",
        "documentation": {}
    },
    {
        "label": "avgSums",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "peekOfCode": "def avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "peekOfCode": "m = [1, 43, 656, 8, 54, 908, 4, 5, 23, 78, 435, 89, 45, 476, 89]\nn = [234, 56, 90, 675, 56, 786, 90, 564, 8, 657, 87, 64, 354, 2, 75]\nq = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "peekOfCode": "n = [234, 56, 90, 675, 56, 786, 90, 564, 8, 657, 87, 64, 354, 2, 75]\nq = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "peekOfCode": "q = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sumAverage",
        "documentation": {}
    },
    {
        "label": "sum_arr",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sum_array",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sum_array",
        "peekOfCode": "def sum_arr(n):\n    res = 0\n    for x in n:\n        res += x\n    return res\nnums = [52345, 746587, 98589, 54398, 9348, 45887, 49856]\ntest = sum_arr(nums)\n# sum() is Pythons built in method of adding all the elements in a list\nif test == sum(nums):\n    print(\"Sum of arr: {}\".format(test))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sum_array",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sum_array",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sum_array",
        "peekOfCode": "nums = [52345, 746587, 98589, 54398, 9348, 45887, 49856]\ntest = sum_arr(nums)\n# sum() is Pythons built in method of adding all the elements in a list\nif test == sum(nums):\n    print(\"Sum of arr: {}\".format(test))\nelse:\n    print(\"Func dosen't work!\")\n# Most simple algorithm ever! Isn't it!",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sum_array",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sum_array",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sum_array",
        "peekOfCode": "test = sum_arr(nums)\n# sum() is Pythons built in method of adding all the elements in a list\nif test == sum(nums):\n    print(\"Sum of arr: {}\".format(test))\nelse:\n    print(\"Func dosen't work!\")\n# Most simple algorithm ever! Isn't it!",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sum_array",
        "documentation": {}
    },
    {
        "label": "ArithmeticSequence",
        "kind": 6,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sum_of_arithmetic_sequence",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sum_of_arithmetic_sequence",
        "peekOfCode": "class ArithmeticSequence:\n    def __init__(self, seq):\n        self.seq = seq\n    def sum(self):\n        summed = len(self.seq) / 2 * (self.seq[0] + self.seq[-1])\n        return summed\ntest_sub = [2, 4, 6, 8, 10, 12, 14, 16]\nprint(ArithmeticSequence(test_sub).sum())\nprint(sum(test_sub))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sum_of_arithmetic_sequence",
        "documentation": {}
    },
    {
        "label": "test_sub",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.sum_of_arithmetic_sequence",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.sum_of_arithmetic_sequence",
        "peekOfCode": "test_sub = [2, 4, 6, 8, 10, 12, 14, 16]\nprint(ArithmeticSequence(test_sub).sum())\nprint(sum(test_sub))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.sum_of_arithmetic_sequence",
        "documentation": {}
    },
    {
        "label": "swap_case",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.swap_case",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.swap_case",
        "peekOfCode": "def swap_case(s):\n    swapped = \"\"\n    for i in range(len(s)):\n        temp = s[i].upper()\n        if s[i] == temp:\n            swapped += s[i].lower()\n        else:\n            swapped += s[i].upper()\n    return swapped",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.swap_case",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.table_maker",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.table_maker",
        "peekOfCode": "num = int(input(\"Number to make table : \"))\nli_a = [num for num in range(0, num * 11, num)]\nfor digit in li_a:\n    print(digit)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.table_maker",
        "documentation": {}
    },
    {
        "label": "li_a",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.table_maker",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.table_maker",
        "peekOfCode": "li_a = [num for num in range(0, num * 11, num)]\nfor digit in li_a:\n    print(digit)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.table_maker",
        "documentation": {}
    },
    {
        "label": "make_use",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.take-a-break",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.take-a-break",
        "peekOfCode": "make_use = 1\nwhile make_use < 3:\n    time.sleep(10)\n    webbrowser.open(\"https://www.youtube.com/results?search_query=comedy+pranks\")\n    make_use = make_use + 1",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.take-a-break",
        "documentation": {}
    },
    {
        "label": "testDivisibility",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.testofdivisibility",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.testofdivisibility",
        "peekOfCode": "def testDivisibility():\n    print(\" \")\n    toTest = int(raw_input(\"Enter number of which you want to test Divisibility : \"))\n    print(\" \")\n    test = int(raw_input(\"Enter number by which you want to test : \"))\n    if toTest % test == 0 :\n        print(\"-------------Answer---------------- \")\n        print(str(toTest) + \" is divisible by \" + str(test))\n    else :\n        print(str(toTest) + \" is not divisible \" + str(test))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.testofdivisibility",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.testofdivisibility",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.testofdivisibility",
        "peekOfCode": "user = raw_input(\"Start or End : \")\nif user.strip() == \"Start\" :\n        print(testDivisibility())\n        print(\" \")        \n# MAIN code\nwhile True:\n        get = raw_input(\"Start again or End : \")\n        if get.strip() == \"Start again\":\n            print(\"---------------Start Again----------------\")\n            print(\" \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.testofdivisibility",
        "documentation": {}
    },
    {
        "label": "compareMore",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "peekOfCode": "def compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)\nget = int(input(\"To Compare More Than : \"))\ngetAgain = int(input(\"To Compare Less Than : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "documentation": {}
    },
    {
        "label": "compareLess",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "peekOfCode": "def compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)\nget = int(input(\"To Compare More Than : \"))\ngetAgain = int(input(\"To Compare Less Than : \"))\nprint(\"\\nMore Than Values : \")\nprint(compareMore(get))\nprint(finalNums, \"\\n\")\nprint(\"\\nLess Than Values : \")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "peekOfCode": "nums = [12, 34, 65, 43, 21, 97, 13, 57, 10, 32]\nfinalNums = []\nmoreFinalNums = []\ndef compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "documentation": {}
    },
    {
        "label": "finalNums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "peekOfCode": "finalNums = []\nmoreFinalNums = []\ndef compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "documentation": {}
    },
    {
        "label": "moreFinalNums",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "peekOfCode": "moreFinalNums = []\ndef compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)\nget = int(input(\"To Compare More Than : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "peekOfCode": "get = int(input(\"To Compare More Than : \"))\ngetAgain = int(input(\"To Compare Less Than : \"))\nprint(\"\\nMore Than Values : \")\nprint(compareMore(get))\nprint(finalNums, \"\\n\")\nprint(\"\\nLess Than Values : \")\nprint(compareLess(getAgain))\nprint(moreFinalNums, \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "documentation": {}
    },
    {
        "label": "getAgain",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "peekOfCode": "getAgain = int(input(\"To Compare Less Than : \"))\nprint(\"\\nMore Than Values : \")\nprint(compareMore(get))\nprint(finalNums, \"\\n\")\nprint(\"\\nLess Than Values : \")\nprint(compareLess(getAgain))\nprint(moreFinalNums, \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.ThanMoreThan",
        "documentation": {}
    },
    {
        "label": "twelve_to_twenty_four",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.time_conversion",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.time_conversion",
        "peekOfCode": "def twelve_to_twenty_four():\n    time = input().strip()\n    if time[-2:] == \"PM\":\n        if time[:2] == \"12\":\n            return time[:-2]\n        else:\n            return str(12 + int(time[:2])) + time[2:-2]\n    else:\n        if time[:2] == \"12\":\n            print(\"00\" + time[2:-2])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.time_conversion",
        "documentation": {}
    },
    {
        "label": "tupA",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "peekOfCode": "tupA = ()  # Empty tuple\nprint(tupA)\nc = 12, 56, 78\ntupC = tuple(c)  # tuple() is built-in\nprint(tupC)\nx, y, z = (12, 45, 42)\na = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "peekOfCode": "c = 12, 56, 78\ntupC = tuple(c)  # tuple() is built-in\nprint(tupC)\nx, y, z = (12, 45, 42)\na = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples\nprint(tupC[0])\nprint(a[1])",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "documentation": {}
    },
    {
        "label": "tupC",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "peekOfCode": "tupC = tuple(c)  # tuple() is built-in\nprint(tupC)\nx, y, z = (12, 45, 42)\na = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples\nprint(tupC[0])\nprint(a[1])\nprint(tupC[2], \"\\n\")",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "peekOfCode": "a = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples\nprint(tupC[0])\nprint(a[1])\nprint(tupC[2], \"\\n\")\n# tuples cant be reassigned\n# tupC[1] = 18 # uncomment this line to see the error  this should cause a error 'TypeError'\n# iterating through tuples",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.tuplesExample",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.Turtle",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.Turtle",
        "peekOfCode": "def square():\n    win = turtle.Screen()\n    win.bgcolor(\"white\")\n    jack = turtle.Turtle()\n    for x in range(1, 5):\n        jack.forward(100)\n        jack.right(90)\n    win.exitonclick()\nsquare()",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.Turtle",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.turtleRandomWeb",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.turtleRandomWeb",
        "peekOfCode": "t = turtle.Pen()\nfor i in range(150):\n    t.color(random.choice([\"green\", \"red\", \"violet\"]))\n    t.width(5)\n    t.forward(i)\n    t.right(30)",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.turtleRandomWeb",
        "documentation": {}
    },
    {
        "label": "alarm",
        "kind": 2,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "peekOfCode": "def alarm(h, m, s):\n    timeToSleep = h * 3600 + m * 60 + s\n    sleepingTime = sleep(timeToSleep)\n    playSound = webbrowser.open_new(random.choice(linksToSounds))\n# Main code\nprint(ctime(), \"\\n\")\nstartOrEnd = str(input(\"Set alarm or End : \"))\nif startOrEnd.strip() == \"Set alarm\":\n    hours = int(input(\"Hours : \"))\n    minutes = int(input(\"Minutes : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "peekOfCode": "now = datetime.datetime.now()\nlinksToSounds = [\n    \"https://www.youtube.com/watch?v=6pR5cyH63mA\",\n    \"https://www.youtube.com/watch?v=e12KryuLcbs\",\n    \"https://www.youtube.com/watch?v=nbjwmC8K4K4\",\n    \"https://www.youtube.com/watch?v=UqSww10eeKw\",\n    \"https://www.youtube.com/watch?v=9f06QZCVUHg\",\n    \"https://www.youtube.com/watch?v=kffacxfA7G4\",\n]  # remember to add links and test the code\ndef alarm(h, m, s):",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "documentation": {}
    },
    {
        "label": "linksToSounds",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "peekOfCode": "linksToSounds = [\n    \"https://www.youtube.com/watch?v=6pR5cyH63mA\",\n    \"https://www.youtube.com/watch?v=e12KryuLcbs\",\n    \"https://www.youtube.com/watch?v=nbjwmC8K4K4\",\n    \"https://www.youtube.com/watch?v=UqSww10eeKw\",\n    \"https://www.youtube.com/watch?v=9f06QZCVUHg\",\n    \"https://www.youtube.com/watch?v=kffacxfA7G4\",\n]  # remember to add links and test the code\ndef alarm(h, m, s):\n    timeToSleep = h * 3600 + m * 60 + s",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "documentation": {}
    },
    {
        "label": "startOrEnd",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "peekOfCode": "startOrEnd = str(input(\"Set alarm or End : \"))\nif startOrEnd.strip() == \"Set alarm\":\n    hours = int(input(\"Hours : \"))\n    minutes = int(input(\"Minutes : \"))\n    seconds = int(input(\"Seconds : \"))\n    print(\"Alarm started at %s : %s\" % (now.hour, now.minute))\n    print(alarm(hours, minutes, seconds))\n    wakedUp = False\n    while wakedUp == False:\n        get = str(input(\"Have you waked up : \"))",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.WellAlarm",
        "documentation": {}
    },
    {
        "label": "fileName",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.writingFiles",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.writingFiles",
        "peekOfCode": "fileName = str(input(\"File name : \"))\nfileToWrite = open(fileName, \"w\")  # 'w' writes to the file\ntextToWrite = str(input(\"Text to write : \"))\nfileToWrite.write(textToWrite)  # writing file\nfileToWrite.close()  # closing the file",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.writingFiles",
        "documentation": {}
    },
    {
        "label": "fileToWrite",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.writingFiles",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.writingFiles",
        "peekOfCode": "fileToWrite = open(fileName, \"w\")  # 'w' writes to the file\ntextToWrite = str(input(\"Text to write : \"))\nfileToWrite.write(textToWrite)  # writing file\nfileToWrite.close()  # closing the file",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.writingFiles",
        "documentation": {}
    },
    {
        "label": "textToWrite",
        "kind": 5,
        "importPath": "python-prac.Overflow.Beginners-Python-Examples-master.writingFiles",
        "description": "python-prac.Overflow.Beginners-Python-Examples-master.writingFiles",
        "peekOfCode": "textToWrite = str(input(\"Text to write : \"))\nfileToWrite.write(textToWrite)  # writing file\nfileToWrite.close()  # closing the file",
        "detail": "python-prac.Overflow.Beginners-Python-Examples-master.writingFiles",
        "documentation": {}
    },
    {
        "label": "max_area",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.container_with_most_water",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.container_with_most_water",
        "peekOfCode": "def max_area(height):\n    l = 0\n    r = len(height) - 1\n    max_height = 0\n    while l < r:\n        left = height[l]\n        right = height[r]\n        current_height = min(left, right) * (r - l)\n        max_height = max(max_height, current_height)\n        # take the smaller side and search for a bigger height on that side",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.container_with_most_water",
        "documentation": {}
    },
    {
        "label": "count_triplets_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "peekOfCode": "def count_triplets_1(arr, k):\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        elements = set()\n        curr_sum = k - arr[i]\n        for j in range(i + 1, n):\n            if (curr_sum - arr[j]) in elements:\n                count += 1\n            elements.add(arr[j])",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "documentation": {}
    },
    {
        "label": "count_triplets_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "peekOfCode": "def count_triplets_2(arr, k):\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == k:\n                count += 1",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "peekOfCode": "arr = [10, 11, 16, 18, 19]\nk = 40\nprint(count_triplets_1(arr, k))\nprint(count_triplets_2(arr, k))\n# Test 2\n# Correct result => 2\narr = [1, 2, 3, 4, 5]\nk = 9\nprint(count_triplets_1(arr, k))\nprint(count_triplets_2(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "peekOfCode": "k = 40\nprint(count_triplets_1(arr, k))\nprint(count_triplets_2(arr, k))\n# Test 2\n# Correct result => 2\narr = [1, 2, 3, 4, 5]\nk = 9\nprint(count_triplets_1(arr, k))\nprint(count_triplets_2(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "peekOfCode": "arr = [1, 2, 3, 4, 5]\nk = 9\nprint(count_triplets_1(arr, k))\nprint(count_triplets_2(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "peekOfCode": "k = 9\nprint(count_triplets_1(arr, k))\nprint(count_triplets_2(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.count_triplets_with_sum_k",
        "documentation": {}
    },
    {
        "label": "bussiest_interval",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_busiest_interval",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_busiest_interval",
        "peekOfCode": "def bussiest_interval(arriving, leaving):\n    # sort both arrays (don't care about pairs)\n    arriving.sort()\n    leaving.sort()\n    n = len(arriving)\n    i, j = 0, 0\n    start, end = 0, 0\n    overlapping = 0\n    max_overlapping = 0\n    # both arrays have same number of elements",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_busiest_interval",
        "documentation": {}
    },
    {
        "label": "search_range",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_element_range_sorted_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_element_range_sorted_array",
        "peekOfCode": "def search_range(nums, target):\n    left_idx = binary_search(nums, target, True)\n    if (left_idx == len(nums)) or (nums[left_idx] != target):\n        return [-1, -1]\n    right_idx = binary_search(nums, target, False) - 1\n    return [left_idx, right_idx]\ndef binary_search(nums, target, equal=True):\n    left = 0\n    right = len(nums)\n    while left < right:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_element_range_sorted_array",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_element_range_sorted_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_element_range_sorted_array",
        "peekOfCode": "def binary_search(nums, target, equal=True):\n    left = 0\n    right = len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if (nums[mid] > target) or (equal and nums[mid] == target):\n            right = mid\n        else:\n            left = mid + 1\n    return left",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_element_range_sorted_array",
        "documentation": {}
    },
    {
        "label": "find_element_smaller_left_bigger_right",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_el_smaller_left_bigger_right",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_el_smaller_left_bigger_right",
        "peekOfCode": "def find_element_smaller_left_bigger_right(arr):\n    n = len(arr)\n    left_maxs = [-math.inf]\n    right_min = math.inf\n    # find all mins from the front\n    for i in range(n - 1):\n        left_maxs.append(max(left_maxs[-1], arr[i]))\n    for i in range(n - 1, -1, -1):\n        # check if all left are smaller\n        # and all right are bigger",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_el_smaller_left_bigger_right",
        "documentation": {}
    },
    {
        "label": "get_minimum_X",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_el_where_k_greater_or_equal",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_el_where_k_greater_or_equal",
        "peekOfCode": "def get_minimum_X(arr, k):\n    n = len(arr)\n    if n == 0 or k > n:\n        return -1\n    if k == n:\n        return 1\n    arr.sort()\n    if k == 0:\n        return arr[-1] + 1\n    if arr[-k] == arr[-(k + 1)]:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_el_where_k_greater_or_equal",
        "documentation": {}
    },
    {
        "label": "find_first_missing_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "peekOfCode": "def find_first_missing_1(a):\n    n = len(a)\n    for i in range(n):\n        while (a[i] > 0) and (a[i] <= n):\n            swap = a[i] - 1\n            if a[i] == a[swap]:\n                break\n            # swap elements\n            a[i], a[swap] = a[swap], a[i]\n    for i in range(n):",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "documentation": {}
    },
    {
        "label": "find_first_missing_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "peekOfCode": "def find_first_missing_2(a):\n    n = len(a)\n    # eliminate all zeros and all negative numbers\n    for i in range(n):\n        if a[i] <= 0:\n            a[i] = n + 1  # those values won't be used later\n    # find all numbers in the range and mark all numbers at those positions as negative numbers\n    for i in range(n):\n        idx = abs(a[i]) - 1\n        if idx >= n:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "peekOfCode": "test = [-1, 2, 3]\nprint(\n    find_first_missing_1(list(test))\n)  # make a copy, the list will be changed inside the function\nprint(find_first_missing_2(list(test)))\n# Test 2\n# Correct result => 2\ntest = [3, 4, -1, 1]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "peekOfCode": "test = [3, 4, -1, 1]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 3\n# Correct result => 3\ntest = [1, 2, 0]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 4\n# Correct result => 4",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "peekOfCode": "test = [1, 2, 0]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 4\n# Correct result => 4\ntest = [1, 2, 3]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 5\n# Correct result => 1",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "peekOfCode": "test = [1, 2, 3]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 5\n# Correct result => 1\ntest = [-4, -1, -3, -1]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 6\n# Correct result => 3",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "peekOfCode": "test = [-4, -1, -3, -1]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 6\n# Correct result => 3\ntest = [2, 1, 2, -1, 0, 20]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 7\n# Correct result => 3",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "peekOfCode": "test = [2, 1, 2, -1, 0, 20]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 7\n# Correct result => 3\ntest = [1, 2, 5, 5, 1, 2]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 8\n# Correct result => 4",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "peekOfCode": "test = [1, 2, 5, 5, 1, 2]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))\n# Test 8\n# Correct result => 4\ntest = [1, 2, 3, 5, 1, 2, 3, 3]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "peekOfCode": "test = [1, 2, 3, 5, 1, 2, 3, 3]\nprint(find_first_missing_1(list(test)))\nprint(find_first_missing_2(list(test)))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_first_missing_positive",
        "documentation": {}
    },
    {
        "label": "find_missing_number",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "peekOfCode": "def find_missing_number(arr1, arr2):\n    n = len(arr2)\n    mod = (\n        10000\n    )  # this can be every number, this should be true max_length * mod < max_integer\n    sum_diff = 0\n    mod_diff = 0\n    i = 0\n    while i < n:\n        # this is in case if we have too big numbers and to big arrays",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "documentation": {}
    },
    {
        "label": "find_missing_number_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "peekOfCode": "def find_missing_number_2(arr1, arr2):\n    n = len(arr2)\n    missing = 0\n    i = 0\n    while i < n:\n        missing ^= arr1[i] ^ arr2[i]\n        i += 1\n    # don't forget the last element from the first array!\n    missing ^= arr1[n]\n    return missing",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "documentation": {}
    },
    {
        "label": "missing_number",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "peekOfCode": "missing_number = sum(arr1) - sum(arr2)\nBut what if we have milions of elements and all elements are with 8-9 digits values?\nIn this case we'll need to use modulo operation. Make two sums, the first one from MODULO of each element\nand the second one from the DIVIDE of each element. In the end use these 2 sums to compute the missing number.\n    Time Complexity:    O(N)\n    Space Complexity:   O(1)\nThe second solution is XOR soulution, make XOR to each element from the both arrays (same as find_unpaired.py).\n    Time Complexity:    O(N)\n    Space Complexity:   O(1)\n\"\"\"",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "peekOfCode": "arr1 = [2131, 2122221, 64565, 33333333, 994188129, 865342234]\narr2 = [994188129, 2122221, 865342234, 2131, 64565]\nprint(find_missing_number(arr1, arr2))\nprint(find_missing_number_2(arr1, arr2))\n# Test 2\n# Correct result => 5\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4]\nprint(find_missing_number(arr1, arr2))\nprint(find_missing_number_2(arr1, arr2))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "peekOfCode": "arr2 = [994188129, 2122221, 865342234, 2131, 64565]\nprint(find_missing_number(arr1, arr2))\nprint(find_missing_number_2(arr1, arr2))\n# Test 2\n# Correct result => 5\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4]\nprint(find_missing_number(arr1, arr2))\nprint(find_missing_number_2(arr1, arr2))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "peekOfCode": "arr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4]\nprint(find_missing_number(arr1, arr2))\nprint(find_missing_number_2(arr1, arr2))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "peekOfCode": "arr2 = [1, 2, 3, 4]\nprint(find_missing_number(arr1, arr2))\nprint(find_missing_number_2(arr1, arr2))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_missing_number_in_second_array",
        "documentation": {}
    },
    {
        "label": "missing_number",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_one_missing_number",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_one_missing_number",
        "peekOfCode": "def missing_number(nums):\n    s = sum(nums)\n    n = len(nums) + 1\n    # sum formula (sum of the first n numbers) = (N*(N+1))/2\n    return n * (n + 1) // 2 - s\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 4",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_one_missing_number",
        "documentation": {}
    },
    {
        "label": "find_peak_element",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_peak_element",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_peak_element",
        "peekOfCode": "def find_peak_element(nums):\n    l = 0\n    r = len(nums) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if nums[mid] > nums[mid + 1]:\n            # go left if the current value is smaller than the next one\n            # in this moment you're sure that there is a peak element left from this one\n            r = mid\n        else:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_peak_element",
        "documentation": {}
    },
    {
        "label": "missing_numbers",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_two_missing_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_two_missing_numbers",
        "peekOfCode": "def missing_numbers(nums):\n    # find sums from the array\n    s = 0\n    s_2 = 0\n    for i in nums:\n        s += i\n        s_2 += i * i\n    n = len(nums) + 2\n    # using formulas, compute the sums of the sequence\n    f_s = n * (n + 1) // 2",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_two_missing_numbers",
        "documentation": {}
    },
    {
        "label": "b1,2",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_two_missing_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_two_missing_numbers",
        "peekOfCode": "b1,2 = (diff_sum +- sqrt(2*diff_squared_sum - diff_sum^2)) / 2\nSum formula = N*(N+1)/2\nSquared sum formula = N*(N+1)*(2*N+1)/6\n    Time Complexity:    O(N)\n    Space Complexity:   O(1)\nNote: this idea also could be used when more than 2 numbers are missing,\nbut you'll need more computations/equations, because you'll have K unknowns.\n\"\"\"\n############\n# Solution #",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_two_missing_numbers",
        "documentation": {}
    },
    {
        "label": "find_unpaired_element",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.find_unpaired",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.find_unpaired",
        "peekOfCode": "def find_unpaired_element(arr):\n    unique = 0\n    for el in arr:\n        unique ^= el\n    return unique\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 3",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.find_unpaired",
        "documentation": {}
    },
    {
        "label": "flatten_deep_list",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.flatten_deep_list",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.flatten_deep_list",
        "peekOfCode": "def flatten_deep_list(arr):\n    if not isinstance(arr, list):\n        return [arr]\n    result = []\n    for a in arr:\n        result.extend(flatten_deep_list(a))\n    return result\n###########\n# Testing #\n###########",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.flatten_deep_list",
        "documentation": {}
    },
    {
        "label": "can_jump",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.jump_game",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.jump_game",
        "peekOfCode": "def can_jump(nums):\n    n = len(nums)\n    if n == 0:\n        return False\n    max_jump = 0\n    for i in range(n):\n        # if this field isn't reachable return False\n        if max_jump < i:\n            return False\n        this_jump = i + nums[i]",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.jump_game",
        "documentation": {}
    },
    {
        "label": "find_kth_smallest_recursive",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "peekOfCode": "def find_kth_smallest_recursive(arr, k):\n    n = len(arr)\n    if k > n:\n        return None\n    if k < 1:\n        return None\n    return kth_smallest(arr, k - 1, 0, n - 1)\ndef kth_smallest(arr, k, left, right):\n    pivot = pivoting(arr, left, right)\n    if pivot > k:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "documentation": {}
    },
    {
        "label": "kth_smallest",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "peekOfCode": "def kth_smallest(arr, k, left, right):\n    pivot = pivoting(arr, left, right)\n    if pivot > k:\n        return kth_smallest(arr, k, left, pivot - 1)\n    if pivot < k:\n        return kth_smallest(arr, k, pivot + 1, right)\n    return arr[pivot]\ndef pivoting(arr, left, right):\n    # Linear time complexity pivoting\n    # takes the last element as pivot",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "documentation": {}
    },
    {
        "label": "pivoting",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "peekOfCode": "def pivoting(arr, left, right):\n    # Linear time complexity pivoting\n    # takes the last element as pivot\n    pivot = right\n    new_pivot = left\n    # iterate the whole array (without the last element)\n    # and put all elements smaller than the pivot (last element) in the first K spots\n    # with the new_pivot we're \"counting\" how many smaller elements are there\n    for j in range(left, right):\n        if arr[j] < arr[pivot]:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "peekOfCode": "def swap(arr, i, j):\n    # swaps two elements in an array\n    arr[i], arr[j] = arr[j], arr[i]\n##############\n# Solution 2 #\n##############\ndef find_kth_smallest(arr, k):\n    n = len(arr)\n    if k > n:\n        return None",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "documentation": {}
    },
    {
        "label": "find_kth_smallest",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "peekOfCode": "def find_kth_smallest(arr, k):\n    n = len(arr)\n    if k > n:\n        return None\n    if k < 1:\n        return None\n    k -= 1\n    left = 0\n    right = n - 1\n    while True:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "peekOfCode": "arr = [1, 1, 1, 1, 1, 1]\nprint([find_kth_smallest_recursive(arr, i) for i in range(1, len(arr) + 1)])\nprint([find_kth_smallest(arr, i) for i in range(1, len(arr) + 1)])\n# Test 2\n# Correct result => 0 1 2 4 4 4 6 8 8 10 11 12\narr = [6, 4, 2, 12, 4, 8, 10, 1, 11, 0, 8, 4]\nprint([find_kth_smallest_recursive(arr, i) for i in range(1, len(arr) + 1)])\nprint([find_kth_smallest(arr, i) for i in range(1, len(arr) + 1)])\n# Test 3\n# Correct result => 1 2 3 4 5",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "peekOfCode": "arr = [6, 4, 2, 12, 4, 8, 10, 1, 11, 0, 8, 4]\nprint([find_kth_smallest_recursive(arr, i) for i in range(1, len(arr) + 1)])\nprint([find_kth_smallest(arr, i) for i in range(1, len(arr) + 1)])\n# Test 3\n# Correct result => 1 2 3 4 5\narr = [5, 4, 3, 2, 1]\nprint([find_kth_smallest_recursive(arr, i) for i in range(1, len(arr) + 1)])\nprint([find_kth_smallest(arr, i) for i in range(1, len(arr) + 1)])",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "peekOfCode": "arr = [5, 4, 3, 2, 1]\nprint([find_kth_smallest_recursive(arr, i) for i in range(1, len(arr) + 1)])\nprint([find_kth_smallest(arr, i) for i in range(1, len(arr) + 1)])",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.kth_smallest",
        "documentation": {}
    },
    {
        "label": "find_k_closes_recursive",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "peekOfCode": "def find_k_closes_recursive(arr, pt, k):\n    n = len(arr)\n    if k > n:\n        return arr\n    if k < 1:\n        return []\n    kth_closest(arr, k - 1, 0, n - 1, pt)\n    return arr[:k]\ndef kth_closest(arr, k, left, right, pt):\n    pivot = pivoting(arr, left, right, pt)",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "documentation": {}
    },
    {
        "label": "kth_closest",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "peekOfCode": "def kth_closest(arr, k, left, right, pt):\n    pivot = pivoting(arr, left, right, pt)\n    if pivot > k:\n        kth_closest(arr, k, left, pivot - 1, pt)\n    elif pivot < k:\n        kth_closest(arr, k, pivot + 1, right, pt)\ndef pivoting(arr, left, right, pt):\n    # Linear time complexity pivoting\n    # takes the last element as pivot\n    pivot_dist = sqr_dist(pt, arr[right])",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "documentation": {}
    },
    {
        "label": "pivoting",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "peekOfCode": "def pivoting(arr, left, right, pt):\n    # Linear time complexity pivoting\n    # takes the last element as pivot\n    pivot_dist = sqr_dist(pt, arr[right])\n    new_pivot = left\n    # iterate the whole array (without the last element)\n    # and put all elements closer than the pivot (last element) in the first K spots\n    # with the new_pivot we're \"counting\" how many closer elements are there\n    for j in range(left, right):\n        if sqr_dist(pt, arr[j]) < pivot_dist:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "peekOfCode": "def swap(arr, i, j):\n    # swaps two elements in an array\n    arr[i], arr[j] = arr[j], arr[i]\ndef sqr_dist(a, b):\n    # no need from the square root\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\n##############\n# Solution 2 #\n##############\ndef find_k_closes(arr, pt, k):",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "documentation": {}
    },
    {
        "label": "sqr_dist",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "peekOfCode": "def sqr_dist(a, b):\n    # no need from the square root\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\n##############\n# Solution 2 #\n##############\ndef find_k_closes(arr, pt, k):\n    n = len(arr)\n    if k > n:\n        return arr",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "documentation": {}
    },
    {
        "label": "find_k_closes",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "peekOfCode": "def find_k_closes(arr, pt, k):\n    n = len(arr)\n    if k > n:\n        return arr\n    if k < 1:\n        return []\n    k -= 1\n    left = 0\n    right = n - 1\n    while True:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.k_closest_points",
        "documentation": {}
    },
    {
        "label": "longest_increasing_subarray",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.longest_increasing_subarray",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.longest_increasing_subarray",
        "peekOfCode": "def longest_increasing_subarray(arr):\n    n = len(arr)\n    longest = 0\n    current = 1\n    i = 1\n    while i < n:\n        if arr[i] < arr[i - 1]:\n            longest = max(longest, current)\n            current = 1\n        else:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.longest_increasing_subarray",
        "documentation": {}
    },
    {
        "label": "majority_element_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "peekOfCode": "def majority_element_1(nums):\n    nums.sort()\n    return nums[len(nums) // 2]\n##############\n# Solution 2 #\n##############\ndef majority_element_2(nums):\n    counter = {}\n    for num in nums:\n        if num in counter:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "documentation": {}
    },
    {
        "label": "majority_element_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "peekOfCode": "def majority_element_2(nums):\n    counter = {}\n    for num in nums:\n        if num in counter:\n            counter[num] += 1\n        else:\n            counter[num] = 1\n    half = len(nums) // 2\n    for num in counter:\n        if counter[num] > half:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "documentation": {}
    },
    {
        "label": "majority_element_3",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "peekOfCode": "def majority_element_3(nums):\n    majority = 0\n    count = 0\n    for num in nums:\n        if count == 0:\n            majority = num\n        if num == majority:\n            count += 1\n        else:\n            count -= 1",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "peekOfCode": "arr = [3, 2, 3]\nprint(majority_element_1(arr))\nprint(majority_element_2(arr))\nprint(majority_element_3(arr))\n# Test 2\n# Correct result => 2\narr = [2, 2, 1, 1, 1, 2, 2]\nprint(majority_element_1(arr))\nprint(majority_element_2(arr))\nprint(majority_element_3(arr))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "peekOfCode": "arr = [2, 2, 1, 1, 1, 2, 2]\nprint(majority_element_1(arr))\nprint(majority_element_2(arr))\nprint(majority_element_3(arr))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.majority_element",
        "documentation": {}
    },
    {
        "label": "max_profit",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.max_profit",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.max_profit",
        "peekOfCode": "def max_profit(prices):\n    total = 0\n    for i in range(1, len(prices)):\n        total += max(0, prices[i] - prices[i - 1])\n    return total\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 7",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.max_profit",
        "documentation": {}
    },
    {
        "label": "merge_intervals",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.merge_intervals",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.merge_intervals",
        "peekOfCode": "def merge_intervals(intervals):\n    n = len(intervals)\n    if n == 0:\n        return []\n    # sort the intervals\n    intervals.sort(key=lambda interval: interval[0])\n    mergedIntervals = []\n    mergedIntervals.append(intervals[0])\n    for i in range(1, n):\n        # check if this interval belongs to the last created interval",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.merge_intervals",
        "documentation": {}
    },
    {
        "label": "min_swaps",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.min_swaps",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.min_swaps",
        "peekOfCode": "def min_swaps(a):\n    n = len(a)\n    swaps = 0\n    for i in range(n):\n        # swap the elements till the right element isn't found\n        while a[i] - 1 != i:\n            swap = a[i] - 1\n            # swap the elements\n            a[swap], a[i] = a[i], a[swap]\n            swaps += 1",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.min_swaps",
        "documentation": {}
    },
    {
        "label": "product_except_self",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.product_of_array_except_self",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.product_of_array_except_self",
        "peekOfCode": "def product_except_self(nums):\n    n = len(nums)\n    if n == 0:\n        return []\n    mult = 1\n    res = [1]\n    i = 0\n    # all products from right to left\n    while i < n - 1:\n        mult *= nums[i]",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.product_of_array_except_self",
        "documentation": {}
    },
    {
        "label": "reservoir_sampling",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "peekOfCode": "def reservoir_sampling(arr, k):\n    # fill the reservoir array\n    sample = []\n    for i in range(k):\n        sample.append(arr[i])\n    # replace elements with gradually decreasing probability\n    n = len(arr)\n    for i in range(k, n):\n        # randint(a, b) generates a uniform integer from the inclusive range {a, ..., b} (a <= X <= b)\n        j = randint(0, i)",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "documentation": {}
    },
    {
        "label": "probabilistic_sampling",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "peekOfCode": "def probabilistic_sampling(arr, k):\n    sample = []\n    n = len(arr)\n    for el in arr:\n        # random() generates a uniform double in this range (0 <= X < 1)\n        # (k / n) is the probability for this element to be choosen (0 <= X <= 1)\n        if random() < (k / n):\n            sample.append(el)\n            k -= 1  # left elements to be choosen\n        n -= 1  # left elements for choosing",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "peekOfCode": "arr = [1, 2, 3, 4]\nk = 2\nprint(reservoir_sampling(arr, k))\nprint(probabilistic_sampling(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "peekOfCode": "k = 2\nprint(reservoir_sampling(arr, k))\nprint(probabilistic_sampling(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.random_sample",
        "documentation": {}
    },
    {
        "label": "reverse_arr",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.reverse_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.reverse_array",
        "peekOfCode": "def reverse_arr(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        # reverse the array from the start index to the end index by\n        # swaping each element with the pair from the other part of the array\n        swap(arr, start, end)\n        start += 1\n        end -= 1\n    return arr",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.reverse_array",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.reverse_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.reverse_array",
        "peekOfCode": "def swap(arr, i, j):\n    # swapping two elements from a same array\n    arr[i], arr[j] = arr[j], arr[i]\n    \"\"\"same as\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n    \"\"\"\n###########\n# Testing #",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.reverse_array",
        "documentation": {}
    },
    {
        "label": "reverse_ascending_sublists",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.reverse_ascending_sublists",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.reverse_ascending_sublists",
        "peekOfCode": "def reverse_ascending_sublists(arr):\n    n = len(arr)\n    if n == 0:\n        return []\n    start = 0\n    for i in range(1, n):\n        # check if this the end of the strictly ascending sublist\n        if arr[i] < arr[i - 1]:\n            reverse_arr(arr, start, i - 1)\n            # a new sublist starts",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.reverse_ascending_sublists",
        "documentation": {}
    },
    {
        "label": "reverse_arr",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.reverse_ascending_sublists",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.reverse_ascending_sublists",
        "peekOfCode": "def reverse_arr(arr, start, end):\n    while start < end:\n        # reverse the array from the start index to the end index by\n        # swaping each element with the pair from the other part of the array\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n###########\n# Testing #",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.reverse_ascending_sublists",
        "documentation": {}
    },
    {
        "label": "rotate_array_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "peekOfCode": "def rotate_array_1(arr, k, right=True):\n    n = len(arr)\n    right %= n\n    # going right for K places is same like going left for N-K places\n    if right:\n        k = n - k\n    # the shortest way to swap 2 parts of the array\n    return arr[k:] + arr[:k]\n##############\n# Solution 2 #",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "documentation": {}
    },
    {
        "label": "rotate_array_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "peekOfCode": "def rotate_array_2(arr, k, right=True):\n    n = len(arr)\n    right %= n\n    # going right for K places is same like going left for N-K places\n    if not right:\n        k = n - k\n    # different sets\n    sets = gcd(n, k)\n    # elements in each set\n    elements = n // sets",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "peekOfCode": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 7\nprint(rotate_array_1(arr, k))\nprint(rotate_array_2(arr, k))\n# Test 2\n# Correct result => [6, 1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5, 6]\nk = 1\nprint(rotate_array_1(arr, k))\nprint(rotate_array_2(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "peekOfCode": "k = 7\nprint(rotate_array_1(arr, k))\nprint(rotate_array_2(arr, k))\n# Test 2\n# Correct result => [6, 1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5, 6]\nk = 1\nprint(rotate_array_1(arr, k))\nprint(rotate_array_2(arr, k))\n# Test 3",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\nk = 1\nprint(rotate_array_1(arr, k))\nprint(rotate_array_2(arr, k))\n# Test 3\n# Correct result => [4, 5, 6, 1, 2, 3]\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(rotate_array_1(arr, k))\nprint(rotate_array_2(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "peekOfCode": "k = 1\nprint(rotate_array_1(arr, k))\nprint(rotate_array_2(arr, k))\n# Test 3\n# Correct result => [4, 5, 6, 1, 2, 3]\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(rotate_array_1(arr, k))\nprint(rotate_array_2(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(rotate_array_1(arr, k))\nprint(rotate_array_2(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "peekOfCode": "k = 3\nprint(rotate_array_1(arr, k))\nprint(rotate_array_2(arr, k))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.rotate_array",
        "documentation": {}
    },
    {
        "label": "search_rotated_sorted_array",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.search_rotated_sorted_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.search_rotated_sorted_array",
        "peekOfCode": "def search_rotated_sorted_array(nums, target):\n    n = len(nums)\n    pivot = find_pivot(nums, 0, n) + 1\n    if pivot > n:\n        return -1\n    if nums[0] <= target:\n        return find_element(nums, 0, pivot - 1, target)\n    return find_element(nums, pivot, n - 1, target)\ndef find_pivot(nums, left, right):\n    while left < right - 1:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.search_rotated_sorted_array",
        "documentation": {}
    },
    {
        "label": "find_pivot",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.search_rotated_sorted_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.search_rotated_sorted_array",
        "peekOfCode": "def find_pivot(nums, left, right):\n    while left < right - 1:\n        mid = left + (right - left) // 2\n        if nums[left] < nums[mid]:\n            left = mid\n        else:\n            right = mid\n    return left\ndef find_element(nums, left, right, target):\n    while left <= right:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.search_rotated_sorted_array",
        "documentation": {}
    },
    {
        "label": "find_element",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.search_rotated_sorted_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.search_rotated_sorted_array",
        "peekOfCode": "def find_element(nums, left, right, target):\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.search_rotated_sorted_array",
        "documentation": {}
    },
    {
        "label": "secret_santa",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.secret_santa",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.secret_santa",
        "peekOfCode": "def secret_santa(names):\n    # or use shuffle method from random module (from random import shuffle)\n    shuffle_array(names)\n    pairs = []\n    n = len(names)\n    prev = names[-1]  # or names[n - 1]\n    for curr in names:\n        pairs.append((prev, curr))\n        prev = curr\n    return pairs",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.secret_santa",
        "documentation": {}
    },
    {
        "label": "shuffle_array",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.secret_santa",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.secret_santa",
        "peekOfCode": "def shuffle_array(arr):\n    n = len(arr)\n    for i in range(n):\n        rand = randint(i, n - 1)  # or randint(0, i) it's same\n        arr[i], arr[rand] = arr[rand], arr[i]  # swap elements\n    # the original arr is already changed\n    return arr\n###########\n# Testing #\n###########",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.secret_santa",
        "documentation": {}
    },
    {
        "label": "shuffle_array",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.shuffle_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.shuffle_array",
        "peekOfCode": "def shuffle_array(arr):\n    n = len(arr)\n    for i in range(n):\n        rand = randint(i, n - 1)  # or randint(0, i) it's same\n        arr[i], arr[rand] = arr[rand], arr[i]  # swap elements\n    # the original arr is already changed\n    return arr\n###########\n# Testing #\n###########",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.shuffle_array",
        "documentation": {}
    },
    {
        "label": "sort_rgb_array",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.sort_rgb_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.sort_rgb_array",
        "peekOfCode": "def sort_rgb_array(arr):\n    n = len(arr)\n    # indexes/pointers of the last element of each color\n    r, g, b = 0, 0, 0\n    for i in range(n):\n        # swap the element and move the pointer\n        if arr[i] == \"R\":\n            swap(arr, i, r)\n            r += 1\n        # move pointer",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.sort_rgb_array",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.sort_rgb_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.sort_rgb_array",
        "peekOfCode": "def swap(arr, i, j):\n    # swaps two elements in an array\n    arr[i], arr[j] = arr[j], arr[i]\n##############\n# Solution 2 #\n##############\ndef sort_rgb_array_2(arr):\n    rgb = {\"R\": 0, \"G\": 0, \"B\": 0}\n    # count colors\n    for c in arr:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.sort_rgb_array",
        "documentation": {}
    },
    {
        "label": "sort_rgb_array_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.sort_rgb_array",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.sort_rgb_array",
        "peekOfCode": "def sort_rgb_array_2(arr):\n    rgb = {\"R\": 0, \"G\": 0, \"B\": 0}\n    # count colors\n    for c in arr:\n        rgb[c] += 1\n    # adjust the intervals\n    rgb[\"G\"] += rgb[\"R\"]\n    rgb[\"B\"] += rgb[\"G\"]\n    # assign colors\n    for i in range(len(arr)):",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.sort_rgb_array",
        "documentation": {}
    },
    {
        "label": "find_subarray",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.subarray_with_sum_k",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.subarray_with_sum_k",
        "peekOfCode": "def find_subarray(arr, k):\n    n = len(arr)\n    if n == 0:\n        return -1\n    start = 0\n    end = 0\n    current_sum = arr[0]\n    while end < n:\n        if current_sum == k:\n            return (start + 1, end + 1)",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.subarray_with_sum_k",
        "documentation": {}
    },
    {
        "label": "PQElement",
        "kind": 6,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "peekOfCode": "class PQElement:\n    def __init__(self, el):\n        self.frequency, self.val = el\n    def __lt__(self, other):\n        return self.frequency < other.frequency\n# priority queue\nclass PriorityQueue:\n    def __init__(self):\n        self.data = []\n    def push(self, el):",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "documentation": {}
    },
    {
        "label": "PriorityQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "peekOfCode": "class PriorityQueue:\n    def __init__(self):\n        self.data = []\n    def push(self, el):\n        heapq.heappush(self.data, PQElement(el))\n    def pop(self):\n        return heapq.heappop(self.data)\n    def count(self):\n        return len(self.data)\ndef top_k_frequent_1(nums, k):",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "documentation": {}
    },
    {
        "label": "top_k_frequent_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "peekOfCode": "def top_k_frequent_1(nums, k):\n    frequency = {}\n    # count the frequency of each unique element\n    for num in nums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    arr = [(frequency[el], el) for el in frequency]\n    n = len(arr)",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "documentation": {}
    },
    {
        "label": "top_k_frequent_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "peekOfCode": "def top_k_frequent_2(nums, k):\n    frequency = {}\n    # count the frequency of each unique element\n    for num in nums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    arr = [(frequency[el], el) for el in frequency]\n    n = len(arr)",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "documentation": {}
    },
    {
        "label": "pivoting",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "peekOfCode": "def pivoting(arr, left, right):\n    # Linear time complexity pivoting\n    # takes the last element as pivot\n    pivot = right\n    new_pivot = left\n    # iterate the whole array (without the last element)\n    # and put all elements bigger than the pivot (last element) in the first K spots\n    # with the new_pivot we're \"counting\" how many bigger elements are there\n    for j in range(left, right):\n        if arr[j][0] > arr[pivot][0]:",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "peekOfCode": "def swap(arr, i, j):\n    # swaps two elements in an array\n    arr[i], arr[j] = arr[j], arr[i]\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => [1, 2]\nprint(top_k_frequent_1([1, 1, 1, 2, 2, 3], 2))\nprint(top_k_frequent_2([1, 1, 1, 2, 2, 3], 2))",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.top_k_frequent_elements",
        "documentation": {}
    },
    {
        "label": "trapped_water",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Arrays.trapped_watter",
        "description": "python-prac.Overflow.coding-problems-master.Arrays.trapped_watter",
        "peekOfCode": "def trapped_water(elevation_map):\n    n = len(elevation_map)\n    if n == 0:\n        return 0\n    water = 0\n    # start from front of the array\n    # and look for the max wall\n    max_idx = 0\n    max_height = elevation_map[0]\n    for i in range(1, n):",
        "detail": "python-prac.Overflow.coding-problems-master.Arrays.trapped_watter",
        "documentation": {}
    },
    {
        "label": "climbing_staircase",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.climbing_staircase",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.climbing_staircase",
        "peekOfCode": "def climbing_staircase(steps, height):\n    dp = [0 for i in range(height)]\n    # add all steps into dp\n    for s in steps:\n        if s <= height:\n            dp[s - 1] = 1\n    # for each position look how you can arrive there\n    for i in range(height):\n        for s in steps:\n            if i - s >= 0:",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.climbing_staircase",
        "documentation": {}
    },
    {
        "label": "coin_change_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "peekOfCode": "def coin_change_1(coins, amount):\n    if amount == 0:\n        return 0\n    if len(coins) == 0:\n        return -1\n    max_value = amount + 1  # use this instead of math.inf\n    dp = [max_value for i in range(max_value)]\n    dp[0] = 0\n    for i in range(1, max_value):\n        for c in coins:",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "documentation": {}
    },
    {
        "label": "coin_change_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "peekOfCode": "def coin_change_2(coins, amount):\n    if amount == 0:\n        return 0\n    if len(coins) == 0:\n        return -1\n    max_value = amount + 1\n    max_coin = min(max_value, max(coins) + 1)\n    dp = [max_value for i in range(max_coin)]\n    dp[0] = 0\n    for i in range(1, max_value):",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "documentation": {}
    },
    {
        "label": "coins",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "peekOfCode": "coins = [1, 2, 5]\namount = 11\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))\n# Test 2\n# Correct result => -1\ncoins = [2]\namount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "documentation": {}
    },
    {
        "label": "amount",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "peekOfCode": "amount = 11\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))\n# Test 2\n# Correct result => -1\ncoins = [2]\namount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "documentation": {}
    },
    {
        "label": "coins",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "peekOfCode": "coins = [2]\namount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "documentation": {}
    },
    {
        "label": "amount",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "peekOfCode": "amount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.coin_change",
        "documentation": {}
    },
    {
        "label": "count_ip_addresses",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.count_ip_addresses",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.count_ip_addresses",
        "peekOfCode": "def count_ip_addresses(S, K):\n    n = len(S)\n    if n == 0:\n        return 0\n    if n < K:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(K):\n        # if you want to save just little calculations you can use min(3*(i+1), n) instead of n",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.count_ip_addresses",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.count_ip_addresses",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.count_ip_addresses",
        "peekOfCode": "def is_valid(S):\n    if (len(S) > 1) and (S[0] == \"0\"):\n        return False\n    return int(S) <= 255\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 1\nprint(count_ip_addresses(\"1234567\", 3))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.count_ip_addresses",
        "documentation": {}
    },
    {
        "label": "create_palindrome_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "peekOfCode": "def create_palindrome_1(word):\n    n = len(word)\n    # base cases\n    if n == 1:\n        return word\n    if n == 2:\n        if word[0] != word[1]:\n            word += word[0]  # make a palindrom\n        return word\n    # check if the first and last chars are same",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "documentation": {}
    },
    {
        "label": "create_palindrome_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "peekOfCode": "def create_palindrome_2(word):\n    n = len(word)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    # run dp\n    for gap in range(1, n):\n        left = 0\n        for right in range(gap, n):\n            if word[left] == word[right]:\n                dp[left][right] = dp[left + 1][right - 1]\n            else:",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "documentation": {}
    },
    {
        "label": "build_palindrome",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "peekOfCode": "def build_palindrome(word, dp, left, right):\n    # similar like the first solution, but without exponentialy branching\n    # this is linear time, we already know the inserting values\n    if left > right:\n        return \"\"\n    if left == right:\n        return word[left]\n    if word[left] == word[right]:\n        return word[left] + build_palindrome(word, dp, left + 1, right - 1) + word[left]\n    if dp[left + 1][right] < dp[left][right - 1]:",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "peekOfCode": "word = \"race\"\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 2\n# Correct result => 'elgoogle'\nword = \"google\"\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 3\n# Correct result => 'adcbcda'",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "peekOfCode": "word = \"google\"\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 3\n# Correct result => 'adcbcda'\nword = \"abcda\"\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 4\n# Correct result => 'abcdefgfedcba'",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "peekOfCode": "word = \"abcda\"\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 4\n# Correct result => 'abcdefgfedcba'\nword = \"adefgfdcba\"\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "peekOfCode": "word = \"adefgfdcba\"\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.create_palindrom",
        "documentation": {}
    },
    {
        "label": "interleaving_strings_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.interleaving_strings",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.interleaving_strings",
        "peekOfCode": "def interleaving_strings_1(A, B, C):\n    nA, nB, nC = len(A), len(B), len(C)\n    if nA + nB != nC:\n        return 0\n    dp = [[0 for j in range(nB + 1)] for i in range(nA + 1)]\n    # starting values\n    dp[0][0] = 1\n    for i in range(1, nA + 1):\n        if A[i - 1] == C[i - 1]:\n            # short form of if A[i - 1] == C[i - 1] and dp[i - 1][0] == 1",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.interleaving_strings",
        "documentation": {}
    },
    {
        "label": "interleaving_strings_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.interleaving_strings",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.interleaving_strings",
        "peekOfCode": "def interleaving_strings_2(A, B, C):\n    nA, nB, nC = len(A), len(B), len(C)\n    if nA + nB != nC:\n        return 0\n    dp = [0 for j in range(nB + 1)]\n    # starting values\n    dp[0] = 1\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[i] = dp[i - 1]",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.interleaving_strings",
        "documentation": {}
    },
    {
        "label": "min_jumps_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.jump_game_2",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.jump_game_2",
        "peekOfCode": "def min_jumps_1(nums):\n    n = len(nums)\n    if n <= 1:\n        return 0\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        this_jump = i + nums[i]\n        jumps = dp[i] + 1\n        if this_jump >= n - 1:",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.jump_game_2",
        "documentation": {}
    },
    {
        "label": "min_jumps_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.jump_game_2",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.jump_game_2",
        "peekOfCode": "def min_jumps_2(nums):\n    n = len(nums)\n    if n <= 1:\n        return 0\n    jumps = 0\n    max_jump = 0\n    new_max_jump = 0\n    for i in range(n):\n        if max_jump < i:\n            max_jump = new_max_jump",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.jump_game_2",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.jump_game_2",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.jump_game_2",
        "peekOfCode": "nums = [2, 3, 1, 1, 4]\nprint(min_jumps_1(nums))\nprint(min_jumps_2(nums))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.jump_game_2",
        "documentation": {}
    },
    {
        "label": "longest_common_subsequence",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_common_subsequence",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_common_subsequence",
        "peekOfCode": "def longest_common_subsequence(str1, str2):\n    n, m = len(str1), len(str2)\n    # create dp matrix\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    # run dp\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # checks only in 3 directions in the table\n            # in short: to the current position dp could come from those 3 previous positions\n            #   ^  ^",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_common_subsequence",
        "documentation": {}
    },
    {
        "label": "longest_common_substring",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_common_substring",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_common_substring",
        "peekOfCode": "def longest_common_substring(str1, str2):\n    n, m = len(str1), len(str2)\n    # instead of creating a whole dp table, use only 2 rows (current and previous row)\n    curr = [0 for j in range(m + 1)]\n    prev = []\n    max_length = 0\n    max_idx = 0\n    for i in range(1, n + 1):\n        # save the previous row and create the current row\n        prev = curr",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_common_substring",
        "documentation": {}
    },
    {
        "label": "longest_increasing_subsequence_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "peekOfCode": "def longest_increasing_subsequence_1(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n    dp = [1 for i in range(n)]\n    max_val = 1\n    # run dp\n    for i in range(n):\n        for j in range(i):\n            if nums[j] < nums[i]:",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "documentation": {}
    },
    {
        "label": "longest_increasing_subsequence_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "peekOfCode": "def longest_increasing_subsequence_2(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n    # the last dp array result in longest increasing subsequence\n    dp = []\n    for i in range(n):\n        idx = binary_search(dp, nums[i])\n        k = len(dp)\n        if idx == k:",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "peekOfCode": "def binary_search(dp, target):\n    l = 0\n    r = len(dp) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if dp[mid][-1] == target:\n            return mid\n        elif dp[mid][-1] < target:\n            l = mid + 1\n        else:",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "peekOfCode": "arr = [10, 9, 2, 5, 3, 7, 101, 18]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 2\n# Correct result => [1, 2, 3]\narr = [1, 2, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 3\n# Correct result => [1, 2, 5, 7, 12] - one of the possible combinations",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "peekOfCode": "arr = [1, 2, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 3\n# Correct result => [1, 2, 5, 7, 12] - one of the possible combinations\narr = [10, 1, 3, 8, 2, 0, 5, 7, 12, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 4\n# Correct result => [1, 2, 3, 4, 5, 6]",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "peekOfCode": "arr = [10, 1, 3, 8, 2, 0, 5, 7, 12, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 4\n# Correct result => [1, 2, 3, 4, 5, 6]\narr = [12, 1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 5\n# Correct result => [1, 2, 3]",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "peekOfCode": "arr = [12, 1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 5\n# Correct result => [1, 2, 3]\narr = [1, 4, 2, 0, 3, 1]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 6\n# Correct result => [3] - one of the possible combinations",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "peekOfCode": "arr = [1, 4, 2, 0, 3, 1]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 6\n# Correct result => [3] - one of the possible combinations\narr = [7, 5, 5, 5, 5, 5, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "peekOfCode": "arr = [7, 5, 5, 5, 5, 5, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.longest_increasing_subsequence",
        "documentation": {}
    },
    {
        "label": "max_profit_with_k_transactions",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.max_profit_k_transactions",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.max_profit_k_transactions",
        "peekOfCode": "def max_profit_with_k_transactions(prices, k):\n    days = len(prices)\n    if days < 2:\n        # not enough days for a transaction\n        return 0\n    # transaction = buy + sell (2 separate days)\n    # in a day you can sell and after that buy a share\n    # (according to this, can't exists more transactions than the number of the prices/days)\n    k = min(k, days)\n    # create space optimized dp matrix",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.max_profit_k_transactions",
        "documentation": {}
    },
    {
        "label": "max_subarray_sum",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.max_subarray_sum",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.max_subarray_sum",
        "peekOfCode": "def max_subarray_sum(a):\n    curr_sum = 0\n    max_sum = 0\n    for val in a:\n        # extend the current sum with the curren value;\n        # reset it to 0 if it is smaller than 0, we care only about non-negative sums\n        curr_sum = max(0, curr_sum + val)\n        # check if this is the max sum\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.max_subarray_sum",
        "documentation": {}
    },
    {
        "label": "min_cost_coloring",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.min_cost_coloring",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.min_cost_coloring",
        "peekOfCode": "def min_cost_coloring(dp):\n    # no need from a new dp matrix, you can use the input matrix\n    n = len(dp)\n    if n == 0:\n        return 0\n    m = len(dp[0])\n    if m < 2:\n        return -1\n    # save only the smallest 2 costs instead of searching the whole previous array\n    prev_min = [(0, -1), (0, -1)]",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.min_cost_coloring",
        "documentation": {}
    },
    {
        "label": "num_decodings",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_decodings",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_decodings",
        "peekOfCode": "def num_decodings(code):\n    n = len(code)\n    dp = [0 for i in range(n)]\n    if n == 0:\n        return 0\n    dp[0] = 1\n    if n == 1:\n        return dp[0]\n    dp[1] = (code[1] != \"0\") + is_valid(code[0:2])\n    for i in range(2, n):",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_decodings",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_decodings",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_decodings",
        "peekOfCode": "def is_valid(code):\n    k = int(code)\n    return (k < 27) and (k > 9)\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 5\nprint(num_decodings(\"12151\"))\n# Test 2",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_decodings",
        "documentation": {}
    },
    {
        "label": "num_smses",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_smses",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_smses",
        "peekOfCode": "def num_smses(sequence):\n    n = len(sequence)\n    dp = [0] * n\n    # dp starting values, check all 4 possible starting combinations\n    for i in range(min(4, n)):\n        if is_valid(sequence[0 : i + 1]):\n            dp[i] = 1\n    # run dp\n    for i in range(1, n):\n        # check all 4 possible combinations (x, xx, xxx, xxxx)",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_smses",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_smses",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_smses",
        "peekOfCode": "def is_valid(sequence):\n    ch = sequence[0]\n    for c in sequence:\n        if c != ch:\n            return False\n    if sequence == \"0\":\n        return True\n    if ((ch >= \"2\" and ch <= \"6\") or ch == \"8\") and (len(sequence) < 4):\n        return True\n    if (ch == \"7\") or (ch == \"9\"):",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.number_of_smses",
        "documentation": {}
    },
    {
        "label": "ordered_digits",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.ordered_digits",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.ordered_digits",
        "peekOfCode": "def ordered_digits(number):\n    n = len(number)\n    dp = [[0 for j in range(10)] for i in range(2)]\n    for i in range(n):\n        min_prev = float(\"inf\")\n        for j in range(10):\n            # find the min value from the previous digit and add it to the current value\n            min_prev = min(min_prev, dp[(i - 1) % 2][j])\n            # compute diff between the current digit and wanted digit\n            diff = abs(j - int(number[i]))",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.ordered_digits",
        "documentation": {}
    },
    {
        "label": "split_coins",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.split_coins",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.split_coins",
        "peekOfCode": "def split_coins(coins):\n    if len(coins) == 0:\n        return -1\n    full_sum = sum(coins)\n    half_sum = full_sum // 2 + 1\n    dp = [False] * half_sum\n    dp[0] = True\n    for c in coins:\n        for i in range(half_sum - 1, -1, -1):\n            if (i >= c) and dp[i - c]:",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.split_coins",
        "documentation": {}
    },
    {
        "label": "sum_non_adjacent",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.sum_non-adjecent",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.sum_non-adjecent",
        "peekOfCode": "def sum_non_adjacent(arr):\n    n = len(arr)\n    # from the dp matrix you only need the last 3 sums\n    sums = [0, 0, 0]\n    # TODO: refactor these if-elses, those are to skip using of DP matrix\n    if n == 0:\n        return 0\n    # if negative or zero, the sum will be 0\n    sums[0] = max(arr[0], 0)\n    if n == 1:",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.sum_non-adjecent",
        "documentation": {}
    },
    {
        "label": "operations",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.transform_number_ascending_digits",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.transform_number_ascending_digits",
        "peekOfCode": "def operations(number):\n    n = len(number)\n    diff = lambda i, j: abs(j - int(number[i]))\n    # compute diff between the current digit and wanted digit, and fill the dp\n    prev_dp = [min(diff(0, i), 10 - diff(0, i)) for i in range(10)]\n    # go through all digits and see all possible combinations using dynamic programming\n    for i in range(1, n):\n        curr_dp = [min(diff(i, j), 10 - diff(i, j)) for j in range(10)]\n        for j in range(10):\n            # find the min value for the previous digit and add it to the current value",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.transform_number_ascending_digits",
        "documentation": {}
    },
    {
        "label": "word_break",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.word_break",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.word_break",
        "peekOfCode": "def word_break(sentence, words):\n    n, w = len(sentence), len(words)\n    if (n == 0) or (w == 0):\n        return None\n    dw = [-1 for i in range(n + 1)]\n    dp = [math.inf for i in range(n + 1)]\n    dp[0] = 0\n    matched_indices = [0]\n    dic = {}  # save all words in dictionary for faster searching\n    max_word = 0  # length of the max word",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.word_break",
        "documentation": {}
    },
    {
        "label": "word_break_backtracking",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.word_break",
        "description": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.word_break",
        "peekOfCode": "def word_break_backtracking(sentence, words):\n    all_words = set()\n    # create a set from all words\n    for i in range(len(words)):\n        all_words.add(words[i])\n    n = len(sentence)\n    i = 0\n    subsentence = \"\"\n    result = deque()\n    # go letter by letter and save the new letter in subsentence",
        "detail": "python-prac.Overflow.coding-problems-master.Dynamic_Programming.word_break",
        "documentation": {}
    },
    {
        "label": "LettersCounter",
        "kind": 6,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.anagram_indices",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.anagram_indices",
        "peekOfCode": "class LettersCounter:\n    def __init__(self):\n        self.__letters = {}\n    def __create_if_not_exist(self, letter):\n        \"\"\" helper method for creating a new field for the letter \"\"\"\n        if letter not in self.__letters:\n            self.__letters[letter] = 0\n    def __delete_if_zero_letters(self, letter):\n        \"\"\" helper deleting a letter from dictionary \"\"\"\n        if self.__letters[letter] == 0:",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.anagram_indices",
        "documentation": {}
    },
    {
        "label": "anagram_indices",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.anagram_indices",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.anagram_indices",
        "peekOfCode": "def anagram_indices(s, word):\n    n = len(s)\n    w = len(word)\n    res = []\n    if n < w:\n        return res\n    counter = LettersCounter()\n    # add all letters from the original word\n    for letter in word:\n        counter.add_letter(letter)",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.anagram_indices",
        "documentation": {}
    },
    {
        "label": "count_positives",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.count_positives",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.count_positives",
        "peekOfCode": "def count_positives(numbers):\n    results = set()\n    results.add(0)\n    # make all combinations\n    for num in numbers:\n        temp = set()  # use a temporary hashset for the newest results\n        for res in results:\n            temp.add(res + num)\n            temp.add(res - num)\n        results = temp  # replace the results",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.count_positives",
        "documentation": {}
    },
    {
        "label": "find_duplicates",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.find_duplicates",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.find_duplicates",
        "peekOfCode": "def find_duplicates(arr):\n    n = len(arr)\n    duplicates = set()\n    for i in range(n):\n        idx = abs(arr[i]) - 1\n        val = arr[idx]\n        if val > 0:\n            # mark element as found for the first time\n            arr[idx] = -val\n        else:",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.find_duplicates",
        "documentation": {}
    },
    {
        "label": "find_duplicates_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.find_duplicates",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.find_duplicates",
        "peekOfCode": "def find_duplicates_2(arr):\n    n = len(arr)\n    duplicates = set()\n    elements = set()\n    for i in range(n):\n        if arr[i] in duplicates:\n            # this element is already found as duplicate\n            continue\n        if arr[i] in elements:\n            # a duplicate is found",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.find_duplicates",
        "documentation": {}
    },
    {
        "label": "find_pairs",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.find_pairs_with_sum_k",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.find_pairs_with_sum_k",
        "peekOfCode": "def find_pairs(arr, K):\n    # set to save all complements\n    complements = set()\n    # set to save all unique complements that form a pair\n    pair_complements = set()\n    for el in arr:\n        c = K - el\n        # if complement exists, then a pair is found\n        if c in complements:\n            pair_complements.add(c)",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.find_pairs_with_sum_k",
        "documentation": {}
    },
    {
        "label": "group_anagrams",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.group_anagrams",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.group_anagrams",
        "peekOfCode": "def group_anagrams(strs):\n    anagrams = {}\n    for st in strs:\n        # or hashable_object = hash_1(st)\n        hashable_object = hash_2(st)\n        if hashable_object not in anagrams:\n            anagrams[hashable_object] = []\n        anagrams[hashable_object].append(st)\n    return [anagrams[res] for res in anagrams]\ndef hash_1(st):",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.group_anagrams",
        "documentation": {}
    },
    {
        "label": "hash_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.group_anagrams",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.group_anagrams",
        "peekOfCode": "def hash_1(st):\n    chars = list(st)\n    chars.sort()\n    # or you can use a string as hash, ''.join(chars)\n    return tuple(chars)\ndef hash_2(st):\n    all_letters = [0] * 26\n    ord_a = 97  # ord('a')\n    for c in st:\n        all_letters[ord(c) - ord_a] += 1",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.group_anagrams",
        "documentation": {}
    },
    {
        "label": "hash_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.group_anagrams",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.group_anagrams",
        "peekOfCode": "def hash_2(st):\n    all_letters = [0] * 26\n    ord_a = 97  # ord('a')\n    for c in st:\n        all_letters[ord(c) - ord_a] += 1\n    # or you can use a string as hash, '<some non-digit character>'.join(all_letters), example: ' '.join(all_letters)\n    return tuple(all_letters)\n###########\n# Testing #\n###########",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.group_anagrams",
        "documentation": {}
    },
    {
        "label": "largest_range",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.longest_consecutive_sequence",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.longest_consecutive_sequence",
        "peekOfCode": "def largest_range(array):\n    visited = {}\n    for el in array:\n        visited[el] = False\n    max_range = [array[0], array[0]]\n    for el in array:\n        if visited[el]:\n            # this element is visited in another range, no need from searching again for this range\n            continue\n        visited[el] = True",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.longest_consecutive_sequence",
        "documentation": {}
    },
    {
        "label": "length_of_longest_substring",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.longest_substring_without_repeating_characters",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.longest_substring_without_repeating_characters",
        "peekOfCode": "def length_of_longest_substring(s):\n    unique_chars = set()\n    max_length = 0\n    left = 0\n    n = len(s)\n    for i in range(n):\n        while s[i] in unique_chars:\n            # remove till the current char is unique\n            unique_chars.remove(s[left])\n            left += 1",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.longest_substring_without_repeating_characters",
        "documentation": {}
    },
    {
        "label": "longest_substring_with_distinct_characters",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.longest_substring_with_k_distinct_characters",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.longest_substring_with_k_distinct_characters",
        "peekOfCode": "def longest_substring_with_distinct_characters(s, k):\n    letters = {}\n    longest = 0\n    length = 0\n    for i in range(len(s)):\n        if s[i] in letters:\n            # if this letter exists then only increase the counter and length\n            letters[s[i]] += 1\n            length += 1\n        else:",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.longest_substring_with_k_distinct_characters",
        "documentation": {}
    },
    {
        "label": "is_perfect_rectangle",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "peekOfCode": "def is_perfect_rectangle(rectangles):\n    areas_sum = 0\n    all_points = set()\n    for rect in rectangles:\n        # sum the areas of all rectangles\n        areas_sum += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        # find all points of the rectangle and check if they already exist\n        rect_points = [\n            (rect[0], rect[1]),  # left bottom\n            (rect[0], rect[3]),  # left top",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "documentation": {}
    },
    {
        "label": "rectangles",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "peekOfCode": "rectangles = [[1, 1, 3, 3], [3, 1, 4, 2], [3, 2, 4, 4], [1, 3, 2, 4], [2, 3, 3, 4]]\nprint(is_perfect_rectangle(rectangles))\n# Test 2\n# Correct result => False\nrectangles = [[1, 1, 2, 3], [1, 3, 2, 4], [3, 1, 4, 2], [3, 2, 4, 4]]\nprint(is_perfect_rectangle(rectangles))\n# Test 3\n# Correct result => False\nrectangles = [[1, 1, 3, 3], [3, 1, 4, 2], [1, 3, 2, 4], [3, 2, 4, 4]]\nprint(is_perfect_rectangle(rectangles))",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "documentation": {}
    },
    {
        "label": "rectangles",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "peekOfCode": "rectangles = [[1, 1, 2, 3], [1, 3, 2, 4], [3, 1, 4, 2], [3, 2, 4, 4]]\nprint(is_perfect_rectangle(rectangles))\n# Test 3\n# Correct result => False\nrectangles = [[1, 1, 3, 3], [3, 1, 4, 2], [1, 3, 2, 4], [3, 2, 4, 4]]\nprint(is_perfect_rectangle(rectangles))\n# Test 4\n# Correct result => False\nrectangles = [[1, 1, 3, 3], [3, 1, 4, 2], [1, 3, 2, 4], [2, 2, 4, 4]]\nprint(is_perfect_rectangle(rectangles))",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "documentation": {}
    },
    {
        "label": "rectangles",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "peekOfCode": "rectangles = [[1, 1, 3, 3], [3, 1, 4, 2], [1, 3, 2, 4], [3, 2, 4, 4]]\nprint(is_perfect_rectangle(rectangles))\n# Test 4\n# Correct result => False\nrectangles = [[1, 1, 3, 3], [3, 1, 4, 2], [1, 3, 2, 4], [2, 2, 4, 4]]\nprint(is_perfect_rectangle(rectangles))",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "documentation": {}
    },
    {
        "label": "rectangles",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "description": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "peekOfCode": "rectangles = [[1, 1, 3, 3], [3, 1, 4, 2], [1, 3, 2, 4], [2, 2, 4, 4]]\nprint(is_perfect_rectangle(rectangles))",
        "detail": "python-prac.Overflow.coding-problems-master.Hashing_DS.perfect_rectangle",
        "documentation": {}
    },
    {
        "label": "add_two_numbers",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "peekOfCode": "def add_two_numbers(l1, l2):\n    start = ListNode(None)\n    # use the same linked list as result so the Space complexity will be O(1)\n    start.next = l1\n    pointer = start\n    transfer = 0\n    while (l1 is not None) or (l2 is not None) or (transfer != 0):\n        v1 = 0\n        if l1 is not None:\n            v1 = l1.val",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "documentation": {}
    },
    {
        "label": "ll1",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "peekOfCode": "ll1 = build_ll([2, 4, 3])\nll2 = build_ll([5, 6, 4])\nprint_ll(add_two_numbers(ll1, ll2))\n# Test 2\n# Correct result => 8 -> 9 -> 0 -> 0 -> 1\nll1 = build_ll([9, 9, 9, 9])\nll2 = build_ll([9, 9])\nprint_ll(add_two_numbers(ll1, ll2))",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "documentation": {}
    },
    {
        "label": "ll2",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "peekOfCode": "ll2 = build_ll([5, 6, 4])\nprint_ll(add_two_numbers(ll1, ll2))\n# Test 2\n# Correct result => 8 -> 9 -> 0 -> 0 -> 1\nll1 = build_ll([9, 9, 9, 9])\nll2 = build_ll([9, 9])\nprint_ll(add_two_numbers(ll1, ll2))",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "documentation": {}
    },
    {
        "label": "ll1",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "peekOfCode": "ll1 = build_ll([9, 9, 9, 9])\nll2 = build_ll([9, 9])\nprint_ll(add_two_numbers(ll1, ll2))",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "documentation": {}
    },
    {
        "label": "ll2",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "peekOfCode": "ll2 = build_ll([9, 9])\nprint_ll(add_two_numbers(ll1, ll2))",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.add_two_numbers",
        "documentation": {}
    },
    {
        "label": "find_intersecting_node",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.intersecting_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.intersecting_ll",
        "peekOfCode": "def find_intersecting_node(ll1, ll2):\n    # count how many nodes contains the first ll\n    count1 = 0\n    temp1 = ll1\n    while temp1 is not None:\n        count1 += 1\n        temp1 = temp1.next\n    # count how many nodes contains the second ll\n    count2 = 0\n    temp2 = ll2",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.intersecting_ll",
        "documentation": {}
    },
    {
        "label": "ll1",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.intersecting_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.intersecting_ll",
        "peekOfCode": "ll1 = build_ll([3, 7, 8, 10])\nll2 = build_ll([1, 8, 10])\nprint(find_intersecting_node(ll1, ll2).val)",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.intersecting_ll",
        "documentation": {}
    },
    {
        "label": "ll2",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.intersecting_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.intersecting_ll",
        "peekOfCode": "ll2 = build_ll([1, 8, 10])\nprint(find_intersecting_node(ll1, ll2).val)",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.intersecting_ll",
        "documentation": {}
    },
    {
        "label": "is_ascending_ll",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.is_ascending_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.is_ascending_ll",
        "peekOfCode": "def is_ascending_ll(ll):\n    while ll.next != None:\n        if ll.val >= ll.next.val:\n            return False\n        ll = ll.next\n    return True\n###########\n# Testing #\n###########\n# import build_ll method from ll_helpers.py",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.is_ascending_ll",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.ll_helpers",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.ll_helpers",
        "peekOfCode": "class ListNode:\n    def __init__(self, x, n=None):\n        \"\"\"Definition for singly-linked list.\"\"\"\n        self.val = x\n        self.next = n\ndef build_ll(arr):\n    \"\"\"Builds a linked list from array. Used for testing.\"\"\"\n    res = ListNode(None)\n    pt = res\n    for num in arr:",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.ll_helpers",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.ll_helpers",
        "peekOfCode": "def build_ll(arr):\n    \"\"\"Builds a linked list from array. Used for testing.\"\"\"\n    res = ListNode(None)\n    pt = res\n    for num in arr:\n        pt.next = ListNode(num)\n        pt = pt.next\n    return res.next\ndef print_ll(head):\n    \"\"\"Prints a linked list in this format: x -> y -> z. Used for testing.\"\"\"",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.ll_helpers",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.ll_helpers",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.ll_helpers",
        "peekOfCode": "def print_ll(head):\n    \"\"\"Prints a linked list in this format: x -> y -> z. Used for testing.\"\"\"\n    res = []\n    while head != None:\n        res.append(str(head.val))\n        head = head.next\n    print(\" -> \".join(res))",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.ll_helpers",
        "documentation": {}
    },
    {
        "label": "max_diference_subll",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.max_difference_subll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.max_difference_subll",
        "peekOfCode": "def max_diference_subll(ll, k):\n    if ll is None:\n        return None\n    start, end = ll, ll\n    # move the end pointer for k-1 places\n    for i in range(1, k):\n        end = end.next\n        if end is None:\n            return None\n    result_start, result_end = start, end",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.max_difference_subll",
        "documentation": {}
    },
    {
        "label": "PQNode",
        "kind": 6,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "peekOfCode": "class PQNode:\n    def __init__(self, node):\n        self.val = node.val\n        self.node = node\n    def __lt__(self, other):\n        return self.val < other.val\n# priority queue\nclass PriorityQueue:\n    def __init__(self):\n        self.data = []",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "documentation": {}
    },
    {
        "label": "PriorityQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "peekOfCode": "class PriorityQueue:\n    def __init__(self):\n        self.data = []\n    def push(self, node):\n        heapq.heappush(self.data, PQNode(node))\n    def pop(self):\n        return heapq.heappop(self.data).node\n    def is_empty(self):\n        return len(self.data) == 0\ndef merge_k_lists_1(lists):",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "documentation": {}
    },
    {
        "label": "merge_k_lists_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "peekOfCode": "def merge_k_lists_1(lists):\n    heap = PriorityQueue()\n    # add all linked lists in the heap\n    for node in lists:\n        if node is not None:\n            heap.push(node)\n    result = ListNode(-1)\n    pointer = result\n    while not heap.is_empty():\n        # in each step remove the min list from the heap",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "documentation": {}
    },
    {
        "label": "merge_k_lists_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "peekOfCode": "def merge_k_lists_2(lists):\n    n = len(lists)\n    if n == 0:\n        return None\n    # the step tells with which linked list should be merged the current linked list\n    step = 1\n    # divide and conquer without recursion\n    while step < n:\n        i = 0\n        while i + step < n:",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "documentation": {}
    },
    {
        "label": "merge_2_lists",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "peekOfCode": "def merge_2_lists(l1, l2):\n    result = ListNode(-1)\n    pointer = result\n    while (l1 is not None) and (l2 is not None):\n        if l1.val < l2.val:\n            pointer.next = l1\n            l1 = l1.next\n        else:\n            pointer.next = l2\n            l2 = l2.next",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_k_sorted_ll",
        "documentation": {}
    },
    {
        "label": "merge_two_sorted_ll",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "peekOfCode": "def merge_two_sorted_ll(l1, l2):\n    result = ListNode(-1)\n    pointer = result\n    while (l1 is not None) and (l2 is not None):\n        if l1.val < l2.val:\n            pointer.next = l1\n            l1 = l1.next\n        else:\n            pointer.next = l2\n            l2 = l2.next",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "peekOfCode": "a = build_ll([1, 2, 3, 4, 5])\nb = build_ll([6, 7, 8, 9])\nprint_ll(merge_two_sorted_ll(a, b))\n# Test 2\n# Correct result => 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7\na = build_ll([1, 3, 5])\nb = build_ll([2, 4, 6, 7])\nprint_ll(merge_two_sorted_ll(a, b))\n# Test 3\n# Correct result => 1 -> 1 -> 2 -> 3 -> 4 -> 4",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "peekOfCode": "b = build_ll([6, 7, 8, 9])\nprint_ll(merge_two_sorted_ll(a, b))\n# Test 2\n# Correct result => 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7\na = build_ll([1, 3, 5])\nb = build_ll([2, 4, 6, 7])\nprint_ll(merge_two_sorted_ll(a, b))\n# Test 3\n# Correct result => 1 -> 1 -> 2 -> 3 -> 4 -> 4\na = build_ll([1, 2, 4])",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "peekOfCode": "a = build_ll([1, 3, 5])\nb = build_ll([2, 4, 6, 7])\nprint_ll(merge_two_sorted_ll(a, b))\n# Test 3\n# Correct result => 1 -> 1 -> 2 -> 3 -> 4 -> 4\na = build_ll([1, 2, 4])\nb = build_ll([1, 3, 4])\nprint_ll(merge_two_sorted_ll(a, b))",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "peekOfCode": "b = build_ll([2, 4, 6, 7])\nprint_ll(merge_two_sorted_ll(a, b))\n# Test 3\n# Correct result => 1 -> 1 -> 2 -> 3 -> 4 -> 4\na = build_ll([1, 2, 4])\nb = build_ll([1, 3, 4])\nprint_ll(merge_two_sorted_ll(a, b))",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "peekOfCode": "a = build_ll([1, 2, 4])\nb = build_ll([1, 3, 4])\nprint_ll(merge_two_sorted_ll(a, b))",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "peekOfCode": "b = build_ll([1, 3, 4])\nprint_ll(merge_two_sorted_ll(a, b))",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.merge_sorted_ll",
        "documentation": {}
    },
    {
        "label": "odd_even_ll",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.odd_even_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.odd_even_ll",
        "peekOfCode": "def odd_even_ll(head):\n    odd = ListNode(None)\n    oddPointer = odd\n    even = ListNode(None)\n    evenPointer = even\n    i = 1\n    while head is not None:\n        if i % 2 == 1:\n            oddPointer.next = head\n            oddPointer = oddPointer.next",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.odd_even_ll",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_duplicates_sorted_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_duplicates_sorted_ll",
        "peekOfCode": "def remove_duplicates(nums):\n    if nums is None:\n        return nums\n    pointer = nums\n    while pointer.next is not None:\n        if pointer.val == pointer.next.val:\n            # skip the next value because it's a duplicate\n            pointer.next = pointer.next.next\n        else:\n            # search next",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_duplicates_sorted_ll",
        "documentation": {}
    },
    {
        "label": "remove_element",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_element_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_element_ll",
        "peekOfCode": "def remove_element(nums, val):\n    res = ListNode(0)\n    res.next = nums\n    pointer = res\n    while pointer.next is not None:\n        if pointer.next.val == val:\n            # skip the next value because it's value that needs to be deleted\n            pointer.next = pointer.next.next\n        else:\n            # search next",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_element_ll",
        "documentation": {}
    },
    {
        "label": "remove_nth_from_end_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_nth_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_nth_ll",
        "peekOfCode": "def remove_nth_from_end_1(head, n):\n    helper = ListNode(0)\n    helper.next = head\n    first = helper\n    second = helper\n    # count to N with the first pointer\n    for i in range(n + 1):\n        first = first.next\n    # go (Length - N) elements with first pointer\n    # and in that way the second pointer will be Nth from the end",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_nth_ll",
        "documentation": {}
    },
    {
        "label": "remove_nth_from_end_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_nth_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_nth_ll",
        "peekOfCode": "def remove_nth_from_end_2(head, n):\n    result = remove_recursively(head, n)\n    if result[0] == n:\n        return head.next\n    return head\ndef remove_recursively(pointer, n):\n    if pointer is None:\n        return (0, None)\n    # go to the end and count how many are there\n    result = remove_recursively(pointer.next, n)",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_nth_ll",
        "documentation": {}
    },
    {
        "label": "remove_recursively",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_nth_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_nth_ll",
        "peekOfCode": "def remove_recursively(pointer, n):\n    if pointer is None:\n        return (0, None)\n    # go to the end and count how many are there\n    result = remove_recursively(pointer.next, n)\n    if result[0] == n:\n        pointer.next = result[1]\n    return (result[0] + 1, pointer.next)",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.remove_nth_ll",
        "documentation": {}
    },
    {
        "label": "reverse_ll",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.reverse_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.reverse_ll",
        "peekOfCode": "def reverse_ll(ll):\n    prev_node = None\n    while ll is not None:\n        # save the current node\n        current = ll\n        # go to the next node\n        ll = ll.next\n        # change the pointer of the current node to point to the previous node\n        current.next = prev_node\n        # save the current node for the next iteration",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.reverse_ll",
        "documentation": {}
    },
    {
        "label": "reverse_ll_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.reverse_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.reverse_ll",
        "peekOfCode": "def reverse_ll_2(ll):\n    return reverse(ll, None)\ndef reverse(node, prev_node):\n    if node is None:\n        # the end of the ll is reached, return the previous node\n        # that'll be the first node in the reversed ll\n        return prev_node\n    # send node.next as current node and node as previous node in the next step\n    result = reverse(node.next, node)\n    # change the pointer of the current node to point to the previous node",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.reverse_ll",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Linked_Lists.reverse_ll",
        "description": "python-prac.Overflow.coding-problems-master.Linked_Lists.reverse_ll",
        "peekOfCode": "def reverse(node, prev_node):\n    if node is None:\n        # the end of the ll is reached, return the previous node\n        # that'll be the first node in the reversed ll\n        return prev_node\n    # send node.next as current node and node as previous node in the next step\n    result = reverse(node.next, node)\n    # change the pointer of the current node to point to the previous node\n    node.next = prev_node\n    return result",
        "detail": "python-prac.Overflow.coding-problems-master.Linked_Lists.reverse_ll",
        "documentation": {}
    },
    {
        "label": "calculate_area_of_polygon",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.calculate_area_of_polygon",
        "description": "python-prac.Overflow.coding-problems-master.Math.calculate_area_of_polygon",
        "peekOfCode": "def calculate_area_of_polygon(polygon):\n    n = len(polygon)\n    prev = polygon[-1]\n    area = 0\n    for curr in polygon:\n        area += (prev[0] + curr[0]) * (prev[1] - curr[1])\n        prev = curr\n    return abs(area / 2)  # return absolute value\n###########\n# Testing #",
        "detail": "python-prac.Overflow.coding-problems-master.Math.calculate_area_of_polygon",
        "documentation": {}
    },
    {
        "label": "check_if_point_inside_polygon",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.check_if_point_inside_polygon",
        "description": "python-prac.Overflow.coding-problems-master.Math.check_if_point_inside_polygon",
        "peekOfCode": "def check_if_point_inside_polygon(polygon, p):\n    n = len(polygon)\n    prev = polygon[-1]\n    is_inside = False  # or you can use counter and return (counter % 2) == 1\n    for curr in polygon:\n        if intersect(prev, curr, p):\n            is_inside = not is_inside\n        prev = curr\n    return is_inside\ndef intersect(a, b, p):",
        "detail": "python-prac.Overflow.coding-problems-master.Math.check_if_point_inside_polygon",
        "documentation": {}
    },
    {
        "label": "intersect",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.check_if_point_inside_polygon",
        "description": "python-prac.Overflow.coding-problems-master.Math.check_if_point_inside_polygon",
        "peekOfCode": "def intersect(a, b, p):\n    # Y coordinate of p should be between Y coordinates\n    # the following check is a short form from (p[1] < max(a[1], b[1]) and p[1] >= min(a[1], b[1]))\n    if (a[1] > p[1]) != (b[1] > p[1]):\n        \"\"\"\n        Equation of line:\n        y = (x - x0) * ((y1 - y0) / (x1 - x0)) + y0\n        This formula is computed using the gradients (slopes, changes in the coordinates).\n        The following formula differs from the previous in that it finds X instead of Y (because Y is known).\n        \"\"\"",
        "detail": "python-prac.Overflow.coding-problems-master.Math.check_if_point_inside_polygon",
        "documentation": {}
    },
    {
        "label": "check_if_two_rectangles_overlap",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.check_if_two_rectangles_overlap",
        "description": "python-prac.Overflow.coding-problems-master.Math.check_if_two_rectangles_overlap",
        "peekOfCode": "def check_if_two_rectangles_overlap(l1, r1, l2, r2):\n    # first check by X coordinates, if rectangles can overlap on X axis\n    # longer form (l1[0] < l2[0] and r1[0] < l2[0]) or (l1[0] > r2[0] and r1[0] > r2[0])\n    # but we know that l1[0] is always smaller than r1[0]\n    if (r1[0] < l2[0]) or (l1[0] > r2[0]):\n        return False\n    # now we know that the rectangles are overlapping on X axis\n    # check if they are overlapping on Y axis\n    # (use the same logic from previous)\n    if (r1[1] < l2[1]) or (l1[1] > r2[1]):",
        "detail": "python-prac.Overflow.coding-problems-master.Math.check_if_two_rectangles_overlap",
        "documentation": {}
    },
    {
        "label": "count_divisibles_in_range",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.count_divisibles_in_range",
        "description": "python-prac.Overflow.coding-problems-master.Math.count_divisibles_in_range",
        "peekOfCode": "def count_divisibles_in_range(start, end, n):\n    # find the next start number divisable by n\n    start += (n - (start % n)) % n\n    if start > end:\n        # in this case there are no numbers divisable by n\n        return 0\n    return 1 + ((end - start) // n)\n###########\n# Testing #\n###########",
        "detail": "python-prac.Overflow.coding-problems-master.Math.count_divisibles_in_range",
        "documentation": {}
    },
    {
        "label": "estimate_pi",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.estimate_pi",
        "description": "python-prac.Overflow.coding-problems-master.Math.estimate_pi",
        "peekOfCode": "def estimate_pi(n):\n    total_points = 0\n    circle_points = 0\n    for i in range(n):\n        # generate N random points in the first quadrant\n        x, y = random(), random()\n        if x * x + y * y <= 1:\n            # using squared euclidean distance find the distance from (0, 0) to (x, y)\n            circle_points += 1\n        total_points += 1",
        "detail": "python-prac.Overflow.coding-problems-master.Math.estimate_pi",
        "documentation": {}
    },
    {
        "label": "trailing_zeroes",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.factorial_trailing_zeroes",
        "description": "python-prac.Overflow.coding-problems-master.Math.factorial_trailing_zeroes",
        "peekOfCode": "def trailing_zeroes(n):\n    # 0s are produced when 2 and 5 are multiplied\n    # because 2 * 5 = 10\n    # so you'll need to count how many 2s and 5s are there\n    # 2s are always more than 5s\n    # so count just how many 5s are in that range\n    res = 0\n    k = 5\n    # find all powers of 5\n    # 25 has 2 5s, 125 has 3 5s, etc",
        "detail": "python-prac.Overflow.coding-problems-master.Math.factorial_trailing_zeroes",
        "documentation": {}
    },
    {
        "label": "odd_sum",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.odd_sum",
        "description": "python-prac.Overflow.coding-problems-master.Math.odd_sum",
        "peekOfCode": "def odd_sum(a, b):\n    # find first odd number\n    if a % 2 == 0:\n        a += 1\n    # to avoid rounding (math.ceil) find the biggest even number\n    if b % 2 == 1:\n        b += 1\n    # count of odd numbers\n    n = (b - a + 1) // 2\n    # use the formula from the description",
        "detail": "python-prac.Overflow.coding-problems-master.Math.odd_sum",
        "documentation": {}
    },
    {
        "label": "prime_factors",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.prime_factors",
        "description": "python-prac.Overflow.coding-problems-master.Math.prime_factors",
        "peekOfCode": "def prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # now n is odd\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)",
        "detail": "python-prac.Overflow.coding-problems-master.Math.prime_factors",
        "documentation": {}
    },
    {
        "label": "smallest_multiple",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.smallest_multiple",
        "description": "python-prac.Overflow.coding-problems-master.Math.smallest_multiple",
        "peekOfCode": "def smallest_multiple(start, end):\n    result = 1\n    for k in range(start, end + 1):\n        result = lcm(max(result, k), min(result, k))\n    return result\n# least common multiple\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n# Greatest common divisor (euclidian algorithm, fast algorithm)\n# https://en.wikipedia.org/wiki/Euclidean_algorithm",
        "detail": "python-prac.Overflow.coding-problems-master.Math.smallest_multiple",
        "documentation": {}
    },
    {
        "label": "lcm",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.smallest_multiple",
        "description": "python-prac.Overflow.coding-problems-master.Math.smallest_multiple",
        "peekOfCode": "def lcm(a, b):\n    return a * b // gcd(a, b)\n# Greatest common divisor (euclidian algorithm, fast algorithm)\n# https://en.wikipedia.org/wiki/Euclidean_algorithm\n# For more than 2 numbers: gcd(a, b, c) = gcd(a, gcd(b, c)) or gcd(gcd(a, b), c) or gcd(gcd(a, c), b)\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n###########",
        "detail": "python-prac.Overflow.coding-problems-master.Math.smallest_multiple",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.smallest_multiple",
        "description": "python-prac.Overflow.coding-problems-master.Math.smallest_multiple",
        "peekOfCode": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 2520\nprint(smallest_multiple(1, 10))",
        "detail": "python-prac.Overflow.coding-problems-master.Math.smallest_multiple",
        "documentation": {}
    },
    {
        "label": "sum_of_multiples_below",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.sum_of_multiples",
        "description": "python-prac.Overflow.coding-problems-master.Math.sum_of_multiples",
        "peekOfCode": "def sum_of_multiples_below(a, b, total):\n    total -= 1\n    # sum of dividens of A + sum of dividens of B - sum of common dividens (because they're added twice)\n    return (\n        sum_of_dividends(total, a)\n        + sum_of_dividends(total, b)\n        - sum_of_dividends(total, a * b)\n    )\ndef sum_of_dividends(total, divisor):\n    n = total // divisor",
        "detail": "python-prac.Overflow.coding-problems-master.Math.sum_of_multiples",
        "documentation": {}
    },
    {
        "label": "sum_of_dividends",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.sum_of_multiples",
        "description": "python-prac.Overflow.coding-problems-master.Math.sum_of_multiples",
        "peekOfCode": "def sum_of_dividends(total, divisor):\n    n = total // divisor\n    return (n * (n + 1) // 2) * divisor\n###########\n# TESTING #\n###########\n# Test 1\n# Correct result => 23\nprint(sum_of_multiples_below(3, 5, 10))\n# Test 2",
        "detail": "python-prac.Overflow.coding-problems-master.Math.sum_of_multiples",
        "documentation": {}
    },
    {
        "label": "Sum(K)*N",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.sum_of_multiples",
        "description": "python-prac.Overflow.coding-problems-master.Math.sum_of_multiples",
        "peekOfCode": "Sum(K)*N = 1*N + 2*N + ... + (K-1)*N + K*N\nUse sum formula - (N * (N + 1))/2\n    Time Complexity:    O(1)\n    Space Complexity:   O(1)\n\"\"\"\n############\n# Solution #\n############\ndef sum_of_multiples_below(a, b, total):\n    total -= 1",
        "detail": "python-prac.Overflow.coding-problems-master.Math.sum_of_multiples",
        "documentation": {}
    },
    {
        "label": "total_divisible_numbers",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.total_divisible_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Math.total_divisible_numbers",
        "peekOfCode": "def total_divisible_numbers(arr, S):\n    # find lcm for all numbers in the array\n    lcm = 1\n    for a in arr:\n        lcm = (a * lcm) // gcd(a, lcm)\n    # return the count of numbers divisble by the lcm number (smaller or equal to S)\n    return S // lcm\ndef gcd(a, b):\n    while a != 0:\n        a, b = b % a, a  # \"Pythonic way\"",
        "detail": "python-prac.Overflow.coding-problems-master.Math.total_divisible_numbers",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.total_divisible_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Math.total_divisible_numbers",
        "peekOfCode": "def gcd(a, b):\n    while a != 0:\n        a, b = b % a, a  # \"Pythonic way\"\n        # or temp = a; a = b % a; b = temp; in the other languages\n    return b\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 4",
        "detail": "python-prac.Overflow.coding-problems-master.Math.total_divisible_numbers",
        "documentation": {}
    },
    {
        "label": "unique_paths_dp",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.unique_paths",
        "description": "python-prac.Overflow.coding-problems-master.Math.unique_paths",
        "peekOfCode": "def unique_paths_dp(n, m):\n    # all values at i=0 should be 1 (the rest are not important, they'll be computed later)\n    dp = [[1 for j in range(m)] for i in range(n)]\n    # calculate only inner values\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[n - 1][m - 1]\n#################################\n# Solution Combinations Formula #",
        "detail": "python-prac.Overflow.coding-problems-master.Math.unique_paths",
        "documentation": {}
    },
    {
        "label": "unique_paths",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Math.unique_paths",
        "description": "python-prac.Overflow.coding-problems-master.Math.unique_paths",
        "peekOfCode": "def unique_paths(n, m):\n    m, n = min(m, n), max(m, n)\n    lvl = m + n - 2\n    pos = m - 1\n    comb = 1\n    # combinations formula C(N, R) = N! / R! * (N - R)!\n    for i in range(1, pos + 1):\n        comb *= lvl\n        comb /= i\n        lvl -= 1",
        "detail": "python-prac.Overflow.coding-problems-master.Math.unique_paths",
        "documentation": {}
    },
    {
        "label": "basic_calculator",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.basic_calculator",
        "description": "python-prac.Overflow.coding-problems-master.Other.basic_calculator",
        "peekOfCode": "def basic_calculator(s):\n    return calculate(s, 0)[0]\ndef calculate(s, i):\n    sign = 1  # 1 means '+' and -1 means '-'\n    res = 0\n    num = 0\n    while i < len(s) and s[i] != \")\":\n        if s[i] >= \"0\" and s[i] <= \"9\":\n            # find the whole number\n            num = num * 10 + int(s[i])",
        "detail": "python-prac.Overflow.coding-problems-master.Other.basic_calculator",
        "documentation": {}
    },
    {
        "label": "calculate",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.basic_calculator",
        "description": "python-prac.Overflow.coding-problems-master.Other.basic_calculator",
        "peekOfCode": "def calculate(s, i):\n    sign = 1  # 1 means '+' and -1 means '-'\n    res = 0\n    num = 0\n    while i < len(s) and s[i] != \")\":\n        if s[i] >= \"0\" and s[i] <= \"9\":\n            # find the whole number\n            num = num * 10 + int(s[i])\n        elif s[i] == \"(\":\n            # calculate inside the brackets",
        "detail": "python-prac.Overflow.coding-problems-master.Other.basic_calculator",
        "documentation": {}
    },
    {
        "label": "count_consecutive_sums",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.count_consecutive_sums",
        "description": "python-prac.Overflow.coding-problems-master.Other.count_consecutive_sums",
        "peekOfCode": "def count_consecutive_sums(n):\n    start = 1\n    curr_sum = count = 0\n    for end in range(1, n + 1):\n        curr_sum += end\n        while curr_sum > n:\n            # remove all numbers from the front\n            curr_sum -= start\n            start += 1\n        if curr_sum == n:",
        "detail": "python-prac.Overflow.coding-problems-master.Other.count_consecutive_sums",
        "documentation": {}
    },
    {
        "label": "find_min_path",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "description": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "peekOfCode": "def find_min_path(board, start, end):\n    n = len(board)\n    m = len(board[0])\n    # create a visited array\n    visited = [[False for el in range(m)] for row in range(n)]\n    queue = deque()\n    queue.append((start, 0))\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]  # up, right, down, left\n    # simple bfs\n    while queue:",
        "detail": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "description": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "peekOfCode": "start = (3, 0)\nend = (0, 0)\nOutput: 7\nOutput explanation: Starting bottom left and ending top left,\nthe minimum number of steps required to reach the end is 7,\nsince we would need to go through (1, 2) because there is a wall everywhere else on the second row.\n=========================================\nBFS solution using queue.\n    Time Complexity:    O(N * M)\n    Space Complexity:   O(N * M)",
        "detail": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "description": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "peekOfCode": "end = (0, 0)\nOutput: 7\nOutput explanation: Starting bottom left and ending top left,\nthe minimum number of steps required to reach the end is 7,\nsince we would need to go through (1, 2) because there is a wall everywhere else on the second row.\n=========================================\nBFS solution using queue.\n    Time Complexity:    O(N * M)\n    Space Complexity:   O(N * M)\n\"\"\"",
        "detail": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "description": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "peekOfCode": "f = \"f\"\nt = \"t\"\nprint(\n    find_min_path(\n        [[f, f, f, f], [t, t, f, t], [f, f, f, f], [f, f, f, f]], (3, 0), (0, 0)\n    )\n)",
        "detail": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "description": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "peekOfCode": "t = \"t\"\nprint(\n    find_min_path(\n        [[f, f, f, f], [t, t, f, t], [f, f, f, f], [f, f, f, f]], (3, 0), (0, 0)\n    )\n)",
        "detail": "python-prac.Overflow.coding-problems-master.Other.find_min_path",
        "documentation": {}
    },
    {
        "label": "generate_parentheses",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.generate_parentheses",
        "description": "python-prac.Overflow.coding-problems-master.Other.generate_parentheses",
        "peekOfCode": "def generate_parentheses(n):\n    result = []\n    if n == 0:\n        return result\n    combinations(result, n, n, \"\")\n    return result\ndef combinations(result, open_left, close_left, combination):\n    if close_left == 0:\n        # a new combination is created (no more open or close parentheses)\n        result.append(combination)",
        "detail": "python-prac.Overflow.coding-problems-master.Other.generate_parentheses",
        "documentation": {}
    },
    {
        "label": "combinations",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.generate_parentheses",
        "description": "python-prac.Overflow.coding-problems-master.Other.generate_parentheses",
        "peekOfCode": "def combinations(result, open_left, close_left, combination):\n    if close_left == 0:\n        # a new combination is created (no more open or close parentheses)\n        result.append(combination)\n    elif open_left == 0:\n        # no more open parentheses, so all left parentheses must be closed (just add the missing close parentheses)\n        result.append(combination + (\")\" * close_left))\n    else:\n        combinations(result, open_left - 1, close_left, combination + \"(\")\n        # check if there is a pair for this close parenthesis",
        "detail": "python-prac.Overflow.coding-problems-master.Other.generate_parentheses",
        "documentation": {}
    },
    {
        "label": "jumping_numbers",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.jumping_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Other.jumping_numbers",
        "peekOfCode": "def jumping_numbers(x):\n    result = []\n    # take all 9 possible starting combinations\n    for i in range(1, 10):\n        jumping_num(i, x, result)\n    return result\ndef jumping_num(num, x, result):\n    if num > x:\n        return\n    result.append(num)",
        "detail": "python-prac.Overflow.coding-problems-master.Other.jumping_numbers",
        "documentation": {}
    },
    {
        "label": "jumping_num",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.jumping_numbers",
        "description": "python-prac.Overflow.coding-problems-master.Other.jumping_numbers",
        "peekOfCode": "def jumping_num(num, x, result):\n    if num > x:\n        return\n    result.append(num)\n    last_digit = num % 10\n    next_num = num * 10\n    # decrease the last digit by one\n    if last_digit != 0:\n        jumping_num(next_num + last_digit - 1, x, result)\n    # increase the last digit by one",
        "detail": "python-prac.Overflow.coding-problems-master.Other.jumping_numbers",
        "documentation": {}
    },
    {
        "label": "letter_combinations",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.letter_combinations",
        "description": "python-prac.Overflow.coding-problems-master.Other.letter_combinations",
        "peekOfCode": "def letter_combinations(digits):\n    if len(digits) == 0:\n        return []\n    mappings = {\n        \"2\": [\"a\", \"b\", \"c\"],\n        \"3\": [\"d\", \"e\", \"f\"],\n        \"4\": [\"g\", \"h\", \"i\"],\n        \"5\": [\"j\", \"k\", \"l\"],\n        \"6\": [\"m\", \"n\", \"o\"],\n        \"7\": [\"p\", \"q\", \"r\", \"s\"],",
        "detail": "python-prac.Overflow.coding-problems-master.Other.letter_combinations",
        "documentation": {}
    },
    {
        "label": "nth_fibonacci_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "def nth_fibonacci_1(n):\n    if n == 0 or n == 1:\n        return n\n    return nth_fibonacci_1(n - 1) + nth_fibonacci_1(n - 2)\n##############\n# Solution 2 #\n##############\n# all found fibonacci numbers and positions\nfib = {0: 0, 1: 1}\ndef nth_fibonacci_2(n):",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "nth_fibonacci_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "def nth_fibonacci_2(n):\n    # check if the value is already found\n    if n in fib:\n        return fib[n]\n    # save the fibonacci value for N position\n    fib[n] = nth_fibonacci_2(n - 1) + nth_fibonacci_2(n - 2)\n    return fib[n]\n##############\n# Solution 3 #\n##############",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "nth_fibonacci_3",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "def nth_fibonacci_3(n):\n    dp = [0] * max(2, n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]\n##############\n# Solution 4 #\n##############\ndef nth_fibonacci_4(n):",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "nth_fibonacci_4",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "def nth_fibonacci_4(n):\n    dp0, dp1 = 0, 1\n    for i in range(n):\n        dp0, dp1 = dp1, dp0 + dp1  # \"Pythonic way\"\n        # or dp1 += dp0; dp0 = dp1 - dp0; in other languages\n    return dp0\n#################################\n# Helper for the next solutions #\n#################################\ndef matrix_mult(a, b):",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "matrix_mult",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "def matrix_mult(a, b):\n    \"\"\" a = a * b\n    Matrices (2x2 matrix) Multiplication method used for the next solutions.\n    The result of multiplication is saved in 'a' (because of that, the reference\n    shouldn't be changed, only change the values after all computations are completed\n    because 'b' could be the same reference/matrix as 'a').\n    a[0] is the first row of a, which contains a[0][0], a[0][1]\n    Python \"unrolls\" a00, a01 = a[0], which effectively makes it:\n    a00 = a[0][0] and a01 = a[0][1]\n    \"\"\"",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "nth_fibonacci_5",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "def nth_fibonacci_5(n):\n    fib = [[1, 1], [1, 0]]\n    res = [[1, 1], [1, 0]]\n    for i in range(n):\n        matrix_mult(res, fib)\n    return res[1][\n        1\n    ]  # Fn-1 (or change the range(n-1) and use Fn => res[0][1] or res[1][0])\n##############\n# Solution 6 #",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "nth_fibonacci_6",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "def nth_fibonacci_6(n):\n    res = [[1, 1], [1, 0]]\n    matrix_pow(res, n + 1)\n    return res[1][1]\ndef matrix_pow(mat, n):\n    if n == 0 or n == 1:\n        return\n    # first compute the power of n/2\n    matrix_pow(mat, n // 2)\n    # after that you can compute power of n, mat^(n/2) * mat^(n/2) = mat^n",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "matrix_pow",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "def matrix_pow(mat, n):\n    if n == 0 or n == 1:\n        return\n    # first compute the power of n/2\n    matrix_pow(mat, n // 2)\n    # after that you can compute power of n, mat^(n/2) * mat^(n/2) = mat^n\n    matrix_mult(mat, mat)\n    if n % 2 == 1:\n        # multiply by the start matrix if odd power\n        matrix_mult(mat, [[1, 1], [1, 0]])",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "nth_fibonacci_7",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "def nth_fibonacci_7(n):\n    fib = [[1, 1], [1, 0]]\n    res = [[1, 1], [1, 0]]\n    while n > 0:\n        if n % 2 == 1:\n            matrix_mult(res, fib)\n        n = n // 2\n        matrix_mult(fib, fib)\n    return res[1][1]\n##############",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "nth_fibonacci_8",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "def nth_fibonacci_8(n):\n    golden_ratio = (1 + math.sqrt(5)) / 2\n    return int((1 + math.pow(golden_ratio, n)) / math.sqrt(5))\n    # without math module, using ** operator\n    # golden_ratio = (1 + 5 ** 0.5) / 2\n    # return int((1 + golden_ratio ** n) / (5 ** 0.5))\n###########\n# Testing #\n###########\n# Test 1",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "fib = {0: 0, 1: 1}\ndef nth_fibonacci_2(n):\n    # check if the value is already found\n    if n in fib:\n        return fib[n]\n    # save the fibonacci value for N position\n    fib[n] = nth_fibonacci_2(n - 1) + nth_fibonacci_2(n - 2)\n    return fib[n]\n##############\n# Solution 3 #",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "n = 8\nprint(nth_fibonacci_1(n))\nprint(nth_fibonacci_2(n))\nprint(nth_fibonacci_3(n))\nprint(nth_fibonacci_4(n))\nprint(nth_fibonacci_5(n))\nprint(nth_fibonacci_6(n))\nprint(nth_fibonacci_7(n))\nprint(nth_fibonacci_8(n))\n# Test 2",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "description": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "peekOfCode": "n = 21\nprint(nth_fibonacci_1(n))\nprint(nth_fibonacci_2(n))\nprint(nth_fibonacci_3(n))\nprint(nth_fibonacci_4(n))\nprint(nth_fibonacci_5(n))\nprint(nth_fibonacci_6(n))\nprint(nth_fibonacci_7(n))\nprint(nth_fibonacci_8(n))",
        "detail": "python-prac.Overflow.coding-problems-master.Other.nth_fibonacci_number",
        "documentation": {}
    },
    {
        "label": "num_of_islands",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.number_of_islands",
        "description": "python-prac.Overflow.coding-problems-master.Other.number_of_islands",
        "peekOfCode": "def num_of_islands(grid):\n    n = len(grid)\n    if n == 0:\n        return 0\n    m = len(grid[0])\n    islands = 0\n    queue = deque()\n    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n    for i in range(n):\n        for j in range(m):",
        "detail": "python-prac.Overflow.coding-problems-master.Other.number_of_islands",
        "documentation": {}
    },
    {
        "label": "palindrome_integer_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "description": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "peekOfCode": "def palindrome_integer_1(x):\n    if x < 0:\n        return False\n    rev = 0\n    temp = x\n    while temp > 0:\n        rev = (rev * 10) + (temp % 10)\n        temp //= 10\n    return rev == x\n##############",
        "detail": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "documentation": {}
    },
    {
        "label": "palindrome_integer_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "description": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "peekOfCode": "def palindrome_integer_2(x):\n    # check if negative or ends with zero\n    if (x < 0) or (x > 0 and x % 10 == 0):\n        return False\n    rev = 0\n    # if the reversed number is bigger from the original\n    # that means the reversed number has same number of digits or more (1 or 2 more)\n    while x > rev:\n        rev = (rev * 10) + (x % 10)\n        x //= 10",
        "detail": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "description": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "peekOfCode": "x = 121\nprint(palindrome_integer_1(x))\nprint(palindrome_integer_2(x))\n# Test 2\n# Correct result => False\nx = -121\nprint(palindrome_integer_1(x))\nprint(palindrome_integer_2(x))\n# Test 2\n# Correct result => False",
        "detail": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "description": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "peekOfCode": "x = -121\nprint(palindrome_integer_1(x))\nprint(palindrome_integer_2(x))\n# Test 2\n# Correct result => False\nx = 10\nprint(palindrome_integer_1(x))\nprint(palindrome_integer_2(x))",
        "detail": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "description": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "peekOfCode": "x = 10\nprint(palindrome_integer_1(x))\nprint(palindrome_integer_2(x))",
        "detail": "python-prac.Overflow.coding-problems-master.Other.palindrome_integer",
        "documentation": {}
    },
    {
        "label": "permutations",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.permutations",
        "description": "python-prac.Overflow.coding-problems-master.Other.permutations",
        "peekOfCode": "def permutations(nums):\n    result = []\n    if len(nums) == 0:\n        return result\n    permute(result, set(nums), [])\n    return result\ndef permute(result, nums, permutation):\n    if len(nums) == 0:\n        result.append([num for num in permutation])\n    else:",
        "detail": "python-prac.Overflow.coding-problems-master.Other.permutations",
        "documentation": {}
    },
    {
        "label": "permute",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.permutations",
        "description": "python-prac.Overflow.coding-problems-master.Other.permutations",
        "peekOfCode": "def permute(result, nums, permutation):\n    if len(nums) == 0:\n        result.append([num for num in permutation])\n    else:\n        for num in list(\n            nums\n        ):  # create a new object with the same values because nums will be changed later\n            nums.remove(num)\n            permutation.append(num)\n            permute(result, nums, permutation)",
        "detail": "python-prac.Overflow.coding-problems-master.Other.permutations",
        "documentation": {}
    },
    {
        "label": "postfix_evaluate",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.postfix_evaluate",
        "description": "python-prac.Overflow.coding-problems-master.Other.postfix_evaluate",
        "peekOfCode": "def postfix_evaluate(items):\n    stack = deque()\n    # lambda functions for all 4 operations\n    operations = {\n        \"+\": (lambda a, b: a + b),\n        \"-\": (lambda a, b: a - b),\n        \"*\": (lambda a, b: a * b),\n        \"/\": (lambda a, b: 0 if (b == 0) else (a // b)),\n    }\n    for item in items:",
        "detail": "python-prac.Overflow.coding-problems-master.Other.postfix_evaluate",
        "documentation": {}
    },
    {
        "label": "power",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.power",
        "description": "python-prac.Overflow.coding-problems-master.Other.power",
        "peekOfCode": "def power(a, b):\n    if b < 0:\n        # negative power\n        return 1 / power_recursive(a, -b)\n    return power_recursive(a, b)\ndef power_recursive(a, b):\n    if b == 0:\n        return 1\n    res = power_recursive(a, b // 2)\n    res *= res",
        "detail": "python-prac.Overflow.coding-problems-master.Other.power",
        "documentation": {}
    },
    {
        "label": "power_recursive",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.power",
        "description": "python-prac.Overflow.coding-problems-master.Other.power",
        "peekOfCode": "def power_recursive(a, b):\n    if b == 0:\n        return 1\n    res = power_recursive(a, b // 2)\n    res *= res\n    if b % 2 == 1:\n        res *= a\n    return res\n###########\n# Testing #",
        "detail": "python-prac.Overflow.coding-problems-master.Other.power",
        "documentation": {}
    },
    {
        "label": "power_set",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.power_set",
        "description": "python-prac.Overflow.coding-problems-master.Other.power_set",
        "peekOfCode": "def power_set(arr):\n    result = []\n    combinations(result, arr, [], 0)\n    return result\n# result, arr and taken are the same references always\ndef combinations(result, arr, taken, pos):\n    result.append([arr[i] for i in taken])  # create the current combination\n    n = len(arr)\n    if n == pos:\n        return",
        "detail": "python-prac.Overflow.coding-problems-master.Other.power_set",
        "documentation": {}
    },
    {
        "label": "combinations",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.power_set",
        "description": "python-prac.Overflow.coding-problems-master.Other.power_set",
        "peekOfCode": "def combinations(result, arr, taken, pos):\n    result.append([arr[i] for i in taken])  # create the current combination\n    n = len(arr)\n    if n == pos:\n        return\n    # start from the last position (don't need duplicates)\n    for i in range(pos, n):\n        taken.append(i)\n        combinations(result, arr, taken, i + 1)\n        del taken[-1]  # return to the old state",
        "detail": "python-prac.Overflow.coding-problems-master.Other.power_set",
        "documentation": {}
    },
    {
        "label": "place_n_queens",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.queens_problem",
        "description": "python-prac.Overflow.coding-problems-master.Other.queens_problem",
        "peekOfCode": "def place_n_queens(n):\n    columns = [False for i in range(n)]\n    order = []\n    return backtracking(columns, order)\ndef backtracking(columns, order):\n    # columns and order are references, no extra memory for those arrays (they are just pointers)\n    n = len(columns)\n    if len(order) == n:\n        return 1\n    total = 0",
        "detail": "python-prac.Overflow.coding-problems-master.Other.queens_problem",
        "documentation": {}
    },
    {
        "label": "backtracking",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.queens_problem",
        "description": "python-prac.Overflow.coding-problems-master.Other.queens_problem",
        "peekOfCode": "def backtracking(columns, order):\n    # columns and order are references, no extra memory for those arrays (they are just pointers)\n    n = len(columns)\n    if len(order) == n:\n        return 1\n    total = 0\n    for i in range(n):\n        if (not columns[i]) and check_diagonals(order, i):\n            order.append(i)\n            columns[i] = True",
        "detail": "python-prac.Overflow.coding-problems-master.Other.queens_problem",
        "documentation": {}
    },
    {
        "label": "check_diagonals",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.queens_problem",
        "description": "python-prac.Overflow.coding-problems-master.Other.queens_problem",
        "peekOfCode": "def check_diagonals(order, pos):\n    current_row = len(order)\n    for i in range(current_row):\n        if (i - order[i]) == (current_row - pos):\n            return False\n        if (i + order[i]) == (current_row + pos):\n            return False\n    return True\n###########\n# Testing #",
        "detail": "python-prac.Overflow.coding-problems-master.Other.queens_problem",
        "documentation": {}
    },
    {
        "label": "reverse_all_lists",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.reverse_all_lists",
        "description": "python-prac.Overflow.coding-problems-master.Other.reverse_all_lists",
        "peekOfCode": "def reverse_all_lists(arr):\n    queue = deque()\n    queue.append(arr)\n    while queue:\n        inner_arr = queue.popleft()\n        # in place reverse\n        reverse_arr(inner_arr)\n        # take all inner lists and save them for later\n        for item in inner_arr:\n            if isinstance(item, list):",
        "detail": "python-prac.Overflow.coding-problems-master.Other.reverse_all_lists",
        "documentation": {}
    },
    {
        "label": "reverse_arr",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.reverse_all_lists",
        "description": "python-prac.Overflow.coding-problems-master.Other.reverse_all_lists",
        "peekOfCode": "def reverse_arr(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        # reverse the array from the start index to the end index by\n        # swaping each element with the pair from the other part of the array\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr",
        "detail": "python-prac.Overflow.coding-problems-master.Other.reverse_all_lists",
        "documentation": {}
    },
    {
        "label": "reverse_integer",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.reverse_integer",
        "description": "python-prac.Overflow.coding-problems-master.Other.reverse_integer",
        "peekOfCode": "def reverse_integer(x):\n    if x == 0:\n        return 0\n    sign = x // abs(x)  # find the sign, -1 or 1\n    x *= sign  # make positive x, or x = abs(x)\n    res = 0\n    while x > 0:\n        res = (res * 10) + (x % 10)\n        x //= 10\n    return res * sign",
        "detail": "python-prac.Overflow.coding-problems-master.Other.reverse_integer",
        "documentation": {}
    },
    {
        "label": "river_sizes",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.river_sizes",
        "description": "python-prac.Overflow.coding-problems-master.Other.river_sizes",
        "peekOfCode": "def river_sizes(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    results = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != 0:\n                # find the river size\n                size = dfs((i, j), matrix)\n                # save the river size",
        "detail": "python-prac.Overflow.coding-problems-master.Other.river_sizes",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.river_sizes",
        "description": "python-prac.Overflow.coding-problems-master.Other.river_sizes",
        "peekOfCode": "def dfs(coord, matrix):\n    (i, j) = coord\n    if i < 0 or j < 0:\n        # invalid position\n        return 0\n    n = len(matrix)\n    m = len(matrix[0])\n    if i == n or j == m:\n        # invalid position\n        return 0",
        "detail": "python-prac.Overflow.coding-problems-master.Other.river_sizes",
        "documentation": {}
    },
    {
        "label": "matrix",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.river_sizes",
        "description": "python-prac.Overflow.coding-problems-master.Other.river_sizes",
        "peekOfCode": "matrix = [[1, 0, 0, 1], [1, 0, 1, 0], [0, 0, 1, 0], [1, 0, 1, 0]]\nprint(river_sizes(matrix))",
        "detail": "python-prac.Overflow.coding-problems-master.Other.river_sizes",
        "documentation": {}
    },
    {
        "label": "PriorityQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.running_median",
        "description": "python-prac.Overflow.coding-problems-master.Other.running_median",
        "peekOfCode": "class PriorityQueue:\n    def __init__(self, is_min=True):\n        self.data = []\n        self.is_min = is_min\n    def push(self, el):\n        if not self.is_min:\n            el = -el\n        heapq.heappush(self.data, el)\n    def pop(self):\n        el = heapq.heappop(self.data)",
        "detail": "python-prac.Overflow.coding-problems-master.Other.running_median",
        "documentation": {}
    },
    {
        "label": "running_median",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.running_median",
        "description": "python-prac.Overflow.coding-problems-master.Other.running_median",
        "peekOfCode": "def running_median(stream):\n    left_heap = PriorityQueue(False)  # Max Priority Queue\n    right_heap = PriorityQueue()  # Min Priority Queue\n    # left_heap will have always same number of elements or 1 element more than right_heap\n    for number in stream:\n        if left_heap.count() == 0:\n            # enters here only for the first element of the streen\n            left_heap.push(number)\n        # balance the heaps\n        elif left_heap.count() > right_heap.count():",
        "detail": "python-prac.Overflow.coding-problems-master.Other.running_median",
        "documentation": {}
    },
    {
        "label": "safe_squares_rooks",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.safe_squares_rooks",
        "description": "python-prac.Overflow.coding-problems-master.Other.safe_squares_rooks",
        "peekOfCode": "def safe_squares_rooks(rooks, n):\n    rows = set()\n    cols = set()\n    for i in range(n):\n        rows.add(i)\n        cols.add(i)\n    for rook in rooks:\n        if rook[0] in rows:\n            rows.remove(rook[0])\n        if rook[1] in cols:",
        "detail": "python-prac.Overflow.coding-problems-master.Other.safe_squares_rooks",
        "documentation": {}
    },
    {
        "label": "search_2d_matrix",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.search_2d_matrix",
        "description": "python-prac.Overflow.coding-problems-master.Other.search_2d_matrix",
        "peekOfCode": "def search_2d_matrix(matrix, target):\n    n = len(matrix)\n    m = len(matrix[0])\n    j = 0\n    i = n - 1\n    while (i >= 0) and (j < m):\n        if matrix[i][j] > target:\n            i -= 1\n        elif matrix[i][j] < target:\n            j += 1",
        "detail": "python-prac.Overflow.coding-problems-master.Other.search_2d_matrix",
        "documentation": {}
    },
    {
        "label": "set_matrix_zeroes",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.set_matrix_zeroes",
        "description": "python-prac.Overflow.coding-problems-master.Other.set_matrix_zeroes",
        "peekOfCode": "def set_matrix_zeroes(matrix):\n    n = len(matrix)\n    if n == 0:\n        return\n    m = len(matrix[0])\n    # check if 0 exist in first row\n    is_row = False\n    for j in range(m):\n        if matrix[0][j] == 0:\n            is_row = True",
        "detail": "python-prac.Overflow.coding-problems-master.Other.set_matrix_zeroes",
        "documentation": {}
    },
    {
        "label": "mat",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.set_matrix_zeroes",
        "description": "python-prac.Overflow.coding-problems-master.Other.set_matrix_zeroes",
        "peekOfCode": "mat = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]\nset_matrix_zeroes(mat)\nprint(mat)\n# Test 2\n# Correct result => [[1, 0, 1], [0, 0, 0], [1, 0, 1]]\nmat = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]\nset_matrix_zeroes(mat)\nprint(mat)",
        "detail": "python-prac.Overflow.coding-problems-master.Other.set_matrix_zeroes",
        "documentation": {}
    },
    {
        "label": "mat",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.set_matrix_zeroes",
        "description": "python-prac.Overflow.coding-problems-master.Other.set_matrix_zeroes",
        "peekOfCode": "mat = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]\nset_matrix_zeroes(mat)\nprint(mat)",
        "detail": "python-prac.Overflow.coding-problems-master.Other.set_matrix_zeroes",
        "documentation": {}
    },
    {
        "label": "max_el_subarrays",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "description": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "peekOfCode": "def max_el_subarrays(arr, k):\n    n = len(arr)\n    if n == 0:\n        return -1\n    deq = deque()\n    result = []\n    # starting sliding window\n    for i in range(min(k, n)):\n        # start from the end and remove all previous indicies\n        # which have smaller values than the current one",
        "detail": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "documentation": {}
    },
    {
        "label": "10",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "description": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "peekOfCode": "10 = max(10, 5, 2)\n7 = max(5, 2, 7)\n8 = max(2, 7, 8)\n8 = max(7, 8, 7)\n=========================================\nSliding window solution using deque or linked lists\n(only need to be able to remove from both sides and to add on both sides in constant time).\n    Time Complexity:    O(N)\n    Space Complexity:   O(K)\n\"\"\"",
        "detail": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "documentation": {}
    },
    {
        "label": "7",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "description": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "peekOfCode": "7 = max(5, 2, 7)\n8 = max(2, 7, 8)\n8 = max(7, 8, 7)\n=========================================\nSliding window solution using deque or linked lists\n(only need to be able to remove from both sides and to add on both sides in constant time).\n    Time Complexity:    O(N)\n    Space Complexity:   O(K)\n\"\"\"\n############",
        "detail": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "documentation": {}
    },
    {
        "label": "8",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "description": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "peekOfCode": "8 = max(2, 7, 8)\n8 = max(7, 8, 7)\n=========================================\nSliding window solution using deque or linked lists\n(only need to be able to remove from both sides and to add on both sides in constant time).\n    Time Complexity:    O(N)\n    Space Complexity:   O(K)\n\"\"\"\n############\n# Solution #",
        "detail": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "documentation": {}
    },
    {
        "label": "8",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "description": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "peekOfCode": "8 = max(7, 8, 7)\n=========================================\nSliding window solution using deque or linked lists\n(only need to be able to remove from both sides and to add on both sides in constant time).\n    Time Complexity:    O(N)\n    Space Complexity:   O(K)\n\"\"\"\n############\n# Solution #\n############",
        "detail": "python-prac.Overflow.coding-problems-master.Other.sliding_window_maximum",
        "documentation": {}
    },
    {
        "label": "spiral_matrix",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.spiral_matrix",
        "description": "python-prac.Overflow.coding-problems-master.Other.spiral_matrix",
        "peekOfCode": "def spiral_matrix(matrix):\n    n = len(matrix)\n    if n == 0:\n        return []\n    m = len(matrix[0])\n    if m == 0:\n        return []\n    total = n * m\n    res = []\n    n -= 1",
        "detail": "python-prac.Overflow.coding-problems-master.Other.spiral_matrix",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Other.valid_parentheses",
        "description": "python-prac.Overflow.coding-problems-master.Other.valid_parentheses",
        "peekOfCode": "def is_valid(string):\n    closing = {\"}\": \"{\", \"]\": \"[\", \")\": \"(\"}\n    stack = deque()\n    for char in string:\n        if char in closing:\n            if len(stack) == 0:\n                return False\n            last = stack.pop()\n            if last != closing[char]:\n                return False",
        "detail": "python-prac.Overflow.coding-problems-master.Other.valid_parentheses",
        "documentation": {}
    },
    {
        "label": "encoding",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.encoding_string",
        "description": "python-prac.Overflow.coding-problems-master.Strings.encoding_string",
        "peekOfCode": "def encoding(word):\n    n = len(word)\n    if n == 0:\n        return \"\"\n    letter = word[0]\n    length = 1\n    res = \"\"\n    for i in range(1, n):\n        if word[i] == letter:\n            length += 1",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.encoding_string",
        "documentation": {}
    },
    {
        "label": "longest_common_prefix",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.longest_common_prefix",
        "description": "python-prac.Overflow.coding-problems-master.Strings.longest_common_prefix",
        "peekOfCode": "def longest_common_prefix(strs):\n    n = len(strs)\n    if n == 0:\n        return \"\"\n    lcp = strs[0]\n    # instead of string manipulations, manipulate with the last common index\n    lcp_idx = len(lcp)\n    for i in range(1, n):\n        lcp_idx = min(lcp_idx, len(strs[i]))\n        for j in range(lcp_idx):",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.longest_common_prefix",
        "documentation": {}
    },
    {
        "label": "longest_palindromic_substring",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.longest_palindromic_substring",
        "description": "python-prac.Overflow.coding-problems-master.Strings.longest_palindromic_substring",
        "peekOfCode": "def longest_palindromic_substring(s):\n    n = len(s)\n    longest = 1\n    for i in range(n):\n        # search for palindrom with odd number of chars\n        count_odd = compare_both_sides(s, 1, i - 1, i + 1)\n        # search for palindrom with even number of chars\n        count_even = compare_both_sides(s, 0, i - 1, i)\n        # save the longest\n        longest = max(longest, count_odd, count_even)",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.longest_palindromic_substring",
        "documentation": {}
    },
    {
        "label": "compare_both_sides",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.longest_palindromic_substring",
        "description": "python-prac.Overflow.coding-problems-master.Strings.longest_palindromic_substring",
        "peekOfCode": "def compare_both_sides(s, count, left, right):\n    # helper method to avoid duplicate code\n    n = len(s)\n    while (left >= 0) and (right < n) and (s[left] == s[right]):\n        count += 2\n        left -= 1\n        right += 1\n    return count\n###########\n# Testing #",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.longest_palindromic_substring",
        "documentation": {}
    },
    {
        "label": "reverse_sentence",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.reverse_string",
        "description": "python-prac.Overflow.coding-problems-master.Strings.reverse_string",
        "peekOfCode": "def reverse_sentence(sentence):\n    arr = [c for c in sentence]  # or just arr = list(sentence)\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        # reverse the array from the start index to the end index by\n        # swaping each char with the pair from the other part of the array\n        swap(arr, start, end)\n        start += 1\n        end -= 1",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.reverse_string",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.reverse_string",
        "description": "python-prac.Overflow.coding-problems-master.Strings.reverse_string",
        "peekOfCode": "def swap(arr, i, j):\n    # swapping two elements from a same array\n    arr[i], arr[j] = arr[j], arr[i]\n    \"\"\"same as\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n    \"\"\"\n###########\n# Testing #",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.reverse_string",
        "documentation": {}
    },
    {
        "label": "reverse_vowels",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.reverse_vowels",
        "description": "python-prac.Overflow.coding-problems-master.Strings.reverse_vowels",
        "peekOfCode": "def reverse_vowels(sentence):\n    arr = [c for c in sentence]  # or just arr = list(sentence)\n    vowels = {\n        \"a\": True,\n        \"A\": True,\n        \"e\": True,\n        \"E\": True,\n        \"i\": True,\n        \"I\": True,\n        \"o\": True,",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.reverse_vowels",
        "documentation": {}
    },
    {
        "label": "reverse_words_in_sentence",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.reverse_words_in_sentence",
        "description": "python-prac.Overflow.coding-problems-master.Strings.reverse_words_in_sentence",
        "peekOfCode": "def reverse_words_in_sentence(sentence):\n    arr = [c for c in sentence]  # or just arr = list(sentence)\n    n = len(arr)\n    last_idx = n - 1\n    start = 0\n    # reverse all words\n    for i in range(n):\n        if arr[i] == \" \":\n            # in this moment we're sure that the word is complete\n            reverse_array(arr, start, i - 1)",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.reverse_words_in_sentence",
        "documentation": {}
    },
    {
        "label": "reverse_array",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.reverse_words_in_sentence",
        "description": "python-prac.Overflow.coding-problems-master.Strings.reverse_words_in_sentence",
        "peekOfCode": "def reverse_array(arr, start, end):\n    # reverse the array from the start index to the end index\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]  # swap\n        start += 1\n        end -= 1\n###########\n# Testing #\n###########\n# Test 1",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.reverse_words_in_sentence",
        "documentation": {}
    },
    {
        "label": "swap_first_and_last_word",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.swap_first_and_last_word",
        "description": "python-prac.Overflow.coding-problems-master.Strings.swap_first_and_last_word",
        "peekOfCode": "def swap_first_and_last_word(sentence):\n    arr = [c for c in sentence]  # or just arr = list(sentence)\n    first_idx = 0\n    last_idx = len(arr) - 1\n    # reverse the whole array, in this way I'll change the first and the last word\n    reverse_array(arr, first_idx, last_idx)\n    # find positions of the first and the last space char\n    first_space = first_idx\n    while arr[first_space] != \" \":\n        first_space += 1",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.swap_first_and_last_word",
        "documentation": {}
    },
    {
        "label": "reverse_array",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.swap_first_and_last_word",
        "description": "python-prac.Overflow.coding-problems-master.Strings.swap_first_and_last_word",
        "peekOfCode": "def reverse_array(arr, start, end):\n    # reverse the array from the start index to the end index\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]  # swap\n        start += 1\n        end -= 1\n###########\n# Testing #\n###########\n# Test 1",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.swap_first_and_last_word",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Strings.zigzag_conversion",
        "description": "python-prac.Overflow.coding-problems-master.Strings.zigzag_conversion",
        "peekOfCode": "def convert(s, num_rows):\n    if num_rows == 1:\n        return s\n    n = len(s)\n    res = \"\"\n    cycle = 2 * (num_rows - 1)\n    for i in range(0, num_rows):\n        steps = cycle - 2 * i\n        if (i == 0) or (i == num_rows - 1):\n            # if first or last row, make a whole cycle",
        "detail": "python-prac.Overflow.coding-problems-master.Strings.zigzag_conversion",
        "documentation": {}
    },
    {
        "label": "diameter",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "peekOfCode": "def diameter(root):\n    return find_diameter(root)[1]\ndef find_diameter(root):\n    \"\"\" returns (max branch length, max diameter) \"\"\"\n    if not root:\n        return 0, 0\n    # traverse left and right subtrees\n    left, right = find_diameter(root.left), find_diameter(root.right)\n    # return the max branch from the left and right subtrees plus the current node\n    # and find the max diameter till now (using the current node and the max left and right subtree branches)",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "documentation": {}
    },
    {
        "label": "find_diameter",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "peekOfCode": "def find_diameter(root):\n    \"\"\" returns (max branch length, max diameter) \"\"\"\n    if not root:\n        return 0, 0\n    # traverse left and right subtrees\n    left, right = find_diameter(root.left), find_diameter(root.right)\n    # return the max branch from the left and right subtrees plus the current node\n    # and find the max diameter till now (using the current node and the max left and right subtree branches)\n    return max(left[0], right[0]) + 1, max(left[1], right[1], left[0] + right[0] + 1)\n###########",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "peekOfCode": "tree = TreeNode(\n    3, TreeNode(1, None, TreeNode(2, TreeNode(7))), TreeNode(4, None, TreeNode(5))\n)\nprint(diameter(tree))\n# Test 2\n# Correct result => 5\ntree = TreeNode(\n    5,\n    TreeNode(3, TreeNode(2, TreeNode(1)), TreeNode(4, None, TreeNode(8))),\n    TreeNode(6),",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "peekOfCode": "tree = TreeNode(\n    5,\n    TreeNode(3, TreeNode(2, TreeNode(1)), TreeNode(4, None, TreeNode(8))),\n    TreeNode(6),\n)\nprint(diameter(tree))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.diameter_of_binary_tree",
        "documentation": {}
    },
    {
        "label": "find_kth_smallest_node_bst",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "peekOfCode": "def find_kth_smallest_node_bst(root, k):\n    return search(root, k)[1]\ndef search(node, k):\n    if node is None:\n        return (k, None)\n    # check left\n    left = search(node.left, k)\n    if left[0] == 0:\n        return left\n    # check current node",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "peekOfCode": "def search(node, k):\n    if node is None:\n        return (k, None)\n    # check left\n    left = search(node.left, k)\n    if left[0] == 0:\n        return left\n    # check current node\n    k = left[0] - 1\n    if k == 0:",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "peekOfCode": "tree = TreeNode(\n    5,\n    TreeNode(3, TreeNode(1), TreeNode(4)),\n    TreeNode(8, TreeNode(7), TreeNode(12, TreeNode(10, TreeNode(9)))),\n)\nprint(find_kth_smallest_node_bst(tree, 7).val)\n# Test 2\n# Correct result => 5\ntree = TreeNode(\n    5, TreeNode(3, TreeNode(1), TreeNode(4)), TreeNode(8, TreeNode(7), TreeNode(12))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "peekOfCode": "tree = TreeNode(\n    5, TreeNode(3, TreeNode(1), TreeNode(4)), TreeNode(8, TreeNode(7), TreeNode(12))\n)\nprint(find_kth_smallest_node_bst(tree, 4).val)\n# Test 3\n# Correct result => 3\ntree = TreeNode(5, TreeNode(3, TreeNode(1), TreeNode(4)))\nprint(find_kth_smallest_node_bst(tree, 2).val)\n# Test 4\n# Correct result => 6",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "peekOfCode": "tree = TreeNode(5, TreeNode(3, TreeNode(1), TreeNode(4)))\nprint(find_kth_smallest_node_bst(tree, 2).val)\n# Test 4\n# Correct result => 6\ntree = TreeNode(\n    5,\n    TreeNode(3, TreeNode(1), TreeNode(4)),\n    TreeNode(8, TreeNode(6, None, TreeNode(7))),\n)\nprint(find_kth_smallest_node_bst(tree, 5).val)",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "peekOfCode": "tree = TreeNode(\n    5,\n    TreeNode(3, TreeNode(1), TreeNode(4)),\n    TreeNode(8, TreeNode(6, None, TreeNode(7))),\n)\nprint(find_kth_smallest_node_bst(tree, 5).val)\n# Test 5\n# Correct result => 9\ntree = TreeNode(\n    5,",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "peekOfCode": "tree = TreeNode(\n    5,\n    TreeNode(3, TreeNode(1), TreeNode(4)),\n    TreeNode(\n        8,\n        TreeNode(7),\n        TreeNode(12, TreeNode(9, None, TreeNode(10, None, TreeNode(11)))),\n    ),\n)\nprint(find_kth_smallest_node_bst(tree, 7).val)",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_kth_smallest_node_bst",
        "documentation": {}
    },
    {
        "label": "max_branch_sum",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_max_branch_sum",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_max_branch_sum",
        "peekOfCode": "def max_branch_sum(node):\n    if node is None:\n        return 0\n    # take the max left subbranch sum and add the current node value\n    left_max_sum = max_branch_sum(node.left) + node.val\n    # take the max right subbranch sum and add the current node value\n    right_max_sum = max_branch_sum(node.right) + node.val\n    # return the bigger sum\n    return max(left_max_sum, right_max_sum)\n###########",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_max_branch_sum",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_max_branch_sum",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_max_branch_sum",
        "peekOfCode": "tree = TreeNode(\n    1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3, TreeNode(6), TreeNode(7))\n)\nprint(max_branch_sum(tree))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_max_branch_sum",
        "documentation": {}
    },
    {
        "label": "max_path_sum",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "peekOfCode": "def max_path_sum(tree):\n    return find_max_path_sum(tree)[0]\ndef find_max_path_sum(node):\n    if node is None:\n        return (0, 0)\n    # get the result from the left subtree\n    left_result = find_max_path_sum(node.left)\n    # get the result from the right subtree\n    right_result = find_max_path_sum(node.right)\n    # create a new path by merging the max left and right subpaths",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "documentation": {}
    },
    {
        "label": "find_max_path_sum",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "peekOfCode": "def find_max_path_sum(node):\n    if node is None:\n        return (0, 0)\n    # get the result from the left subtree\n    left_result = find_max_path_sum(node.left)\n    # get the result from the right subtree\n    right_result = find_max_path_sum(node.right)\n    # create a new path by merging the max left and right subpaths\n    current_path = left_result[1] + node.val + right_result[1]\n    # find the max path till now, comparing the new path, max path from the left and right subtree",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "peekOfCode": "tree = TreeNode(\n    1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3, TreeNode(6), TreeNode(7))\n)\nprint(max_path_sum(tree))\n# Test 2\n# Correct result => 10\ntree = TreeNode(\n    -1, TreeNode(-2, TreeNode(-4), TreeNode(-5)), TreeNode(3, TreeNode(2), TreeNode(5))\n)\nprint(max_path_sum(tree))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "peekOfCode": "tree = TreeNode(\n    -1, TreeNode(-2, TreeNode(-4), TreeNode(-5)), TreeNode(3, TreeNode(2), TreeNode(5))\n)\nprint(max_path_sum(tree))\n# Test 3\n\"\"\"\n        1\n       / \\\n      7   3\n     / \\ / \\",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "peekOfCode": "tree = TreeNode(\n    1, TreeNode(7, TreeNode(-4), TreeNode(-5)), TreeNode(3, TreeNode(6), TreeNode(2))\n)\nprint(max_path_sum(tree))\n# Test 4\n\"\"\"\n        1\n       / \\\n      2   3\n     / \\ / \\",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "peekOfCode": "tree = TreeNode(\n    1, TreeNode(2, TreeNode(-4), TreeNode(-5)), TreeNode(3, TreeNode(-2), TreeNode(-3))\n)\nprint(max_path_sum(tree))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_max_path_sum",
        "documentation": {}
    },
    {
        "label": "find_second_largest",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node",
        "peekOfCode": "def find_second_largest(root):\n    arr = [TreeNode(-math.inf), TreeNode(-math.inf)]\n    traverse_tree(root, arr)\n    if arr[1] == -math.inf:\n        # the tree has 0 or 1 elements\n        return None\n    return arr[1]\ndef traverse_tree(node, arr):\n    if node == None:\n        return",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node",
        "documentation": {}
    },
    {
        "label": "traverse_tree",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node",
        "peekOfCode": "def traverse_tree(node, arr):\n    if node == None:\n        return\n    if arr[0].val < node.val:\n        arr[1] = arr[0]\n        arr[0] = node\n    elif arr[1].val < node.val:\n        arr[1] = node\n    # search left\n    traverse_tree(node.left, arr)",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node",
        "peekOfCode": "tree = TreeNode(\n    1, TreeNode(5, TreeNode(2), TreeNode(8)), TreeNode(4, TreeNode(12), TreeNode(7))\n)\nprint(find_second_largest(tree).val)",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node",
        "documentation": {}
    },
    {
        "label": "find_second_largest_bst_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "peekOfCode": "def find_second_largest_bst_1(root):\n    if root == None:\n        return None\n    return search_1(root, False)\ndef search_1(node, visited_left):\n    # the right child is bigger than the current node\n    if node.right is not None:\n        result = search_1(node.right, visited_left)\n        if result is None:\n            # return this node, because the bottom is reached and the leaf is bigger than this node",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "documentation": {}
    },
    {
        "label": "search_1",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "peekOfCode": "def search_1(node, visited_left):\n    # the right child is bigger than the current node\n    if node.right is not None:\n        result = search_1(node.right, visited_left)\n        if result is None:\n            # return this node, because the bottom is reached and the leaf is bigger than this node\n            return node\n        # result node is found\n        return result\n    # if this node is a part of the left subtree and this node doesn't have right child",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "documentation": {}
    },
    {
        "label": "find_second_largest_bst_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "peekOfCode": "def find_second_largest_bst_2(root):\n    return search_2(root, 2)[1]\ndef search_2(node, k):\n    if node == None:\n        return (k, None)\n    # check right\n    right = search_2(node.right, k)\n    if right[0] == 0:\n        return right\n    # check current node",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "documentation": {}
    },
    {
        "label": "search_2",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "peekOfCode": "def search_2(node, k):\n    if node == None:\n        return (k, None)\n    # check right\n    right = search_2(node.right, k)\n    if right[0] == 0:\n        return right\n    # check current node\n    k = right[0] - 1\n    if k == 0:",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "peekOfCode": "tree = TreeNode(\n    5,\n    TreeNode(3, TreeNode(1), TreeNode(4)),\n    TreeNode(8, TreeNode(7), TreeNode(12, TreeNode(10, TreeNode(13)))),\n)\nprint(find_second_largest_bst_1(tree).val)\nprint(find_second_largest_bst_2(tree).val)\n# Test 2\n# Correct result => 8\ntree = TreeNode(",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "peekOfCode": "tree = TreeNode(\n    5, TreeNode(3, TreeNode(1), TreeNode(4)), TreeNode(8, TreeNode(7), TreeNode(12))\n)\nprint(find_second_largest_bst_1(tree).val)\nprint(find_second_largest_bst_2(tree).val)\n# Test 3\n# Correct result => 4\ntree = TreeNode(5, TreeNode(3, TreeNode(1), TreeNode(4)))\nprint(find_second_largest_bst_1(tree).val)\nprint(find_second_largest_bst_2(tree).val)",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "peekOfCode": "tree = TreeNode(5, TreeNode(3, TreeNode(1), TreeNode(4)))\nprint(find_second_largest_bst_1(tree).val)\nprint(find_second_largest_bst_2(tree).val)\n# Test 4\n# Correct result => 7\ntree = TreeNode(\n    5,\n    TreeNode(3, TreeNode(1), TreeNode(4)),\n    TreeNode(8, TreeNode(6, None, TreeNode(7))),\n)",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "peekOfCode": "tree = TreeNode(\n    5,\n    TreeNode(3, TreeNode(1), TreeNode(4)),\n    TreeNode(8, TreeNode(6, None, TreeNode(7))),\n)\nprint(find_second_largest_bst_1(tree).val)\nprint(find_second_largest_bst_2(tree).val)\n# Test 5\n# Correct result => 11\ntree = TreeNode(",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "peekOfCode": "tree = TreeNode(\n    5,\n    TreeNode(3, TreeNode(1), TreeNode(4)),\n    TreeNode(\n        8,\n        TreeNode(7),\n        TreeNode(12, TreeNode(9, None, TreeNode(10, None, TreeNode(11)))),\n    ),\n)\nprint(find_second_largest_bst_1(tree).val)",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.find_second_largest_node_bst",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.populating_next_pointers_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.populating_next_pointers_tree",
        "peekOfCode": "class Node:\n    def __init__(self, val, left, right, next):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\ndef populating_next_pointers_tree(root):\n    previous = None\n    queue = deque()\n    queue.append((root, 0))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.populating_next_pointers_tree",
        "documentation": {}
    },
    {
        "label": "populating_next_pointers_tree",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.populating_next_pointers_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.populating_next_pointers_tree",
        "peekOfCode": "def populating_next_pointers_tree(root):\n    previous = None\n    queue = deque()\n    queue.append((root, 0))\n    while queue:\n        el = queue.popleft()\n        node = el[0]\n        lvl = el[1]\n        if node is None:\n            continue",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.populating_next_pointers_tree",
        "documentation": {}
    },
    {
        "label": "is_same_tree",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "peekOfCode": "def is_same_tree(p, q):\n    if (p is None) and (p == q):\n        return True\n    if (p is None) or (q is None):\n        return False\n    if p.val != q.val:\n        return False\n    # check left\n    if not is_same_tree(p.left, q.left):\n        return False",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "peekOfCode": "p = TreeNode(1, TreeNode(2), TreeNode(3))\nq = TreeNode(1, TreeNode(2), TreeNode(3))\nprint(is_same_tree(p, q))\n# Test 2\n# Correct result => False\np = TreeNode(1, TreeNode(2))\nq = TreeNode(1, None, TreeNode(2))\nprint(is_same_tree(p, q))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "peekOfCode": "q = TreeNode(1, TreeNode(2), TreeNode(3))\nprint(is_same_tree(p, q))\n# Test 2\n# Correct result => False\np = TreeNode(1, TreeNode(2))\nq = TreeNode(1, None, TreeNode(2))\nprint(is_same_tree(p, q))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "peekOfCode": "p = TreeNode(1, TreeNode(2))\nq = TreeNode(1, None, TreeNode(2))\nprint(is_same_tree(p, q))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "description": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "peekOfCode": "q = TreeNode(1, None, TreeNode(2))\nprint(is_same_tree(p, q))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.same_tree",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.tree_helpers",
        "description": "python-prac.Overflow.coding-problems-master.Trees.tree_helpers",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val, left=None, right=None):\n        \"\"\"Definition for binary tree.\"\"\"\n        self.val = val\n        self.left = left\n        self.right = right",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.tree_helpers",
        "documentation": {}
    },
    {
        "label": "count_unival_trees",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.unival_trees",
        "description": "python-prac.Overflow.coding-problems-master.Trees.unival_trees",
        "peekOfCode": "def count_unival_trees(tree):\n    if tree is None:\n        return 0\n    return total_unival_trees(tree)[0]\ndef total_unival_trees(node):\n    left_value = None\n    is_left_unival_tree = True\n    right_value = None\n    is_right_unival_tree = True\n    unival_trees = 0",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.unival_trees",
        "documentation": {}
    },
    {
        "label": "total_unival_trees",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.unival_trees",
        "description": "python-prac.Overflow.coding-problems-master.Trees.unival_trees",
        "peekOfCode": "def total_unival_trees(node):\n    left_value = None\n    is_left_unival_tree = True\n    right_value = None\n    is_right_unival_tree = True\n    unival_trees = 0\n    # count left unival trees and save the value\n    if node.left is not None:\n        left_result = total_unival_trees(node.left)\n        unival_trees += left_result[0]",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.unival_trees",
        "documentation": {}
    },
    {
        "label": "is_valid_bst",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "peekOfCode": "def is_valid_bst(root):\n    return is_valid_sub_bst(root, -math.inf, math.inf)\ndef is_valid_sub_bst(node, lower, upper):\n    if node is None:\n        return True\n    if (node.val <= lower) or (node.val >= upper):\n        return False\n    # check left\n    if not is_valid_sub_bst(node.left, lower, node.val):\n        return False",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "documentation": {}
    },
    {
        "label": "is_valid_sub_bst",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "peekOfCode": "def is_valid_sub_bst(node, lower, upper):\n    if node is None:\n        return True\n    if (node.val <= lower) or (node.val >= upper):\n        return False\n    # check left\n    if not is_valid_sub_bst(node.left, lower, node.val):\n        return False\n    # check right\n    if not is_valid_sub_bst(node.right, node.val, upper):",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "peekOfCode": "root = TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6)))\nprint(is_valid_bst(root))\n# Test 2\n\"\"\"\n    5\n   / \\\n  1   6\n     / \\\n    4   7\n\"\"\"",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "peekOfCode": "root = TreeNode(5, TreeNode(1), TreeNode(6, TreeNode(4), TreeNode(7)))\nprint(is_valid_bst(root))\n# Test 3\n\"\"\"\n    5\n   / \\\n  1   6\n     / \\\n    7   8\n\"\"\"",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "peekOfCode": "root = TreeNode(5, TreeNode(1), TreeNode(6, TreeNode(7), TreeNode(8)))\nprint(is_valid_bst(root))\n# Test 4\n\"\"\"\n    5\n   / \\\n  1   7\n     / \\\n    6   8\n\"\"\"",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "description": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "peekOfCode": "root = TreeNode(5, TreeNode(1), TreeNode(7, TreeNode(6), TreeNode(8)))\nprint(is_valid_bst(root))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.valid_bst",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.zigzag_level_order_traversal",
        "description": "python-prac.Overflow.coding-problems-master.Trees.zigzag_level_order_traversal",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef zigzag_level_order_traversal(root):\n    results = []\n    queue = deque()\n    # save nodes and levels in queue\n    queue.append((root, 0))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.zigzag_level_order_traversal",
        "documentation": {}
    },
    {
        "label": "zigzag_level_order_traversal",
        "kind": 2,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.zigzag_level_order_traversal",
        "description": "python-prac.Overflow.coding-problems-master.Trees.zigzag_level_order_traversal",
        "peekOfCode": "def zigzag_level_order_traversal(root):\n    results = []\n    queue = deque()\n    # save nodes and levels in queue\n    queue.append((root, 0))\n    while queue:\n        node, lvl = queue.popleft()\n        if node is None:\n            continue\n        if len(results) < lvl + 1:",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.zigzag_level_order_traversal",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow.coding-problems-master.Trees.zigzag_level_order_traversal",
        "description": "python-prac.Overflow.coding-problems-master.Trees.zigzag_level_order_traversal",
        "peekOfCode": "tree = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))\nprint(zigzag_level_order_traversal(tree))",
        "detail": "python-prac.Overflow.coding-problems-master.Trees.zigzag_level_order_traversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.array.215_Kth_Largest_Element_in_an_Array",
        "description": "python-prac.Overflow._Algorithms.array.215_Kth_Largest_Element_in_an_Array",
        "peekOfCode": "class Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        pivot = random.choice(nums)\n        nums1, nums2 = [], []\n        for num in nums:",
        "detail": "python-prac.Overflow._Algorithms.array.215_Kth_Largest_Element_in_an_Array",
        "documentation": {}
    },
    {
        "label": "array_sum_combinations",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "description": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "peekOfCode": "def array_sum_combinations(A, B, C, target):\n    def over(constructed_sofar):\n        sum = 0\n        to_stop, reached_target = False, False\n        for elem in constructed_sofar:\n            sum += elem\n        if sum >= target or len(constructed_sofar) >= 3:\n            to_stop = True\n            if sum == target and 3 == len(constructed_sofar):\n                reached_target = True",
        "detail": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "documentation": {}
    },
    {
        "label": "unique_array_sum_combinations",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "description": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "peekOfCode": "def unique_array_sum_combinations(A, B, C, target):\n    \"\"\"\n    1. Sort all the arrays - a,b,c. - This improves average time complexity.\n    2. If c[i] < Sum, then look for Sum - c[i] in array a and b.\n       When pair found, insert c[i], a[j] & b[k] into the result list.\n       This can be done in O(n).\n    3. Keep on doing the above procedure while going through complete c array.\n    Complexity: O(n(m+p))\n    \"\"\"\n    def check_sum(n, *nums):",
        "detail": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "description": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "peekOfCode": "A = [1, 2, 3, 3]\nB = [2, 3, 3, 4]\nC = [2, 3, 3, 4]\ntarget = 7\n*/\nResult:\n[[1, 2, 4], [1, 3, 3], [1, 3, 3], [1, 3, 3], [1, 3, 3], [1, 4, 2],\n [2, 2, 3], [2, 2, 3], [2, 3, 2], [2, 3, 2], [3, 2, 2], [3, 2, 2]]\n\"\"\"\nimport itertools",
        "detail": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "description": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "peekOfCode": "B = [2, 3, 3, 4]\nC = [2, 3, 3, 4]\ntarget = 7\n*/\nResult:\n[[1, 2, 4], [1, 3, 3], [1, 3, 3], [1, 3, 3], [1, 3, 3], [1, 4, 2],\n [2, 2, 3], [2, 2, 3], [2, 3, 2], [2, 3, 2], [3, 2, 2], [3, 2, 2]]\n\"\"\"\nimport itertools\nfrom functools import partial",
        "detail": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "description": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "peekOfCode": "C = [2, 3, 3, 4]\ntarget = 7\n*/\nResult:\n[[1, 2, 4], [1, 3, 3], [1, 3, 3], [1, 3, 3], [1, 3, 3], [1, 4, 2],\n [2, 2, 3], [2, 2, 3], [2, 3, 2], [2, 3, 2], [3, 2, 2], [3, 2, 2]]\n\"\"\"\nimport itertools\nfrom functools import partial\ndef array_sum_combinations(A, B, C, target):",
        "detail": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "description": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "peekOfCode": "target = 7\n*/\nResult:\n[[1, 2, 4], [1, 3, 3], [1, 3, 3], [1, 3, 3], [1, 3, 3], [1, 4, 2],\n [2, 2, 3], [2, 2, 3], [2, 3, 2], [2, 3, 2], [3, 2, 2], [3, 2, 2]]\n\"\"\"\nimport itertools\nfrom functools import partial\ndef array_sum_combinations(A, B, C, target):\n    def over(constructed_sofar):",
        "detail": "python-prac.Overflow._Algorithms.array.array_sum_combinations",
        "documentation": {}
    },
    {
        "label": "compare_array_elements",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.compare_array_elements",
        "description": "python-prac.Overflow._Algorithms.array.compare_array_elements",
        "peekOfCode": "def compare_array_elements(arr1, arr2):\n    for l in range(len(arr1)):\n        if arr1[l] > arr2[l]:\n            yield (arr1[l], l, 1)\n        elif arr1[l] < arr2[l]:\n            yield (arr2[l], l, 2)\n        else:\n            yield (0)\n# Tests\ntests = [",
        "detail": "python-prac.Overflow._Algorithms.array.compare_array_elements",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.array.compare_array_elements",
        "description": "python-prac.Overflow._Algorithms.array.compare_array_elements",
        "peekOfCode": "tests = [\n    [[21, 3454, 12, 77, 21, 90, 235], [123, 54, 21, 7, 23, 987, 21312]],\n    [[1223, 8273, 17732, 7127], [12989, 2131223, 129, 10]],\n]\n# Does not test last condition of function\nfor test in tests:\n    for n, index, array_n in compare_array_elements(test[0], test[1]):\n        print(\n            \"  [ %i ] is biggest value at index(%i) from array(%i)\"\n            % (n, index, array_n)",
        "detail": "python-prac.Overflow._Algorithms.array.compare_array_elements",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.array.continuous-subarray-sum",
        "description": "python-prac.Overflow._Algorithms.array.continuous-subarray-sum",
        "peekOfCode": "class Solution(object):\n    def checkSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        sum, pre, s = 0, 0, set()\n        for item in nums:\n            sum += item",
        "detail": "python-prac.Overflow._Algorithms.array.continuous-subarray-sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.array.degree-of-an-array",
        "description": "python-prac.Overflow._Algorithms.array.degree-of-an-array",
        "peekOfCode": "class Solution:\n    def findShortestSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        dic = {}\n        degreeLen = 0\n        for index, item in enumerate(nums):\n            if not item in dic:",
        "detail": "python-prac.Overflow._Algorithms.array.degree-of-an-array",
        "documentation": {}
    },
    {
        "label": "_DynamicArrayAdditions",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "description": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "peekOfCode": "class _DynamicArrayAdditions(HelperValueMixin):\n    \"\"\"\n    Used for the usage of set() and list().\n    This is definitely a hack, but a good one :-)\n    It makes it possible to use set/list conversions.\n    This is not a proper context, because it doesn't have to be. It's not used\n    in the wild, it's just used within typeshed as an argument to `__init__`\n    for set/list and never used in any other place.\n    \"\"\"\n    def __init__(self, instance, arguments):",
        "detail": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "documentation": {}
    },
    {
        "label": "_Modification",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "description": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "peekOfCode": "class _Modification(ValueWrapper):\n    def __init__(self, wrapped_value, assigned_values, contextualized_key):\n        super(_Modification, self).__init__(wrapped_value)\n        self._assigned_values = assigned_values\n        self._contextualized_key = contextualized_key\n    def py__getitem__(self, *args, **kwargs):\n        return (\n            self._wrapped_value.py__getitem__(*args, **kwargs) | self._assigned_values\n        )\n    def py__simple_getitem__(self, index):",
        "detail": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "documentation": {}
    },
    {
        "label": "DictModification",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "description": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "peekOfCode": "class DictModification(_Modification):\n    def py__iter__(self, contextualized_node=None):\n        for lazy_context in self._wrapped_value.py__iter__(contextualized_node):\n            yield lazy_context\n        yield self._contextualized_key\n    def get_key_values(self):\n        return self._wrapped_value.get_key_values() | self._contextualized_key.infer()\nclass ListModification(_Modification):\n    def py__iter__(self, contextualized_node=None):\n        for lazy_context in self._wrapped_value.py__iter__(contextualized_node):",
        "detail": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "documentation": {}
    },
    {
        "label": "ListModification",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "description": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "peekOfCode": "class ListModification(_Modification):\n    def py__iter__(self, contextualized_node=None):\n        for lazy_context in self._wrapped_value.py__iter__(contextualized_node):\n            yield lazy_context\n        yield LazyKnownValues(self._assigned_values)",
        "detail": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "documentation": {}
    },
    {
        "label": "check_array_additions",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "description": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "peekOfCode": "def check_array_additions(context, sequence):\n    \"\"\" Just a mapper function for the internal _internal_check_array_additions \"\"\"\n    if sequence.array_type not in (\"list\", \"set\"):\n        # TODO also check for dict updates\n        return NO_VALUES\n    return _internal_check_array_additions(context, sequence)\n@inference_state_method_cache(default=NO_VALUES)\n@debug.increase_indent\ndef _internal_check_array_additions(context, sequence):\n    \"\"\"",
        "detail": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "documentation": {}
    },
    {
        "label": "get_dynamic_array_instance",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "description": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "peekOfCode": "def get_dynamic_array_instance(instance, arguments):\n    \"\"\"Used for set() and list() instances.\"\"\"\n    ai = _DynamicArrayAdditions(instance, arguments)\n    from jedi.inference import arguments\n    return arguments.ValuesArguments([ValueSet([ai])])\nclass _DynamicArrayAdditions(HelperValueMixin):\n    \"\"\"\n    Used for the usage of set() and list().\n    This is definitely a hack, but a good one :-)\n    It makes it possible to use set/list conversions.",
        "detail": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "documentation": {}
    },
    {
        "label": "_sentinel",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "description": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "peekOfCode": "_sentinel = object()\ndef check_array_additions(context, sequence):\n    \"\"\" Just a mapper function for the internal _internal_check_array_additions \"\"\"\n    if sequence.array_type not in (\"list\", \"set\"):\n        # TODO also check for dict updates\n        return NO_VALUES\n    return _internal_check_array_additions(context, sequence)\n@inference_state_method_cache(default=NO_VALUES)\n@debug.increase_indent\ndef _internal_check_array_additions(context, sequence):",
        "detail": "python-prac.Overflow._Algorithms.array.dynamic_arrays",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.array.k-diff-pairs-in-an-array",
        "description": "python-prac.Overflow._Algorithms.array.k-diff-pairs-in-an-array",
        "peekOfCode": "class Solution(object):\n    def findPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k < 0:\n            return 0\n        nums.sort()",
        "detail": "python-prac.Overflow._Algorithms.array.k-diff-pairs-in-an-array",
        "documentation": {}
    },
    {
        "label": "max_sub_array_sum",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.largest_subarray_sum",
        "description": "python-prac.Overflow._Algorithms.array.largest_subarray_sum",
        "peekOfCode": "def max_sub_array_sum(a: list, size: int = 0):\n    \"\"\"\n    >>> max_sub_array_sum([-13, -3, -25, -20, -3, -16, -23, -12, -5, -22, -15, -4, -7])\n    -3\n    \"\"\"\n    size = size or len(a)\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]",
        "detail": "python-prac.Overflow._Algorithms.array.largest_subarray_sum",
        "documentation": {}
    },
    {
        "label": "SubArray",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.array.longest_sub_array",
        "description": "python-prac.Overflow._Algorithms.array.longest_sub_array",
        "peekOfCode": "class SubArray:\n    def __init__(self, arr):\n        # we need a list not a string, so do something to change the type\n        self.array = arr.split(\",\")\n        print((\"the input array is:\", self.array))\n    def solve_sub_array(self):\n        rear = [int(self.array[0])] * len(self.array)\n        sum_value = [int(self.array[0])] * len(self.array)\n        for i in range(1, len(self.array)):\n            sum_value[i] = max(",
        "detail": "python-prac.Overflow._Algorithms.array.longest_sub_array",
        "documentation": {}
    },
    {
        "label": "max_product",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.max_product_subarray",
        "description": "python-prac.Overflow._Algorithms.array.max_product_subarray",
        "peekOfCode": "def max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    lmin = lmax = gmax = nums[0]\n    for i in range(len(nums)):\n        t1 = nums[i] * lmax\n        t2 = nums[i] * lmin\n        lmax = max(max(t1, t2), nums[i])",
        "detail": "python-prac.Overflow._Algorithms.array.max_product_subarray",
        "documentation": {}
    },
    {
        "label": "subarray_with_max_product",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.max_product_subarray",
        "description": "python-prac.Overflow._Algorithms.array.max_product_subarray",
        "peekOfCode": "def subarray_with_max_product(arr):\n    \"\"\" arr is list of positive/negative numbers \"\"\"\n    l = len(arr)\n    product_so_far = max_product_end = 1\n    max_start_i = 0\n    so_far_start_i = so_far_end_i = 0\n    all_negative_flag = True\n    for i in range(l):\n        max_product_end *= arr[i]\n        if arr[i] > 0:",
        "detail": "python-prac.Overflow._Algorithms.array.max_product_subarray",
        "documentation": {}
    },
    {
        "label": "max_subarray",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.max_subarray",
        "description": "python-prac.Overflow._Algorithms.array.max_subarray",
        "peekOfCode": "def max_subarray(array):\n    max_so_far = max_now = array[0]\n    for i in range(1, len(array)):\n        max_now = max(array[i], max_now + array[i])\n        max_so_far = max(max_so_far, max_now)\n    return max_so_far\na = [1, 2, -3, 4, 5, -7, 23]\nprint(a)\nprint(max_subarray(a))",
        "detail": "python-prac.Overflow._Algorithms.array.max_subarray",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.array.max_subarray",
        "description": "python-prac.Overflow._Algorithms.array.max_subarray",
        "peekOfCode": "a = [1, 2, -3, 4, 5, -7, 23]\nprint(a)\nprint(max_subarray(a))",
        "detail": "python-prac.Overflow._Algorithms.array.max_subarray",
        "documentation": {}
    },
    {
        "label": "find_max_sub_array",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.max_sub_array",
        "description": "python-prac.Overflow._Algorithms.array.max_sub_array",
        "peekOfCode": "def find_max_sub_array(A, low, high):\n    if low == high:\n        return low, high, A[low]\n    else:\n        mid = (low + high) // 2\n        left_low, left_high, left_sum = find_max_sub_array(A, low, mid)\n        right_low, right_high, right_sum = find_max_sub_array(A, mid + 1, high)\n        cross_left, cross_right, cross_sum = find_max_cross_sum(A, low, mid, high)\n        if left_sum >= right_sum and left_sum >= cross_sum:\n            return left_low, left_high, left_sum",
        "detail": "python-prac.Overflow._Algorithms.array.max_sub_array",
        "documentation": {}
    },
    {
        "label": "find_max_cross_sum",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.max_sub_array",
        "description": "python-prac.Overflow._Algorithms.array.max_sub_array",
        "peekOfCode": "def find_max_cross_sum(A, low, mid, high):\n    left_sum, max_left = -999999999, -1\n    right_sum, max_right = -999999999, -1\n    summ = 0\n    for i in range(mid, low - 1, -1):\n        summ += A[i]\n        if summ > left_sum:\n            left_sum = summ\n            max_left = i\n    summ = 0",
        "detail": "python-prac.Overflow._Algorithms.array.max_sub_array",
        "documentation": {}
    },
    {
        "label": "max_sub_array",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.max_sub_array",
        "description": "python-prac.Overflow._Algorithms.array.max_sub_array",
        "peekOfCode": "def max_sub_array(nums: list[int]) -> int:\n    \"\"\"\n    Finds the contiguous subarray which has the largest sum and return its sum.\n    >>> max_sub_array([-2, 1, -3, 4, -1, 2, 1, -5, 4])\n    6\n    An empty (sub)array has sum 0.\n    >>> max_sub_array([])\n    0\n    If all elements are negative, the largest subarray would be the empty array,\n    having the sum 0.",
        "detail": "python-prac.Overflow._Algorithms.array.max_sub_array",
        "documentation": {}
    },
    {
        "label": "median_of_two_arrays",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.median_of_two_arrays",
        "description": "python-prac.Overflow._Algorithms.array.median_of_two_arrays",
        "peekOfCode": "def median_of_two_arrays(nums1: List[float], nums2: List[float]) -> float:\n    \"\"\"\n    >>> median_of_two_arrays([1, 2], [3])\n    2\n    >>> median_of_two_arrays([0, -1.1], [2.5, 1])\n    0.5\n    >>> median_of_two_arrays([], [2.5, 1])\n    1.75\n    >>> median_of_two_arrays([], [0])\n    0",
        "detail": "python-prac.Overflow._Algorithms.array.median_of_two_arrays",
        "documentation": {}
    },
    {
        "label": "sum_arr",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.array.sum_array",
        "description": "python-prac.Overflow._Algorithms.array.sum_array",
        "peekOfCode": "def sum_arr(n):\n    res = 0\n    for x in n:\n        res += x\n    return res\nnums = [52345, 746587, 98589, 54398, 9348, 45887, 49856]\ntest = sum_arr(nums)\n# sum() is Pythons built in method of adding all the elements in a list\nif test == sum(nums):\n    print(\"Sum of arr: {}\".format(test))",
        "detail": "python-prac.Overflow._Algorithms.array.sum_array",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.array.sum_array",
        "description": "python-prac.Overflow._Algorithms.array.sum_array",
        "peekOfCode": "nums = [52345, 746587, 98589, 54398, 9348, 45887, 49856]\ntest = sum_arr(nums)\n# sum() is Pythons built in method of adding all the elements in a list\nif test == sum(nums):\n    print(\"Sum of arr: {}\".format(test))\nelse:\n    print(\"Func dosen't work!\")\n# Most simple algorithm ever! Isn't it!",
        "detail": "python-prac.Overflow._Algorithms.array.sum_array",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.array.sum_array",
        "description": "python-prac.Overflow._Algorithms.array.sum_array",
        "peekOfCode": "test = sum_arr(nums)\n# sum() is Pythons built in method of adding all the elements in a list\nif test == sum(nums):\n    print(\"Sum of arr: {}\".format(test))\nelse:\n    print(\"Func dosen't work!\")\n# Most simple algorithm ever! Isn't it!",
        "detail": "python-prac.Overflow._Algorithms.array.sum_array",
        "documentation": {}
    },
    {
        "label": "check_anagrams",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Check.check_anagrams",
        "description": "python-prac.Overflow._Algorithms.Check.check_anagrams",
        "peekOfCode": "def check_anagrams(first_str: str, second_str: str) -> bool:\n    \"\"\"\n    Two strings are anagrams if they are made of the same letters\n    arranged differently (ignoring the case).\n    >>> check_anagrams('Silent', 'Listen')\n    True\n    >>> check_anagrams('This is a string', 'Is this a string')\n    True\n    >>> check_anagrams('This is    a      string', 'Is     this a string')\n    True",
        "detail": "python-prac.Overflow._Algorithms.Check.check_anagrams",
        "documentation": {}
    },
    {
        "label": "check_bipartite",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Check.check_bipartite",
        "description": "python-prac.Overflow._Algorithms.Check.check_bipartite",
        "peekOfCode": "def check_bipartite(adj_list):\n    V = len(adj_list)\n    # Divide vertexes in the graph into set_type 1 and 2\n    # Initialize all set_types as -1\n    set_type = [-1 for v in range(V)]\n    set_type[0] = 0\n    q = [0]\n    while q:\n        v = q.pop(0)\n        # If there is a self-loop, it cannot be bipartite",
        "detail": "python-prac.Overflow._Algorithms.Check.check_bipartite",
        "documentation": {}
    },
    {
        "label": "check_pangram",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Check.check_pangram",
        "description": "python-prac.Overflow._Algorithms.Check.check_pangram",
        "peekOfCode": "def check_pangram(input_string):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for ch in alphabet:\n        if ch not in input_string.lower():\n            return False\n    return True",
        "detail": "python-prac.Overflow._Algorithms.Check.check_pangram",
        "documentation": {}
    },
    {
        "label": "is_merge_recursive",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Check.merge_string_checker",
        "description": "python-prac.Overflow._Algorithms.Check.merge_string_checker",
        "peekOfCode": "def is_merge_recursive(s, part1, part2):\n    if not part1:\n        return s == part2\n    if not part2:\n        return s == part1\n    if not s:\n        return part1 + part2 == \"\"\n    if s[0] == part1[0] and is_merge_recursive(s[1:], part1[1:], part2):\n        return True\n    if s[0] == part2[0] and is_merge_recursive(s[1:], part1, part2[1:]):",
        "detail": "python-prac.Overflow._Algorithms.Check.merge_string_checker",
        "documentation": {}
    },
    {
        "label": "is_merge_iterative",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Check.merge_string_checker",
        "description": "python-prac.Overflow._Algorithms.Check.merge_string_checker",
        "peekOfCode": "def is_merge_iterative(s, part1, part2):\n    tuple_list = [(s, part1, part2)]\n    while tuple_list:\n        string, p1, p2 = tuple_list.pop()\n        if string:\n            if p1 and string[0] == p1[0]:\n                tuple_list.append((string[1:], p1[1:], p2))\n            if p2 and string[0] == p2[0]:\n                tuple_list.append((string[1:], p1, p2[1:]))\n        else:",
        "detail": "python-prac.Overflow._Algorithms.Check.merge_string_checker",
        "documentation": {}
    },
    {
        "label": "prime_check",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Check.prime_check",
        "description": "python-prac.Overflow._Algorithms.Check.prime_check",
        "peekOfCode": "def prime_check(n):\n    \"\"\"Return True if n is a prime number\n    Else return False.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False",
        "detail": "python-prac.Overflow._Algorithms.Check.prime_check",
        "documentation": {}
    },
    {
        "label": "TrieNode",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.add_and_search",
        "description": "python-prac.Overflow._Algorithms.Search.add_and_search",
        "peekOfCode": "class TrieNode(object):\n    def __init__(self, letter, is_terminal=False):\n        self.children = dict()\n        self.letter = letter\n        self.is_terminal = is_terminal\nclass WordDictionary(object):\n    def __init__(self):\n        self.root = TrieNode(\"\")\n    def add_word(self, word):\n        cur = self.root",
        "detail": "python-prac.Overflow._Algorithms.Search.add_and_search",
        "documentation": {}
    },
    {
        "label": "WordDictionary",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.add_and_search",
        "description": "python-prac.Overflow._Algorithms.Search.add_and_search",
        "peekOfCode": "class WordDictionary(object):\n    def __init__(self):\n        self.root = TrieNode(\"\")\n    def add_word(self, word):\n        cur = self.root\n        for letter in word:\n            if letter not in cur.children:\n                cur.children[letter] = TrieNode(letter)\n            cur = cur.children[letter]\n        cur.is_terminal = True",
        "detail": "python-prac.Overflow._Algorithms.Search.add_and_search",
        "documentation": {}
    },
    {
        "label": "WordDictionary2",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.add_and_search",
        "description": "python-prac.Overflow._Algorithms.Search.add_and_search",
        "peekOfCode": "class WordDictionary2(object):\n    def __init__(self):\n        self.word_dict = collections.defaultdict(list)\n    def add_word(self, word):\n        if word:\n            self.word_dict[len(word)].append(word)\n    def search(self, word):\n        if not word:\n            return False\n        if \".\" not in word:",
        "detail": "python-prac.Overflow._Algorithms.Search.add_and_search",
        "documentation": {}
    },
    {
        "label": "TrieNode",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.add_search_word_data_structures_trie",
        "description": "python-prac.Overflow._Algorithms.Search.add_search_word_data_structures_trie",
        "peekOfCode": "class TrieNode:\n    def __init__(self):\n        self.childNodes = {}\n        self.isEnd = False\nclass WordDictionary(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()",
        "detail": "python-prac.Overflow._Algorithms.Search.add_search_word_data_structures_trie",
        "documentation": {}
    },
    {
        "label": "WordDictionary",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.add_search_word_data_structures_trie",
        "description": "python-prac.Overflow._Algorithms.Search.add_search_word_data_structures_trie",
        "peekOfCode": "class WordDictionary(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n    def addWord(self, word):\n        \"\"\"\n        Adds a word into the data structure.\n        :type word: str",
        "detail": "python-prac.Overflow._Algorithms.Search.add_search_word_data_structures_trie",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "description": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "peekOfCode": "class Node:\n    def __init__(self, pos_x, pos_y, goal_x, goal_y, parent):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n        self.pos = (pos_y, pos_x)\n        self.goal_x = goal_x\n        self.goal_y = goal_y\n        self.parent = parent\nclass BreadthFirstSearch:\n    \"\"\"",
        "detail": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "documentation": {}
    },
    {
        "label": "BreadthFirstSearch",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "description": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "peekOfCode": "class BreadthFirstSearch:\n    \"\"\"\n    >>> bfs = BreadthFirstSearch((0, 0), (len(grid) - 1, len(grid[0]) - 1))\n    >>> (bfs.start.pos_y + delta[3][0], bfs.start.pos_x + delta[3][1])\n    (0, 1)\n    >>> [x.pos for x in bfs.get_successors(bfs.start)]\n    [(1, 0), (0, 1)]\n    >>> (bfs.start.pos_y + delta[2][0], bfs.start.pos_x + delta[2][1])\n    (1, 0)\n    >>> bfs.retrace_path(bfs.start)",
        "detail": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "documentation": {}
    },
    {
        "label": "BidirectionalBreadthFirstSearch",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "description": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "peekOfCode": "class BidirectionalBreadthFirstSearch:\n    \"\"\"\n    >>> bd_bfs = BidirectionalBreadthFirstSearch((0, 0), (len(grid) - 1,\n    ...                                                   len(grid[0]) - 1))\n    >>> bd_bfs.fwd_bfs.start.pos == bd_bfs.bwd_bfs.target.pos\n    True\n    >>> bd_bfs.retrace_bidirectional_path(bd_bfs.fwd_bfs.start,\n    ...                                     bd_bfs.bwd_bfs.start)\n    [(0, 0)]\n    >>> bd_bfs.search()  # doctest: +NORMALIZE_WHITESPACE",
        "detail": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "description": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "peekOfCode": "grid = [\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0],  # 0 are free path whereas 1's are obstacles\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0, 0, 0],\n    [1, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0],\n]\ndelta = [[-1, 0], [0, -1], [1, 0], [0, 1]]  # up, left, down, right",
        "detail": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "description": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "peekOfCode": "delta = [[-1, 0], [0, -1], [1, 0], [0, 1]]  # up, left, down, right\nclass Node:\n    def __init__(self, pos_x, pos_y, goal_x, goal_y, parent):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n        self.pos = (pos_y, pos_x)\n        self.goal_x = goal_x\n        self.goal_y = goal_y\n        self.parent = parent\nclass BreadthFirstSearch:",
        "detail": "python-prac.Overflow._Algorithms.Search.bidirectional_breadth_first_search",
        "documentation": {}
    },
    {
        "label": "BoyerMooreSearch",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "description": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "peekOfCode": "class BoyerMooreSearch:\n    def __init__(self, text: str, pattern: str):\n        self.text, self.pattern = text, pattern\n        self.textLen, self.patLen = len(text), len(pattern)\n    def match_in_pattern(self, char: str) -> int:\n        \"\"\"finds the index of char in pattern in reverse order\n        Parameters :\n            char (chr): character to be searched\n        Returns :\n            i (int): index of char from last in pattern",
        "detail": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "description": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "peekOfCode": "text = \"ABAABA\"\npattern = \"AB\"\nbms = BoyerMooreSearch(text, pattern)\npositions = bms.bad_character_heuristic()\nif len(positions) == 0:\n    print(\"No match found\")\nelse:\n    print(\"Pattern found in following positions: \")\n    print(positions)",
        "detail": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "description": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "peekOfCode": "pattern = \"AB\"\nbms = BoyerMooreSearch(text, pattern)\npositions = bms.bad_character_heuristic()\nif len(positions) == 0:\n    print(\"No match found\")\nelse:\n    print(\"Pattern found in following positions: \")\n    print(positions)",
        "detail": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "documentation": {}
    },
    {
        "label": "bms",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "description": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "peekOfCode": "bms = BoyerMooreSearch(text, pattern)\npositions = bms.bad_character_heuristic()\nif len(positions) == 0:\n    print(\"No match found\")\nelse:\n    print(\"Pattern found in following positions: \")\n    print(positions)",
        "detail": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "documentation": {}
    },
    {
        "label": "positions",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "description": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "peekOfCode": "positions = bms.bad_character_heuristic()\nif len(positions) == 0:\n    print(\"No match found\")\nelse:\n    print(\"Pattern found in following positions: \")\n    print(positions)",
        "detail": "python-prac.Overflow._Algorithms.Search.boyer_moore_search",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.breadth_first_search",
        "description": "python-prac.Overflow._Algorithms.Search.breadth_first_search",
        "peekOfCode": "class Graph:\n    def __init__(self) -> None:\n        self.vertices = {}\n    def print_graph(self) -> None:\n        \"\"\"\n        prints adjacency list representation of graaph\n        >>> g = Graph()\n        >>> g.print_graph()\n        >>> g.add_edge(0, 1)\n        >>> g.print_graph()",
        "detail": "python-prac.Overflow._Algorithms.Search.breadth_first_search",
        "documentation": {}
    },
    {
        "label": "breadth_first_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.breadth_first_search_2",
        "description": "python-prac.Overflow._Algorithms.Search.breadth_first_search_2",
        "peekOfCode": "def breadth_first_search(graph: dict, start: str) -> set[str]:\n    \"\"\"\n    >>> ''.join(sorted(breadth_first_search(G, 'A')))\n    'ABCDEF'\n    \"\"\"\n    explored = {start}\n    queue = [start]\n    while queue:\n        v = queue.pop(0)  # queue.popleft()\n        for w in graph[v]:",
        "detail": "python-prac.Overflow._Algorithms.Search.breadth_first_search_2",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.breadth_first_search_2",
        "description": "python-prac.Overflow._Algorithms.Search.breadth_first_search_2",
        "peekOfCode": "G = {\n    \"A\": [\"B\", \"C\"],\n    \"B\": [\"A\", \"D\", \"E\"],\n    \"C\": [\"A\", \"F\"],\n    \"D\": [\"B\"],\n    \"E\": [\"B\", \"F\"],\n    \"F\": [\"C\", \"E\"],\n}\ndef breadth_first_search(graph: dict, start: str) -> set[str]:\n    \"\"\"",
        "detail": "python-prac.Overflow._Algorithms.Search.breadth_first_search_2",
        "documentation": {}
    },
    {
        "label": "depth_first_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.depth_first_search",
        "description": "python-prac.Overflow._Algorithms.Search.depth_first_search",
        "peekOfCode": "def depth_first_search(graph: dict, start: str) -> set[int]:\n    \"\"\"Depth First Search on Graph\n    :param graph: directed graph in dictionary format\n    :param vertex: starting vertex as a string\n    :returns: the trace of the search\n    >>> G = { \"A\": [\"B\", \"C\", \"D\"], \"B\": [\"A\", \"D\", \"E\"],\n    ... \"C\": [\"A\", \"F\"], \"D\": [\"B\", \"D\"], \"E\": [\"B\", \"F\"],\n    ... \"F\": [\"C\", \"E\", \"G\"], \"G\": [\"F\"] }\n    >>> start = \"A\"\n    >>> output_G = list({'A', 'B', 'C', 'D', 'E', 'F', 'G'})",
        "detail": "python-prac.Overflow._Algorithms.Search.depth_first_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.depth_first_search",
        "description": "python-prac.Overflow._Algorithms.Search.depth_first_search",
        "peekOfCode": "G = {\n    \"A\": [\"B\", \"C\", \"D\"],\n    \"B\": [\"A\", \"D\", \"E\"],\n    \"C\": [\"A\", \"F\"],\n    \"D\": [\"B\", \"D\"],\n    \"E\": [\"B\", \"F\"],\n    \"F\": [\"C\", \"E\", \"G\"],\n    \"G\": [\"F\"],\n}\nif __name__ == \"__main__\":",
        "detail": "python-prac.Overflow._Algorithms.Search.depth_first_search",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.depth_first_search_2",
        "description": "python-prac.Overflow._Algorithms.Search.depth_first_search_2",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertex = {}\n    # for printing the Graph vertices\n    def print_graph(self) -> None:\n        print(self.vertex)\n        for i in self.vertex:\n            print(i, \" -> \", \" -> \".join([str(j) for j in self.vertex[i]]))\n    # for adding the edge between two vertices\n    def add_edge(self, from_vertex: int, to_vertex: int) -> None:",
        "detail": "python-prac.Overflow._Algorithms.Search.depth_first_search_2",
        "documentation": {}
    },
    {
        "label": "double_linear_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.double_linear_search",
        "description": "python-prac.Overflow._Algorithms.Search.double_linear_search",
        "peekOfCode": "def double_linear_search(array: list[int], search_item: int) -> int:\n    \"\"\"\n    Iterate through the array from both sides to find the index of search_item.\n    :param array: the array to be searched\n    :param search_item: the item to be searched\n    :return the index of search_item, if search_item is in array, else -1\n    Examples:\n    >>> double_linear_search([1, 5, 5, 10], 1)\n    0\n    >>> double_linear_search([1, 5, 5, 10], 5)",
        "detail": "python-prac.Overflow._Algorithms.Search.double_linear_search",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.double_linear_search_recursion",
        "description": "python-prac.Overflow._Algorithms.Search.double_linear_search_recursion",
        "peekOfCode": "def search(list_data: list, key: int, left: int = 0, right: int = 0) -> int:\n    \"\"\"\n    Iterate through the array to find the index of key using recursion.\n    :param list_data: the list to be searched\n    :param key: the key to be searched\n    :param left: the index of first element\n    :param right: the index of last element\n    :return: the index of key value if found, -1 otherwise.\n    >>> search(list(range(0, 11)), 5)\n    5",
        "detail": "python-prac.Overflow._Algorithms.Search.double_linear_search_recursion",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.fibonacci_search",
        "description": "python-prac.Overflow._Algorithms.Search.fibonacci_search",
        "peekOfCode": "def fibonacci(k: int) -> int:\n    \"\"\"Finds fibonacci number in index k.\n    Parameters\n    ----------\n    k :\n        Index of fibonacci.\n    Returns\n    -------\n    int\n        Fibonacci number in position k.",
        "detail": "python-prac.Overflow._Algorithms.Search.fibonacci_search",
        "documentation": {}
    },
    {
        "label": "fibonacci_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.fibonacci_search",
        "description": "python-prac.Overflow._Algorithms.Search.fibonacci_search",
        "peekOfCode": "def fibonacci_search(arr: list, val: int) -> int:\n    \"\"\"A pure Python implementation of a fibonacci search algorithm.\n    Parameters\n    ----------\n    arr\n        List of sorted elements.\n    val\n        Element to search in list.\n    Returns\n    -------",
        "detail": "python-prac.Overflow._Algorithms.Search.fibonacci_search",
        "documentation": {}
    },
    {
        "label": "interpolation_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.interpolation_search",
        "description": "python-prac.Overflow._Algorithms.Search.interpolation_search",
        "peekOfCode": "def interpolation_search(array: List[int], search_key: int) -> int:\n    \"\"\"\n    :param array: The array to be searched.\n    :param search_key: The key to be searched in the array.\n    :returns: Index of search_key in array if found, else -1.\n    Example\n    >>> interpolation_search([1, 10, 12, 15, 20, 41, 55], 20)\n    4\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], 55)\n    -1",
        "detail": "python-prac.Overflow._Algorithms.Search.interpolation_search",
        "documentation": {}
    },
    {
        "label": "jump_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.jump_search",
        "description": "python-prac.Overflow._Algorithms.Search.jump_search",
        "peekOfCode": "def jump_search(arr, target):\n    \"\"\"Jump Search\n        Worst-case Complexity: O(√n) (root(n))\n        All items in list must be sorted like binary search\n        Find block that contains target value and search it linearly in that block\n        It returns a first target value in array\n        reference: https://en.wikipedia.org/wiki/Jump_search\n    \"\"\"\n    n = len(arr)\n    block_size = int(math.sqrt(n))",
        "detail": "python-prac.Overflow._Algorithms.Search.jump_search",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.linear_search",
        "description": "python-prac.Overflow._Algorithms.Search.linear_search",
        "peekOfCode": "def linear_search(array, query):\n    for i in range(len(array)):\n        if array[i] == query:\n            return i\n    return -1",
        "detail": "python-prac.Overflow._Algorithms.Search.linear_search",
        "documentation": {}
    },
    {
        "label": "find_path",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.maze_search",
        "description": "python-prac.Overflow._Algorithms.Search.maze_search",
        "peekOfCode": "def find_path(maze):\n    cnt = dfs(maze, 0, 0, 0, -1)\n    return cnt\ndef dfs(maze, i, j, depth, cnt):\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    row = len(maze)\n    col = len(maze[0])\n    if i == row - 1 and j == col - 1:\n        if cnt == -1:\n            cnt = depth",
        "detail": "python-prac.Overflow._Algorithms.Search.maze_search",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.maze_search",
        "description": "python-prac.Overflow._Algorithms.Search.maze_search",
        "peekOfCode": "def dfs(maze, i, j, depth, cnt):\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    row = len(maze)\n    col = len(maze[0])\n    if i == row - 1 and j == col - 1:\n        if cnt == -1:\n            cnt = depth\n        else:\n            if cnt > depth:\n                cnt = depth",
        "detail": "python-prac.Overflow._Algorithms.Search.maze_search",
        "documentation": {}
    },
    {
        "label": "naive_pattern_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.naive_string_search",
        "description": "python-prac.Overflow._Algorithms.Search.naive_string_search",
        "peekOfCode": "def naive_pattern_search(s: str, pattern: str) -> list:\n    \"\"\"\n    >>> naive_pattern_search(\"ABAAABCDBBABCDDEBCABC\", \"ABC\")\n    [4, 10, 18]\n    >>> naive_pattern_search(\"ABC\", \"ABAAABCDBBABCDDEBCABC\")\n    []\n    >>> naive_pattern_search(\"\", \"ABC\")\n    []\n    >>> naive_pattern_search(\"TEST\", \"TEST\")\n    [0]",
        "detail": "python-prac.Overflow._Algorithms.Search.naive_string_search",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "description": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "peekOfCode": "class Node:\n    \"\"\"Binary Search Tree Node\"\"\"\n    def __init__(self, key, freq):\n        self.key = key\n        self.freq = freq\n    def __str__(self):\n        \"\"\"\n        >>> str(Node(1, 2))\n        'Node(key=1, freq=2)'\n        \"\"\"",
        "detail": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "documentation": {}
    },
    {
        "label": "print_binary_search_tree",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "description": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "peekOfCode": "def print_binary_search_tree(root, key, i, j, parent, is_left):\n    \"\"\"\n    Recursive function to print a BST from a root table.\n    >>> key = [3, 8, 9, 10, 17, 21]\n    >>> root = [[0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 3], [0, 0, 2, 3, 3, 3], \\\n                [0, 0, 0, 3, 3, 3], [0, 0, 0, 0, 4, 5], [0, 0, 0, 0, 0, 5]]\n    >>> print_binary_search_tree(root, key, 0, 5, -1, False)\n    8 is the root of the binary search tree.\n    3 is the left child of key 8.\n    10 is the right child of key 8.",
        "detail": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "documentation": {}
    },
    {
        "label": "find_optimal_binary_search_tree",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "description": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "peekOfCode": "def find_optimal_binary_search_tree(nodes):\n    \"\"\"\n    This function calculates and prints the optimal binary search tree.\n    The dynamic programming algorithm below runs in O(n^2) time.\n    Implemented from CLRS (Introduction to Algorithms) book.\n    https://en.wikipedia.org/wiki/Introduction_to_Algorithms\n    >>> find_optimal_binary_search_tree([Node(12, 8), Node(10, 34), Node(20, 50), \\\n                                         Node(42, 3), Node(25, 40), Node(37, 30)])\n    Binary search tree nodes:\n    Node(key=10, freq=34)",
        "detail": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "description": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "peekOfCode": "def main():\n    # A sample binary search tree\n    nodes = [Node(i, randint(1, 50)) for i in range(10, 0, -1)]\n    find_optimal_binary_search_tree(nodes)\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-prac.Overflow._Algorithms.Search.optimal_binary_search_tree",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "def binary_search(array, n):\n\tarr = sorted(array)\n\tto_return = False \n\tfirst_elem = 0\n\tlast_elem = len(arr) - 1\n\twhile (first_elem <= last_elem):\n\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "Ordered_binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "def Ordered_binary_search(arra, elem):\n\tif (len(arra) == 0):\n\t\treturn False\n\tmiddle = len(arra) // 2\t\n\tif (arra[middle] == elem):\n\t\treturn True \n\telse:\t\n\t\tif (elem > arra[middle]):\n\t\t\treturn binary_search(arra[middle:], elem)\n\t\telse: ",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\tarr",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "\tarr = sorted(array)\n\tto_return = False \n\tfirst_elem = 0\n\tlast_elem = len(arr) - 1\n\twhile (first_elem <= last_elem):\n\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\tto_return",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "\tto_return = False \n\tfirst_elem = 0\n\tlast_elem = len(arr) - 1\n\twhile (first_elem <= last_elem):\n\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:\n\t\t\tif (n > arr[mid]):",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\tfirst_elem",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "\tfirst_elem = 0\n\tlast_elem = len(arr) - 1\n\twhile (first_elem <= last_elem):\n\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:\n\t\t\tif (n > arr[mid]):\n\t\t\t\tfirst_elem = mid + 1",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\tlast_elem",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "\tlast_elem = len(arr) - 1\n\twhile (first_elem <= last_elem):\n\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:\n\t\t\tif (n > arr[mid]):\n\t\t\t\tfirst_elem = mid + 1\n\t\t\telse:",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\t\tmid",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "\t\tmid = (first_elem + last_elem) // 2\n\t\tif (arr[mid] == n):\n\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:\n\t\t\tif (n > arr[mid]):\n\t\t\t\tfirst_elem = mid + 1\n\t\t\telse:\n\t\t\t\tlast_elem = mid - 1\n\treturn to_return\t\t\t",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\t\t\tto_return",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "\t\t\tto_return = True\n\t\t\tbreak\n\t\telse:\n\t\t\tif (n > arr[mid]):\n\t\t\t\tfirst_elem = mid + 1\n\t\t\telse:\n\t\t\t\tlast_elem = mid - 1\n\treturn to_return\t\t\t\ndef Ordered_binary_search(arra, elem):\n\tif (len(arra) == 0):",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfirst_elem",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "\t\t\t\tfirst_elem = mid + 1\n\t\t\telse:\n\t\t\t\tlast_elem = mid - 1\n\treturn to_return\t\t\t\ndef Ordered_binary_search(arra, elem):\n\tif (len(arra) == 0):\n\t\treturn False\n\tmiddle = len(arra) // 2\t\n\tif (arra[middle] == elem):\n\t\treturn True ",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tlast_elem",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "\t\t\t\tlast_elem = mid - 1\n\treturn to_return\t\t\t\ndef Ordered_binary_search(arra, elem):\n\tif (len(arra) == 0):\n\t\treturn False\n\tmiddle = len(arra) // 2\t\n\tif (arra[middle] == elem):\n\t\treturn True \n\telse:\t\n\t\tif (elem > arra[middle]):",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "\tmiddle",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "\tmiddle = len(arra) // 2\t\n\tif (arra[middle] == elem):\n\t\treturn True \n\telse:\t\n\t\tif (elem > arra[middle]):\n\t\t\treturn binary_search(arra[middle:], elem)\n\t\telse: \n\t\t\treturn binary_search(arra[:middle], elem) \t\nnums = [0,23,54,5,32,78]\t\nprint Ordered_binary_search(nums, 32)\t",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "peekOfCode": "nums = [0,23,54,5,32,78]\t\nprint Ordered_binary_search(nums, 32)\t\nprint Ordered_binary_search(nums, 5)",
        "detail": "python-prac.Overflow._Algorithms.Search.ordered_binary_search",
        "documentation": {}
    },
    {
        "label": "search_insert",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.search_insert",
        "description": "python-prac.Overflow._Algorithms.Search.search_insert",
        "peekOfCode": "def search_insert(array, val):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if val > array[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low",
        "detail": "python-prac.Overflow._Algorithms.Search.search_insert",
        "documentation": {}
    },
    {
        "label": "search_range",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.search_range",
        "description": "python-prac.Overflow._Algorithms.Search.search_range",
        "peekOfCode": "def search_range(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = low + (high - low) // 2",
        "detail": "python-prac.Overflow._Algorithms.Search.search_range",
        "documentation": {}
    },
    {
        "label": "search_rotate",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.search_rotate",
        "description": "python-prac.Overflow._Algorithms.Search.search_rotate",
        "peekOfCode": "def search_rotate(array, val):\n    low, high = 0, len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if val == array[mid]:\n            return mid\n        if array[low] <= array[mid]:\n            if array[low] <= val <= array[mid]:\n                high = mid - 1\n            else:",
        "detail": "python-prac.Overflow._Algorithms.Search.search_rotate",
        "documentation": {}
    },
    {
        "label": "search_rotate_recur",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.search_rotate",
        "description": "python-prac.Overflow._Algorithms.Search.search_rotate",
        "peekOfCode": "def search_rotate_recur(array, low, high, val):\n    if low >= high:\n        return -1\n    mid = (low + high) // 2\n    if val == array[mid]:  # found element\n        return mid\n    if array[low] <= array[mid]:\n        if array[low] <= val <= array[mid]:\n            return search_rotate_recur(array, low, mid - 1, val)  # Search left\n        else:",
        "detail": "python-prac.Overflow._Algorithms.Search.search_rotate",
        "documentation": {}
    },
    {
        "label": "SearchScope",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Search.search_scope",
        "description": "python-prac.Overflow._Algorithms.Search.search_scope",
        "peekOfCode": "class SearchScope(object):\n    \"\"\"\n    Encapsulates the locations that pip is configured to search.\n    \"\"\"\n    __slots__ = [\"find_links\", \"index_urls\"]\n    @classmethod\n    def create(\n        cls,\n        find_links,  # type: List[str]\n        index_urls,  # type: List[str]",
        "detail": "python-prac.Overflow._Algorithms.Search.search_scope",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.search_scope",
        "description": "python-prac.Overflow._Algorithms.Search.search_scope",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SearchScope(object):\n    \"\"\"\n    Encapsulates the locations that pip is configured to search.\n    \"\"\"\n    __slots__ = [\"find_links\", \"index_urls\"]\n    @classmethod\n    def create(\n        cls,\n        find_links,  # type: List[str]",
        "detail": "python-prac.Overflow._Algorithms.Search.search_scope",
        "documentation": {}
    },
    {
        "label": "sentinel_linear_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.sentinel_linear_search",
        "description": "python-prac.Overflow._Algorithms.Search.sentinel_linear_search",
        "peekOfCode": "def sentinel_linear_search(sequence, target):\n    \"\"\"Pure implementation of sentinel linear search algorithm in Python\n    :param sequence: some sequence with comparable items\n    :param target: item value to search\n    :return: index of found item or None if item is not found\n    Examples:\n    >>> sentinel_linear_search([0, 5, 7, 10, 15], 0)\n    0\n    >>> sentinel_linear_search([0, 5, 7, 10, 15], 15)\n    4",
        "detail": "python-prac.Overflow._Algorithms.Search.sentinel_linear_search",
        "documentation": {}
    },
    {
        "label": "euclidean",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.similarity_search",
        "description": "python-prac.Overflow._Algorithms.Search.similarity_search",
        "peekOfCode": "def euclidean(input_a: np.ndarray, input_b: np.ndarray) -> float:\n    \"\"\"\n    Calculates euclidean distance between two data.\n    :param input_a: ndarray of first vector.\n    :param input_b: ndarray of second vector.\n    :return: Euclidean distance of input_a and input_b. By using math.sqrt(),\n             result will be float.\n    >>> euclidean(np.array([0]), np.array([1]))\n    1.0\n    >>> euclidean(np.array([0, 1]), np.array([1, 1]))",
        "detail": "python-prac.Overflow._Algorithms.Search.similarity_search",
        "documentation": {}
    },
    {
        "label": "similarity_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.similarity_search",
        "description": "python-prac.Overflow._Algorithms.Search.similarity_search",
        "peekOfCode": "def similarity_search(dataset: np.ndarray, value_array: np.ndarray) -> list:\n    \"\"\"\n    :param dataset: Set containing the vectors. Should be ndarray.\n    :param value_array: vector/vectors we want to know the nearest vector from dataset.\n    :return: Result will be a list containing\n            1. the nearest vector\n            2. distance from the vector\n    >>> dataset = np.array([[0], [1], [2]])\n    >>> value_array = np.array([[0]])\n    >>> similarity_search(dataset, value_array)",
        "detail": "python-prac.Overflow._Algorithms.Search.similarity_search",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.simple_binary_search",
        "description": "python-prac.Overflow._Algorithms.Search.simple_binary_search",
        "peekOfCode": "def binary_search(a_list: list[int], item: int) -> bool:\n    \"\"\"\n    >>> test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42]\n    >>> print(binary_search(test_list, 3))\n    False\n    >>> print(binary_search(test_list, 13))\n    True\n    >>> print(binary_search([4, 4, 5, 6, 7], 4))\n    True\n    >>> print(binary_search([4, 4, 5, 6, 7], -10))",
        "detail": "python-prac.Overflow._Algorithms.Search.simple_binary_search",
        "documentation": {}
    },
    {
        "label": "generate_neighbours",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "description": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "peekOfCode": "def generate_neighbours(path):\n    \"\"\"\n    Pure implementation of generating a dictionary of neighbors and the cost with each\n    neighbor, given a path file that includes a graph.\n    :param path: The path to the .txt file that includes the graph (e.g.tabudata2.txt)\n    :return dict_of_neighbours: Dictionary with key each node and value a list of lists\n        with the neighbors of the node and the cost (distance) for each neighbor.\n    Example of dict_of_neighbours:\n    >>) dict_of_neighbours[a]\n    [[b,20],[c,18],[d,22],[e,26]]",
        "detail": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "documentation": {}
    },
    {
        "label": "generate_first_solution",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "description": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "peekOfCode": "def generate_first_solution(path, dict_of_neighbours):\n    \"\"\"\n    Pure implementation of generating the first solution for the Tabu search to start,\n    with the redundant resolution strategy. That means that we start from the starting\n    node (e.g. node 'a'), then we go to the city nearest (lowest distance) to this node\n    (let's assume is node 'c'), then we go to the nearest city of the node 'c', etc.\n    till we have visited all cities and return to the starting node.\n    :param path: The path to the .txt file that includes the graph (e.g.tabudata2.txt)\n    :param dict_of_neighbours: Dictionary with key each node and value a list of lists\n        with the neighbors of the node and the cost (distance) for each neighbor.",
        "detail": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "documentation": {}
    },
    {
        "label": "find_neighborhood",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "description": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "peekOfCode": "def find_neighborhood(solution, dict_of_neighbours):\n    \"\"\"\n    Pure implementation of generating the neighborhood (sorted by total distance of\n    each solution from lowest to highest) of a solution with 1-1 exchange method, that\n    means we exchange each node in a solution with each other node and generating a\n    number of solution named neighborhood.\n    :param solution: The solution in which we want to find the neighborhood.\n    :param dict_of_neighbours: Dictionary with key each node and value a list of lists\n        with the neighbors of the node and the cost (distance) for each neighbor.\n    :return neighborhood_of_solution: A list that includes the solutions and the total",
        "detail": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "documentation": {}
    },
    {
        "label": "tabu_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "description": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "peekOfCode": "def tabu_search(\n    first_solution, distance_of_first_solution, dict_of_neighbours, iters, size\n):\n    \"\"\"\n    Pure implementation of Tabu search algorithm for a Travelling Salesman Problem in\n    Python.\n    :param first_solution: The solution for the first iteration of Tabu search using\n        the redundant resolution strategy in a list.\n    :param distance_of_first_solution: The total distance that Travelling Salesman will\n        travel, if he follows the path in first_solution.",
        "detail": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "description": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "peekOfCode": "def main(args=None):\n    dict_of_neighbours = generate_neighbours(args.File)\n    first_solution, distance_of_first_solution = generate_first_solution(\n        args.File, dict_of_neighbours\n    )\n    best_sol, best_cost = tabu_search(\n        first_solution,\n        distance_of_first_solution,\n        dict_of_neighbours,\n        args.Iterations,",
        "detail": "python-prac.Overflow._Algorithms.Search.tabu_search",
        "documentation": {}
    },
    {
        "label": "lin_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "peekOfCode": "def lin_search(left: int, right: int, array: List[int], target: int) -> int:\n    \"\"\"Perform linear search in list. Returns -1 if element is not found.\n    Parameters\n    ----------\n    left : int\n        left index bound.\n    right : int\n        right index bound.\n    array : List[int]\n        List of elements to be searched on",
        "detail": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "documentation": {}
    },
    {
        "label": "ite_ternary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "peekOfCode": "def ite_ternary_search(array: List[int], target: int) -> int:\n    \"\"\"Iterative method of the ternary search algorithm.\n    >>> test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42]\n    >>> ite_ternary_search(test_list, 3)\n    -1\n    >>> ite_ternary_search(test_list, 13)\n    4\n    >>> ite_ternary_search([4, 5, 6, 7], 4)\n    0\n    >>> ite_ternary_search([4, 5, 6, 7], -10)",
        "detail": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "documentation": {}
    },
    {
        "label": "rec_ternary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "peekOfCode": "def rec_ternary_search(left: int, right: int, array: List[int], target: int) -> int:\n    \"\"\"Recursive method of the ternary search algorithm.\n    >>> test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42]\n    >>> rec_ternary_search(0, len(test_list), test_list, 3)\n    -1\n    >>> rec_ternary_search(4, len(test_list), test_list, 42)\n    8\n    >>> rec_ternary_search(0, 2, [4, 5, 6, 7], 4)\n    0\n    >>> rec_ternary_search(0, 3, [4, 5, 6, 7], -10)",
        "detail": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "documentation": {}
    },
    {
        "label": "precision",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "description": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "peekOfCode": "precision = 10\n# This is the linear search that will occur after the search space has become smaller.\ndef lin_search(left: int, right: int, array: List[int], target: int) -> int:\n    \"\"\"Perform linear search in list. Returns -1 if element is not found.\n    Parameters\n    ----------\n    left : int\n        left index bound.\n    right : int\n        right index bound.",
        "detail": "python-prac.Overflow._Algorithms.Search.ternary_search",
        "documentation": {}
    },
    {
        "label": "bitonic_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.bitonic_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.bitonic_sort",
        "peekOfCode": "def bitonic_sort(arr, reverse=False):\n    \"\"\"\n    bitonic sort is sorting algorithm to use multiple process, but this code not containing parallel process\n    It can sort only array that sizes power of 2\n    It can sort array in both increasing order and decreasing order by giving argument true(increasing) and false(decreasing)\n    Worst-case in parallel: O(log(n)^2)\n    Worst-case in non-parallel: O(nlog(n)^2)\n    reference: https://en.wikipedia.org/wiki/Bitonic_sorter\n    \"\"\"\n    def compare(arr, reverse):",
        "detail": "python-prac.Overflow._Algorithms.Sort.bitonic_sort",
        "documentation": {}
    },
    {
        "label": "bogo_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.bogo_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.bogo_sort",
        "peekOfCode": "def bogo_sort(arr, simulation=False):\n    \"\"\"Bogo Sort\n        Best Case Complexity: O(n)\n        Worst Case Complexity: O(∞)\n        Average Case Complexity: O(n(n-1)!)\n    \"\"\"\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    def is_sorted(arr):",
        "detail": "python-prac.Overflow._Algorithms.Sort.bogo_sort",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.bubble_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.bubble_sort",
        "peekOfCode": "def bubble_sort(arr, simulation=False):\n    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    n = len(arr)\n    swapped = True\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    x = -1\n    while swapped:",
        "detail": "python-prac.Overflow._Algorithms.Sort.bubble_sort",
        "documentation": {}
    },
    {
        "label": "bucket_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.bucket_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.bucket_sort",
        "peekOfCode": "def bucket_sort(arr):\n    \"\"\" Bucket Sort\n        Complexity: O(n^2)\n        The complexity is dominated by nextSort\n    \"\"\"\n    # The number of buckets and make buckets\n    num_buckets = len(arr)\n    buckets = [[] for bucket in range(num_buckets)]\n    # Assign values into bucket_sort\n    for value in arr:",
        "detail": "python-prac.Overflow._Algorithms.Sort.bucket_sort",
        "documentation": {}
    },
    {
        "label": "next_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.bucket_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.bucket_sort",
        "peekOfCode": "def next_sort(arr):\n    # We will use insertion sort here.\n    for i in range(1, len(arr)):\n        j = i - 1\n        key = arr[i]\n        while arr[j] > key and j >= 0:\n            arr[j + 1] = arr[j]\n            j = j - 1\n        arr[j + 1] = key\n    return arr",
        "detail": "python-prac.Overflow._Algorithms.Sort.bucket_sort",
        "documentation": {}
    },
    {
        "label": "cocktail_shaker_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.cocktail_shaker_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.cocktail_shaker_sort",
        "peekOfCode": "def cocktail_shaker_sort(arr):\n    \"\"\"\n    Cocktail_shaker_sort\n    Sorting a given array\n    mutation of bubble sort\n    reference: https://en.wikipedia.org/wiki/Cocktail_shaker_sort\n    Worst-case performance: O(N^2)\n    \"\"\"\n    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]",
        "detail": "python-prac.Overflow._Algorithms.Sort.cocktail_shaker_sort",
        "documentation": {}
    },
    {
        "label": "comb_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.comb_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.comb_sort",
        "peekOfCode": "def comb_sort(arr):\n    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:",
        "detail": "python-prac.Overflow._Algorithms.Sort.comb_sort",
        "documentation": {}
    },
    {
        "label": "counting_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.counting_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.counting_sort",
        "peekOfCode": "def counting_sort(arr):\n    \"\"\"\n    Counting_sort\n    Sorting a array which has no element greater than k\n    Creating a new temp_arr,where temp_arr[i] contain the number of\n    element less than or equal to i in the arr\n    Then placing the number i into a correct position in the result_arr\n    return the result_arr\n    Complexity: 0(n)\n    \"\"\"",
        "detail": "python-prac.Overflow._Algorithms.Sort.counting_sort",
        "documentation": {}
    },
    {
        "label": "cycle_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.cycle_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.cycle_sort",
        "peekOfCode": "def cycle_sort(arr):\n    \"\"\"\n    cycle_sort\n    This is based on the idea that the permutations to be sorted\n    can be decomposed into cycles,\n    and the results can be individually sorted by cycling.\n    reference: https://en.wikipedia.org/wiki/Cycle_sort\n    Average time complexity : O(N^2)\n    Worst case time complexity : O(N^2)\n    \"\"\"",
        "detail": "python-prac.Overflow._Algorithms.Sort.cycle_sort",
        "documentation": {}
    },
    {
        "label": "double_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.double_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.double_sort",
        "peekOfCode": "def double_sort(lst):\n    \"\"\"this sorting algorithm sorts an array using the principle of bubble sort,\n    but does it both from left to right and right to left,\n    hence i decided to call it \"double sort\"\n    :param collection: mutable ordered sequence of elements\n    :return: the same collection in ascending order\n    Examples:\n    >>> double_sort([-1 ,-2 ,-3 ,-4 ,-5 ,-6 ,-7])\n    [-7, -6, -5, -4, -3, -2, -1]\n    >>> double_sort([])",
        "detail": "python-prac.Overflow._Algorithms.Sort.double_sort",
        "documentation": {}
    },
    {
        "label": "FileSplitter",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "peekOfCode": "class FileSplitter:\n    BLOCK_FILENAME_FORMAT = \"block_{0}.dat\"\n    def __init__(self, filename):\n        self.filename = filename\n        self.block_filenames = []\n    def write_block(self, data, block_number):\n        filename = self.BLOCK_FILENAME_FORMAT.format(block_number)\n        with open(filename, \"w\") as file:\n            file.write(data)\n        self.block_filenames.append(filename)",
        "detail": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "documentation": {}
    },
    {
        "label": "NWayMerge",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "peekOfCode": "class NWayMerge:\n    def select(self, choices):\n        min_index = -1\n        min_str = None\n        for i in range(len(choices)):\n            if min_str is None or choices[i] < min_str:\n                min_index = i\n        return min_index\nclass FilesArray:\n    def __init__(self, files):",
        "detail": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "documentation": {}
    },
    {
        "label": "FilesArray",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "peekOfCode": "class FilesArray:\n    def __init__(self, files):\n        self.files = files\n        self.empty = set()\n        self.num_buffers = len(files)\n        self.buffers = {i: None for i in range(self.num_buffers)}\n    def get_dict(self):\n        return {\n            i: self.buffers[i] for i in range(self.num_buffers) if i not in self.empty\n        }",
        "detail": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "documentation": {}
    },
    {
        "label": "FileMerger",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "peekOfCode": "class FileMerger:\n    def __init__(self, merge_strategy):\n        self.merge_strategy = merge_strategy\n    def merge(self, filenames, outfilename, buffer_size):\n        buffers = FilesArray(self.get_file_handles(filenames, buffer_size))\n        with open(outfilename, \"w\", buffer_size) as outfile:\n            while buffers.refresh():\n                min_index = self.merge_strategy.select(buffers.get_dict())\n                outfile.write(buffers.unshift(min_index))\n    def get_file_handles(self, filenames, buffer_size):",
        "detail": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "documentation": {}
    },
    {
        "label": "ExternalSort",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "peekOfCode": "class ExternalSort:\n    def __init__(self, block_size):\n        self.block_size = block_size\n    def sort(self, filename, sort_key=None):\n        num_blocks = self.get_number_blocks(filename, self.block_size)\n        splitter = FileSplitter(filename)\n        splitter.split(self.block_size, sort_key)\n        merger = FileMerger(NWayMerge())\n        buffer_size = self.block_size / (num_blocks + 1)\n        merger.merge(splitter.get_block_filenames(), filename + \".out\", buffer_size)",
        "detail": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "documentation": {}
    },
    {
        "label": "parse_memory",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "peekOfCode": "def parse_memory(string):\n    if string[-1].lower() == \"k\":\n        return int(string[:-1]) * 1024\n    elif string[-1].lower() == \"m\":\n        return int(string[:-1]) * 1024 * 1024\n    elif string[-1].lower() == \"g\":\n        return int(string[:-1]) * 1024 * 1024 * 1024\n    else:\n        return int(string)\ndef main():",
        "detail": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"-m\", \"--mem\", help=\"amount of memory to use for sorting\", default=\"100M\"\n    )\n    parser.add_argument(\n        \"filename\", metavar=\"<filename>\", nargs=1, help=\"name of file to sort\"\n    )\n    args = parser.parse_args()\n    sorter = ExternalSort(parse_memory(args.mem))",
        "detail": "python-prac.Overflow._Algorithms.Sort.external_sort",
        "documentation": {}
    },
    {
        "label": "gnome_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.gnome_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.gnome_sort",
        "peekOfCode": "def gnome_sort(arr):\n    n = len(arr)\n    index = 0\n    while index < n:\n        if index == 0 or arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return arr",
        "detail": "python-prac.Overflow._Algorithms.Sort.gnome_sort",
        "documentation": {}
    },
    {
        "label": "print_stack",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "peekOfCode": "def print_stack(stack, clothes):\n    order = 1\n    while stack:\n        current_clothing = stack.pop()\n        print(order, clothes[current_clothing])\n        order += 1\ndef depth_first_search(u, visited, graph):\n    visited[u] = 1\n    for v in graph[u]:\n        if not visited[v]:",
        "detail": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "depth_first_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "peekOfCode": "def depth_first_search(u, visited, graph):\n    visited[u] = 1\n    for v in graph[u]:\n        if not visited[v]:\n            depth_first_search(v, visited, graph)\n    stack.append(u)\ndef topological_sort(graph, visited):\n    for v in range(len(graph)):\n        if not visited[v]:\n            depth_first_search(v, visited, graph)",
        "detail": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "topological_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "peekOfCode": "def topological_sort(graph, visited):\n    for v in range(len(graph)):\n        if not visited[v]:\n            depth_first_search(v, visited, graph)\nif __name__ == \"__main__\":\n    topological_sort(graph, visited)\n    print(stack)\n    print_stack(stack, clothes)",
        "detail": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "clothes",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "peekOfCode": "clothes = {\n    0: \"underwear\",\n    1: \"pants\",\n    2: \"belt\",\n    3: \"suit\",\n    4: \"shoe\",\n    5: \"socks\",\n    6: \"shirt\",\n    7: \"tie\",\n    8: \"watch\",",
        "detail": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "peekOfCode": "graph = [[1, 4], [2, 4], [3], [], [], [4], [2, 7], [3], []]\nvisited = [0 for x in range(len(graph))]\nstack = []\ndef print_stack(stack, clothes):\n    order = 1\n    while stack:\n        current_clothing = stack.pop()\n        print(order, clothes[current_clothing])\n        order += 1\ndef depth_first_search(u, visited, graph):",
        "detail": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "peekOfCode": "visited = [0 for x in range(len(graph))]\nstack = []\ndef print_stack(stack, clothes):\n    order = 1\n    while stack:\n        current_clothing = stack.pop()\n        print(order, clothes[current_clothing])\n        order += 1\ndef depth_first_search(u, visited, graph):\n    visited[u] = 1",
        "detail": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "stack",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "peekOfCode": "stack = []\ndef print_stack(stack, clothes):\n    order = 1\n    while stack:\n        current_clothing = stack.pop()\n        print(order, clothes[current_clothing])\n        order += 1\ndef depth_first_search(u, visited, graph):\n    visited[u] = 1\n    for v in graph[u]:",
        "detail": "python-prac.Overflow._Algorithms.Sort.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "max_heap_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "peekOfCode": "def max_heap_sort(arr, simulation=False):\n    \"\"\" Heap Sort that uses a max heap to sort an array in ascending order\n        Complexity: O(n log(n))\n    \"\"\"\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    for i in range(len(arr) - 1, 0, -1):\n        iteration = max_heapify(arr, i, simulation, iteration)\n    if simulation:",
        "detail": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "documentation": {}
    },
    {
        "label": "max_heapify",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "peekOfCode": "def max_heapify(arr, end, simulation, iteration):\n    \"\"\" Max heapify helper for max_heap_sort\n    \"\"\"\n    last_parent = (end - 1) // 2\n    # Iterate from last parent to first\n    for parent in range(last_parent, -1, -1):\n        current_parent = parent\n        # Iterate from current_parent to last_parent\n        while current_parent <= last_parent:\n            # Find greatest child of current_parent",
        "detail": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "documentation": {}
    },
    {
        "label": "min_heap_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "peekOfCode": "def min_heap_sort(arr, simulation=False):\n    \"\"\" Heap Sort that uses a min heap to sort an array in ascending order\n        Complexity: O(n log(n))\n    \"\"\"\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    for i in range(0, len(arr) - 1):\n        iteration = min_heapify(arr, i, simulation, iteration)\n    return arr",
        "detail": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "documentation": {}
    },
    {
        "label": "min_heapify",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "peekOfCode": "def min_heapify(arr, start, simulation, iteration):\n    \"\"\" Min heapify helper for min_heap_sort\n    \"\"\"\n    # Offset last_parent by the start (last_parent calculated as if start index was 0)\n    # All array accesses need to be offset by start\n    end = len(arr) - 1\n    last_parent = (end - start - 1) // 2\n    # Iterate from last parent to first\n    for parent in range(last_parent, -1, -1):\n        current_parent = parent",
        "detail": "python-prac.Overflow._Algorithms.Sort.heap_sort",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.insertion_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.insertion_sort",
        "peekOfCode": "def insertion_sort(arr, simulation=False):\n    \"\"\" Insertion Sort\n        Complexity: O(n^2)\n    \"\"\"\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    for i in range(len(arr)):\n        cursor = arr[i]\n        pos = i",
        "detail": "python-prac.Overflow._Algorithms.Sort.insertion_sort",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "peekOfCode": "def insertion_sort(array: list, start: int = 0, end: int = 0) -> list:\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> insertion_sort(array, 0, len(array))\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    \"\"\"\n    end = end or len(array)\n    for i in range(start, end):\n        temp_index = i\n        temp_index_value = array[i]",
        "detail": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "documentation": {}
    },
    {
        "label": "heapify",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "peekOfCode": "def heapify(array: list, index: int, heap_size: int) -> None:  # Max Heap\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> heapify(array, len(array) // 2 ,len(array))\n    \"\"\"\n    largest = index\n    left_index = 2 * index + 1  # Left Node\n    right_index = 2 * index + 2  # Right Node\n    if left_index < heap_size and array[largest] < array[left_index]:\n        largest = left_index",
        "detail": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "documentation": {}
    },
    {
        "label": "heap_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "peekOfCode": "def heap_sort(array: list) -> list:\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> heap_sort(array)\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    \"\"\"\n    n = len(array)\n    for i in range(n // 2, -1, -1):\n        heapify(array, i, n)\n    for i in range(n - 1, 0, -1):",
        "detail": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "documentation": {}
    },
    {
        "label": "median_of_3",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "peekOfCode": "def median_of_3(\n    array: list, first_index: int, middle_index: int, last_index: int\n) -> int:\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> median_of_3(array, 0, 0 + ((len(array) - 0) // 2) + 1, len(array) - 1)\n    12\n    \"\"\"\n    if (array[first_index] > array[middle_index]) != (\n        array[first_index] > array[last_index]",
        "detail": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "peekOfCode": "def partition(array: list, low: int, high: int, pivot: int) -> int:\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> partition(array, 0, len(array), 12)\n    8\n    \"\"\"\n    i = low\n    j = high\n    while True:\n        while array[i] < pivot:",
        "detail": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "documentation": {}
    },
    {
        "label": "sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "peekOfCode": "def sort(array: list) -> list:\n    \"\"\"\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n    Examples:\n    >>> sort([4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12])\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    >>> sort([-1, -5, -3, -13, -44])\n    [-44, -13, -5, -3, -1]",
        "detail": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "documentation": {}
    },
    {
        "label": "intro_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "peekOfCode": "def intro_sort(\n    array: list, start: int, end: int, size_threshold: int, max_depth: int\n) -> list:\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> max_depth = 2 * math.ceil(math.log2(len(array)))\n    >>> intro_sort(array, 0, len(array), 16, max_depth)\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    \"\"\"\n    while end - start > size_threshold:",
        "detail": "python-prac.Overflow._Algorithms.Sort.intro_sort",
        "documentation": {}
    },
    {
        "label": "is_sorted",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.is_sorted",
        "description": "python-prac.Overflow._Algorithms.Sort.is_sorted",
        "peekOfCode": "def is_sorted(stack):\n    storage_stack = []\n    for i in range(len(stack)):\n        if len(stack) == 0:\n            break\n        first_val = stack.pop()\n        if len(stack) == 0:\n            break\n        second_val = stack.pop()\n        if first_val < second_val:",
        "detail": "python-prac.Overflow._Algorithms.Sort.is_sorted",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.iterative_merge_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.iterative_merge_sort",
        "peekOfCode": "def merge(input_list: list, low: int, mid: int, high: int) -> list:\n    \"\"\"\n    sorting left-half and right-half individually\n    then merging them into result\n    \"\"\"\n    result = []\n    left, right = input_list[low:mid], input_list[mid : high + 1]\n    while left and right:\n        result.append((left if left[0] <= right[0] else right).pop(0))\n    input_list[low : high + 1] = result + left + right",
        "detail": "python-prac.Overflow._Algorithms.Sort.iterative_merge_sort",
        "documentation": {}
    },
    {
        "label": "iter_merge_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.iterative_merge_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.iterative_merge_sort",
        "peekOfCode": "def iter_merge_sort(input_list: list) -> list:\n    \"\"\"\n    Return a sorted copy of the input list\n    >>> iter_merge_sort([5, 9, 8, 7, 1, 2, 7])\n    [1, 2, 5, 7, 7, 8, 9]\n    >>> iter_merge_sort([6])\n    [6]\n    >>> iter_merge_sort([])\n    []\n    >>> iter_merge_sort([-2, -9, -1, -4])",
        "detail": "python-prac.Overflow._Algorithms.Sort.iterative_merge_sort",
        "documentation": {}
    },
    {
        "label": "kay_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "peekOfCode": "def kay_sort(array):\n\tprint \"Orignal List : {}\".format(array)\n\tfor i in range(len(array)):\n\t\tfor n in range(len(array) - 1):\n\t\t\ta = array[n]\n\t\t\tif (a > array[i]):\n\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t",
        "detail": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\ta",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "peekOfCode": "\t\t\ta = array[n]\n\t\t\tif (a > array[i]):\n\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttem",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "peekOfCode": "\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tarray[i]",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "peekOfCode": "\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tarray[n]",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "peekOfCode": "\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "python-prac.Overflow._Algorithms.Sort.kay_sort",
        "documentation": {}
    },
    {
        "label": "merge_insertion_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.merge_insertion_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.merge_insertion_sort",
        "peekOfCode": "def merge_insertion_sort(collection: list[int]) -> list[int]:\n    \"\"\"Pure implementation of merge-insertion sort algorithm in Python\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n    Examples:\n    >>> merge_insertion_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n    >>> merge_insertion_sort([99])\n    [99]",
        "detail": "python-prac.Overflow._Algorithms.Sort.merge_insertion_sort",
        "documentation": {}
    },
    {
        "label": "merge_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.merge_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.merge_sort",
        "peekOfCode": "def merge_sort(arr):\n    \"\"\" Merge Sort\n        Complexity: O(n log(n))\n    \"\"\"\n    # Our recursive base case\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    # Perform merge_sort recursively on both halves\n    left, right = merge_sort(arr[:mid]), merge_sort(arr[mid:])",
        "detail": "python-prac.Overflow._Algorithms.Sort.merge_sort",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.merge_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.merge_sort",
        "peekOfCode": "def merge(left, right, merged):\n    \"\"\" Merge helper\n        Complexity: O(n)\n    \"\"\"\n    left_cursor, right_cursor = 0, 0\n    while left_cursor < len(left) and right_cursor < len(right):\n        # Sort each one and place into the result\n        if left[left_cursor] <= right[right_cursor]:\n            merged[left_cursor + right_cursor] = left[left_cursor]\n            left_cursor += 1",
        "detail": "python-prac.Overflow._Algorithms.Sort.merge_sort",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Sort.merge_sorted_k_lists",
        "description": "python-prac.Overflow._Algorithms.Sort.merge_sorted_k_lists",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\ndef merge_k_lists(lists):\n    dummy = node = ListNode(0)\n    h = [(n.val, n) for n in lists if n]\n    heapify(h)\n    while h:\n        v, n = h[0]",
        "detail": "python-prac.Overflow._Algorithms.Sort.merge_sorted_k_lists",
        "documentation": {}
    },
    {
        "label": "merge_k_lists",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.merge_sorted_k_lists",
        "description": "python-prac.Overflow._Algorithms.Sort.merge_sorted_k_lists",
        "peekOfCode": "def merge_k_lists(lists):\n    dummy = node = ListNode(0)\n    h = [(n.val, n) for n in lists if n]\n    heapify(h)\n    while h:\n        v, n = h[0]\n        if n.next is None:\n            heappop(h)  # only change heap size when necessary\n        else:\n            heapreplace(h, (n.next.val, n.next))",
        "detail": "python-prac.Overflow._Algorithms.Sort.merge_sorted_k_lists",
        "documentation": {}
    },
    {
        "label": "merge_k_lists",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.merge_sorted_k_lists",
        "description": "python-prac.Overflow._Algorithms.Sort.merge_sorted_k_lists",
        "peekOfCode": "def merge_k_lists(lists):\n    dummy = ListNode(None)\n    curr = dummy\n    q = PriorityQueue()\n    for node in lists:\n        if node:\n            q.put((node.val, node))\n    while not q.empty():\n        curr.next = q.get()[1]  # These two lines seem to\n        curr = curr.next  # be equivalent to :-   curr = q.get()[1]",
        "detail": "python-prac.Overflow._Algorithms.Sort.merge_sorted_k_lists",
        "documentation": {}
    },
    {
        "label": "selection_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.modified_selection_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.modified_selection_sort",
        "peekOfCode": "def selection_sort(array):\n    temp_num = len(array)\n    temp_arr = []\n    while len(temp_arr) != temp_num:\n        a = min(array)\n        temp_arr.append(a)\n        del array[array.index(a)]\n    return temp_arr\n# Test\ntest_case = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90]",
        "detail": "python-prac.Overflow._Algorithms.Sort.modified_selection_sort",
        "documentation": {}
    },
    {
        "label": "test_case",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.modified_selection_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.modified_selection_sort",
        "peekOfCode": "test_case = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90]\nprint(\"By Builtin method: {}\".format(sorted(test_case)))\nprint(\"By SelectionSort method: {}\".format(selection_sort(test_case)))",
        "detail": "python-prac.Overflow._Algorithms.Sort.modified_selection_sort",
        "documentation": {}
    },
    {
        "label": "natural_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.natural_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.natural_sort",
        "peekOfCode": "def natural_sort(input_list: list[str]) -> list[str]:\n    \"\"\"\n    Sort the given list of strings in the way that humans expect.\n    The normal Python sort algorithm sorts lexicographically,\n    so you might not get the results that you expect...\n    >>> example1 = ['2 ft 7 in', '1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '7 ft 6 in']\n    >>> sorted(example1)\n    ['1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '2 ft 7 in', '7 ft 6 in']\n    >>> # The natural sort algorithm sort based on meaning and not computer code point.\n    >>> natural_sort(example1)",
        "detail": "python-prac.Overflow._Algorithms.Sort.natural_sort",
        "documentation": {}
    },
    {
        "label": "pancake_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.pancake_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.pancake_sort",
        "peekOfCode": "def pancake_sort(arr):\n    \"\"\"\n    Pancake_sort\n    Sorting a given array\n    mutation of selection sort\n    reference: https://www.geeksforgeeks.org/pancake-sorting/\n    Overall time complexity : O(N^2)\n    \"\"\"\n    len_arr = len(arr)\n    if len_arr <= 1:",
        "detail": "python-prac.Overflow._Algorithms.Sort.pancake_sort",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Sort.patience_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.patience_sort",
        "peekOfCode": "class Stack(list):\n    def __lt__(self, other):\n        return self[-1] < other[-1]\n    def __eq__(self, other):\n        return self[-1] == other[-1]\ndef patience_sort(collection: list) -> list:\n    \"\"\"A pure implementation of quick sort algorithm in Python\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending",
        "detail": "python-prac.Overflow._Algorithms.Sort.patience_sort",
        "documentation": {}
    },
    {
        "label": "patience_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.patience_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.patience_sort",
        "peekOfCode": "def patience_sort(collection: list) -> list:\n    \"\"\"A pure implementation of quick sort algorithm in Python\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n    Examples:\n    >>> patience_sort([1, 9, 5, 21, 17, 6])\n    [1, 5, 6, 9, 17, 21]\n    >>> patience_sort([])\n    []",
        "detail": "python-prac.Overflow._Algorithms.Sort.patience_sort",
        "documentation": {}
    },
    {
        "label": "pigeonhole_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.pigeonhole_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.pigeonhole_sort",
        "peekOfCode": "def pigeonhole_sort(arr):\n    Max = max(arr)\n    Min = min(arr)\n    size = Max - Min + 1\n    holes = [0] * size\n    for i in arr:\n        holes[i - Min] += 1\n    i = 0\n    for count in range(size):\n        while holes[count] > 0:",
        "detail": "python-prac.Overflow._Algorithms.Sort.pigeonhole_sort",
        "documentation": {}
    },
    {
        "label": "pigeon_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.pigeon_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.pigeon_sort",
        "peekOfCode": "def pigeon_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Implementation of pigeon hole sort algorithm\n    :param array: Collection of comparable items\n    :return: Collection sorted in ascending order\n    >>> pigeon_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n    >>> pigeon_sort([])\n    []\n    >>> pigeon_sort([-2, -5, -45])",
        "detail": "python-prac.Overflow._Algorithms.Sort.pigeon_sort",
        "documentation": {}
    },
    {
        "label": "Linter",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Sort.pylama_isort",
        "description": "python-prac.Overflow._Algorithms.Sort.pylama_isort",
        "peekOfCode": "class Linter(BaseLinter):\n    def allow(self, path: str) -> bool:\n        \"\"\"Determine if this path should be linted.\"\"\"\n        return path.endswith(\".py\")\n    def run(self, path: str, **meta: Any) -> List[Dict[str, Any]]:\n        \"\"\"Lint the file. Return an array of error dicts if appropriate.\"\"\"\n        with supress_stdout():\n            try:\n                if not api.check_file(path, disregard_skip=False):\n                    return [",
        "detail": "python-prac.Overflow._Algorithms.Sort.pylama_isort",
        "documentation": {}
    },
    {
        "label": "supress_stdout",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.pylama_isort",
        "description": "python-prac.Overflow._Algorithms.Sort.pylama_isort",
        "peekOfCode": "def supress_stdout():\n    stdout = sys.stdout\n    with open(os.devnull, \"w\") as devnull:\n        sys.stdout = devnull\n        yield\n        sys.stdout = stdout\nclass Linter(BaseLinter):\n    def allow(self, path: str) -> bool:\n        \"\"\"Determine if this path should be linted.\"\"\"\n        return path.endswith(\".py\")",
        "detail": "python-prac.Overflow._Algorithms.Sort.pylama_isort",
        "documentation": {}
    },
    {
        "label": "quick_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.quick_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.quick_sort",
        "peekOfCode": "def quick_sort(arr, simulation=False):\n    \"\"\" Quick sort\n        Complexity: best O(n log(n)) avg O(n log(n)), worst O(N^2)\n    \"\"\"\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    arr, _ = quick_sort_recur(arr, 0, len(arr) - 1, iteration, simulation)\n    return arr\ndef quick_sort_recur(arr, first, last, iteration, simulation):",
        "detail": "python-prac.Overflow._Algorithms.Sort.quick_sort",
        "documentation": {}
    },
    {
        "label": "quick_sort_recur",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.quick_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.quick_sort",
        "peekOfCode": "def quick_sort_recur(arr, first, last, iteration, simulation):\n    if first < last:\n        pos = partition(arr, first, last)\n        # Start our two recursive calls\n        if simulation:\n            iteration = iteration + 1\n            print(\"iteration\", iteration, \":\", *arr)\n        _, iteration = quick_sort_recur(arr, first, pos - 1, iteration, simulation)\n        _, iteration = quick_sort_recur(arr, pos + 1, last, iteration, simulation)\n    return arr, iteration",
        "detail": "python-prac.Overflow._Algorithms.Sort.quick_sort",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.quick_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.quick_sort",
        "peekOfCode": "def partition(arr, first, last):\n    wall = first\n    for pos in range(first, last):\n        if arr[pos] < arr[last]:  # last is the pivot\n            arr[pos], arr[wall] = arr[wall], arr[pos]\n            wall += 1\n    arr[wall], arr[last] = arr[last], arr[wall]\n    return wall",
        "detail": "python-prac.Overflow._Algorithms.Sort.quick_sort",
        "documentation": {}
    },
    {
        "label": "quick_sort_3partition",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.quick_sort_3_partition",
        "description": "python-prac.Overflow._Algorithms.Sort.quick_sort_3_partition",
        "peekOfCode": "def quick_sort_3partition(sorting: list, left: int, right: int) -> None:\n    if right <= left:\n        return\n    a = i = left\n    b = right\n    pivot = sorting[left]\n    while i <= b:\n        if sorting[i] < pivot:\n            sorting[a], sorting[i] = sorting[i], sorting[a]\n            a += 1",
        "detail": "python-prac.Overflow._Algorithms.Sort.quick_sort_3_partition",
        "documentation": {}
    },
    {
        "label": "three_way_radix_quicksort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.quick_sort_3_partition",
        "description": "python-prac.Overflow._Algorithms.Sort.quick_sort_3_partition",
        "peekOfCode": "def three_way_radix_quicksort(sorting: list) -> list:\n    \"\"\"\n    Three-way radix quicksort:\n    https://en.wikipedia.org/wiki/Quicksort#Three-way_radix_quicksort\n    First divide the list into three parts.\n    Then recursively sort the \"less than\" and \"greater than\" partitions.\n    >>> three_way_radix_quicksort([])\n    []\n    >>> three_way_radix_quicksort([1])\n    [1]",
        "detail": "python-prac.Overflow._Algorithms.Sort.quick_sort_3_partition",
        "documentation": {}
    },
    {
        "label": "radix_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.radix_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.radix_sort",
        "peekOfCode": "def radix_sort(arr, simulation=False):\n    position = 1\n    max_number = max(arr)\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    while position <= max_number:\n        queue_list = [list() for _ in range(10)]\n        for num in arr:\n            digit_number = num // position % 10",
        "detail": "python-prac.Overflow._Algorithms.Sort.radix_sort",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.random_pivot_quick_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.random_pivot_quick_sort",
        "peekOfCode": "def partition(A, left_index, right_index):\n    pivot = A[left_index]\n    i = left_index + 1\n    for j in range(left_index + 1, right_index):\n        if A[j] < pivot:\n            A[j], A[i] = A[i], A[j]\n            i += 1\n    A[left_index], A[i - 1] = A[i - 1], A[left_index]\n    return i - 1\ndef quick_sort_random(A, left, right):",
        "detail": "python-prac.Overflow._Algorithms.Sort.random_pivot_quick_sort",
        "documentation": {}
    },
    {
        "label": "quick_sort_random",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.random_pivot_quick_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.random_pivot_quick_sort",
        "peekOfCode": "def quick_sort_random(A, left, right):\n    if left < right:\n        pivot = random.randint(left, right - 1)\n        A[pivot], A[left] = (\n            A[left],\n            A[pivot],\n        )  # switches the pivot with the left most bound\n        pivot_index = partition(A, left, right)\n        quick_sort_random(\n            A, left, pivot_index",
        "detail": "python-prac.Overflow._Algorithms.Sort.random_pivot_quick_sort",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.random_pivot_quick_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.random_pivot_quick_sort",
        "peekOfCode": "def main():\n    user_input = input(\"Enter numbers separated by a comma:\\n\").strip()\n    arr = [int(item) for item in user_input.split(\",\")]\n    quick_sort_random(arr, 0, len(arr))\n    print(arr)\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-prac.Overflow._Algorithms.Sort.random_pivot_quick_sort",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.recursive_bubble_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.recursive_bubble_sort",
        "peekOfCode": "def bubble_sort(list_data: list, length: int = 0) -> list:\n    \"\"\"\n    It is similar is bubble sort but recursive.\n    :param list_data: mutable ordered sequence of elements\n    :param length: length of list data\n    :return: the same list in ascending order\n    >>> bubble_sort([0, 5, 2, 3, 2], 5)\n    [0, 2, 2, 3, 5]\n    >>> bubble_sort([], 0)\n    []",
        "detail": "python-prac.Overflow._Algorithms.Sort.recursive_bubble_sort",
        "documentation": {}
    },
    {
        "label": "rec_insertion_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.recursive_insertion_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.recursive_insertion_sort",
        "peekOfCode": "def rec_insertion_sort(collection: list, n: int):\n    \"\"\"\n    Given a collection of numbers and its length, sorts the collections\n    in ascending order\n    :param collection: A mutable collection of comparable elements\n    :param n: The length of collections\n    >>> col = [1, 2, 1]\n    >>> rec_insertion_sort(col, len(col))\n    >>> print(col)\n    [1, 1, 2]",
        "detail": "python-prac.Overflow._Algorithms.Sort.recursive_insertion_sort",
        "documentation": {}
    },
    {
        "label": "insert_next",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.recursive_insertion_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.recursive_insertion_sort",
        "peekOfCode": "def insert_next(collection: list, index: int):\n    \"\"\"\n    Inserts the '(index-1)th' element into place\n    >>> col = [3, 2, 4, 2]\n    >>> insert_next(col, 1)\n    >>> print(col)\n    [2, 3, 4, 2]\n    >>> col = [3, 2, 3]\n    >>> insert_next(col, 2)\n    >>> print(col)",
        "detail": "python-prac.Overflow._Algorithms.Sort.recursive_insertion_sort",
        "documentation": {}
    },
    {
        "label": "quick_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.recursive_quick_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.recursive_quick_sort",
        "peekOfCode": "def quick_sort(data: list) -> list:\n    \"\"\"\n    >>> for data in ([2, 1, 0], [2.2, 1.1, 0], \"quick_sort\"):\n    ...     quick_sort(data) == sorted(data)\n    True\n    True\n    True\n    \"\"\"\n    if len(data) <= 1:\n        return data",
        "detail": "python-prac.Overflow._Algorithms.Sort.recursive_quick_sort",
        "documentation": {}
    },
    {
        "label": "reverse_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "peekOfCode": "def reverse_sort(array):\n\tfor i in range(len(array) - 1):\n\t\tfor n in range(len(array) - 1):\n\t\t\ta = array[n]\n\t\t\tif (a < array[i]):\n\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn array\t\t\t\nprint reverse_sort([123, 3455, 6577, 546, 345, 22, 56, 7])",
        "detail": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\ta",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "peekOfCode": "\t\t\ta = array[n]\n\t\t\tif (a < array[i]):\n\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn array\t\t\t\nprint reverse_sort([123, 3455, 6577, 546, 345, 22, 56, 7])",
        "detail": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttem",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "peekOfCode": "\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn array\t\t\t\nprint reverse_sort([123, 3455, 6577, 546, 345, 22, 56, 7])",
        "detail": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tarray[i]",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "peekOfCode": "\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn array\t\t\t\nprint reverse_sort([123, 3455, 6577, 546, 345, 22, 56, 7])",
        "detail": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tarray[n]",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "peekOfCode": "\t\t\t\tarray[n] = tem \n\treturn array\t\t\t\nprint reverse_sort([123, 3455, 6577, 546, 345, 22, 56, 7])",
        "detail": "python-prac.Overflow._Algorithms.Sort.reverse_sort",
        "documentation": {}
    },
    {
        "label": "search_in_a_sorted_matrix",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.searching_in_sorted_matrix",
        "description": "python-prac.Overflow._Algorithms.Sort.searching_in_sorted_matrix",
        "peekOfCode": "def search_in_a_sorted_matrix(\n    mat: list[list], m: int, n: int, key: Union[int, float]\n) -> None:\n    \"\"\"\n    >>> search_in_a_sorted_matrix(\n    ...     [[2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]], 3, 3, 5)\n    Key 5 found at row- 1 column- 2\n    >>> search_in_a_sorted_matrix(\n    ...     [[2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]], 3, 3, 21)\n    Key 21 not found",
        "detail": "python-prac.Overflow._Algorithms.Sort.searching_in_sorted_matrix",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.searching_in_sorted_matrix",
        "description": "python-prac.Overflow._Algorithms.Sort.searching_in_sorted_matrix",
        "peekOfCode": "def main():\n    mat = [[2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]]\n    x = int(input(\"Enter the element to be searched:\"))\n    print(mat)\n    search_in_a_sorted_matrix(mat, len(mat), len(mat[0]), x)\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()",
        "detail": "python-prac.Overflow._Algorithms.Sort.searching_in_sorted_matrix",
        "documentation": {}
    },
    {
        "label": "search_in_a_sorted_matrix",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.search_in_sorted_matrix",
        "description": "python-prac.Overflow._Algorithms.Sort.search_in_sorted_matrix",
        "peekOfCode": "def search_in_a_sorted_matrix(mat, m, n, key):\n    i, j = m - 1, 0\n    while i >= 0 and j < n:\n        if key == mat[i][j]:\n            print(\"Key %s found at row- %s column- %s\" % (key, i + 1, j + 1))\n            return\n        if key < mat[i][j]:\n            i -= 1\n        else:\n            j += 1",
        "detail": "python-prac.Overflow._Algorithms.Sort.search_in_sorted_matrix",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.search_in_sorted_matrix",
        "description": "python-prac.Overflow._Algorithms.Sort.search_in_sorted_matrix",
        "peekOfCode": "def main():\n    mat = [[2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]]\n    key = 13\n    print(mat)\n    search_in_a_sorted_matrix(mat, len(mat), len(mat[0]), key)\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-prac.Overflow._Algorithms.Sort.search_in_sorted_matrix",
        "documentation": {}
    },
    {
        "label": "selection_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.selection_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.selection_sort",
        "peekOfCode": "def selection_sort(arr, simulation=False):\n    \"\"\" Selection Sort\n        Complexity: O(n^2)\n    \"\"\"\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    for i in range(len(arr)):\n        minimum = i\n        for j in range(i + 1, len(arr)):",
        "detail": "python-prac.Overflow._Algorithms.Sort.selection_sort",
        "documentation": {}
    },
    {
        "label": "shell_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.shell_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.shell_sort",
        "peekOfCode": "def shell_sort(arr):\n    \"\"\" Shell Sort\n        Complexity: O(n^2)\n    \"\"\"\n    n = len(arr)\n    # Initialize size of the gap\n    gap = n // 2\n    while gap > 0:\n        y_index = gap\n        while y_index < len(arr):",
        "detail": "python-prac.Overflow._Algorithms.Sort.shell_sort",
        "documentation": {}
    },
    {
        "label": "sort_blocks",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sort",
        "description": "python-prac.Overflow._Algorithms.Sort.sort",
        "peekOfCode": "def sort_blocks():\n    # First, we load the current README into memory\n    with open(\"README.md\", \"r\") as read_me_file:\n        read_me = read_me_file.read()\n    # Separating the 'table of contents' from the contents (blocks)\n    table_of_contents = \"\".join(read_me.split(\"- - -\")[0])\n    blocks = \"\".join(read_me.split(\"- - -\")[1]).split(\"\\n# \")\n    for i in range(len(blocks)):\n        if i == 0:\n            blocks[i] = blocks[i] + \"\\n\"",
        "detail": "python-prac.Overflow._Algorithms.Sort.sort",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sort",
        "description": "python-prac.Overflow._Algorithms.Sort.sort",
        "peekOfCode": "def main():\n    # First, we load the current README into memory as an array of lines\n    with open(\"README.md\", \"r\") as read_me_file:\n        read_me = read_me_file.readlines()\n    # Then we cluster the lines together as blocks\n    # Each block represents a collection of lines that should be sorted\n    # This was done by assuming only links ([...](...)) are meant to be sorted\n    # Clustering is done by indentation\n    blocks = []\n    last_indent = None",
        "detail": "python-prac.Overflow._Algorithms.Sort.sort",
        "documentation": {}
    },
    {
        "label": "module_key",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sorting",
        "description": "python-prac.Overflow._Algorithms.Sort.sorting",
        "peekOfCode": "def module_key(\n    module_name: str,\n    config: Config,\n    sub_imports: bool = False,\n    ignore_case: bool = False,\n    section_name: Optional[Any] = None,\n    straight_import: Optional[bool] = False,\n) -> str:\n    match = re.match(r\"^(\\.+)\\s*(.*)\", module_name)\n    if match:",
        "detail": "python-prac.Overflow._Algorithms.Sort.sorting",
        "documentation": {}
    },
    {
        "label": "section_key",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sorting",
        "description": "python-prac.Overflow._Algorithms.Sort.sorting",
        "peekOfCode": "def section_key(\n    line: str,\n    order_by_type: bool,\n    force_to_top: List[str],\n    lexicographical: bool = False,\n    length_sort: bool = False,\n    reverse_relative: bool = False,\n    group_by_package: bool = False,\n) -> str:\n    section = \"B\"",
        "detail": "python-prac.Overflow._Algorithms.Sort.sorting",
        "documentation": {}
    },
    {
        "label": "naturally",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sorting",
        "description": "python-prac.Overflow._Algorithms.Sort.sorting",
        "peekOfCode": "def naturally(\n    to_sort: Iterable[str], key: Optional[Callable[[str], Any]] = None\n) -> List[str]:\n    \"\"\"Returns a naturally sorted list\"\"\"\n    if key is None:\n        key_callback = _natural_keys\n    else:\n        def key_callback(text: str) -> List[Any]:\n            return _natural_keys(key(text))  # type: ignore\n    return sorted(to_sort, key=key_callback)",
        "detail": "python-prac.Overflow._Algorithms.Sort.sorting",
        "documentation": {}
    },
    {
        "label": "_import_line_intro_re",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sorting",
        "description": "python-prac.Overflow._Algorithms.Sort.sorting",
        "peekOfCode": "_import_line_intro_re = re.compile(\"^(?:from|import) \")\n_import_line_midline_import_re = re.compile(\" import \")\ndef module_key(\n    module_name: str,\n    config: Config,\n    sub_imports: bool = False,\n    ignore_case: bool = False,\n    section_name: Optional[Any] = None,\n    straight_import: Optional[bool] = False,\n) -> str:",
        "detail": "python-prac.Overflow._Algorithms.Sort.sorting",
        "documentation": {}
    },
    {
        "label": "_import_line_midline_import_re",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sorting",
        "description": "python-prac.Overflow._Algorithms.Sort.sorting",
        "peekOfCode": "_import_line_midline_import_re = re.compile(\" import \")\ndef module_key(\n    module_name: str,\n    config: Config,\n    sub_imports: bool = False,\n    ignore_case: bool = False,\n    section_name: Optional[Any] = None,\n    straight_import: Optional[bool] = False,\n) -> str:\n    match = re.match(r\"^(\\.+)\\s*(.*)\", module_name)",
        "detail": "python-prac.Overflow._Algorithms.Sort.sorting",
        "documentation": {}
    },
    {
        "label": "bubbleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "description": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "peekOfCode": "def bubbleSort(g): # g argument is for list\n    for x in range(len(g) - 2):\n\t    a = g[x]\n\t    b = g[x + 1 + 1]\n\t    if a > b :\n\t\t    return(a)\n\t    else :\n\t\t    return(b)\n# use this to convert output into list\n# result = list(map(bubbleSort , g)) replace g with parameter",
        "detail": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "oddSort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "description": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "peekOfCode": "def oddSort(odd):# odd can be list or variable\n    for x in odd:\n        if x % 3 == 0:\n    return(x)\n# use this to get list as output\n# result = list(filter(oddSort , odd)) replace odd with parameter\n# this function checks even num\ndef evenSort(eve):# eve can be list or variable\n    for a in eve:\n        if a % 2 == 0:",
        "detail": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "evenSort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "description": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "peekOfCode": "def evenSort(eve):# eve can be list or variable\n    for a in eve:\n        if a % 2 == 0:\n    return(a)\n# use this to get list as output\n# result = list(filter(evenSort , eve)) replace eve with parameter\n# this function checks divisibility\ndef divisibleSort(divi , get):# here divi is list and get is an variable set to integer or float\n    for r in divi:\n        if r % get == 0:",
        "detail": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "divisibleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "description": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "peekOfCode": "def divisibleSort(divi , get):# here divi is list and get is an variable set to integer or float\n    for r in divi:\n        if r % get == 0:\n    return(r)\n# use this to get output\n# result = list(filter(divisibleSort , divi , get)) replace arguments with suitable parameters\n# this function checks if addition of group of two elements has desired answer\ndef addBubbleSort(f,user):# here f is list and user is integer or float\n    for x in range(len(f) - 2):\n        a = f[x]",
        "detail": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "addBubbleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "description": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "peekOfCode": "def addBubbleSort(f,user):# here f is list and user is integer or float\n    for x in range(len(f) - 2):\n        a = f[x]\n        b = f[x + 1 + 1]\n        if a + b == user:\n            return(a,b)\n# i havent checked this function check for bugs\n# this is how it works\n# res = list(filter(addBubbleSort , f , user)) replace arguments with suitable parameters\n# this function checks if subtraction of group of two elements has desired answer",
        "detail": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "subBubbleSort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "description": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "peekOfCode": "def subBubbleSort(z,userSub):\n    for x in range(len(z) - 2):\n        a = z[x]\n        b = z[x + 1 + 1]\n        if a - b == useSubr:\n            return(a,b)\n# i havent checked this function check for bugs\n#res = list(filter(subBubbleSort , z , userSub)) replace arguments with suitable parameters",
        "detail": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "#res",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "description": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "peekOfCode": "#res = list(filter(subBubbleSort , z , userSub)) replace arguments with suitable parameters",
        "detail": "python-prac.Overflow._Algorithms.Sort.sortingFunctions",
        "documentation": {}
    },
    {
        "label": "sortString",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sortString",
        "description": "python-prac.Overflow._Algorithms.Sort.sortString",
        "peekOfCode": "def sortString():\n    strr = str(input(\"Enter : \"))\n    words = strr.split()\n    words.sort()\n    print(\" \")\n    for word in words:\n        print(word)\n# main code\nprint(\"Hello,\")\nwhile True:",
        "detail": "python-prac.Overflow._Algorithms.Sort.sortString",
        "documentation": {}
    },
    {
        "label": "sort_colors",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sort_colors",
        "description": "python-prac.Overflow._Algorithms.Sort.sort_colors",
        "peekOfCode": "def sort_colors(nums):\n    i = j = 0\n    for k in range(len(nums)):\n        v = nums[k]\n        nums[k] = 2\n        if v < 2:\n            nums[j] = 1\n            j += 1\n        if v == 0:\n            nums[i] = 0",
        "detail": "python-prac.Overflow._Algorithms.Sort.sort_colors",
        "documentation": {}
    },
    {
        "label": "sort_diagonally",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sort_matrix_diagonally",
        "description": "python-prac.Overflow._Algorithms.Sort.sort_matrix_diagonally",
        "peekOfCode": "def sort_diagonally(mat: List[List[int]]) -> List[List[int]]:\n    # If the input is a vector, return the vector\n    if len(mat) == 1 or len(mat[0]) == 1:\n        return mat\n    # Rows + columns - 1\n    # The -1 helps you to not repeat a column\n    for i in range(len(mat) + len(mat[0]) - 1):\n        # Process the rows\n        if i + 1 < len(mat):\n            #  Initialize heap, set row and column",
        "detail": "python-prac.Overflow._Algorithms.Sort.sort_matrix_diagonally",
        "documentation": {}
    },
    {
        "label": "mat",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.sort_matrix_diagonally",
        "description": "python-prac.Overflow._Algorithms.Sort.sort_matrix_diagonally",
        "peekOfCode": "mat = [\n    [3,3,1,1],\n    [2,2,1,2],\n    [1,1,1,2]\n]\nShould return:\n[\n    [1,1,1,1],\n    [1,2,2,2],\n    [1,2,3,3]",
        "detail": "python-prac.Overflow._Algorithms.Sort.sort_matrix_diagonally",
        "documentation": {}
    },
    {
        "label": "stoogesort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.stooge_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.stooge_sort",
        "peekOfCode": "def stoogesort(arr, l, h):\n    if l >= h:\n        return\n    # If first element is smaller\n    # than last, swap them\n    if arr[l] > arr[h]:\n        t = arr[l]\n        arr[l] = arr[h]\n        arr[h] = t\n    # If there are more than 2 elements in",
        "detail": "python-prac.Overflow._Algorithms.Sort.stooge_sort",
        "documentation": {}
    },
    {
        "label": "strand_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.strand_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.strand_sort",
        "peekOfCode": "def strand_sort(arr: list, reverse: bool = False, solution: list = None) -> list:\n    \"\"\"\n    Strand sort implementation\n    source: https://en.wikipedia.org/wiki/Strand_sort\n    :param arr: Unordered input list\n    :param reverse: Descent ordering flag\n    :param solution: Ordered items container\n    Examples:\n    >>> strand_sort([4, 2, 5, 3, 0, 1])\n    [0, 1, 2, 3, 4, 5]",
        "detail": "python-prac.Overflow._Algorithms.Sort.strand_sort",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "peekOfCode": "def binary_search(lst, item, start, end):\n    if start == end:\n        return start if lst[start] > item else start + 1\n    if start > end:\n        return start\n    mid = (start + end) // 2\n    if lst[mid] < item:\n        return binary_search(lst, item, mid + 1, end)\n    elif lst[mid] > item:\n        return binary_search(lst, item, start, mid - 1)",
        "detail": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "peekOfCode": "def insertion_sort(lst):\n    length = len(lst)\n    for index in range(1, length):\n        value = lst[index]\n        pos = binary_search(lst, value, 0, index - 1)\n        lst = lst[:pos] + [value] + lst[pos:index] + lst[index + 1 :]\n    return lst\ndef merge(left, right):\n    if not left:\n        return right",
        "detail": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "peekOfCode": "def merge(left, right):\n    if not left:\n        return right\n    if not right:\n        return left\n    if left[0] < right[0]:\n        return [left[0]] + merge(left[1:], right)\n    return [right[0]] + merge(left, right[1:])\ndef tim_sort(lst):\n    \"\"\"",
        "detail": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "documentation": {}
    },
    {
        "label": "tim_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "peekOfCode": "def tim_sort(lst):\n    \"\"\"\n    >>> tim_sort(\"Python\")\n    ['P', 'h', 'n', 'o', 't', 'y']\n    >>> tim_sort((1.1, 1, 0, -1, -1.1))\n    [-1.1, -1, 0, 1, 1.1]\n    >>> tim_sort(list(reversed(list(range(7)))))\n    [0, 1, 2, 3, 4, 5, 6]\n    >>> tim_sort([3, 2, 1]) == insertion_sort([3, 2, 1])\n    True",
        "detail": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "peekOfCode": "def main():\n    lst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\n    sorted_lst = tim_sort(lst)\n    print(sorted_lst)\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-prac.Overflow._Algorithms.Sort.tim_sort",
        "documentation": {}
    },
    {
        "label": "topological_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.topological_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.topological_sort",
        "peekOfCode": "def topological_sort(start, visited, sort):\n    \"\"\"Perform topolical sort on a directed acyclic graph.\"\"\"\n    current = start\n    # add current to visited\n    visited.append(current)\n    neighbors = edges[current]\n    for neighbor in neighbors:\n        # if neighbor not in visited, visit\n        if neighbor not in visited:\n            sort = topological_sort(neighbor, visited, sort)",
        "detail": "python-prac.Overflow._Algorithms.Sort.topological_sort",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.topological_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.topological_sort",
        "peekOfCode": "edges = {\"a\": [\"c\", \"b\"], \"b\": [\"d\", \"e\"], \"c\": [], \"d\": [], \"e\": []}\nvertices = [\"a\", \"b\", \"c\", \"d\", \"e\"]\ndef topological_sort(start, visited, sort):\n    \"\"\"Perform topolical sort on a directed acyclic graph.\"\"\"\n    current = start\n    # add current to visited\n    visited.append(current)\n    neighbors = edges[current]\n    for neighbor in neighbors:\n        # if neighbor not in visited, visit",
        "detail": "python-prac.Overflow._Algorithms.Sort.topological_sort",
        "documentation": {}
    },
    {
        "label": "vertices",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.Sort.topological_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.topological_sort",
        "peekOfCode": "vertices = [\"a\", \"b\", \"c\", \"d\", \"e\"]\ndef topological_sort(start, visited, sort):\n    \"\"\"Perform topolical sort on a directed acyclic graph.\"\"\"\n    current = start\n    # add current to visited\n    visited.append(current)\n    neighbors = edges[current]\n    for neighbor in neighbors:\n        # if neighbor not in visited, visit\n        if neighbor not in visited:",
        "detail": "python-prac.Overflow._Algorithms.Sort.topological_sort",
        "documentation": {}
    },
    {
        "label": "top_sort_recursive",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.top_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.top_sort",
        "peekOfCode": "def top_sort_recursive(graph):\n    \"\"\" Time complexity is the same as DFS, which is O(V + E)\n        Space complexity: O(V)\n    \"\"\"\n    order, enter, state = [], set(graph), {}\n    def dfs(node):\n        state[node] = GRAY\n        # print(node)\n        for k in graph.get(node, ()):\n            sk = state.get(k, None)",
        "detail": "python-prac.Overflow._Algorithms.Sort.top_sort",
        "documentation": {}
    },
    {
        "label": "top_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.top_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.top_sort",
        "peekOfCode": "def top_sort(graph):\n    \"\"\" Time complexity is the same as DFS, which is O(V + E)\n        Space complexity: O(V)\n    \"\"\"\n    order, enter, state = [], set(graph), {}\n    def is_ready(node):\n        lst = graph.get(node, ())\n        if len(lst) == 0:\n            return True\n        for k in lst:",
        "detail": "python-prac.Overflow._Algorithms.Sort.top_sort",
        "documentation": {}
    },
    {
        "label": "node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.Sort.tree_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.tree_sort",
        "peekOfCode": "class node:\n    # BST data structure\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n    def insert(self, val):\n        if self.val:\n            if val < self.val:\n                if self.left is None:",
        "detail": "python-prac.Overflow._Algorithms.Sort.tree_sort",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.tree_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.tree_sort",
        "peekOfCode": "def inorder(root, res):\n    # Recursive traversal\n    if root:\n        inorder(root.left, res)\n        res.append(root.val)\n        inorder(root.right, res)\ndef tree_sort(arr):\n    # Build BST\n    if len(arr) == 0:\n        return arr",
        "detail": "python-prac.Overflow._Algorithms.Sort.tree_sort",
        "documentation": {}
    },
    {
        "label": "tree_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.tree_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.tree_sort",
        "peekOfCode": "def tree_sort(arr):\n    # Build BST\n    if len(arr) == 0:\n        return arr\n    root = node(arr[0])\n    for i in range(1, len(arr)):\n        root.insert(arr[i])\n    # Traverse BST in order.\n    res = []\n    inorder(root, res)",
        "detail": "python-prac.Overflow._Algorithms.Sort.tree_sort",
        "documentation": {}
    },
    {
        "label": "merge_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.unknown_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.unknown_sort",
        "peekOfCode": "def merge_sort(collection):\n    \"\"\"Pure implementation of the fastest merge sort algorithm in Python\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: a collection ordered by ascending\n    Examples:\n    >>> merge_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n    >>> merge_sort([])\n    []",
        "detail": "python-prac.Overflow._Algorithms.Sort.unknown_sort",
        "documentation": {}
    },
    {
        "label": "wiggle_sort",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.Sort.wiggle_sort",
        "description": "python-prac.Overflow._Algorithms.Sort.wiggle_sort",
        "peekOfCode": "def wiggle_sort(nums):\n    for i in range(len(nums)):\n        if (i % 2 == 1) == (nums[i - 1] > nums[i]):\n            nums[i - 1], nums[i] = nums[i], nums[i - 1]\nif __name__ == \"__main__\":\n    array = [3, 5, 2, 1, 6, 4]\n    print(array)\n    wiggle_sort(array)\n    print(array)",
        "detail": "python-prac.Overflow._Algorithms.Sort.wiggle_sort",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 6,
        "importPath": "python-prac.Overflow._Algorithms.alphabeticalattributes",
        "description": "python-prac.Overflow._Algorithms.alphabeticalattributes",
        "peekOfCode": "class Filter(base.Filter):\n    \"\"\"Alphabetizes attributes for elements\"\"\"\n    def __iter__(self):\n        for token in base.Filter.__iter__(self):\n            if token[\"type\"] in (\"StartTag\", \"EmptyTag\"):\n                attrs = OrderedDict()\n                for name, value in sorted(token[\"data\"].items(), key=_attr_key):\n                    attrs[name] = value\n                token[\"data\"] = attrs\n            yield token",
        "detail": "python-prac.Overflow._Algorithms.alphabeticalattributes",
        "documentation": {}
    },
    {
        "label": "lower_",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "description": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "peekOfCode": "def lower_(arr):\n    \"\"\"\n\tFor conversion of every element in list to lower \n\t\"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].lower()\ndef max_alphabetical_order(s):\n    \"\"\"\n\tUseful on lists containing strings that start from alphabets,\n\tbecause the algorithm is written for it in the first place!",
        "detail": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "max_alphabetical_order",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "description": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "peekOfCode": "def max_alphabetical_order(s):\n    \"\"\"\n\tUseful on lists containing strings that start from alphabets,\n\tbecause the algorithm is written for it in the first place!\n\t\"\"\"\n    copy = s[:]\n    useful = list(string.ascii_lowercase)\n    lower_(s)\n    res = s[0]\n    for word in s[1:]:",
        "detail": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "case1",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "description": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "peekOfCode": "case1 = [\"Alpha\", \"Beta\", \"Gist\", \"exotic\", \"hells kitchen\", \"word\", \"Ultra\", \"zip\"]\ncall = max_alphabetical_order(case1)\nprint(\"Max element in list by alphabet order:\\n\" + call)",
        "detail": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "description": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "peekOfCode": "call = max_alphabetical_order(case1)\nprint(\"Max element in list by alphabet order:\\n\" + call)",
        "detail": "python-prac.Overflow._Algorithms.max_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "lower_",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "description": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "peekOfCode": "def lower_(arr):\n    \"\"\"\n\tFor conversion of every element in list to lower \n\t\"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].lower()\ndef min_alphabetical_order(s):\n    \"\"\"\n\tUseful on lists containing strings that start from alphabets,\n\tbecause the algorithm is written for it in the first place!",
        "detail": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "min_alphabetical_order",
        "kind": 2,
        "importPath": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "description": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "peekOfCode": "def min_alphabetical_order(s):\n    \"\"\"\n\tUseful on lists containing strings that start from alphabets,\n\tbecause the algorithm is written for it in the first place!\n\t\"\"\"\n    copy = s[:]\n    useful = list(string.ascii_lowercase)\n    lower_(s)\n    res = s[0]\n    for word in s[1:]:",
        "detail": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "case1",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "description": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "peekOfCode": "case1 = [\"Alpha\", \"Beta\", \"Gist\", \"exotic\", \"hells kitchen\", \"word\", \"Ultra\", \"zip\"]\ncall = min_alphabetical_order(case1)\nprint(\"Max element in list by alphabet order:\\n\" + call)",
        "detail": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 5,
        "importPath": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "description": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "peekOfCode": "call = min_alphabetical_order(case1)\nprint(\"Max element in list by alphabet order:\\n\" + call)",
        "detail": "python-prac.Overflow._Algorithms.min_by_alphabetical_order",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.average-of-levels-in-binary-tree",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.average-of-levels-in-binary-tree",
        "peekOfCode": "class Solution:\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"\n        root.level = 0\n        q = [root]\n        ans = []\n        sum, num, curLevel = 0, 0, 0",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.average-of-levels-in-binary-tree",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "peekOfCode": "class Node:\n    \"\"\"\n    A Node has data variable and pointers to Nodes to its left and right.\n    \"\"\"\n    def __init__(self, data: int) -> None:\n        self.data = data\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\ndef display(tree: Optional[Node]) -> None:  # In Order traversal of the tree\n    \"\"\"",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "display",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "peekOfCode": "def display(tree: Optional[Node]) -> None:  # In Order traversal of the tree\n    \"\"\"\n    >>> root = Node(1)\n    >>> root.left = Node(0)\n    >>> root.right = Node(2)\n    >>> display(root)\n    0\n    1\n    2\n    >>> display(root.right)",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "depth_of_tree",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "peekOfCode": "def depth_of_tree(tree: Optional[Node]) -> int:\n    \"\"\"\n    Recursive function that returns the depth of a binary tree.\n    >>> root = Node(0)\n    >>> depth_of_tree(root)\n    1\n    >>> root.left = Node(0)\n    >>> depth_of_tree(root)\n    2\n    >>> root.right = Node(0)",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "is_full_binary_tree",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "peekOfCode": "def is_full_binary_tree(tree: Node) -> bool:\n    \"\"\"\n    Returns True if this is a full binary tree\n    >>> root = Node(0)\n    >>> is_full_binary_tree(root)\n    True\n    >>> root.left = Node(0)\n    >>> is_full_binary_tree(root)\n    False\n    >>> root.right = Node(0)",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "peekOfCode": "def main() -> None:  # Main function for testing.\n    tree = Node(1)\n    tree.left = Node(2)\n    tree.right = Node(3)\n    tree.left.left = Node(4)\n    tree.left.right = Node(5)\n    tree.left.right.left = Node(6)\n    tree.right.left = Node(7)\n    tree.right.left.left = Node(8)\n    tree.right.left.left.right = Node(9)",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary-tree-tilt",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary-tree-tilt",
        "peekOfCode": "class Solution:\n    def findTilt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        global ans\n        ans = 0\n        self.sumOfNode(root)\n        return ans",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary-tree-tilt",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_search",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_search",
        "peekOfCode": "def binary_search(array, query):\n    lo, hi = 0, len(array) - 1\n    while lo <= hi:\n        mid = (hi + lo) // 2\n        val = array[mid]\n        if val == query:\n            return mid\n        elif val < query:\n            lo = mid + 1\n        else:",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_search",
        "documentation": {}
    },
    {
        "label": "binary_search_recur",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_search",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_search",
        "peekOfCode": "def binary_search_recur(array, low, high, val):\n    if low > high:  # error case\n        return -1\n    mid = (low + high) // 2\n    if val < array[mid]:\n        return binary_search_recur(array, low, mid - 1, val)\n    elif val > array[mid]:\n        return binary_search_recur(array, mid + 1, high, val)\n    else:\n        return mid",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_search",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "peekOfCode": "class Node:\n    def __init__(self, value, parent):\n        self.value = value\n        self.parent = parent  # Added in order to delete a node easier\n        self.left = None\n        self.right = None\n    def __repr__(self):\n        from pprint import pformat\n        if self.left is None and self.right is None:\n            return str(self.value)",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self, root=None):\n        self.root = root\n    def __str__(self):\n        \"\"\"\n        Return a string of all the Nodes using in order traversal\n        \"\"\"\n        return str(self.root)\n    def __reassign_nodes(self, node, new_children):\n        if new_children is not None:  # reset its kids",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "postorder",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "peekOfCode": "def postorder(curr_node):\n    \"\"\"\n    postOrder (left, right, self)\n    \"\"\"\n    node_list = list()\n    if curr_node is not None:\n        node_list = postorder(curr_node.left) + postorder(curr_node.right) + [curr_node]\n    return node_list\ndef binary_search_tree():\n    r\"\"\"",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "binary_search_tree",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "peekOfCode": "def binary_search_tree():\n    r\"\"\"\n    Example\n                  8\n                 / \\\n                3   10\n               / \\    \\\n              1   6    14\n                 / \\   /\n                4   7 13",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "peekOfCode": "class Node:\n    def __init__(self, label: int, parent):\n        self.label = label\n        self.parent = parent\n        self.left = None\n        self.right = None\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    def empty(self):",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    def empty(self):\n        \"\"\"\n        Empties the tree\n        >>> t = BinarySearchTree()\n        >>> assert t.root is None\n        >>> t.put(8)\n        >>> assert t.root is not None",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "BinarySearchTreeTest",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "peekOfCode": "class BinarySearchTreeTest(unittest.TestCase):\n    @staticmethod\n    def _get_binary_search_tree():\n        r\"\"\"\n              8\n             / \\\n            3   10\n           / \\    \\\n          1   6    14\n             / \\   /",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "binary_search_tree_example",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "peekOfCode": "def binary_search_tree_example():\n    r\"\"\"\n    Example\n                  8\n                 / \\\n                3   10\n               / \\    \\\n              1   6    14\n                 / \\   /\n                4   7 13",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "binary_tree_mirror_dict",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_mirror",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_mirror",
        "peekOfCode": "def binary_tree_mirror_dict(binary_tree_mirror_dictionary: dict, root: int):\n    if not root or root not in binary_tree_mirror_dictionary:\n        return\n    left_child, right_child = binary_tree_mirror_dictionary[root][:2]\n    binary_tree_mirror_dictionary[root] = [right_child, left_child]\n    binary_tree_mirror_dict(binary_tree_mirror_dictionary, left_child)\n    binary_tree_mirror_dict(binary_tree_mirror_dictionary, right_child)\ndef binary_tree_mirror(binary_tree: dict, root: int = 1) -> dict:\n    \"\"\"\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 7: [8,9]}, 1)",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_mirror",
        "documentation": {}
    },
    {
        "label": "binary_tree_mirror",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_mirror",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_mirror",
        "peekOfCode": "def binary_tree_mirror(binary_tree: dict, root: int = 1) -> dict:\n    \"\"\"\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 7: [8,9]}, 1)\n    {1: [3, 2], 2: [5, 4], 3: [7, 6], 7: [9, 8]}\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 4: [10,11]}, 1)\n    {1: [3, 2], 2: [5, 4], 3: [7, 6], 4: [11, 10]}\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 4: [10,11]}, 5)\n    Traceback (most recent call last):\n    ...\n    ValueError: root 5 is not present in the binary_tree",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_mirror",
        "documentation": {}
    },
    {
        "label": "binary_tree_paths",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_paths",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_paths",
        "peekOfCode": "def binary_tree_paths(root):\n    res = []\n    if root is None:\n        return res\n    dfs(res, root, str(root.val))\n    return res\ndef dfs(res, root, cur):\n    if root.left is None and root.right is None:\n        res.append(cur)\n    if root.left:",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_paths",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_paths",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_paths",
        "peekOfCode": "def dfs(res, root, cur):\n    if root.left is None and root.right is None:\n        res.append(cur)\n    if root.left:\n        dfs(res, root.left, cur + \"->\" + str(root.left.val))\n    if root.right:\n        dfs(res, root.right, cur + \"->\" + str(root.right.val))",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_paths",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\ndef build_tree():\n    print(\"\\n********Press N to stop entering at any point of time********\\n\")\n    check = input(\"Enter the value of the root node: \").strip().lower() or \"n\"\n    if check == \"n\":\n        return None",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "def build_tree():\n    print(\"\\n********Press N to stop entering at any point of time********\\n\")\n    check = input(\"Enter the value of the root node: \").strip().lower() or \"n\"\n    if check == \"n\":\n        return None\n    q: queue.Queue = queue.Queue()\n    tree_node = TreeNode(int(check))\n    q.put(tree_node)\n    while not q.empty():\n        node_found = q.get()",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "pre_order",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "def pre_order(node: TreeNode) -> None:\n    \"\"\"\n    >>> root = TreeNode(1)\n    >>> tree_node2 = TreeNode(2)\n    >>> tree_node3 = TreeNode(3)\n    >>> tree_node4 = TreeNode(4)\n    >>> tree_node5 = TreeNode(5)\n    >>> tree_node6 = TreeNode(6)\n    >>> tree_node7 = TreeNode(7)\n    >>> root.left, root.right = tree_node2, tree_node3",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "in_order",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "def in_order(node: TreeNode) -> None:\n    \"\"\"\n    >>> root = TreeNode(1)\n    >>> tree_node2 = TreeNode(2)\n    >>> tree_node3 = TreeNode(3)\n    >>> tree_node4 = TreeNode(4)\n    >>> tree_node5 = TreeNode(5)\n    >>> tree_node6 = TreeNode(6)\n    >>> tree_node7 = TreeNode(7)\n    >>> root.left, root.right = tree_node2, tree_node3",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "post_order",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "def post_order(node: TreeNode) -> None:\n    \"\"\"\n    >>> root = TreeNode(1)\n    >>> tree_node2 = TreeNode(2)\n    >>> tree_node3 = TreeNode(3)\n    >>> tree_node4 = TreeNode(4)\n    >>> tree_node5 = TreeNode(5)\n    >>> tree_node6 = TreeNode(6)\n    >>> tree_node7 = TreeNode(7)\n    >>> root.left, root.right = tree_node2, tree_node3",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "level_order",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "def level_order(node: TreeNode) -> None:\n    \"\"\"\n    >>> root = TreeNode(1)\n    >>> tree_node2 = TreeNode(2)\n    >>> tree_node3 = TreeNode(3)\n    >>> tree_node4 = TreeNode(4)\n    >>> tree_node5 = TreeNode(5)\n    >>> tree_node6 = TreeNode(6)\n    >>> tree_node7 = TreeNode(7)\n    >>> root.left, root.right = tree_node2, tree_node3",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "level_order_actual",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "def level_order_actual(node: TreeNode) -> None:\n    \"\"\"\n    >>> root = TreeNode(1)\n    >>> tree_node2 = TreeNode(2)\n    >>> tree_node3 = TreeNode(3)\n    >>> tree_node4 = TreeNode(4)\n    >>> tree_node5 = TreeNode(5)\n    >>> tree_node6 = TreeNode(6)\n    >>> tree_node7 = TreeNode(7)\n    >>> root.left, root.right = tree_node2, tree_node3",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "pre_order_iter",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "def pre_order_iter(node: TreeNode) -> None:\n    \"\"\"\n    >>> root = TreeNode(1)\n    >>> tree_node2 = TreeNode(2)\n    >>> tree_node3 = TreeNode(3)\n    >>> tree_node4 = TreeNode(4)\n    >>> tree_node5 = TreeNode(5)\n    >>> tree_node6 = TreeNode(6)\n    >>> tree_node7 = TreeNode(7)\n    >>> root.left, root.right = tree_node2, tree_node3",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "in_order_iter",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "def in_order_iter(node: TreeNode) -> None:\n    \"\"\"\n    >>> root = TreeNode(1)\n    >>> tree_node2 = TreeNode(2)\n    >>> tree_node3 = TreeNode(3)\n    >>> tree_node4 = TreeNode(4)\n    >>> tree_node5 = TreeNode(5)\n    >>> tree_node6 = TreeNode(6)\n    >>> tree_node7 = TreeNode(7)\n    >>> root.left, root.right = tree_node2, tree_node3",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "post_order_iter",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "def post_order_iter(node: TreeNode) -> None:\n    \"\"\"\n    >>> root = TreeNode(1)\n    >>> tree_node2 = TreeNode(2)\n    >>> tree_node3 = TreeNode(3)\n    >>> tree_node4 = TreeNode(4)\n    >>> tree_node5 = TreeNode(5)\n    >>> tree_node6 = TreeNode(6)\n    >>> tree_node7 = TreeNode(7)\n    >>> root.left, root.right = tree_node2, tree_node3",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "description": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "peekOfCode": "def prompt(s: str = \"\", width=50, char=\"*\") -> str:\n    if not s:\n        return \"\\n\" + width * char\n    left, extra = divmod(width - len(s) - 2, 2)\n    return f\"{left * char} {s} {(left + extra) * char}\"\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(prompt(\"Binary Tree Traversals\"))\n    node = build_tree()",
        "detail": "python-prac.Overflow._Data-Structures.binary-tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.bst.array_to_bst",
        "description": "python-prac.Overflow._Data-Structures.bst.array_to_bst",
        "peekOfCode": "class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\ndef array_to_bst(nums):\n    if not nums:\n        return None\n    mid = len(nums) // 2\n    node = TreeNode(nums[mid])",
        "detail": "python-prac.Overflow._Data-Structures.bst.array_to_bst",
        "documentation": {}
    },
    {
        "label": "array_to_bst",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.bst.array_to_bst",
        "description": "python-prac.Overflow._Data-Structures.bst.array_to_bst",
        "peekOfCode": "def array_to_bst(nums):\n    if not nums:\n        return None\n    mid = len(nums) // 2\n    node = TreeNode(nums[mid])\n    node.left = array_to_bst(nums[:mid])\n    node.right = array_to_bst(nums[mid + 1 :])\n    return node",
        "detail": "python-prac.Overflow._Data-Structures.bst.array_to_bst",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.bst.bst",
        "description": "python-prac.Overflow._Data-Structures.bst.bst",
        "peekOfCode": "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\nclass BST(object):\n    def __init__(self):\n        self.root = None\n    def get_root(self):\n        return self.root",
        "detail": "python-prac.Overflow._Data-Structures.bst.bst",
        "documentation": {}
    },
    {
        "label": "BST",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.bst.bst",
        "description": "python-prac.Overflow._Data-Structures.bst.bst",
        "peekOfCode": "class BST(object):\n    def __init__(self):\n        self.root = None\n    def get_root(self):\n        return self.root\n    \"\"\"\n        Get the number of elements\n        Using recursion. Complexity O(logN)\n    \"\"\"\n    def size(self):",
        "detail": "python-prac.Overflow._Data-Structures.bst.bst",
        "documentation": {}
    },
    {
        "label": "TestSuite",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.bst.bst",
        "description": "python-prac.Overflow._Data-Structures.bst.bst",
        "peekOfCode": "class TestSuite(unittest.TestCase):\n    def setUp(self):\n        self.tree = BST()\n        self.tree.insert(10)\n        self.tree.insert(15)\n        self.tree.insert(6)\n        self.tree.insert(4)\n        self.tree.insert(9)\n        self.tree.insert(12)\n        self.tree.insert(24)",
        "detail": "python-prac.Overflow._Data-Structures.bst.bst",
        "documentation": {}
    },
    {
        "label": "BSTIterator",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.bst.BSTIterator",
        "description": "python-prac.Overflow._Data-Structures.bst.BSTIterator",
        "peekOfCode": "class BSTIterator:\n    def __init__(self, root):\n        self.stack = []\n        while root:\n            self.stack.append(root)\n            root = root.left\n    def has_next(self):\n        return bool(self.stack)\n    def next(self):\n        node = self.stack.pop()",
        "detail": "python-prac.Overflow._Data-Structures.bst.BSTIterator",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.bst.bst_alternate_starter",
        "description": "python-prac.Overflow._Data-Structures.bst.bst_alternate_starter",
        "peekOfCode": "class Node:\n    \"\"\"\n  \"\"\"\n    def __init__(self, value):\n        self._value = value\n        self._left = None\n        self._right = None\nclass BST:\n    \"\"\"\n  \"\"\"",
        "detail": "python-prac.Overflow._Data-Structures.bst.bst_alternate_starter",
        "documentation": {}
    },
    {
        "label": "BST",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.bst.bst_alternate_starter",
        "description": "python-prac.Overflow._Data-Structures.bst.bst_alternate_starter",
        "peekOfCode": "class BST:\n    \"\"\"\n  \"\"\"\n    def __init__(self):\n        self._root = None\n    def insert_value(self, value, current_node=False):\n        \"\"\" \"\"\"\n        # TODO: Implement node value insertion method\n        print(f\"insert {value} here!\")\n    # TODO: Implement iterative search method",
        "detail": "python-prac.Overflow._Data-Structures.bst.bst_alternate_starter",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.bst.bst_alternate_starter",
        "description": "python-prac.Overflow._Data-Structures.bst.bst_alternate_starter",
        "peekOfCode": "tree = BST()\nprint(tree._root)  # None\n# 1. Test node value insertion\ntree.insert_value(3)\ntree.insert_value(10)\ntree.insert_value(5)\ntree.insert_value(16)\ntree.insert_value(1)\ntree.insert_value(7)\ntree.insert_value(16)",
        "detail": "python-prac.Overflow._Data-Structures.bst.bst_alternate_starter",
        "documentation": {}
    },
    {
        "label": "closest_value",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.bst.bst_closest_value",
        "description": "python-prac.Overflow._Data-Structures.bst.bst_closest_value",
        "peekOfCode": "def closest_value(root, target):\n    \"\"\"\n    :type root: TreeNode\n    :type target: float\n    :rtype: int\n    \"\"\"\n    a = root.val\n    kid = root.left if target < a else root.right\n    if not kid:\n        return a",
        "detail": "python-prac.Overflow._Data-Structures.bst.bst_closest_value",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.bst.convert-bst-to-greater-tree",
        "description": "python-prac.Overflow._Data-Structures.bst.convert-bst-to-greater-tree",
        "peekOfCode": "class Solution(object):\n    def convertBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        def dfs(node):\n            if node == None:\n                return\n            else:",
        "detail": "python-prac.Overflow._Data-Structures.bst.convert-bst-to-greater-tree",
        "documentation": {}
    },
    {
        "label": "count_binary_substring",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.bst.count_binary_substring",
        "description": "python-prac.Overflow._Data-Structures.bst.count_binary_substring",
        "peekOfCode": "def count_binary_substring(s):\n    cur = 1\n    pre = 0\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            count = count + min(pre, cur)\n            pre = cur\n            cur = 1\n        else:",
        "detail": "python-prac.Overflow._Data-Structures.bst.count_binary_substring",
        "documentation": {}
    },
    {
        "label": "is_bst",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.bst.is_bst",
        "description": "python-prac.Overflow._Data-Structures.bst.is_bst",
        "peekOfCode": "def is_bst(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: bool\n    \"\"\"\n    stack = []\n    pre = None\n    while root or stack:\n        while root:\n            stack.append(root)",
        "detail": "python-prac.Overflow._Data-Structures.bst.is_bst",
        "documentation": {}
    },
    {
        "label": "longest_palindrome",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.bst.longest_palindromic_substring",
        "description": "python-prac.Overflow._Data-Structures.bst.longest_palindromic_substring",
        "peekOfCode": "def longest_palindrome(s):\n    if len(s) < 2:\n        return s\n    n_str = \"#\" + \"#\".join(s) + \"#\"\n    p = [0] * len(n_str)\n    mx, loc = 0, 0\n    index, maxlen = 0, 0\n    for i in range(len(n_str)):\n        if i < mx and 2 * loc - i < len(n_str):\n            p[i] = min(mx - i, p[2 * loc - i])",
        "detail": "python-prac.Overflow._Data-Structures.bst.longest_palindromic_substring",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.bst.minimum-absolute-difference-in-bst",
        "description": "python-prac.Overflow._Data-Structures.bst.minimum-absolute-difference-in-bst",
        "peekOfCode": "class Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        def dfs(node):\n            if node == None:\n                return\n            res.append(node.val)",
        "detail": "python-prac.Overflow._Data-Structures.bst.minimum-absolute-difference-in-bst",
        "documentation": {}
    },
    {
        "label": "repeat_substring",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.bst.repeat_substring",
        "description": "python-prac.Overflow._Data-Structures.bst.repeat_substring",
        "peekOfCode": "def repeat_substring(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    str = (s + s)[1:-1]\n    return s in str",
        "detail": "python-prac.Overflow._Data-Structures.bst.repeat_substring",
        "documentation": {}
    },
    {
        "label": "num_trees",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.bst.unique_bst",
        "description": "python-prac.Overflow._Data-Structures.bst.unique_bst",
        "peekOfCode": "def num_trees(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i + 1):",
        "detail": "python-prac.Overflow._Data-Structures.bst.unique_bst",
        "documentation": {}
    },
    {
        "label": "F(n)",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.bst.unique_bst",
        "description": "python-prac.Overflow._Data-Structures.bst.unique_bst",
        "peekOfCode": "F(n) = F(0) * F(n-1) + F(1) * F(n-2) + F(2) * F(n-3) + ... + F(n-2) * F(1) + F(n-1) * F(0)\n\"\"\"\ndef num_trees(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1",
        "detail": "python-prac.Overflow._Data-Structures.bst.unique_bst",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "description": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "peekOfCode": "def dfs(G, s):\n    vis, S = {s}, [s]\n    print(s)\n    while S:\n        flag = 0\n        for i in G[S[-1]]:\n            if i not in vis:\n                S.append(i)\n                vis.add(i)\n                flag = 1",
        "detail": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "description": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "peekOfCode": "def bfs(G, s):\n    vis, Q = {s}, deque([s])\n    print(s)\n    while Q:\n        u = Q.popleft()\n        for v in G[u]:\n            if v not in vis:\n                vis.add(v)\n                Q.append(v)\n                print(v)",
        "detail": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "documentation": {}
    },
    {
        "label": "dijk",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "description": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "peekOfCode": "def dijk(G, s):\n    dist, known, path = {s: 0}, set(), {s: 0}\n    while True:\n        if len(known) == len(G) - 1:\n            break\n        mini = 100000\n        for i in dist:\n            if i not in known and dist[i] < mini:\n                mini = dist[i]\n                u = i",
        "detail": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "documentation": {}
    },
    {
        "label": "topo",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "description": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "peekOfCode": "def topo(G, ind=None, Q=None):\n    if Q is None:\n        Q = [1]\n    if ind is None:\n        ind = [0] * (len(G) + 1)  # SInce oth Index is ignored\n        for u in G:\n            for v in G[u]:\n                ind[v] += 1\n        Q = deque()\n        for i in G:",
        "detail": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "documentation": {}
    },
    {
        "label": "adjm",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "description": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "peekOfCode": "def adjm():\n    n = input().strip()\n    a = []\n    for i in range(n):\n        a.append(map(int, input().strip().split()))\n    return a, n\n\"\"\"\n--------------------------------------------------------------------------------\n    Floyd Warshall's algorithm\n        Args :  G - Dictionary of edges",
        "detail": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "documentation": {}
    },
    {
        "label": "floy",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "description": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "peekOfCode": "def floy(A_and_n):\n    (A, n) = A_and_n\n    dist = list(A)\n    path = [[0] * n for i in range(n)]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dist[i][j] > dist[i][k] + dist[k][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\n                    path[i][k] = k",
        "detail": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "documentation": {}
    },
    {
        "label": "prim",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "description": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "peekOfCode": "def prim(G, s):\n    dist, known, path = {s: 0}, set(), {s: 0}\n    while True:\n        if len(known) == len(G) - 1:\n            break\n        mini = 100000\n        for i in dist:\n            if i not in known and dist[i] < mini:\n                mini = dist[i]\n                u = i",
        "detail": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "documentation": {}
    },
    {
        "label": "edglist",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "description": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "peekOfCode": "def edglist():\n    n, m = map(int, input().split(\" \"))\n    edges = []\n    for i in range(m):\n        edges.append(map(int, input().split(\" \")))\n    return edges, n\n\"\"\"\n--------------------------------------------------------------------------------\n    Kruskal's MST Algorithm\n        Args :  E - Edge list",
        "detail": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "documentation": {}
    },
    {
        "label": "krusk",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "description": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "peekOfCode": "def krusk(E_and_n):\n    # Sort edges on the basis of distance\n    (E, n) = E_and_n\n    E.sort(reverse=True, key=lambda x: x[2])\n    s = [{i} for i in range(1, n + 1)]\n    while True:\n        if len(s) == 1:\n            break\n        print(s)\n        x = E.pop()",
        "detail": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "documentation": {}
    },
    {
        "label": "find_isolated_nodes",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "description": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "peekOfCode": "def find_isolated_nodes(graph):\n    isolated = []\n    for node in graph:\n        if not graph[node]:\n            isolated.append(node)\n    return isolated",
        "detail": "python-prac.Overflow._Data-Structures.graph.basic_graphs",
        "documentation": {}
    },
    {
        "label": "checkBipartite",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.check_bipartite_graph_bfs",
        "description": "python-prac.Overflow._Data-Structures.graph.check_bipartite_graph_bfs",
        "peekOfCode": "def checkBipartite(graph):\n    queue = []\n    visited = [False] * len(graph)\n    color = [-1] * len(graph)\n    def bfs():\n        while queue:\n            u = queue.pop(0)\n            visited[u] = True\n            for neighbour in graph[u]:\n                if neighbour == u:",
        "detail": "python-prac.Overflow._Data-Structures.graph.check_bipartite_graph_bfs",
        "documentation": {}
    },
    {
        "label": "check_bipartite_dfs",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.check_bipartite_graph_dfs",
        "description": "python-prac.Overflow._Data-Structures.graph.check_bipartite_graph_dfs",
        "peekOfCode": "def check_bipartite_dfs(graph):\n    visited = [False] * len(graph)\n    color = [-1] * len(graph)\n    def dfs(v, c):\n        visited[v] = True\n        color[v] = c\n        for u in graph[v]:\n            if not visited[u]:\n                dfs(u, 1 - c)\n    for i in range(len(graph)):",
        "detail": "python-prac.Overflow._Data-Structures.graph.check_bipartite_graph_dfs",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.graph.check_bipartite_graph_dfs",
        "description": "python-prac.Overflow._Data-Structures.graph.check_bipartite_graph_dfs",
        "peekOfCode": "graph = {0: [1, 3], 1: [0, 2], 2: [1, 3], 3: [0, 2], 4: []}\nprint(check_bipartite_dfs(graph))",
        "detail": "python-prac.Overflow._Data-Structures.graph.check_bipartite_graph_dfs",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.check_digraph_strongly_connected",
        "description": "python-prac.Overflow._Data-Structures.graph.check_digraph_strongly_connected",
        "peekOfCode": "class Graph:\n    def __init__(self, v):\n        self.v = v\n        self.graph = defaultdict(list)\n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n    def dfs(self):\n        visited = [False] * self.v\n        self.dfs_util(0, visited)\n        if visited == [True] * self.v:",
        "detail": "python-prac.Overflow._Data-Structures.graph.check_digraph_strongly_connected",
        "documentation": {}
    },
    {
        "label": "g1",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.graph.check_digraph_strongly_connected",
        "description": "python-prac.Overflow._Data-Structures.graph.check_digraph_strongly_connected",
        "peekOfCode": "g1 = Graph(5)\ng1.add_edge(0, 1)\ng1.add_edge(1, 2)\ng1.add_edge(2, 3)\ng1.add_edge(3, 0)\ng1.add_edge(2, 4)\ng1.add_edge(4, 2)\nprint(\"Yes\") if g1.is_sc() else print(\"No\")\ng2 = Graph(4)\ng2.add_edge(0, 1)",
        "detail": "python-prac.Overflow._Data-Structures.graph.check_digraph_strongly_connected",
        "documentation": {}
    },
    {
        "label": "g2",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.graph.check_digraph_strongly_connected",
        "description": "python-prac.Overflow._Data-Structures.graph.check_digraph_strongly_connected",
        "peekOfCode": "g2 = Graph(4)\ng2.add_edge(0, 1)\ng2.add_edge(1, 2)\ng2.add_edge(2, 3)\nprint(\"Yes\") if g2.is_sc() else print(\"No\")",
        "detail": "python-prac.Overflow._Data-Structures.graph.check_digraph_strongly_connected",
        "documentation": {}
    },
    {
        "label": "UndirectedGraphNode",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "peekOfCode": "class UndirectedGraphNode:\n    def __init__(self, x):\n        self.label = x\n        self.neighbors = []\n# BFS\ndef clone_graph1(node):\n    if not node:\n        return\n    node_copy = UndirectedGraphNode(node.label)\n    dic = {node: node_copy}",
        "detail": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "documentation": {}
    },
    {
        "label": "clone_graph1",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "peekOfCode": "def clone_graph1(node):\n    if not node:\n        return\n    node_copy = UndirectedGraphNode(node.label)\n    dic = {node: node_copy}\n    queue = collections.deque([node])\n    while queue:\n        node = queue.popleft()\n        for neighbor in node.neighbors:\n            if neighbor not in dic:  # neighbor is not visited",
        "detail": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "documentation": {}
    },
    {
        "label": "clone_graph2",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "peekOfCode": "def clone_graph2(node):\n    if not node:\n        return\n    node_copy = UndirectedGraphNode(node.label)\n    dic = {node: node_copy}\n    stack = [node]\n    while stack:\n        node = stack.pop()\n        for neighbor in node.neighbors:\n            if neighbor not in dic:",
        "detail": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "documentation": {}
    },
    {
        "label": "clone_graph",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "peekOfCode": "def clone_graph(node):\n    if not node:\n        return\n    node_copy = UndirectedGraphNode(node.label)\n    dic = {node: node_copy}\n    dfs(node, dic)\n    return node_copy\ndef dfs(node, dic):\n    for neighbor in node.neighbors:\n        if neighbor not in dic:",
        "detail": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "peekOfCode": "def dfs(node, dic):\n    for neighbor in node.neighbors:\n        if neighbor not in dic:\n            neighbor_copy = UndirectedGraphNode(neighbor.label)\n            dic[neighbor] = neighbor_copy\n            dic[node].neighbors.append(neighbor_copy)\n            dfs(neighbor, dic)\n        else:\n            dic[node].neighbors.append(dic[neighbor])",
        "detail": "python-prac.Overflow._Data-Structures.graph.clone_graph",
        "documentation": {}
    },
    {
        "label": "DirectedGraph",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.directed_and_undirected_(weighted)_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.directed_and_undirected_(weighted)_graph",
        "peekOfCode": "class DirectedGraph:\n    def __init__(self):\n        self.graph = {}\n    # adding vertices and edges\n    # adding the weight is optional\n    # handles repetition\n    def add_pair(self, u, v, w=1):\n        if self.graph.get(u):\n            if self.graph[u].count([w, v]) == 0:\n                self.graph[u].append([w, v])",
        "detail": "python-prac.Overflow._Data-Structures.graph.directed_and_undirected_(weighted)_graph",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.directed_and_undirected_(weighted)_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.directed_and_undirected_(weighted)_graph",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.graph = {}\n    # adding vertices and edges\n    # adding the weight is optional\n    # handles repetition\n    def add_pair(self, u, v, w=1):\n        # check if the u exists\n        if self.graph.get(u):\n            # if there already is a edge",
        "detail": "python-prac.Overflow._Data-Structures.graph.directed_and_undirected_(weighted)_graph",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "peekOfCode": "def dfs(u, graph, visited_edge, path=[]):\n    path = path + [u]\n    for v in graph[u]:\n        if visited_edge[u][v] is False:\n            visited_edge[u][v], visited_edge[v][u] = True, True\n            path = dfs(v, graph, visited_edge, path)\n    return path\n# for checking in graph has euler path or circuit\ndef check_circuit_or_path(graph, max_node):\n    odd_degree_nodes = 0",
        "detail": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "documentation": {}
    },
    {
        "label": "check_circuit_or_path",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "peekOfCode": "def check_circuit_or_path(graph, max_node):\n    odd_degree_nodes = 0\n    odd_node = -1\n    for i in range(max_node):\n        if i not in graph.keys():\n            continue\n        if len(graph[i]) % 2 == 1:\n            odd_degree_nodes += 1\n            odd_node = i\n    if odd_degree_nodes == 0:",
        "detail": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "documentation": {}
    },
    {
        "label": "check_euler",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "peekOfCode": "def check_euler(graph, max_node):\n    visited_edge = [[False for _ in range(max_node + 1)] for _ in range(max_node + 1)]\n    check, odd_node = check_circuit_or_path(graph, max_node)\n    if check == 3:\n        print(\"graph is not Eulerian\")\n        print(\"no path\")\n        return\n    start_node = 1\n    if check == 2:\n        start_node = odd_node",
        "detail": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "description": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "peekOfCode": "def main():\n    G1 = {1: [2, 3, 4], 2: [1, 3], 3: [1, 2], 4: [1, 5], 5: [4]}\n    G2 = {1: [2, 3, 4, 5], 2: [1, 3], 3: [1, 2], 4: [1, 5], 5: [1, 4]}\n    G3 = {1: [2, 3, 4], 2: [1, 3, 4], 3: [1, 2], 4: [1, 2, 5], 5: [4]}\n    G4 = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n    G5 = {\n        1: [],\n        2: []\n        # all degree is zero\n    }",
        "detail": "python-prac.Overflow._Data-Structures.graph.eulerian_path_and_circuit_for_undirected_graph",
        "documentation": {}
    },
    {
        "label": "get_distinct_edge",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def get_distinct_edge(edge_array):\n    \"\"\"\n    Return Distinct edges from edge array of multiple graphs\n    >>> sorted(get_distinct_edge(edge_array))\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n    \"\"\"\n    distinct_edge = set()\n    for row in edge_array:\n        for item in row:\n            distinct_edge.add(item[0])",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "get_bitcode",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def get_bitcode(edge_array, distinct_edge):\n    \"\"\"\n    Return bitcode of distinct_edge\n    \"\"\"\n    bitcode = [\"0\"] * len(edge_array)\n    for i, row in enumerate(edge_array):\n        for item in row:\n            if distinct_edge in item[0]:\n                bitcode[i] = \"1\"\n                break",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "get_frequency_table",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def get_frequency_table(edge_array):\n    \"\"\"\n    Returns Frequency Table\n    \"\"\"\n    distinct_edge = get_distinct_edge(edge_array)\n    frequency_table = dict()\n    for item in distinct_edge:\n        bit = get_bitcode(edge_array, item)\n        # print('bit',bit)\n        # bt=''.join(bit)",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "get_nodes",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def get_nodes(frequency_table):\n    \"\"\"\n    Returns nodes\n    format nodes={bitcode:edges that represent the bitcode}\n    >>> get_nodes([['ab', 5, '11111'], ['ac', 5, '11111'], ['df', 5, '11111'],\n    ...            ['bd', 5, '11111'], ['bc', 5, '11111']])\n    {'11111': ['ab', 'ac', 'df', 'bd', 'bc']}\n    \"\"\"\n    nodes = {}\n    for i, item in enumerate(frequency_table):",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "get_cluster",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def get_cluster(nodes):\n    \"\"\"\n    Returns cluster\n    format cluster:{WT(bitcode):nodes with same WT}\n    \"\"\"\n    cluster = {}\n    for key, value in nodes.items():\n        cluster.setdefault(key.count(\"1\"), {})[key] = value\n    return cluster\ndef get_support(cluster):",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "get_support",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def get_support(cluster):\n    \"\"\"\n    Returns support\n    >>> get_support({5: {'11111': ['ab', 'ac', 'df', 'bd', 'bc']},\n    ...              4: {'11101': ['ef', 'eg', 'de', 'fg'], '11011': ['cd']},\n    ...              3: {'11001': ['ad'], '10101': ['dg']},\n    ...              2: {'10010': ['dh', 'bh'], '11000': ['be'], '10100': ['gh'],\n    ...                  '10001': ['ce']},\n    ...              1: {'00100': ['fh', 'eh'], '10000': ['hi']}})\n    [100.0, 80.0, 60.0, 40.0, 20.0]",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "print_all",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def print_all() -> None:\n    print(\"\\nNodes\\n\")\n    for key, value in nodes.items():\n        print(key, value)\n    print(\"\\nSupport\\n\")\n    print(support)\n    print(\"\\n Cluster \\n\")\n    for key, value in sorted(cluster.items(), reverse=True):\n        print(key, value)\n    print(\"\\n Graph\\n\")",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "create_edge",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def create_edge(nodes, graph, cluster, c1):\n    \"\"\"\n    create edge between the nodes\n    \"\"\"\n    for i in cluster[c1].keys():\n        count = 0\n        c2 = c1 + 1\n        while c2 < max(cluster.keys()):\n            for j in cluster[c2].keys():\n                \"\"\"",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "construct_graph",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def construct_graph(cluster, nodes):\n    X = cluster[max(cluster.keys())]\n    cluster[max(cluster.keys()) + 1] = \"Header\"\n    graph = {}\n    for i in X:\n        if tuple([\"Header\"]) in graph:\n            graph[tuple([\"Header\"])].append(X[i])\n        else:\n            graph[tuple([\"Header\"])] = [X[i]]\n    for i in X:",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "myDFS",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def myDFS(graph, start, end, path=[]):\n    \"\"\"\n    find different DFS walk from given node to Header node\n    \"\"\"\n    path = path + [start]\n    if start == end:\n        paths.append(path)\n    for node in graph[start]:\n        if tuple(node) not in path:\n            myDFS(graph, tuple(node), end, path)",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "find_freq_subgraph_given_support",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def find_freq_subgraph_given_support(s, cluster, graph):\n    \"\"\"\n    find edges of multiple frequent subgraphs\n    \"\"\"\n    k = int(s / 100 * (len(cluster) - 1))\n    for i in cluster[k].keys():\n        myDFS(graph, tuple(cluster[k][i]), tuple([\"Header\"]))\ndef freq_subgraphs_edge_list(paths):\n    \"\"\"\n    returns Edge list for frequent subgraphs",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "freq_subgraphs_edge_list",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def freq_subgraphs_edge_list(paths):\n    \"\"\"\n    returns Edge list for frequent subgraphs\n    \"\"\"\n    freq_sub_EL = []\n    for edges in paths:\n        EL = []\n        for j in range(len(edges) - 1):\n            temp = list(edges[j])\n            for e in temp:",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "preprocess",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "def preprocess(edge_array):\n    \"\"\"\n    Preprocess the edge array\n    >>> preprocess([['ab-e1', 'ac-e3', 'ad-e5', 'bc-e4', 'bd-e2', 'be-e6', 'bh-e12',\n    ...              'cd-e2', 'ce-e4', 'de-e1', 'df-e8', 'dg-e5', 'dh-e10', 'ef-e3',\n    ...              'eg-e2', 'fg-e6', 'gh-e6', 'hi-e3']])\n    \"\"\"\n    for i in range(len(edge_array)):\n        for j in range(len(edge_array[i])):\n            t = edge_array[i][j].split(\"-\")",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "edge_array",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "description": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "peekOfCode": "edge_array = [\n    ['ab-e1', 'ac-e3', 'ad-e5', 'bc-e4', 'bd-e2', 'be-e6', 'bh-e12', 'cd-e2', 'ce-e4',\n     'de-e1', 'df-e8', 'dg-e5', 'dh-e10', 'ef-e3', 'eg-e2', 'fg-e6', 'gh-e6', 'hi-e3'],\n    ['ab-e1', 'ac-e3', 'ad-e5', 'bc-e4', 'bd-e2', 'be-e6', 'cd-e2', 'de-e1', 'df-e8',\n     'ef-e3', 'eg-e2', 'fg-e6'],\n    ['ab-e1', 'ac-e3', 'bc-e4', 'bd-e2', 'de-e1', 'df-e8', 'dg-e5', 'ef-e3', 'eg-e2',\n     'eh-e12', 'fg-e6', 'fh-e10', 'gh-e6'],\n    ['ab-e1', 'ac-e3', 'bc-e4', 'bd-e2', 'bh-e12', 'cd-e2', 'df-e8', 'dh-e10'],\n    ['ab-e1', 'ac-e3', 'ad-e5', 'bc-e4', 'bd-e2', 'cd-e2', 'ce-e4', 'de-e1', 'df-e8',\n     'dg-e5', 'ef-e3', 'eg-e2', 'fg-e6']",
        "detail": "python-prac.Overflow._Data-Structures.graph.frequent_pattern_graph_miner",
        "documentation": {}
    },
    {
        "label": "stable_matching",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.gale_shapley_bigraph",
        "description": "python-prac.Overflow._Data-Structures.graph.gale_shapley_bigraph",
        "peekOfCode": "def stable_matching(donor_pref: list[int], recipient_pref: list[int]) -> list[int]:\n    \"\"\"\n    Finds the stable match in any bipartite graph, i.e a pairing where no 2 objects\n    prefer each other over their partner.  The function accepts the preferences of\n    oegan donors and recipients (where both are assigned numbers from 0 to n-1) and\n    returns a list where the index position corresponds to the donor and value at the\n    index is the organ recipient.\n    To better understand the algorithm, see also:\n    https://github.com/akashvshroff/Gale_Shapley_Stable_Matching (README).\n    https://www.youtube.com/watch?v=Qcv1IqHWAzg&t=13s (Numberphile YouTube).",
        "detail": "python-prac.Overflow._Data-Structures.graph.gale_shapley_bigraph",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.graph",
        "description": "python-prac.Overflow._Data-Structures.graph.graph",
        "peekOfCode": "class Node(object):\n    def __init__(self, name):\n        self.name = name\n    @staticmethod\n    def get_name(obj):\n        if isinstance(obj, Node):\n            return obj.name\n        elif isinstance(obj, str):\n            return obj\n        return \"\"",
        "detail": "python-prac.Overflow._Data-Structures.graph.graph",
        "documentation": {}
    },
    {
        "label": "DirectedEdge",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.graph",
        "description": "python-prac.Overflow._Data-Structures.graph.graph",
        "peekOfCode": "class DirectedEdge(object):\n    def __init__(self, node_from, node_to):\n        self.nf = node_from\n        self.nt = node_to\n    def __eq__(self, obj):\n        if isinstance(obj, DirectedEdge):\n            return obj.nf == self.nf and obj.nt == self.nt\n        return False\n    def __repr__(self):\n        return \"({0} -> {1})\".format(self.nf, self.nt)",
        "detail": "python-prac.Overflow._Data-Structures.graph.graph",
        "documentation": {}
    },
    {
        "label": "DirectedGraph",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.graph",
        "description": "python-prac.Overflow._Data-Structures.graph.graph",
        "peekOfCode": "class DirectedGraph(object):\n    def __init__(self, load_dict={}):\n        self.nodes = []\n        self.edges = []\n        self.adjmt = {}\n        if load_dict and type(load_dict) == dict:\n            for v in load_dict:\n                node_from = self.add_node(v)\n                self.adjmt[node_from] = []\n                for w in load_dict[v]:",
        "detail": "python-prac.Overflow._Data-Structures.graph.graph",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.graph",
        "description": "python-prac.Overflow._Data-Structures.graph.graph",
        "peekOfCode": "class Graph:\n    def __init__(self, vertices):\n        # No. of vertices\n        self.V = vertices\n        # default dictionary to store graph\n        self.graph = {}\n        # To store transitive closure\n        self.tc = [[0 for j in range(self.V)] for i in range(self.V)]\n    # function to add an edge to graph\n    def add_edge(self, u, v):",
        "detail": "python-prac.Overflow._Data-Structures.graph.graph",
        "documentation": {}
    },
    {
        "label": "floyd_warshall",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.graphs_floyd_warshall",
        "description": "python-prac.Overflow._Data-Structures.graph.graphs_floyd_warshall",
        "peekOfCode": "def floyd_warshall(graph, v):\n    \"\"\"\n    :param graph: 2D array calculated from weight[edge[i, j]]\n    :type graph: List[List[float]]\n    :param v: number of vertices\n    :type v: int\n    :return: shortest distance between all vertex pairs\n    distance[u][v] will contain the shortest distance from vertex u to v.\n    1. For all edges from v to n, distance[i][j] = weight(edge(i, j)).\n    3. The algorithm then performs distance[i][j] = min(distance[i][j], distance[i][k] +",
        "detail": "python-prac.Overflow._Data-Structures.graph.graphs_floyd_warshall",
        "documentation": {}
    },
    {
        "label": "AdjacencyList",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.graph_list",
        "description": "python-prac.Overflow._Data-Structures.graph.graph_list",
        "peekOfCode": "class AdjacencyList:\n    def __init__(self):\n        self.adj_list = {}\n    def add_edge(self, from_vertex: int, to_vertex: int) -> None:\n        # check if vertex is already present\n        if from_vertex in self.adj_list:\n            self.adj_list[from_vertex].append(to_vertex)\n        else:\n            self.adj_list[from_vertex] = [to_vertex]\n    def print_list(self) -> None:",
        "detail": "python-prac.Overflow._Data-Structures.graph.graph_list",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.graph_matrix",
        "description": "python-prac.Overflow._Data-Structures.graph.graph_matrix",
        "peekOfCode": "class Graph:\n    def __init__(self, vertex):\n        self.vertex = vertex\n        self.graph = [[0] * vertex for i in range(vertex)]\n    def add_edge(self, u, v):\n        self.graph[u - 1][v - 1] = 1\n        self.graph[v - 1][u - 1] = 1\n    def show(self):\n        for i in self.graph:\n            for j in i:",
        "detail": "python-prac.Overflow._Data-Structures.graph.graph_matrix",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.graph.graph_matrix",
        "description": "python-prac.Overflow._Data-Structures.graph.graph_matrix",
        "peekOfCode": "g = Graph(100)\ng.add_edge(1, 4)\ng.add_edge(4, 2)\ng.add_edge(4, 5)\ng.add_edge(2, 5)\ng.add_edge(5, 3)\ng.show()",
        "detail": "python-prac.Overflow._Data-Structures.graph.graph_matrix",
        "documentation": {}
    },
    {
        "label": "kthPermutation",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.graph.kth_lexicographic_permutation",
        "description": "python-prac.Overflow._Data-Structures.graph.kth_lexicographic_permutation",
        "peekOfCode": "def kthPermutation(k, n):\n    \"\"\"\n    Finds k'th lexicographic permutation (in increasing order) of\n    0,1,2,...n-1 in O(n^2) time.\n    Examples:\n    First permutation is always 0,1,2,...n\n    >>> kthPermutation(0,5)\n    [0, 1, 2, 3, 4]\n    The order of permutation of 0,1,2,3 is [0,1,2,3], [0,1,3,2], [0,2,1,3],\n    [0,2,3,1], [0,3,1,2], [0,3,2,1], [1,0,2,3], [1,0,3,2], [1,2,0,3],",
        "detail": "python-prac.Overflow._Data-Structures.graph.kth_lexicographic_permutation",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "description": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "peekOfCode": "class Graph:\n    def __init__(self, v):\n        self.v = v\n        self.graph = defaultdict(list)\n        self.has_path = False\n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n    def dfs(self, x, y):\n        visited = [False] * self.v\n        self.dfsutil(visited, x, y)",
        "detail": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "description": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "peekOfCode": "g = Graph(4)\ng.add_edge(0, 1)\ng.add_edge(0, 2)\ng.add_edge(1, 2)\ng.add_edge(2, 0)\ng.add_edge(2, 3)\ng.add_edge(3, 3)\nu = 1\nv = 3\nif g.is_reachable(u, v):",
        "detail": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "description": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "peekOfCode": "u = 1\nv = 3\nif g.is_reachable(u, v):\n    print(\"There is a path from %d to %d\" % (u, v))\nelse:\n    print(\"There is no path from %d to %d\" % (u, v))\nu = 3\nv = 1\nif g.is_reachable(u, v):\n    print(\"There is a path from %d to %d\" % (u, v))",
        "detail": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "description": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "peekOfCode": "v = 3\nif g.is_reachable(u, v):\n    print(\"There is a path from %d to %d\" % (u, v))\nelse:\n    print(\"There is no path from %d to %d\" % (u, v))\nu = 3\nv = 1\nif g.is_reachable(u, v):\n    print(\"There is a path from %d to %d\" % (u, v))\nelse:",
        "detail": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "description": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "peekOfCode": "u = 3\nv = 1\nif g.is_reachable(u, v):\n    print(\"There is a path from %d to %d\" % (u, v))\nelse:\n    print(\"There is no path from %d to %d\" % (u, v))",
        "detail": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "description": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "peekOfCode": "v = 1\nif g.is_reachable(u, v):\n    print(\"There is a path from %d to %d\" % (u, v))\nelse:\n    print(\"There is no path from %d to %d\" % (u, v))",
        "detail": "python-prac.Overflow._Data-Structures.graph.path_between_two_vertices_in_digraph",
        "documentation": {}
    },
    {
        "label": "CircularQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.circular_queue",
        "description": "python-prac.Overflow._Data-Structures.queue.circular_queue",
        "peekOfCode": "class CircularQueue:\n    \"\"\"Circular FIFO queue with a fixed capacity\"\"\"\n    def __init__(self, n: int):\n        self.n = n\n        self.array = [None] * self.n\n        self.front = 0  # index of the first element\n        self.rear = 0\n        self.size = 0\n    def __len__(self) -> int:\n        \"\"\"",
        "detail": "python-prac.Overflow._Data-Structures.queue.circular_queue",
        "documentation": {}
    },
    {
        "label": "de",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.queue.double_ended_queue",
        "description": "python-prac.Overflow._Data-Structures.queue.double_ended_queue",
        "peekOfCode": "de = collections.deque([1, 2, 3])\n# using extend() to add numbers to right end\n# adds 4,5,6 to right end\nde.extend([4, 5, 6])\n# printing modified deque\nprint(\"The deque after extending deque at end is : \")\nprint(de)\n# using extendleft() to add numbers to left end\n# adds 7,8,9 to right end\nde.extendleft([7, 8, 9])",
        "detail": "python-prac.Overflow._Data-Structures.queue.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "startValue",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.queue.double_ended_queue",
        "description": "python-prac.Overflow._Data-Structures.queue.double_ended_queue",
        "peekOfCode": "startValue = de.pop()\nprint(\"The deque after popping value at end is : \")\nprint(de)\n# get left-end value and eliminate\nendValue = de.popleft()\nprint(\"The deque after popping value at start is : \")\nprint(de)\n# eliminate element searched by value\nde.remove(5)\nprint(\"The deque after eliminating element searched by value : \")",
        "detail": "python-prac.Overflow._Data-Structures.queue.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "endValue",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.queue.double_ended_queue",
        "description": "python-prac.Overflow._Data-Structures.queue.double_ended_queue",
        "peekOfCode": "endValue = de.popleft()\nprint(\"The deque after popping value at start is : \")\nprint(de)\n# eliminate element searched by value\nde.remove(5)\nprint(\"The deque after eliminating element searched by value : \")\nprint(de)",
        "detail": "python-prac.Overflow._Data-Structures.queue.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.linked_queue",
        "description": "python-prac.Overflow._Data-Structures.queue.linked_queue",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next = None\n    def __str__(self) -> str:\n        return f\"{self.data}\"\nclass LinkedQueue:\n    \"\"\"\n    >>> queue = LinkedQueue()\n    >>> queue.is_empty()",
        "detail": "python-prac.Overflow._Data-Structures.queue.linked_queue",
        "documentation": {}
    },
    {
        "label": "LinkedQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.linked_queue",
        "description": "python-prac.Overflow._Data-Structures.queue.linked_queue",
        "peekOfCode": "class LinkedQueue:\n    \"\"\"\n    >>> queue = LinkedQueue()\n    >>> queue.is_empty()\n    True\n    >>> queue.put(5)\n    >>> queue.put(9)\n    >>> queue.put('python')\n    >>> queue.is_empty();\n    False",
        "detail": "python-prac.Overflow._Data-Structures.queue.linked_queue",
        "documentation": {}
    },
    {
        "label": "PriorityQueueNode",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.priority_queue",
        "description": "python-prac.Overflow._Data-Structures.queue.priority_queue",
        "peekOfCode": "class PriorityQueueNode:\n    def __init__(self, data, priority):\n        self.data = data\n        self.priority = priority\n    def __repr__(self):\n        return \"{}: {}\".format(self.data, self.priority)\nclass PriorityQueue:\n    def __init__(self, items=None, priorities=None):\n        \"\"\"Create a priority queue with items (list or iterable).\n        If items is not passed, create empty priority queue.\"\"\"",
        "detail": "python-prac.Overflow._Data-Structures.queue.priority_queue",
        "documentation": {}
    },
    {
        "label": "PriorityQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.priority_queue",
        "description": "python-prac.Overflow._Data-Structures.queue.priority_queue",
        "peekOfCode": "class PriorityQueue:\n    def __init__(self, items=None, priorities=None):\n        \"\"\"Create a priority queue with items (list or iterable).\n        If items is not passed, create empty priority queue.\"\"\"\n        self.priority_queue_list = []\n        if items is None:\n            return\n        if priorities is None:\n            priorities = itertools.repeat(None)\n        for item, priority in zip(items, priorities):",
        "detail": "python-prac.Overflow._Data-Structures.queue.priority_queue",
        "documentation": {}
    },
    {
        "label": "OverFlowError",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "description": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "peekOfCode": "class OverFlowError(Exception):\n    pass\nclass UnderFlowError(Exception):\n    pass\nclass FixedPriorityQueue:\n    \"\"\"\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.",
        "detail": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "UnderFlowError",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "description": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "peekOfCode": "class UnderFlowError(Exception):\n    pass\nclass FixedPriorityQueue:\n    \"\"\"\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.\n    Examples\n    >>> fpq = FixedPriorityQueue()",
        "detail": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "FixedPriorityQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "description": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "peekOfCode": "class FixedPriorityQueue:\n    \"\"\"\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.\n    Examples\n    >>> fpq = FixedPriorityQueue()\n    >>> fpq.enqueue(0, 10)\n    >>> fpq.enqueue(1, 70)",
        "detail": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "ElementPriorityQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "description": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "peekOfCode": "class ElementPriorityQueue:\n    \"\"\"\n    Element Priority Queue is the same as Fixed Priority Queue except that the value of\n    the element itself is the priority. The rules for priorities are the same the as\n    Fixed Priority Queue.\n    >>> epq = ElementPriorityQueue()\n    >>> epq.enqueue(10)\n    >>> epq.enqueue(70)\n    >>> epq.enqueue(4)\n    >>> epq.enqueue(1)",
        "detail": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "fixed_priority_queue",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "description": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "peekOfCode": "def fixed_priority_queue():\n    fpq = FixedPriorityQueue()\n    fpq.enqueue(0, 10)\n    fpq.enqueue(1, 70)\n    fpq.enqueue(0, 100)\n    fpq.enqueue(2, 1)\n    fpq.enqueue(2, 5)\n    fpq.enqueue(1, 7)\n    fpq.enqueue(2, 4)\n    fpq.enqueue(1, 64)",
        "detail": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "element_priority_queue",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "description": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "peekOfCode": "def element_priority_queue():\n    epq = ElementPriorityQueue()\n    epq.enqueue(10)\n    epq.enqueue(70)\n    epq.enqueue(100)\n    epq.enqueue(1)\n    epq.enqueue(5)\n    epq.enqueue(7)\n    epq.enqueue(4)\n    epq.enqueue(64)",
        "detail": "python-prac.Overflow._Data-Structures.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "AbstractQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.queue",
        "description": "python-prac.Overflow._Data-Structures.queue.queue",
        "peekOfCode": "class AbstractQueue(metaclass=ABCMeta):\n    def __init__(self):\n        self._size = 0\n    def __len__(self):\n        return self._size\n    def is_empty(self):\n        return self._size == 0\n    @abstractmethod\n    def enqueue(self, value):\n        pass",
        "detail": "python-prac.Overflow._Data-Structures.queue.queue",
        "documentation": {}
    },
    {
        "label": "ArrayQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.queue",
        "description": "python-prac.Overflow._Data-Structures.queue.queue",
        "peekOfCode": "class ArrayQueue(AbstractQueue):\n    def __init__(self, capacity=10):\n        \"\"\"\n        Initialize python List with capacity of 10 or user given input.\n        Python List type is a dynamic array, so we have to restrict its\n        dynamic nature to make it work like a static array.\n        \"\"\"\n        super().__init__()\n        self._array = [None] * capacity\n        self._front = 0",
        "detail": "python-prac.Overflow._Data-Structures.queue.queue",
        "documentation": {}
    },
    {
        "label": "QueueNode",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.queue",
        "description": "python-prac.Overflow._Data-Structures.queue.queue",
        "peekOfCode": "class QueueNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nclass LinkedListQueue(AbstractQueue):\n    def __init__(self):\n        super().__init__()\n        self._front = None\n        self._rear = None\n    def __iter__(self):",
        "detail": "python-prac.Overflow._Data-Structures.queue.queue",
        "documentation": {}
    },
    {
        "label": "LinkedListQueue",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.queue",
        "description": "python-prac.Overflow._Data-Structures.queue.queue",
        "peekOfCode": "class LinkedListQueue(AbstractQueue):\n    def __init__(self):\n        super().__init__()\n        self._front = None\n        self._rear = None\n    def __iter__(self):\n        probe = self._front\n        while True:\n            if probe is None:\n                return",
        "detail": "python-prac.Overflow._Data-Structures.queue.queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.queue.queue_on_list",
        "description": "python-prac.Overflow._Data-Structures.queue.queue_on_list",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.entries = []\n        self.length = 0\n        self.front = 0\n    def __str__(self):\n        printed = \"<\" + str(self.entries)[1:-1] + \">\"\n        return printed\n    \"\"\"Enqueues {@code item}\n    @param item",
        "detail": "python-prac.Overflow._Data-Structures.queue.queue_on_list",
        "documentation": {}
    },
    {
        "label": "reconstruct_queue",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.queue.reconstruct_queue",
        "description": "python-prac.Overflow._Data-Structures.queue.reconstruct_queue",
        "peekOfCode": "def reconstruct_queue(people):\n    \"\"\"\n    :type people: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    queue = []\n    people.sort(key=lambda x: (-x[0], x[1]))\n    for h, k in people:\n        queue.insert(k, [h, k])\n    return queue",
        "detail": "python-prac.Overflow._Data-Structures.queue.reconstruct_queue",
        "documentation": {}
    },
    {
        "label": "dijkstras_two_stack_algorithm",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.stack.dijkstras_two_stack_algorithm",
        "description": "python-prac.Overflow._Data-Structures.stack.dijkstras_two_stack_algorithm",
        "peekOfCode": "def dijkstras_two_stack_algorithm(equation: str) -> int:\n    \"\"\"\n    DocTests\n    >>> dijkstras_two_stack_algorithm(\"(5 + 3)\")\n    8\n    >>> dijkstras_two_stack_algorithm(\"((9 - (2 + 9)) + (8 - 1))\")\n    5\n    >>> dijkstras_two_stack_algorithm(\"((((3 - 2) - (2 + 3)) + (2 - 4)) + 3)\")\n    -3\n    :param equation: a string",
        "detail": "python-prac.Overflow._Data-Structures.stack.dijkstras_two_stack_algorithm",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.stack.dijkstras_two_stack_algorithm",
        "description": "python-prac.Overflow._Data-Structures.stack.dijkstras_two_stack_algorithm",
        "peekOfCode": "__author__ = \"Alexander Joslin\"\nimport operator as op\nfrom .stack import Stack\ndef dijkstras_two_stack_algorithm(equation: str) -> int:\n    \"\"\"\n    DocTests\n    >>> dijkstras_two_stack_algorithm(\"(5 + 3)\")\n    8\n    >>> dijkstras_two_stack_algorithm(\"((9 - (2 + 9)) + (8 - 1))\")\n    5",
        "detail": "python-prac.Overflow._Data-Structures.stack.dijkstras_two_stack_algorithm",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.linked_stack",
        "description": "python-prac.Overflow._Data-Structures.stack.linked_stack",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    def __str__(self):\n        return f\"{self.data}\"\nclass LinkedStack:\n    \"\"\"\n    Linked List Stack implementing push (to top),\n    pop (from top) and is_empty",
        "detail": "python-prac.Overflow._Data-Structures.stack.linked_stack",
        "documentation": {}
    },
    {
        "label": "LinkedStack",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.linked_stack",
        "description": "python-prac.Overflow._Data-Structures.stack.linked_stack",
        "peekOfCode": "class LinkedStack:\n    \"\"\"\n    Linked List Stack implementing push (to top),\n    pop (from top) and is_empty\n    >>> stack = LinkedStack()\n    >>> stack.is_empty()\n    True\n    >>> stack.push(5)\n    >>> stack.push(9)\n    >>> stack.push('python')",
        "detail": "python-prac.Overflow._Data-Structures.stack.linked_stack",
        "documentation": {}
    },
    {
        "label": "OrderedStack",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.ordered_stack",
        "description": "python-prac.Overflow._Data-Structures.stack.ordered_stack",
        "peekOfCode": "class OrderedStack:\n    def __init__(self):\n        self.items = []\n    def is_empty(self):\n        return self.items == []\n    def push_t(self, item):\n        self.items.append(item)\n    def push(self, item):  # push method to maintain order when pushing new elements\n        temp_stack = OrderedStack()\n        if self.is_empty() or item > self.peek():",
        "detail": "python-prac.Overflow._Data-Structures.stack.ordered_stack",
        "documentation": {}
    },
    {
        "label": "TaskletToLastId",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "description": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "peekOfCode": "class TaskletToLastId:\n    \"\"\"\n    So, why not a WeakKeyDictionary?\n    The problem is that removals from the WeakKeyDictionary will create a new tasklet (as it adds a callback to\n    remove the key when it's garbage-collected), so, we can get into a recursion.\n    \"\"\"\n    def __init__(self):\n        self.tasklet_ref_to_last_id = {}\n        self._i = 0\n    def get(self, tasklet):",
        "detail": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "documentation": {}
    },
    {
        "label": "_TaskletInfo",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "description": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "peekOfCode": "class _TaskletInfo:\n    _last_id = 0\n    def __init__(self, tasklet_weakref, tasklet):\n        self.frame_id = None\n        self.tasklet_weakref = tasklet_weakref\n        last_id = _tasklet_to_last_id.get(tasklet)\n        if last_id is None:\n            _TaskletInfo._last_id += 1\n            last_id = _TaskletInfo._last_id\n            _tasklet_to_last_id[tasklet] = last_id",
        "detail": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "documentation": {}
    },
    {
        "label": "get_tasklet_info",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "description": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "peekOfCode": "def get_tasklet_info(tasklet):\n    return register_tasklet_info(tasklet)\n# =======================================================================================================================\n# register_tasklet_info\n# =======================================================================================================================\ndef register_tasklet_info(tasklet):\n    r = weakref.ref(tasklet)\n    info = _weak_tasklet_registered_to_info.get(r)\n    if info is None:\n        info = _weak_tasklet_registered_to_info[r] = _TaskletInfo(r, tasklet)",
        "detail": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "documentation": {}
    },
    {
        "label": "register_tasklet_info",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "description": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "peekOfCode": "def register_tasklet_info(tasklet):\n    r = weakref.ref(tasklet)\n    info = _weak_tasklet_registered_to_info.get(r)\n    if info is None:\n        info = _weak_tasklet_registered_to_info[r] = _TaskletInfo(r, tasklet)\n    return info\n_application_set_schedule_callback = None\n# =======================================================================================================================\n# _schedule_callback\n# =======================================================================================================================",
        "detail": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "documentation": {}
    },
    {
        "label": "patch_stackless",
        "kind": 2,
        "importPath": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "description": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "peekOfCode": "def patch_stackless():\n    \"\"\"\n    This function should be called to patch the stackless module so that new tasklets are properly tracked in the\n    debugger.\n    \"\"\"\n    global _application_set_schedule_callback\n    _application_set_schedule_callback = stackless.set_schedule_callback(\n        _schedule_callback\n    )\n    def set_schedule_callback(callable):",
        "detail": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "documentation": {}
    },
    {
        "label": "_tasklet_to_last_id",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "description": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "peekOfCode": "_tasklet_to_last_id = TaskletToLastId()\n# =======================================================================================================================\n# _TaskletInfo\n# =======================================================================================================================\nclass _TaskletInfo:\n    _last_id = 0\n    def __init__(self, tasklet_weakref, tasklet):\n        self.frame_id = None\n        self.tasklet_weakref = tasklet_weakref\n        last_id = _tasklet_to_last_id.get(tasklet)",
        "detail": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "documentation": {}
    },
    {
        "label": "_weak_tasklet_registered_to_info",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "description": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "peekOfCode": "_weak_tasklet_registered_to_info = {}\n# =======================================================================================================================\n# get_tasklet_info\n# =======================================================================================================================\ndef get_tasklet_info(tasklet):\n    return register_tasklet_info(tasklet)\n# =======================================================================================================================\n# register_tasklet_info\n# =======================================================================================================================\ndef register_tasklet_info(tasklet):",
        "detail": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "documentation": {}
    },
    {
        "label": "_application_set_schedule_callback",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "description": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "peekOfCode": "_application_set_schedule_callback = None\n# =======================================================================================================================\n# _schedule_callback\n# =======================================================================================================================\ndef _schedule_callback(prev, next):\n    \"\"\"\n    Called when a context is stopped or a new context is made runnable.\n    \"\"\"\n    try:\n        if not prev and not next:",
        "detail": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "documentation": {}
    },
    {
        "label": "patch_stackless",
        "kind": 5,
        "importPath": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "description": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "peekOfCode": "patch_stackless = call_only_once(patch_stackless)",
        "detail": "python-prac.Overflow._Data-Structures.stack.pydevd_stackless",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.queue_on_pseudo_stack",
        "description": "python-prac.Overflow._Data-Structures.stack.queue_on_pseudo_stack",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.stack = []\n        self.length = 0\n    def __str__(self):\n        printed = \"<\" + str(self.stack)[1:-1] + \">\"\n        return printed\n    \"\"\"Enqueues {@code item}\n    @param item\n        item to enqueue\"\"\"",
        "detail": "python-prac.Overflow._Data-Structures.stack.queue_on_pseudo_stack",
        "documentation": {}
    },
    {
        "label": "AbstractStack",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.stack",
        "description": "python-prac.Overflow._Data-Structures.stack.stack",
        "peekOfCode": "class AbstractStack(metaclass=ABCMeta):\n    \"\"\"Abstract Class for Stacks.\"\"\"\n    def __init__(self):\n        self._top = -1\n    def __len__(self):\n        return self._top + 1\n    def __str__(self):\n        result = \" \".join(map(str, self))\n        return \"Top-> \" + result\n    def is_empty(self):",
        "detail": "python-prac.Overflow._Data-Structures.stack.stack",
        "documentation": {}
    },
    {
        "label": "ArrayStack",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.stack",
        "description": "python-prac.Overflow._Data-Structures.stack.stack",
        "peekOfCode": "class ArrayStack(AbstractStack):\n    def __init__(self, size=10):\n        \"\"\"\n        Initialize python List with size of 10 or user given input.\n        Python List type is a dynamic array, so we have to restrict its\n        dynamic nature to make it work like a static array.\n        \"\"\"\n        super().__init__()\n        self._array = [None] * size\n    def __iter__(self):",
        "detail": "python-prac.Overflow._Data-Structures.stack.stack",
        "documentation": {}
    },
    {
        "label": "StackNode",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.stack",
        "description": "python-prac.Overflow._Data-Structures.stack.stack",
        "peekOfCode": "class StackNode:\n    \"\"\"Represents a single stack node.\"\"\"\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nclass LinkedListStack(AbstractStack):\n    def __init__(self):\n        super().__init__()\n        self.head = None\n    def __iter__(self):",
        "detail": "python-prac.Overflow._Data-Structures.stack.stack",
        "documentation": {}
    },
    {
        "label": "LinkedListStack",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.stack",
        "description": "python-prac.Overflow._Data-Structures.stack.stack",
        "peekOfCode": "class LinkedListStack(AbstractStack):\n    def __init__(self):\n        super().__init__()\n        self.head = None\n    def __iter__(self):\n        probe = self.head\n        while True:\n            if probe is None:\n                return\n            yield probe.value",
        "detail": "python-prac.Overflow._Data-Structures.stack.stack",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.stack_using_dll",
        "description": "python-prac.Overflow._Data-Structures.stack.stack_using_dll",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data  # Assign data\n        self.next = None  # Initialize next as null\n        self.prev = None  # Initialize prev as null\nclass Stack:\n    \"\"\"\n    >>> stack = Stack()\n    >>> stack.is_empty()\n    True",
        "detail": "python-prac.Overflow._Data-Structures.stack.stack_using_dll",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-prac.Overflow._Data-Structures.stack.stack_using_dll",
        "description": "python-prac.Overflow._Data-Structures.stack.stack_using_dll",
        "peekOfCode": "class Stack:\n    \"\"\"\n    >>> stack = Stack()\n    >>> stack.is_empty()\n    True\n    >>> stack.print_stack()\n    stack elements are:\n    >>> for i in range(4):\n    ...     stack.push(i)\n    ...",
        "detail": "python-prac.Overflow._Data-Structures.stack.stack_using_dll",
        "documentation": {}
    },
    {
        "label": "add_numbers",
        "kind": 2,
        "importPath": "python-prac.Overflow._Learning.examples.args_example",
        "description": "python-prac.Overflow._Learning.examples.args_example",
        "peekOfCode": "def add_numbers(*args):\n    res = 0\n    for i in args:\n        res += i\n    return res\n# Quick Test\nt1 = add_numbers(123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87)\nif t1 == sum([123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87]):\n    print(\"Sum: \" + str(t1))\nelse:",
        "detail": "python-prac.Overflow._Learning.examples.args_example",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.args_example",
        "description": "python-prac.Overflow._Learning.examples.args_example",
        "peekOfCode": "t1 = add_numbers(123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87)\nif t1 == sum([123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87]):\n    print(\"Sum: \" + str(t1))\nelse:\n    print(\"Something went wrong!\")",
        "detail": "python-prac.Overflow._Learning.examples.args_example",
        "documentation": {}
    },
    {
        "label": "squared",
        "kind": 2,
        "importPath": "python-prac.Overflow._Learning.examples.args_example_1",
        "description": "python-prac.Overflow._Learning.examples.args_example_1",
        "peekOfCode": "def squared(*params):\n    for arg in params:\n        yield ((arg, arg % 2 == 0))\n# Quick Test\nprint(\"Divisibility Test(by 2): \")\nfor n, bool_ in squared(12, 13, 34, 4576, 234536, 2341):\n    if bool_:\n        print(\"  [\" + str(n) + \"] -> is divisible by 2!\")\n    else:\n        print(\"  [\" + str(n) + \"] -> is NOT divisible by 2!\")",
        "detail": "python-prac.Overflow._Learning.examples.args_example_1",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "python-prac.Overflow._Learning.examples.class_animal_attributes_examples",
        "description": "python-prac.Overflow._Learning.examples.class_animal_attributes_examples",
        "peekOfCode": "class Animal:\n    def __init__(self, species, name, legs, color, voices):\n        self.species = species\n        self.name = name\n        self.legs = legs\n        self.color = color\n        self.voices = voices\ncat = Animal(\"Cat\", \"Pussy-Cat\", 4, \"white\", \"meow\")\ndog = Animal(\"Dog\", \"Cloudy\", 4, \"brownie\", \"bark\")\nprint(\"Species of animal : \", dog.species)",
        "detail": "python-prac.Overflow._Learning.examples.class_animal_attributes_examples",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.class_animal_attributes_examples",
        "description": "python-prac.Overflow._Learning.examples.class_animal_attributes_examples",
        "peekOfCode": "cat = Animal(\"Cat\", \"Pussy-Cat\", 4, \"white\", \"meow\")\ndog = Animal(\"Dog\", \"Cloudy\", 4, \"brownie\", \"bark\")\nprint(\"Species of animal : \", dog.species)\nprint(\"name of animal : \", dog.name)\nprint(\"no. of legs       : \", dog.legs)\nprint(\"color of animal : \", dog.color)\nprint(\"voice of animal : \", dog.voices)\nprint(\"  \")\nprint(\"Species of animal : \", cat.species)\nprint(\"name of animal : \", cat.name)",
        "detail": "python-prac.Overflow._Learning.examples.class_animal_attributes_examples",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.class_animal_attributes_examples",
        "description": "python-prac.Overflow._Learning.examples.class_animal_attributes_examples",
        "peekOfCode": "dog = Animal(\"Dog\", \"Cloudy\", 4, \"brownie\", \"bark\")\nprint(\"Species of animal : \", dog.species)\nprint(\"name of animal : \", dog.name)\nprint(\"no. of legs       : \", dog.legs)\nprint(\"color of animal : \", dog.color)\nprint(\"voice of animal : \", dog.voices)\nprint(\"  \")\nprint(\"Species of animal : \", cat.species)\nprint(\"name of animal : \", cat.name)\nprint(\"no. of legs        : \", cat.legs)",
        "detail": "python-prac.Overflow._Learning.examples.class_animal_attributes_examples",
        "documentation": {}
    },
    {
        "label": "movie",
        "kind": 6,
        "importPath": "python-prac.Overflow._Learning.examples.class_example_movies",
        "description": "python-prac.Overflow._Learning.examples.class_example_movies",
        "peekOfCode": "class movie:\n    def __init__(self, name, rating, director, budget, description):\n        self.name = name\n        self.rating = rating\n        self.director = director\n        self.budget = budget\n        self.description = description\n    def good_movie(self):\n        if self.rating >= 4:\n            return \"It's a good movie.\"",
        "detail": "python-prac.Overflow._Learning.examples.class_example_movies",
        "documentation": {}
    },
    {
        "label": "toy_story",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.class_example_movies",
        "description": "python-prac.Overflow._Learning.examples.class_example_movies",
        "peekOfCode": "toy_story = movie(\n    \"ToyStory2\",\n    4,\n    \"John Lasseter , Lee Unkrich , Ash Brannon\",\n    \"90 millon USD\",\n    \"\"\"When Woody is toy-napped by a greedy toy collector and is nowhere to be found, Buzz and his friends set out to rescue him.But Woody too is tempted by the idea of becoming immortal in a museum.\n\"\"\",\n)\nprint(\"Title : \" + str(toy_story.name))\nprint(\"Rating : \" + str(toy_story.rating))",
        "detail": "python-prac.Overflow._Learning.examples.class_example_movies",
        "documentation": {}
    },
    {
        "label": "robotMoving",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "robotMoving = True\nif robotMoving == True:\n\tprint('Move 20 steps')\n# Okay what about if robot is not moving\n# This is where else : statement comes in \nrobotMoving = False\nelse :\n\tprint('You are not moving')\t\n# elif \n# What if there are multiple things to check like if",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "robotMoving",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "robotMoving = False\nelse :\n\tprint('You are not moving')\t\n# elif \n# What if there are multiple things to check like if\n# We need more if statements but each if will run\n# Thus we need elif(else if) statement \n# Only else : statements dont contain values to check\nstart = str(input('Enter a or b or c : '))\n# we need to check if entered value is equal to a or b or c",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "start = str(input('Enter a or b or c : '))\n# we need to check if entered value is equal to a or b or c\nif start == 'a':\n\tprint('You entered ' + start)\nelif start == 'b':\n\tprint('You entered ' + start)\nelif start == 'c':\n\tprint('You entered ' + start)\t\nelse:\n\tprint('Invalid Input')",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "numsA",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "numsA = input('Enter a : ')\nnumsB = input('Enter b : ')\nif numsA > numsB:\n\tprint(str(numsA) + ' is greater than ' + str(numsB))\nelif numsA < numsB:\t\n\tprint(str(numsB) + ' is greater than ' + str(numsA))\nelse : \n\tprint('Numbers are equal')\t\n# nested if else\n# You can nest conditionals inside other conditionals",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "numsB",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "numsB = input('Enter b : ')\nif numsA > numsB:\n\tprint(str(numsA) + ' is greater than ' + str(numsB))\nelif numsA < numsB:\t\n\tprint(str(numsB) + ' is greater than ' + str(numsA))\nelse : \n\tprint('Numbers are equal')\t\n# nested if else\n# You can nest conditionals inside other conditionals\nstartProgram = True",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "startProgram",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "startProgram = True\nnumsA = input('Enter a : ')\nnumsB = input('Enter b : ')\nif startProgram == True:\n\tif numsA > numsB:\n\t\tprint(str(numsA) + ' is greater than ' + str(numsB))\n\telif numsA < numsB:\t\n\t\tprint(str(numsB) + ' is greater than ' + str(numsA))\n\telse : \n\t\tprint('Numbers are equal')",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "numsA",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "numsA = input('Enter a : ')\nnumsB = input('Enter b : ')\nif startProgram == True:\n\tif numsA > numsB:\n\t\tprint(str(numsA) + ' is greater than ' + str(numsB))\n\telif numsA < numsB:\t\n\t\tprint(str(numsB) + ' is greater than ' + str(numsA))\n\telse : \n\t\tprint('Numbers are equal')\nelse:",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "numsB",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "numsB = input('Enter b : ')\nif startProgram == True:\n\tif numsA > numsB:\n\t\tprint(str(numsA) + ' is greater than ' + str(numsB))\n\telif numsA < numsB:\t\n\t\tprint(str(numsB) + ' is greater than ' + str(numsA))\n\telse : \n\t\tprint('Numbers are equal')\nelse:\n\tprint('Can\\'t access program')\t",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "youHaveBike",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "youHaveBike = True\nfuel = 30 \nif youHaveBike == True and  fuel > 65:\n\tprint('You are good to go')\nelse:\n\tprint('You need to refill fuel')\n# or\nextraFuel = True\nif extraFuel = True or  fuel > 65:\n\tprint('You are good to go')",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "fuel",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "fuel = 30 \nif youHaveBike == True and  fuel > 65:\n\tprint('You are good to go')\nelse:\n\tprint('You need to refill fuel')\n# or\nextraFuel = True\nif extraFuel = True or  fuel > 65:\n\tprint('You are good to go')\nelse:",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "extraFuel",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "extraFuel = True\nif extraFuel = True or  fuel > 65:\n\tprint('You are good to go')\nelse:\n\tprint('You need to refill fuel')\n# not\nnumber = 12\nif not(number != 11):\n\tprint('True')\nelse:",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "description": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "peekOfCode": "number = 12\nif not(number != 11):\n\tprint('True')\nelse:\n\tprint('False')",
        "detail": "python-prac.Overflow._Learning.examples.conditionals_examples",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.ListExample",
        "description": "python-prac.Overflow._Learning.examples.ListExample",
        "peekOfCode": "my_list = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n# Output: p\nprint(my_list[0])\n# Output: t\nprint(my_list[2])\n# Output: o\nprint(my_list[4])\n# Error! Only integer can be used for indexing\n# my_list[4.0]\n# Nested List",
        "detail": "python-prac.Overflow._Learning.examples.ListExample",
        "documentation": {}
    },
    {
        "label": "n_list",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.ListExample",
        "description": "python-prac.Overflow._Learning.examples.ListExample",
        "peekOfCode": "n_list = [\"Happy\", [2, 0, 1, 5]]\n# Nested indexing\n# Output: a\nprint(n_list[0][1])\n# Output: 5\nprint(n_list[1][3])",
        "detail": "python-prac.Overflow._Learning.examples.ListExample",
        "documentation": {}
    },
    {
        "label": "downloadImage",
        "kind": 2,
        "importPath": "python-prac.Overflow._Learning.examples.mod_example",
        "description": "python-prac.Overflow._Learning.examples.mod_example",
        "peekOfCode": "def downloadImage(url):\n    filename = str(random.randrange(1, 1000))\n    download = urllib.request.urlretrieve(url, filename)\ndownloadImage()",
        "detail": "python-prac.Overflow._Learning.examples.mod_example",
        "documentation": {}
    },
    {
        "label": "form",
        "kind": 2,
        "importPath": "python-prac.Overflow._Learning.examples.python-example",
        "description": "python-prac.Overflow._Learning.examples.python-example",
        "peekOfCode": "def form():\n    return render_template(\"form.html\")\n@app.route(\"/hello\", methods=[\"GET\", \"POST\"])\ndef hello():\n    return render_template(\n        \"greeting.html\", say=request.form[\"say\"], to=request.form[\"to\"]\n    )\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "python-prac.Overflow._Learning.examples.python-example",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "python-prac.Overflow._Learning.examples.python-example",
        "description": "python-prac.Overflow._Learning.examples.python-example",
        "peekOfCode": "def hello():\n    return render_template(\n        \"greeting.html\", say=request.form[\"say\"], to=request.form[\"to\"]\n    )\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "python-prac.Overflow._Learning.examples.python-example",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.python-example",
        "description": "python-prac.Overflow._Learning.examples.python-example",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef form():\n    return render_template(\"form.html\")\n@app.route(\"/hello\", methods=[\"GET\", \"POST\"])\ndef hello():\n    return render_template(\n        \"greeting.html\", say=request.form[\"say\"], to=request.form[\"to\"]\n    )\nif __name__ == \"__main__\":",
        "detail": "python-prac.Overflow._Learning.examples.python-example",
        "documentation": {}
    },
    {
        "label": "tupA",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.tuplesExample",
        "description": "python-prac.Overflow._Learning.examples.tuplesExample",
        "peekOfCode": "tupA = ()  # Empty tuple\nprint(tupA)\nc = 12, 56, 78\ntupC = tuple(c)  # tuple() is built-in\nprint(tupC)\nx, y, z = (12, 45, 42)\na = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples",
        "detail": "python-prac.Overflow._Learning.examples.tuplesExample",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.tuplesExample",
        "description": "python-prac.Overflow._Learning.examples.tuplesExample",
        "peekOfCode": "c = 12, 56, 78\ntupC = tuple(c)  # tuple() is built-in\nprint(tupC)\nx, y, z = (12, 45, 42)\na = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples\nprint(tupC[0])\nprint(a[1])",
        "detail": "python-prac.Overflow._Learning.examples.tuplesExample",
        "documentation": {}
    },
    {
        "label": "tupC",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.tuplesExample",
        "description": "python-prac.Overflow._Learning.examples.tuplesExample",
        "peekOfCode": "tupC = tuple(c)  # tuple() is built-in\nprint(tupC)\nx, y, z = (12, 45, 42)\na = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples\nprint(tupC[0])\nprint(a[1])\nprint(tupC[2], \"\\n\")",
        "detail": "python-prac.Overflow._Learning.examples.tuplesExample",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.examples.tuplesExample",
        "description": "python-prac.Overflow._Learning.examples.tuplesExample",
        "peekOfCode": "a = x, y, z\nprint(a)\nprint(type(a))\n# Accessing items in tuples\nprint(tupC[0])\nprint(a[1])\nprint(tupC[2], \"\\n\")\n# tuples cant be reassigned\n# tupC[1] = 18 # uncomment this line to see the error  this should cause a error 'TypeError'\n# iterating through tuples",
        "detail": "python-prac.Overflow._Learning.examples.tuplesExample",
        "documentation": {}
    },
    {
        "label": "mainFunction",
        "kind": 2,
        "importPath": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "description": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "peekOfCode": "def mainFunction():\n    # Because this is a fairly long piece of code to write, we have broken up the work into a number of functions\n    # To try and make it a little easier to read\n    # Step 1 - Ask the user to enter their text message\n    # By using a print and then an input statement you give a fresh new line to type in their text message\n    print(\"Please enter the message (no punctuation please):\")\n    txtMessage = input(\">\")\n    # Step 2 use the split function to get a list that contains all the words in the text message\n    messageWords = txtMessage.split()\n    # The translationFileName should contain the name of the file that contains the list of Text message abbreviations",
        "detail": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "documentation": {}
    },
    {
        "label": "fileCheck",
        "kind": 2,
        "importPath": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "description": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "peekOfCode": "def fileCheck(fileName):\n    try:\n        fileObj = open(fileName)  # will try to open the file specified\n        return 0\n    except IOError:  # will handle the exception\n        print(\"Could not locate the file \" + fileName)\n        return 1\n# This function accepts the name of a file that contains abbreviations and translations\n# It will return two lists - one containing all the abbreviations, the other containing the translations\n# Accepts one parameter",
        "detail": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "documentation": {}
    },
    {
        "label": "dictionaryList",
        "kind": 2,
        "importPath": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "description": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "peekOfCode": "def dictionaryList(fileName):\n    # Declare the lists to be populated and returned\n    allAbbreviations = []\n    allTranslations = []\n    # Step 3 a) open the file\n    fileObj = open(fileName)\n    for line in iter(fileObj):  # This for loop will read the file line by line\n        # Take each line in the file and split it into a list of words\n        # LOL - Laughing out Loud will return a list containing [\"LOL\",\"-\",\"Laughing\",\"Out\",\"Loud\"]\n        wordsInTheLine = line.split()",
        "detail": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "documentation": {}
    },
    {
        "label": "compare",
        "kind": 2,
        "importPath": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "description": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "peekOfCode": "def compare(messageWords, allAbbreviations, allTranslations):\n    finalMessage = \"\"\n    # Step 3 d) Create a loop that will execute once for each word in our list of words in the text message\n    for wordPosition in range(0, len(messageWords)):\n        # Fetch the next word from our list of words in the text message\n        currentWord = messageWords[wordPosition]\n        try:\n            # 3 d) search the abbreviation list for the current word\n            matchPosition = allAbbreviations.index(currentWord.upper())\n            # 3 e) If you find a match get the translation from the list of definitions",
        "detail": "python-prac.Overflow._Learning.problems.Module15ProblemToCodeSolutionReadTxtMessage",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.problems.problem_01_while_filter",
        "description": "python-prac.Overflow._Learning.problems.problem_01_while_filter",
        "peekOfCode": "test1 = [2]\nprint(\"my_while_filter test1:\", my_while_filter(test1))  # => [2]\ntest2 = list(range(40))\nprint(\n    \"my_while_filter test2:\", my_while_filter(test2)\n)  # => [2, 4, 6, 8, 10, 12, 14, 16, ... 38]\ntest3 = []\nprint(\"my_while_filter test3:\", my_while_filter(test3))  # => []",
        "detail": "python-prac.Overflow._Learning.problems.problem_01_while_filter",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.problems.problem_01_while_filter",
        "description": "python-prac.Overflow._Learning.problems.problem_01_while_filter",
        "peekOfCode": "test2 = list(range(40))\nprint(\n    \"my_while_filter test2:\", my_while_filter(test2)\n)  # => [2, 4, 6, 8, 10, 12, 14, 16, ... 38]\ntest3 = []\nprint(\"my_while_filter test3:\", my_while_filter(test3))  # => []",
        "detail": "python-prac.Overflow._Learning.problems.problem_01_while_filter",
        "documentation": {}
    },
    {
        "label": "test3",
        "kind": 5,
        "importPath": "python-prac.Overflow._Learning.problems.problem_01_while_filter",
        "description": "python-prac.Overflow._Learning.problems.problem_01_while_filter",
        "peekOfCode": "test3 = []\nprint(\"my_while_filter test3:\", my_while_filter(test3))  # => []",
        "detail": "python-prac.Overflow._Learning.problems.problem_01_while_filter",
        "documentation": {}
    }
]