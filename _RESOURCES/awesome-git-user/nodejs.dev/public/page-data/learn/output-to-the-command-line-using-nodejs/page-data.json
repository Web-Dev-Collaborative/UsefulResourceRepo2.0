{
  "componentChunkName": "component---src-templates-learn-tsx",
  "path": "/learn/output-to-the-command-line-using-nodejs",
  "result": {
    "data": {
      "doc": {
        "id": "26d84282-3257-5c23-86a4-5675fc586d30",
        "html": "<h2 id=\"basic-output-using-the-console-module\" style=\"position:relative;\"><a href=\"#basic-output-using-the-console-module\" aria-label=\"basic output using the console module permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic output using the console module</h2>\n<p>Node.js provides a <a href=\"https://nodejs.org/api/console.html\"><code class=\"language-text\">console</code> module</a> which provides tons of very useful ways to interact with the command line.</p>\n<p>It is basically the same as the <code class=\"language-text\">console</code> object you find in the browser.</p>\n<p>The most basic and most used method is <code class=\"language-text\">console.log()</code>, which prints the string you pass to it to the console.</p>\n<p>If you pass an object, it will render it as a string.</p>\n<p>You can pass multiple variables to <code class=\"language-text\">console.log</code>, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'x'</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token string\">'y'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></code></pre></div>\n<p>and Node.js will print both.</p>\n<p>We can also format pretty phrases by passing variables and a format specifier.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My %s has %d years'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">%s</code> format a variable as a string</li>\n<li><code class=\"language-text\">%d</code> format a variable as a number</li>\n<li><code class=\"language-text\">%i</code> format a variable as its integer part only</li>\n<li><code class=\"language-text\">%o</code> format a variable as an object</li>\n</ul>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%o'</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"clear-the-console\" style=\"position:relative;\"><a href=\"#clear-the-console\" aria-label=\"clear the console permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Clear the console</h2>\n<p><code class=\"language-text\">console.clear()</code> clears the console (the behavior might depend on the console used)</p>\n<h2 id=\"counting-elements\" style=\"position:relative;\"><a href=\"#counting-elements\" aria-label=\"counting elements permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Counting elements</h2>\n<p><code class=\"language-text\">console.count()</code> is a handy method.</p>\n<p>Take this code:</p>\n<iframe\n  title=\"Output to the command line using Node.js\"\n  src=\"https://glitch.com/embed/#!/embed/nodejs-dev-0013-02?path=server.js&previewSize=40&attributionHidden=true&sidebarCollapsed=true\"\n  alt=\"nodejs-dev-0013-02 on Glitch\"\n  style=\"height: 400px; width: 100%; border: 0;\">\n</iframe>\n<!--\n```js\nconst x = 1\nconst y = 2\nconst z = 3\nconsole.count(\n  'The value of x is ' + x + ' and has been checked .. how many times?'\n)\nconsole.count(\n  'The value of x is ' + x + ' and has been checked .. how many times?'\n)\nconsole.count(\n  'The value of y is ' + y + ' and has been checked .. how many times?'\n)\n```\n-->\n<p>What happens is that count will count the number of times a string is printed, and print the count next to it:</p>\n<p>You can just count apples and oranges:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> oranges <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> apples <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'just one apple'</span><span class=\"token punctuation\">]</span>\noranges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruit</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\napples<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruit</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"print-the-stack-trace\" style=\"position:relative;\"><a href=\"#print-the-stack-trace\" aria-label=\"print the stack trace permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Print the stack trace</h2>\n<p>There might be cases where it's useful to print the call stack trace of a function, maybe to answer the question <em>how did you reach that part of the code?</em></p>\n<p>You can do so using <code class=\"language-text\">console.trace()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">function2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">function1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">function2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">function1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This will print the stack trace. This is what's printed if we try this in the Node.js REPL:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Trace\n    at function2 <span class=\"token punctuation\">(</span>repl:1:33<span class=\"token punctuation\">)</span>\n    at function1 <span class=\"token punctuation\">(</span>repl:1:25<span class=\"token punctuation\">)</span>\n    at repl:1:1\n    at ContextifyScript.Script.runInThisContext <span class=\"token punctuation\">(</span>vm.js:44:33<span class=\"token punctuation\">)</span>\n    at REPLServer.defaultEval <span class=\"token punctuation\">(</span>repl.js:239:29<span class=\"token punctuation\">)</span>\n    at bound <span class=\"token punctuation\">(</span>domain.js:301:14<span class=\"token punctuation\">)</span>\n    at REPLServer.runBound <span class=\"token punctuation\">[</span>as eval<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>domain.js:314:12<span class=\"token punctuation\">)</span>\n    at REPLServer.onLine <span class=\"token punctuation\">(</span>repl.js:440:10<span class=\"token punctuation\">)</span>\n    at emitOne <span class=\"token punctuation\">(</span>events.js:120:20<span class=\"token punctuation\">)</span>\n    at REPLServer.emit <span class=\"token punctuation\">(</span>events.js:210:7<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"calculate-the-time-spent\" style=\"position:relative;\"><a href=\"#calculate-the-time-spent\" aria-label=\"calculate the time spent permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Calculate the time spent</h2>\n<p>You can easily calculate how much time a function takes to run, using <code class=\"language-text\">time()</code> and <code class=\"language-text\">timeEnd()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doSomething</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">measureDoingSomething</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'doSomething()'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//do something, and measure the time it takes</span>\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'doSomething()'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">measureDoingSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"stdout-and-stderr\" style=\"position:relative;\"><a href=\"#stdout-and-stderr\" aria-label=\"stdout and stderr permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stdout and stderr</h2>\n<p>As we saw console.log is great for printing messages in the Console. This is what's called the standard output, or <code class=\"language-text\">stdout</code>.</p>\n<p><code class=\"language-text\">console.error</code> prints to the <code class=\"language-text\">stderr</code> stream.</p>\n<p>It will not appear in the console, but it will appear in the error log.</p>\n<h2 id=\"color-the-output\" style=\"position:relative;\"><a href=\"#color-the-output\" aria-label=\"color the output permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Color the output</h2>\n<p>You can color the output of your text in the console by using <a href=\"https://gist.github.com/iamnewton/8754917\">escape sequences</a>. An escape sequence is a set of characters that identifies a color.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\x1b[33m%s\\x1b[0m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hi!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can try that in the Node.js REPL, and it will print <code class=\"language-text\">hi!</code> in yellow.</p>\n<p>However, this is the low-level way to do this. The simplest way to go about coloring the console output is by using a library. <a href=\"https://github.com/chalk/chalk\">Chalk</a> is such a library, and in addition to coloring it also helps with other styling facilities, like making text bold, italic or underlined.</p>\n<p>You install it with <code class=\"language-text\">npm install chalk</code>, then you can use it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> chalk <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chalk'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chalk<span class=\"token punctuation\">.</span><span class=\"token function\">yellow</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Using <code class=\"language-text\">chalk.yellow</code> is much more convenient than trying to remember the escape codes, and the code is much more readable.</p>\n<p>Check the project link posted above for more usage examples.</p>\n<h2 id=\"create-a-progress-bar\" style=\"position:relative;\"><a href=\"#create-a-progress-bar\" aria-label=\"create a progress bar permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a progress bar</h2>\n<p><a href=\"https://www.npmjs.com/package/progress\">Progress</a> is an awesome package to create a progress bar in the console. Install it using <code class=\"language-text\">npm install progress</code></p>\n<p>This snippet creates a 10-step progress bar, and every 100ms one step is completed. When the bar completes we clear the interval:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ProgressBar <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'progress'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProgressBar</span><span class=\"token punctuation\">(</span><span class=\"token string\">':bar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> total<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  bar<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span>complete<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></code></pre></div>",
        "tableOfContents": "<ul>\n<li><a href=\"#basic-output-using-the-console-module\">Basic output using the console module</a></li>\n<li><a href=\"#clear-the-console\">Clear the console</a></li>\n<li><a href=\"#counting-elements\">Counting elements</a></li>\n<li><a href=\"#print-the-stack-trace\">Print the stack trace</a></li>\n<li><a href=\"#calculate-the-time-spent\">Calculate the time spent</a></li>\n<li><a href=\"#stdout-and-stderr\">stdout and stderr</a></li>\n<li><a href=\"#color-the-output\">Color the output</a></li>\n<li><a href=\"#create-a-progress-bar\">Create a progress bar</a></li>\n</ul>",
        "frontmatter": {
          "title": "Output to the command line using Node.js",
          "description": "How to print to the command line console using Node.js, from the basic console.log to more complex scenarios"
        },
        "fields": {
          "slug": "output-to-the-command-line-using-nodejs",
          "authors": [
            "flaviocopes",
            " potch",
            " MylesBorins",
            " fhemberger",
            " LaRuaNa",
            " amiller-gh",
            " ahmadawais"
          ]
        }
      }
    },
    "pageContext": {
      "slug": "output-to-the-command-line-using-nodejs",
      "next": {
        "slug": "accept-input-from-the-command-line-in-nodejs",
        "title": "Accept input from the command line in Node.js"
      },
      "previous": {
        "slug": "nodejs-accept-arguments-from-the-command-line",
        "title": "Node.js, accept arguments from the command line"
      },
      "relativePath": "0013-node-output-to-cli/index.md",
      "navigationData": {
        "Quick Start": [
          {
            "title": "Introduction to Node.js",
            "slug": "introduction-to-nodejs",
            "section": "Quick Start"
          },
          {
            "title": "A brief history of Node.js",
            "slug": "a-brief-history-of-nodejs",
            "section": "Quick Start"
          },
          {
            "title": "How to install Node.js",
            "slug": "how-to-install-nodejs",
            "section": "Quick Start"
          },
          {
            "title": "How much JavaScript do you need to know to use Node.js?",
            "slug": "how-much-javascript-do-you-need-to-know-to-use-nodejs",
            "section": "Quick Start"
          },
          {
            "title": "Differences between Node.js and the Browser",
            "slug": "differences-between-nodejs-and-the-browser",
            "section": "Quick Start"
          }
        ],
        "Getting Started": [
          {
            "title": "The V8 JavaScript Engine",
            "slug": "the-v8-javascript-engine",
            "section": "Getting Started"
          },
          {
            "title": "Run Node.js scripts from the command line",
            "slug": "run-nodejs-scripts-from-the-command-line",
            "section": "Getting Started"
          },
          {
            "title": "How to exit from a Node.js program",
            "slug": "how-to-exit-from-a-nodejs-program",
            "section": "Getting Started"
          },
          {
            "title": "How to read environment variables from Node.js",
            "slug": "how-to-read-environment-variables-from-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "How to use the Node.js REPL",
            "slug": "how-to-use-the-nodejs-repl",
            "section": "Getting Started"
          },
          {
            "title": "Node.js, accept arguments from the command line",
            "slug": "nodejs-accept-arguments-from-the-command-line",
            "section": "Getting Started"
          },
          {
            "title": "Output to the command line using Node.js",
            "slug": "output-to-the-command-line-using-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "Accept input from the command line in Node.js",
            "slug": "accept-input-from-the-command-line-in-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "Expose functionality from a Node.js file using exports",
            "slug": "expose-functionality-from-a-nodejs-file-using-exports",
            "section": "Getting Started"
          },
          {
            "title": "An introduction to the npm package manager",
            "slug": "an-introduction-to-the-npm-package-manager",
            "section": "Getting Started"
          },
          {
            "title": "Where does npm install the packages?",
            "slug": "where-does-npm-install-the-packages",
            "section": "Getting Started"
          },
          {
            "title": "How to use or execute a package installed using npm",
            "slug": "how-to-use-or-execute-a-package-installed-using-npm",
            "section": "Getting Started"
          },
          {
            "title": "The package.json guide",
            "slug": "the-package-json-guide",
            "section": "Getting Started"
          },
          {
            "title": "The package-lock.json file",
            "slug": "the-package-lock-json-file",
            "section": "Getting Started"
          },
          {
            "title": "Find the installed version of an npm package",
            "slug": "find-the-installed-version-of-an-npm-package",
            "section": "Getting Started"
          },
          {
            "title": "Install an older version of an npm package",
            "slug": "install-an-older-version-of-an-npm-package",
            "section": "Getting Started"
          },
          {
            "title": "Update all the Node.js dependencies to their latest version",
            "slug": "update-all-the-nodejs-dependencies-to-their-latest-version",
            "section": "Getting Started"
          },
          {
            "title": "Semantic Versioning using npm",
            "slug": "semantic-versioning-using-npm",
            "section": "Getting Started"
          },
          {
            "title": "Uninstalling npm packages",
            "slug": "uninstalling-npm-packages",
            "section": "Getting Started"
          },
          {
            "title": "npm global or local packages",
            "slug": "npm-global-or-local-packages",
            "section": "Getting Started"
          },
          {
            "title": "npm dependencies and devDependencies",
            "slug": "npm-dependencies-and-devdependencies",
            "section": "Getting Started"
          },
          {
            "title": "The npx Node.js Package Runner",
            "slug": "the-npx-nodejs-package-runner",
            "section": "Getting Started"
          },
          {
            "title": "The Node.js Event Loop",
            "slug": "the-nodejs-event-loop",
            "section": "Getting Started"
          },
          {
            "title": "Understanding process.nextTick()",
            "slug": "understanding-process-nexttick",
            "section": "Getting Started"
          },
          {
            "title": "Understanding setImmediate()",
            "slug": "understanding-setimmediate",
            "section": "Getting Started"
          },
          {
            "title": "Discover JavaScript Timers",
            "slug": "discover-javascript-timers",
            "section": "Getting Started"
          },
          {
            "title": "JavaScript Asynchronous Programming and Callbacks",
            "slug": "javascript-asynchronous-programming-and-callbacks",
            "section": "Getting Started"
          },
          {
            "title": "Understanding JavaScript Promises",
            "slug": "understanding-javascript-promises",
            "section": "Getting Started"
          },
          {
            "title": "Modern Asynchronous JavaScript with Async and Await",
            "slug": "modern-asynchronous-javascript-with-async-and-await",
            "section": "Getting Started"
          },
          {
            "title": "The Node.js Event emitter",
            "slug": "the-nodejs-event-emitter",
            "section": "Getting Started"
          },
          {
            "title": "Build an HTTP Server",
            "slug": "build-an-http-server",
            "section": "Getting Started"
          },
          {
            "title": "Making HTTP requests with Node.js",
            "slug": "making-http-requests-with-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "Make an HTTP POST request using Node.js",
            "slug": "make-an-http-post-request-using-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "Get HTTP request body data using Node.js",
            "slug": "get-http-request-body-data-using-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "Working with file descriptors in Node.js",
            "slug": "working-with-file-descriptors-in-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "Node.js file stats",
            "slug": "nodejs-file-stats",
            "section": "Getting Started"
          },
          {
            "title": "Node.js File Paths",
            "slug": "nodejs-file-paths",
            "section": "Getting Started"
          },
          {
            "title": "Reading files with Node.js",
            "slug": "reading-files-with-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "Writing files with Node.js",
            "slug": "writing-files-with-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "Working with folders in Node.js",
            "slug": "working-with-folders-in-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "The Node.js fs module",
            "slug": "the-nodejs-fs-module",
            "section": "Getting Started"
          },
          {
            "title": "The Node.js path module",
            "slug": "the-nodejs-path-module",
            "section": "Getting Started"
          },
          {
            "title": "The Node.js os module",
            "slug": "the-nodejs-os-module",
            "section": "Getting Started"
          },
          {
            "title": "The Node.js events module",
            "slug": "the-nodejs-events-module",
            "section": "Getting Started"
          },
          {
            "title": "The Node.js http module",
            "slug": "the-nodejs-http-module",
            "section": "Getting Started"
          },
          {
            "title": "Node.js Buffers",
            "slug": "nodejs-buffers",
            "section": "Getting Started"
          },
          {
            "title": "Node.js Streams",
            "slug": "nodejs-streams",
            "section": "Getting Started"
          },
          {
            "title": "Node.js, the difference between development and production",
            "slug": "nodejs-the-difference-between-development-and-production",
            "section": "Getting Started"
          },
          {
            "title": "Error handling in Node.js",
            "slug": "error-handling-in-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "How to log an object in Node.js",
            "slug": "how-to-log-an-object-in-nodejs",
            "section": "Getting Started"
          },
          {
            "title": "Node.js with TypeScript",
            "slug": "nodejs-with-typescript",
            "section": "Getting Started"
          }
        ]
      }
    }
  },
  "staticQueryHashes": []
}
