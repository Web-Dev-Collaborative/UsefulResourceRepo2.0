{"componentChunkName":"component---src-templates-learn-tsx","path":"/learn/understanding-javascript-promises","result":{"data":{"doc":{"id":"9a16378c-f2e7-5235-9dc6-b8d1a0d8ad6c","html":"<h2 id=\"introduction-to-promises\" style=\"position:relative;\"><a href=\"#introduction-to-promises\" aria-label=\"introduction to promises permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction to promises</h2>\n<iframe\n  title=\"Introduction to promises\"\n  src=\"https://glitch.com/embed/#!/embed/nodejs-dev-0034-01?path=server.js&previewSize=35&attributionHidden=true&sidebarCollapsed=true\"\n  alt=\"nodejs-dev-0034-01 on Glitch\"\n  style=\"height: 400px; width: 100%; border: 0;\">\n</iframe>\n<p>A promise is commonly defined as <strong>a proxy for a value that will eventually become available</strong>.</p>\n<p>Promises are one way to deal with asynchronous code, without getting stuck in <a href=\"http://callbackhell.com/\">callback hell</a>.</p>\n<p>Promises have been part of the language for years (standardized and introduced in ES2015), and have recently become more integrated, with <strong>async</strong> and <strong>await</strong> in ES2017.</p>\n<p><strong>Async functions</strong> use promises behind the scenes, so understanding how promises work is fundamental to understanding how <code class=\"language-text\">async</code> and <code class=\"language-text\">await</code> work.</p>\n<h3 id=\"how-promises-work-in-brief\" style=\"position:relative;\"><a href=\"#how-promises-work-in-brief\" aria-label=\"how promises work in brief permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How promises work, in brief</h3>\n<p>Once a promise has been called, it will start in a <strong>pending state</strong>. This means that the calling function continues executing, while the promise is pending until it resolves, giving the calling function whatever data was being requested.</p>\n<p>The created promise will eventually end in a <strong>resolved state</strong>, or in a <strong>rejected state</strong>, calling the respective callback functions (passed to <code class=\"language-text\">then</code> and <code class=\"language-text\">catch</code>) upon finishing.</p>\n<h3 id=\"which-js-apis-use-promises\" style=\"position:relative;\"><a href=\"#which-js-apis-use-promises\" aria-label=\"which js apis use promises permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Which JS APIs use promises?</h3>\n<p>In addition to your own code and libraries code, promises are used by standard modern Web APIs such as:</p>\n<ul>\n<li>the Battery API</li>\n<li>the Fetch API</li>\n<li>Service Workers</li>\n</ul>\n<p>It's unlikely that in modern JavaScript you'll find yourself <em>not</em> using promises, so let's start diving right into them.</p>\n<hr>\n<h2 id=\"creating-a-promise\" style=\"position:relative;\"><a href=\"#creating-a-promise\" aria-label=\"creating a promise permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a promise</h2>\n<p>The Promise API exposes a Promise constructor, which you initialize using <code class=\"language-text\">new Promise()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">const</span> isItDoneYet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> workDone <span class=\"token operator\">=</span> <span class=\"token string\">'Here is the thing I built'</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>workDone<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> why <span class=\"token operator\">=</span> <span class=\"token string\">'Still working on something else'</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>why<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you can see, the promise checks the <code class=\"language-text\">done</code> global constant, and if that's true, the promise goes to a <strong>resolved</strong> state (since the <code class=\"language-text\">resolve</code> callback was called); otherwise, the <code class=\"language-text\">reject</code> callback is executed, putting the promise in a rejected state. (If one of these functions is never called in the execution path, the promise will remain in a pending state)</p>\n<p>Using <code class=\"language-text\">resolve</code> and <code class=\"language-text\">reject</code>, we can communicate back to the caller what the resulting promise state was, and what to do with it. In the above case we just returned a string, but it could be an object, or <code class=\"language-text\">null</code> as well. Because we've created the promise in the above snippet, it has <strong>already started executing</strong>. This is important to understand what's going on in the section <a href=\"#consuming-a-promise\">Consuming a promise</a> below.</p>\n<p>A more common example you may come across is a technique called <strong>Promisifying</strong>. This technique is a way to be able to use a classic JavaScript function that takes a callback, and have it return a promise:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fileName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// calling `reject` will cause the promise to fail with or without the error passed as an argument</span>\n        <span class=\"token keyword\">return</span>        <span class=\"token comment\">// and we don't want to go any further</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/etc/passwd'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>In recent versions of Node.js, you won't have to do this manual conversion for a lot of the API. There is a promisifying function available in the <a href=\"https://nodejs.org/docs/latest-v11.x/api/util.html#util_util_promisify_original\">util module</a> that will do this for you, given that the function you're promisifying has the correct signature.</p>\n</blockquote>\n<hr>\n<h2 id=\"consuming-a-promise\" style=\"position:relative;\"><a href=\"#consuming-a-promise\" aria-label=\"consuming a promise permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consuming a promise</h2>\n<p>In the last section, we introduced how a promise is created.</p>\n<p>Now let's see how the promise can be <em>consumed</em> or used.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> isItDoneYet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... as above ... */</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkIfItsDone</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  isItDoneYet\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ok</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ok<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Running <code class=\"language-text\">checkIfItsDone()</code> will specify functions to execute when the <code class=\"language-text\">isItDoneYet</code> promise resolves (in the <code class=\"language-text\">then</code> call) or rejects (in the <code class=\"language-text\">catch</code> call).</p>\n<hr>\n<h2 id=\"chaining-promises\" style=\"position:relative;\"><a href=\"#chaining-promises\" aria-label=\"chaining promises permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chaining promises</h2>\n<p>A promise can be returned to another promise, creating a chain of promises.</p>\n<p>A great example of chaining promises is the Fetch API, which we can use to get a resource and queue a chain of promises to execute when the resource is fetched.</p>\n<p>The Fetch API is a promise-based mechanism, and calling <code class=\"language-text\">fetch()</code> is equivalent to defining our own promise using <code class=\"language-text\">new Promise()</code>.</p>\n<h3 id=\"example-of-chaining-promises\" style=\"position:relative;\"><a href=\"#example-of-chaining-promises\" aria-label=\"example of chaining promises permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example of chaining promises</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">status</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">json</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos.json'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// note that the `status` function is actually **called** here, and that it **returns a promise***</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// likewise, the only difference here is that the `json` function here returns a promise that resolves with `data`</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// ... which is why `data` shows up here as the first parameter to the anonymous function</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request succeeded with JSON response'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request failed'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In this example, we call <code class=\"language-text\">fetch()</code> to get a list of TODO items from the <code class=\"language-text\">todos.json</code> file found in the domain root, and we create a chain of promises.</p>\n<p>Running <code class=\"language-text\">fetch()</code> returns a <a href=\"https://fetch.spec.whatwg.org/#concept-response\">response</a>, which has many properties, and within those we reference:</p>\n<ul>\n<li><code class=\"language-text\">status</code>, a numeric value representing the HTTP status code</li>\n<li><code class=\"language-text\">statusText</code>, a status message, which is <code class=\"language-text\">OK</code> if the request succeeded</li>\n</ul>\n<p><code class=\"language-text\">response</code> also has a <code class=\"language-text\">json()</code> method, which returns a promise that will resolve with the content of the body processed and transformed into JSON.</p>\n<p>So given those premises, this is what happens: the first promise in the chain is a function that we defined, called <code class=\"language-text\">status()</code>, that checks the response status and if it's not a success response (between 200 and 299), it rejects the promise.</p>\n<p>This operation will cause the promise chain to skip all the chained promises listed and will skip directly to the <code class=\"language-text\">catch()</code> statement at the bottom, logging the <code class=\"language-text\">Request failed</code> text along with the error message.</p>\n<p>If that succeeds instead, it calls the <code class=\"language-text\">json()</code> function we defined. Since the previous promise, when successful, returned the <code class=\"language-text\">response</code> object, we get it as an input to the second promise.</p>\n<p>In this case, we return the data JSON processed, so the third promise receives the JSON directly:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request succeeded with JSON response'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and we simply log it to the console.</p>\n<hr>\n<h2 id=\"handling-errors\" style=\"position:relative;\"><a href=\"#handling-errors\" aria-label=\"handling errors permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Handling errors</h2>\n<p>In the example, in the previous section, we had a <code class=\"language-text\">catch</code> that was appended to the chain of promises.</p>\n<p>When anything in the chain of promises fails and raises an error or rejects the promise, the control goes to the nearest <code class=\"language-text\">catch()</code> statement down the chain.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// or</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"cascading-errors\" style=\"position:relative;\"><a href=\"#cascading-errors\" aria-label=\"cascading errors permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cascading errors</h3>\n<p>If inside the <code class=\"language-text\">catch()</code> you raise an error, you can append a second <code class=\"language-text\">catch()</code> to handle it, and so on.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2 id=\"orchestrating-promises\" style=\"position:relative;\"><a href=\"#orchestrating-promises\" aria-label=\"orchestrating promises permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Orchestrating promises</h2>\n<h3 id=\"promiseall\" style=\"position:relative;\"><a href=\"#promiseall\" aria-label=\"promiseall permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Promise.all()</code></h3>\n<p>If you need to synchronize different promises, <code class=\"language-text\">Promise.all()</code> helps you define a list of promises, and execute something when they are all resolved.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> f1 <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/something.json'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> f2 <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/something2.json'</span><span class=\"token punctuation\">)</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Array of results'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The ES2015 destructuring assignment syntax allows you to also do</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Results'</span><span class=\"token punctuation\">,</span> res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You are not limited to using <code class=\"language-text\">fetch</code> of course, <strong>any promise can be used in this fashion</strong>.</p>\n<h3 id=\"promiserace\" style=\"position:relative;\"><a href=\"#promiserace\" aria-label=\"promiserace permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Promise.race()</code></h3>\n<p><code class=\"language-text\">Promise.race()</code> runs when the first of the promises you pass to it resolves, and it runs the attached callback just once, with the result of the first promise resolved.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// second</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"common-errors\" style=\"position:relative;\"><a href=\"#common-errors\" aria-label=\"common errors permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common errors</h2>\n<h3 id=\"uncaught-typeerror-undefined-is-not-a-promise\" style=\"position:relative;\"><a href=\"#uncaught-typeerror-undefined-is-not-a-promise\" aria-label=\"uncaught typeerror undefined is not a promise permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Uncaught TypeError: undefined is not a promise</h3>\n<p>If you get the <code class=\"language-text\">Uncaught TypeError: undefined is not a promise</code> error in the console, make sure you use <code class=\"language-text\">new Promise()</code> instead of just <code class=\"language-text\">Promise()</code></p>\n<h3 id=\"unhandledpromiserejectionwarning\" style=\"position:relative;\"><a href=\"#unhandledpromiserejectionwarning\" aria-label=\"unhandledpromiserejectionwarning permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UnhandledPromiseRejectionWarning</h3>\n<p>This means that a promise you called rejected, but there was no <code class=\"language-text\">catch</code> used to handle the error. Add a <code class=\"language-text\">catch</code> after the offending <code class=\"language-text\">then</code> to handle this properly.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#introduction-to-promises\">Introduction to promises</a></p>\n<ul>\n<li><a href=\"#how-promises-work-in-brief\">How promises work, in brief</a></li>\n<li><a href=\"#which-js-apis-use-promises\">Which JS APIs use promises?</a></li>\n</ul>\n</li>\n<li><a href=\"#creating-a-promise\">Creating a promise</a></li>\n<li><a href=\"#consuming-a-promise\">Consuming a promise</a></li>\n<li>\n<p><a href=\"#chaining-promises\">Chaining promises</a></p>\n<ul>\n<li><a href=\"#example-of-chaining-promises\">Example of chaining promises</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#handling-errors\">Handling errors</a></p>\n<ul>\n<li><a href=\"#cascading-errors\">Cascading errors</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#orchestrating-promises\">Orchestrating promises</a></p>\n<ul>\n<li><a href=\"#promiseall\"><code class=\"language-text\">Promise.all()</code></a></li>\n<li><a href=\"#promiserace\"><code class=\"language-text\">Promise.race()</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#common-errors\">Common errors</a></p>\n<ul>\n<li><a href=\"#uncaught-typeerror-undefined-is-not-a-promise\">Uncaught TypeError: undefined is not a promise</a></li>\n<li><a href=\"#unhandledpromiserejectionwarning\">UnhandledPromiseRejectionWarning</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Understanding JavaScript Promises","description":"Promises are one way to deal with asynchronous code in JavaScript, without writing too many callbacks in your code."},"fields":{"slug":"understanding-javascript-promises","authors":["flaviocopes"," potch"," MylesBorins"," LaRuaNa"," bdharrington7"," amiller-gh"," ahmadawais"]}}},"pageContext":{"slug":"understanding-javascript-promises","next":{"slug":"modern-asynchronous-javascript-with-async-and-await","title":"Modern Asynchronous JavaScript with Async and Await"},"previous":{"slug":"javascript-asynchronous-programming-and-callbacks","title":"JavaScript Asynchronous Programming and Callbacks"},"relativePath":"0034-javascript-promises/index.md","navigationData":{"Quick Start":[{"title":"Introduction to Node.js","slug":"introduction-to-nodejs","section":"Quick Start"},{"title":"A brief history of Node.js","slug":"a-brief-history-of-nodejs","section":"Quick Start"},{"title":"How to install Node.js","slug":"how-to-install-nodejs","section":"Quick Start"},{"title":"How much JavaScript do you need to know to use Node.js?","slug":"how-much-javascript-do-you-need-to-know-to-use-nodejs","section":"Quick Start"},{"title":"Differences between Node.js and the Browser","slug":"differences-between-nodejs-and-the-browser","section":"Quick Start"}],"Getting Started":[{"title":"The V8 JavaScript Engine","slug":"the-v8-javascript-engine","section":"Getting Started"},{"title":"Run Node.js scripts from the command line","slug":"run-nodejs-scripts-from-the-command-line","section":"Getting Started"},{"title":"How to exit from a Node.js program","slug":"how-to-exit-from-a-nodejs-program","section":"Getting Started"},{"title":"How to read environment variables from Node.js","slug":"how-to-read-environment-variables-from-nodejs","section":"Getting Started"},{"title":"How to use the Node.js REPL","slug":"how-to-use-the-nodejs-repl","section":"Getting Started"},{"title":"Node.js, accept arguments from the command line","slug":"nodejs-accept-arguments-from-the-command-line","section":"Getting Started"},{"title":"Output to the command line using Node.js","slug":"output-to-the-command-line-using-nodejs","section":"Getting Started"},{"title":"Accept input from the command line in Node.js","slug":"accept-input-from-the-command-line-in-nodejs","section":"Getting Started"},{"title":"Expose functionality from a Node.js file using exports","slug":"expose-functionality-from-a-nodejs-file-using-exports","section":"Getting Started"},{"title":"An introduction to the npm package manager","slug":"an-introduction-to-the-npm-package-manager","section":"Getting Started"},{"title":"Where does npm install the packages?","slug":"where-does-npm-install-the-packages","section":"Getting Started"},{"title":"How to use or execute a package installed using npm","slug":"how-to-use-or-execute-a-package-installed-using-npm","section":"Getting Started"},{"title":"The package.json guide","slug":"the-package-json-guide","section":"Getting Started"},{"title":"The package-lock.json file","slug":"the-package-lock-json-file","section":"Getting Started"},{"title":"Find the installed version of an npm package","slug":"find-the-installed-version-of-an-npm-package","section":"Getting Started"},{"title":"Install an older version of an npm package","slug":"install-an-older-version-of-an-npm-package","section":"Getting Started"},{"title":"Update all the Node.js dependencies to their latest version","slug":"update-all-the-nodejs-dependencies-to-their-latest-version","section":"Getting Started"},{"title":"Semantic Versioning using npm","slug":"semantic-versioning-using-npm","section":"Getting Started"},{"title":"Uninstalling npm packages","slug":"uninstalling-npm-packages","section":"Getting Started"},{"title":"npm global or local packages","slug":"npm-global-or-local-packages","section":"Getting Started"},{"title":"npm dependencies and devDependencies","slug":"npm-dependencies-and-devdependencies","section":"Getting Started"},{"title":"The npx Node.js Package Runner","slug":"the-npx-nodejs-package-runner","section":"Getting Started"},{"title":"The Node.js Event Loop","slug":"the-nodejs-event-loop","section":"Getting Started"},{"title":"Understanding process.nextTick()","slug":"understanding-process-nexttick","section":"Getting Started"},{"title":"Understanding setImmediate()","slug":"understanding-setimmediate","section":"Getting Started"},{"title":"Discover JavaScript Timers","slug":"discover-javascript-timers","section":"Getting Started"},{"title":"JavaScript Asynchronous Programming and Callbacks","slug":"javascript-asynchronous-programming-and-callbacks","section":"Getting Started"},{"title":"Understanding JavaScript Promises","slug":"understanding-javascript-promises","section":"Getting Started"},{"title":"Modern Asynchronous JavaScript with Async and Await","slug":"modern-asynchronous-javascript-with-async-and-await","section":"Getting Started"},{"title":"The Node.js Event emitter","slug":"the-nodejs-event-emitter","section":"Getting Started"},{"title":"Build an HTTP Server","slug":"build-an-http-server","section":"Getting Started"},{"title":"Making HTTP requests with Node.js","slug":"making-http-requests-with-nodejs","section":"Getting Started"},{"title":"Make an HTTP POST request using Node.js","slug":"make-an-http-post-request-using-nodejs","section":"Getting Started"},{"title":"Get HTTP request body data using Node.js","slug":"get-http-request-body-data-using-nodejs","section":"Getting Started"},{"title":"Working with file descriptors in Node.js","slug":"working-with-file-descriptors-in-nodejs","section":"Getting Started"},{"title":"Node.js file stats","slug":"nodejs-file-stats","section":"Getting Started"},{"title":"Node.js File Paths","slug":"nodejs-file-paths","section":"Getting Started"},{"title":"Reading files with Node.js","slug":"reading-files-with-nodejs","section":"Getting Started"},{"title":"Writing files with Node.js","slug":"writing-files-with-nodejs","section":"Getting Started"},{"title":"Working with folders in Node.js","slug":"working-with-folders-in-nodejs","section":"Getting Started"},{"title":"The Node.js fs module","slug":"the-nodejs-fs-module","section":"Getting Started"},{"title":"The Node.js path module","slug":"the-nodejs-path-module","section":"Getting Started"},{"title":"The Node.js os module","slug":"the-nodejs-os-module","section":"Getting Started"},{"title":"The Node.js events module","slug":"the-nodejs-events-module","section":"Getting Started"},{"title":"The Node.js http module","slug":"the-nodejs-http-module","section":"Getting Started"},{"title":"Node.js Buffers","slug":"nodejs-buffers","section":"Getting Started"},{"title":"Node.js Streams","slug":"nodejs-streams","section":"Getting Started"},{"title":"Node.js, the difference between development and production","slug":"nodejs-the-difference-between-development-and-production","section":"Getting Started"},{"title":"Error handling in Node.js","slug":"error-handling-in-nodejs","section":"Getting Started"},{"title":"How to log an object in Node.js","slug":"how-to-log-an-object-in-nodejs","section":"Getting Started"},{"title":"Node.js with TypeScript","slug":"nodejs-with-typescript","section":"Getting Started"}]}}},"staticQueryHashes":[]}