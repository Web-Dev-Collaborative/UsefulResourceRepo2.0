{"componentChunkName":"component---src-templates-learn-tsx","path":"/learn/the-nodejs-fs-module","result":{"data":{"doc":{"id":"c6579380-1c6f-5916-a055-9d9788aadfdf","html":"<p>The <code class=\"language-text\">fs</code> module provides a lot of very useful functionality to access and interact with the file system.</p>\n<p>There is no need to install it. Being part of the Node.js core, it can be used by simply requiring it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Once you do so, you have access to all its methods, which include:</p>\n<ul>\n<li><code class=\"language-text\">fs.access()</code>: check if the file exists and Node.js can access it with its permissions</li>\n<li><code class=\"language-text\">fs.appendFile()</code>: append data to a file. If the file does not exist, it's created</li>\n<li><code class=\"language-text\">fs.chmod()</code>: change the permissions of a file specified by the filename passed. Related: <code class=\"language-text\">fs.lchmod()</code>, <code class=\"language-text\">fs.fchmod()</code></li>\n<li><code class=\"language-text\">fs.chown()</code>: change the owner and group of a file specified by the filename passed. Related: <code class=\"language-text\">fs.fchown()</code>, <code class=\"language-text\">fs.lchown()</code></li>\n<li><code class=\"language-text\">fs.close()</code>: close a file descriptor</li>\n<li><code class=\"language-text\">fs.copyFile()</code>: copies a file</li>\n<li><code class=\"language-text\">fs.createReadStream()</code>: create a readable file stream</li>\n<li><code class=\"language-text\">fs.createWriteStream()</code>: create a writable file stream</li>\n<li><code class=\"language-text\">fs.link()</code>: create a new hard link to a file</li>\n<li><code class=\"language-text\">fs.mkdir()</code>: create a new folder</li>\n<li><code class=\"language-text\">fs.mkdtemp()</code>: create a temporary directory</li>\n<li><code class=\"language-text\">fs.open()</code>: set the file mode</li>\n<li><code class=\"language-text\">fs.readdir()</code>: read the contents of a directory</li>\n<li><code class=\"language-text\">fs.readFile()</code>: read the content of a file. Related: <code class=\"language-text\">fs.read()</code></li>\n<li><code class=\"language-text\">fs.readlink()</code>: read the value of a symbolic link</li>\n<li><code class=\"language-text\">fs.realpath()</code>: resolve relative file path pointers (<code class=\"language-text\">.</code>, <code class=\"language-text\">..</code>) to the full path</li>\n<li><code class=\"language-text\">fs.rename()</code>: rename a file or folder</li>\n<li><code class=\"language-text\">fs.rmdir()</code>: remove a folder</li>\n<li><code class=\"language-text\">fs.stat()</code>: returns the status of the file identified by the filename passed. Related: <code class=\"language-text\">fs.fstat()</code>, <code class=\"language-text\">fs.lstat()</code></li>\n<li><code class=\"language-text\">fs.symlink()</code>: create a new symbolic link to a file</li>\n<li><code class=\"language-text\">fs.truncate()</code>: truncate to the specified length the file identified by the filename passed. Related: <code class=\"language-text\">fs.ftruncate()</code></li>\n<li><code class=\"language-text\">fs.unlink()</code>: remove a file or a symbolic link</li>\n<li><code class=\"language-text\">fs.unwatchFile()</code>: stop watching for changes on a file</li>\n<li><code class=\"language-text\">fs.utimes()</code>: change the timestamp of the file identified by the filename passed. Related: <code class=\"language-text\">fs.futimes()</code></li>\n<li><code class=\"language-text\">fs.watchFile()</code>: start watching for changes on a file. Related: <code class=\"language-text\">fs.watch()</code></li>\n<li><code class=\"language-text\">fs.writeFile()</code>: write data to a file. Related: <code class=\"language-text\">fs.write()</code></li>\n</ul>\n<p>One peculiar thing about the <code class=\"language-text\">fs</code> module is that all the methods are asynchronous by default, but they can also work synchronously by appending <code class=\"language-text\">Sync</code>.</p>\n<p>For example:</p>\n<ul>\n<li><code class=\"language-text\">fs.rename()</code></li>\n<li><code class=\"language-text\">fs.renameSync()</code></li>\n<li><code class=\"language-text\">fs.write()</code></li>\n<li><code class=\"language-text\">fs.writeSync()</code></li>\n</ul>\n<p>This makes a huge difference in your application flow.</p>\n<blockquote>\n<p>Node.js 10 includes <a href=\"https://nodejs.org/api/fs.html#fs_fs_promises_api\">experimental support</a> for a promise based API</p>\n</blockquote>\n<p>For example let's examine the <code class=\"language-text\">fs.rename()</code> method. The asynchronous API is used with a callback:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after.json'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//done</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A synchronous API can be used like this, with a try/catch block to handle errors:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">renameSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after.json'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//done</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The key difference here is that the execution of your script will block in the second example, until the file operation succeeded.</p>","tableOfContents":"","frontmatter":{"title":"The Node.js fs module","description":"The fs module of Node.js provides useful functions to interact with the file system"},"fields":{"slug":"the-nodejs-fs-module","authors":["flaviocopes"," MylesBorins"," fhemberger"," LaRuaNa"," ahmadawais"]}}},"pageContext":{"slug":"the-nodejs-fs-module","next":{"slug":"the-nodejs-path-module","title":"The Node.js path module"},"previous":{"slug":"working-with-folders-in-nodejs","title":"Working with folders in Node.js"},"relativePath":"0046-node-module-fs/index.md","navigationData":{"Quick Start":[{"title":"Introduction to Node.js","slug":"introduction-to-nodejs","section":"Quick Start"},{"title":"A brief history of Node.js","slug":"a-brief-history-of-nodejs","section":"Quick Start"},{"title":"How to install Node.js","slug":"how-to-install-nodejs","section":"Quick Start"},{"title":"How much JavaScript do you need to know to use Node.js?","slug":"how-much-javascript-do-you-need-to-know-to-use-nodejs","section":"Quick Start"},{"title":"Differences between Node.js and the Browser","slug":"differences-between-nodejs-and-the-browser","section":"Quick Start"}],"Getting Started":[{"title":"The V8 JavaScript Engine","slug":"the-v8-javascript-engine","section":"Getting Started"},{"title":"Run Node.js scripts from the command line","slug":"run-nodejs-scripts-from-the-command-line","section":"Getting Started"},{"title":"How to exit from a Node.js program","slug":"how-to-exit-from-a-nodejs-program","section":"Getting Started"},{"title":"How to read environment variables from Node.js","slug":"how-to-read-environment-variables-from-nodejs","section":"Getting Started"},{"title":"How to use the Node.js REPL","slug":"how-to-use-the-nodejs-repl","section":"Getting Started"},{"title":"Node.js, accept arguments from the command line","slug":"nodejs-accept-arguments-from-the-command-line","section":"Getting Started"},{"title":"Output to the command line using Node.js","slug":"output-to-the-command-line-using-nodejs","section":"Getting Started"},{"title":"Accept input from the command line in Node.js","slug":"accept-input-from-the-command-line-in-nodejs","section":"Getting Started"},{"title":"Expose functionality from a Node.js file using exports","slug":"expose-functionality-from-a-nodejs-file-using-exports","section":"Getting Started"},{"title":"An introduction to the npm package manager","slug":"an-introduction-to-the-npm-package-manager","section":"Getting Started"},{"title":"Where does npm install the packages?","slug":"where-does-npm-install-the-packages","section":"Getting Started"},{"title":"How to use or execute a package installed using npm","slug":"how-to-use-or-execute-a-package-installed-using-npm","section":"Getting Started"},{"title":"The package.json guide","slug":"the-package-json-guide","section":"Getting Started"},{"title":"The package-lock.json file","slug":"the-package-lock-json-file","section":"Getting Started"},{"title":"Find the installed version of an npm package","slug":"find-the-installed-version-of-an-npm-package","section":"Getting Started"},{"title":"Install an older version of an npm package","slug":"install-an-older-version-of-an-npm-package","section":"Getting Started"},{"title":"Update all the Node.js dependencies to their latest version","slug":"update-all-the-nodejs-dependencies-to-their-latest-version","section":"Getting Started"},{"title":"Semantic Versioning using npm","slug":"semantic-versioning-using-npm","section":"Getting Started"},{"title":"Uninstalling npm packages","slug":"uninstalling-npm-packages","section":"Getting Started"},{"title":"npm global or local packages","slug":"npm-global-or-local-packages","section":"Getting Started"},{"title":"npm dependencies and devDependencies","slug":"npm-dependencies-and-devdependencies","section":"Getting Started"},{"title":"The npx Node.js Package Runner","slug":"the-npx-nodejs-package-runner","section":"Getting Started"},{"title":"The Node.js Event Loop","slug":"the-nodejs-event-loop","section":"Getting Started"},{"title":"Understanding process.nextTick()","slug":"understanding-process-nexttick","section":"Getting Started"},{"title":"Understanding setImmediate()","slug":"understanding-setimmediate","section":"Getting Started"},{"title":"Discover JavaScript Timers","slug":"discover-javascript-timers","section":"Getting Started"},{"title":"JavaScript Asynchronous Programming and Callbacks","slug":"javascript-asynchronous-programming-and-callbacks","section":"Getting Started"},{"title":"Understanding JavaScript Promises","slug":"understanding-javascript-promises","section":"Getting Started"},{"title":"Modern Asynchronous JavaScript with Async and Await","slug":"modern-asynchronous-javascript-with-async-and-await","section":"Getting Started"},{"title":"The Node.js Event emitter","slug":"the-nodejs-event-emitter","section":"Getting Started"},{"title":"Build an HTTP Server","slug":"build-an-http-server","section":"Getting Started"},{"title":"Making HTTP requests with Node.js","slug":"making-http-requests-with-nodejs","section":"Getting Started"},{"title":"Make an HTTP POST request using Node.js","slug":"make-an-http-post-request-using-nodejs","section":"Getting Started"},{"title":"Get HTTP request body data using Node.js","slug":"get-http-request-body-data-using-nodejs","section":"Getting Started"},{"title":"Working with file descriptors in Node.js","slug":"working-with-file-descriptors-in-nodejs","section":"Getting Started"},{"title":"Node.js file stats","slug":"nodejs-file-stats","section":"Getting Started"},{"title":"Node.js File Paths","slug":"nodejs-file-paths","section":"Getting Started"},{"title":"Reading files with Node.js","slug":"reading-files-with-nodejs","section":"Getting Started"},{"title":"Writing files with Node.js","slug":"writing-files-with-nodejs","section":"Getting Started"},{"title":"Working with folders in Node.js","slug":"working-with-folders-in-nodejs","section":"Getting Started"},{"title":"The Node.js fs module","slug":"the-nodejs-fs-module","section":"Getting Started"},{"title":"The Node.js path module","slug":"the-nodejs-path-module","section":"Getting Started"},{"title":"The Node.js os module","slug":"the-nodejs-os-module","section":"Getting Started"},{"title":"The Node.js events module","slug":"the-nodejs-events-module","section":"Getting Started"},{"title":"The Node.js http module","slug":"the-nodejs-http-module","section":"Getting Started"},{"title":"Node.js Buffers","slug":"nodejs-buffers","section":"Getting Started"},{"title":"Node.js Streams","slug":"nodejs-streams","section":"Getting Started"},{"title":"Node.js, the difference between development and production","slug":"nodejs-the-difference-between-development-and-production","section":"Getting Started"},{"title":"Error handling in Node.js","slug":"error-handling-in-nodejs","section":"Getting Started"},{"title":"How to log an object in Node.js","slug":"how-to-log-an-object-in-nodejs","section":"Getting Started"},{"title":"Node.js with TypeScript","slug":"nodejs-with-typescript","section":"Getting Started"}]}}},"staticQueryHashes":[]}