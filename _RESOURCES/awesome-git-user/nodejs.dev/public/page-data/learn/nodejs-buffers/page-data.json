{"componentChunkName":"component---src-templates-learn-tsx","path":"/learn/nodejs-buffers","result":{"data":{"doc":{"id":"729779ca-5031-5f1a-9096-72076bfdc1cc","html":"<h2 id=\"what-is-a-buffer\" style=\"position:relative;\"><a href=\"#what-is-a-buffer\" aria-label=\"what is a buffer permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a buffer?</h2>\n<p>A buffer is an area of memory. JavaScript developers are not familiar with this concept, much less than C, C++ or Go developers (or any programmer that uses a system programming language), which interact with memory every day.</p>\n<p>It represents a fixed-size chunk of memory (can't be resized) allocated outside of the V8 JavaScript engine.</p>\n<p>You can think of a buffer like an array of integers, which each represent a byte of data.</p>\n<p>It is implemented by the Node.js <a href=\"https://nodejs.org/api/buffer.html\">Buffer class</a>.</p>\n<h2 id=\"why-do-we-need-a-buffer\" style=\"position:relative;\"><a href=\"#why-do-we-need-a-buffer\" aria-label=\"why do we need a buffer permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why do we need a buffer?</h2>\n<p>Buffers were introduced to help developers deal with binary data, in an ecosystem that traditionally only dealt with strings rather than binaries.</p>\n<p>Buffers are deeply linked with streams. When a stream processor receives data faster than it can digest, it puts the data in a buffer.</p>\n<p>A simple visualization of a buffer is when you are watching a YouTube video and the red line goes beyond your visualization point: you are downloading data faster than you're viewing it, and your browser buffers it.</p>\n<h2 id=\"how-to-create-a-buffer\" style=\"position:relative;\"><a href=\"#how-to-create-a-buffer\" aria-label=\"how to create a buffer permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to create a buffer</h2>\n<p>A buffer is created using the <a href=\"https://nodejs.org/api/buffer.html#buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe\"><code class=\"language-text\">Buffer.from()</code></a>, <a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding\"><code class=\"language-text\">Buffer.alloc()</code></a>, and <a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size\"><code class=\"language-text\">Buffer.allocUnsafe()</code></a> methods.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array\"><code class=\"language-text\">Buffer.from(array)</code></a></li>\n<li><a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code class=\"language-text\">Buffer.from(arrayBuffer[, byteOffset[, length]])</code></a></li>\n<li><a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer\"><code class=\"language-text\">Buffer.from(buffer)</code></a></li>\n<li><a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding\"><code class=\"language-text\">Buffer.from(string[, encoding])</code></a></li>\n</ul>\n<p>You can also just initialize the buffer passing the size. This creates a 1KB buffer:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//or</span>\n<span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">allocUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>While both <code class=\"language-text\">alloc</code> and <code class=\"language-text\">allocUnsafe</code> allocate a <code class=\"language-text\">Buffer</code> of the specified size in bytes, the <code class=\"language-text\">Buffer</code> created by <code class=\"language-text\">alloc</code> will be <em>initialized</em> with zeroes and the one created by <code class=\"language-text\">allocUnsafe</code> will be <em>uninitialized</em>. This means that while <code class=\"language-text\">allocUnsafe</code> would be quite fast in comparison to <code class=\"language-text\">alloc</code>, the allocated segment of memory may contain old data which could potentially be sensitive.</p>\n<p>Older data, if present in the memory, can be accessed or leaked when the <code class=\"language-text\">Buffer</code> memory is read. This is what really makes <code class=\"language-text\">allocUnsafe</code> unsafe and extra care must be taken while using it.</p>\n<h2 id=\"using-a-buffer\" style=\"position:relative;\"><a href=\"#using-a-buffer\" aria-label=\"using a buffer permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using a buffer</h2>\n<h3 id=\"access-the-content-of-a-buffer\" style=\"position:relative;\"><a href=\"#access-the-content-of-a-buffer\" aria-label=\"access the content of a buffer permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Access the content of a buffer</h3>\n<p>A buffer, being an array of bytes, can be accessed like an array:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey!'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//72</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//101</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//121</span></code></pre></div>\n<p>Those numbers are the Unicode Code that identifies the character in the buffer position (H => 72, e => 101, y => 121)</p>\n<p>You can print the full content of the buffer using the <code class=\"language-text\">toString()</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>Notice that if you initialize a buffer with a number that sets its size, you'll get access to pre-initialized memory that will contain random data, not an empty buffer!</p>\n</blockquote>\n<h3 id=\"get-the-length-of-a-buffer\" style=\"position:relative;\"><a href=\"#get-the-length-of-a-buffer\" aria-label=\"get the length of a buffer permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Get the length of a buffer</h3>\n<p>Use the <code class=\"language-text\">length</code> property:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey!'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"iterate-over-the-contents-of-a-buffer\" style=\"position:relative;\"><a href=\"#iterate-over-the-contents-of-a-buffer\" aria-label=\"iterate over the contents of a buffer permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterate over the contents of a buffer</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token comment\">//72 101 121 33</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"changing-the-content-of-a-buffer\" style=\"position:relative;\"><a href=\"#changing-the-content-of-a-buffer\" aria-label=\"changing the content of a buffer permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changing the content of a buffer</h3>\n<p>You can write to a buffer a whole string of data by using the <code class=\"language-text\">write()</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nbuf<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Just like you can access a buffer with an array syntax, you can also set the contents of the buffer in the same way:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey!'</span><span class=\"token punctuation\">)</span>\nbuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">111</span> <span class=\"token comment\">//o</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//Hoy!</span></code></pre></div>\n<h3 id=\"copy-a-buffer\" style=\"position:relative;\"><a href=\"#copy-a-buffer\" aria-label=\"copy a buffer permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Copy a buffer</h3>\n<p>Copying a buffer is possible using the <code class=\"language-text\">copy()</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> bufcopy <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//allocate 4 bytes</span>\nbuf<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>bufcopy<span class=\"token punctuation\">)</span></code></pre></div>\n<p>By default you copy the whole buffer. 3 more parameters let you define the starting position, the ending position, and the new buffer length:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> bufcopy <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//allocate 2 bytes</span>\nbuf<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>bufcopy<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nbufcopy<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//'He'</span></code></pre></div>\n<h3 id=\"slice-a-buffer\" style=\"position:relative;\"><a href=\"#slice-a-buffer\" aria-label=\"slice a buffer permalink\" class=\"autolink-headers before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slice a buffer</h3>\n<p>If you want to create a partial visualization of a buffer, you can create a slice. A slice is not a copy: the original buffer is still the source of truth. If that changes, your slice changes.</p>\n<p>Use the <code class=\"language-text\">slice()</code> method to create it. The first parameter is the starting position, and you can specify an optional second parameter with the end position:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey!'</span><span class=\"token punctuation\">)</span>\nbuf<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//Hey!</span>\n<span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//He</span>\nbuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">111</span> <span class=\"token comment\">//o</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//Ho</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"#what-is-a-buffer\">What is a buffer?</a></li>\n<li><a href=\"#why-do-we-need-a-buffer\">Why do we need a buffer?</a></li>\n<li><a href=\"#how-to-create-a-buffer\">How to create a buffer</a></li>\n<li>\n<p><a href=\"#using-a-buffer\">Using a buffer</a></p>\n<ul>\n<li><a href=\"#access-the-content-of-a-buffer\">Access the content of a buffer</a></li>\n<li><a href=\"#get-the-length-of-a-buffer\">Get the length of a buffer</a></li>\n<li><a href=\"#iterate-over-the-contents-of-a-buffer\">Iterate over the contents of a buffer</a></li>\n<li><a href=\"#changing-the-content-of-a-buffer\">Changing the content of a buffer</a></li>\n<li><a href=\"#copy-a-buffer\">Copy a buffer</a></li>\n<li><a href=\"#slice-a-buffer\">Slice a buffer</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Node.js Buffers","description":"Learn what Node.js buffers are, what they are used for, how to use them"},"fields":{"slug":"nodejs-buffers","authors":["flaviocopes"," MylesBorins"," fhemberger"," LaRuaNa"," ahmadawais"," 19shubham11"]}}},"pageContext":{"slug":"nodejs-buffers","next":{"slug":"nodejs-streams","title":"Node.js Streams"},"previous":{"slug":"the-nodejs-http-module","title":"The Node.js http module"},"relativePath":"0051-node-buffers/index.md","navigationData":{"Quick Start":[{"title":"Introduction to Node.js","slug":"introduction-to-nodejs","section":"Quick Start"},{"title":"A brief history of Node.js","slug":"a-brief-history-of-nodejs","section":"Quick Start"},{"title":"How to install Node.js","slug":"how-to-install-nodejs","section":"Quick Start"},{"title":"How much JavaScript do you need to know to use Node.js?","slug":"how-much-javascript-do-you-need-to-know-to-use-nodejs","section":"Quick Start"},{"title":"Differences between Node.js and the Browser","slug":"differences-between-nodejs-and-the-browser","section":"Quick Start"}],"Getting Started":[{"title":"The V8 JavaScript Engine","slug":"the-v8-javascript-engine","section":"Getting Started"},{"title":"Run Node.js scripts from the command line","slug":"run-nodejs-scripts-from-the-command-line","section":"Getting Started"},{"title":"How to exit from a Node.js program","slug":"how-to-exit-from-a-nodejs-program","section":"Getting Started"},{"title":"How to read environment variables from Node.js","slug":"how-to-read-environment-variables-from-nodejs","section":"Getting Started"},{"title":"How to use the Node.js REPL","slug":"how-to-use-the-nodejs-repl","section":"Getting Started"},{"title":"Node.js, accept arguments from the command line","slug":"nodejs-accept-arguments-from-the-command-line","section":"Getting Started"},{"title":"Output to the command line using Node.js","slug":"output-to-the-command-line-using-nodejs","section":"Getting Started"},{"title":"Accept input from the command line in Node.js","slug":"accept-input-from-the-command-line-in-nodejs","section":"Getting Started"},{"title":"Expose functionality from a Node.js file using exports","slug":"expose-functionality-from-a-nodejs-file-using-exports","section":"Getting Started"},{"title":"An introduction to the npm package manager","slug":"an-introduction-to-the-npm-package-manager","section":"Getting Started"},{"title":"Where does npm install the packages?","slug":"where-does-npm-install-the-packages","section":"Getting Started"},{"title":"How to use or execute a package installed using npm","slug":"how-to-use-or-execute-a-package-installed-using-npm","section":"Getting Started"},{"title":"The package.json guide","slug":"the-package-json-guide","section":"Getting Started"},{"title":"The package-lock.json file","slug":"the-package-lock-json-file","section":"Getting Started"},{"title":"Find the installed version of an npm package","slug":"find-the-installed-version-of-an-npm-package","section":"Getting Started"},{"title":"Install an older version of an npm package","slug":"install-an-older-version-of-an-npm-package","section":"Getting Started"},{"title":"Update all the Node.js dependencies to their latest version","slug":"update-all-the-nodejs-dependencies-to-their-latest-version","section":"Getting Started"},{"title":"Semantic Versioning using npm","slug":"semantic-versioning-using-npm","section":"Getting Started"},{"title":"Uninstalling npm packages","slug":"uninstalling-npm-packages","section":"Getting Started"},{"title":"npm global or local packages","slug":"npm-global-or-local-packages","section":"Getting Started"},{"title":"npm dependencies and devDependencies","slug":"npm-dependencies-and-devdependencies","section":"Getting Started"},{"title":"The npx Node.js Package Runner","slug":"the-npx-nodejs-package-runner","section":"Getting Started"},{"title":"The Node.js Event Loop","slug":"the-nodejs-event-loop","section":"Getting Started"},{"title":"Understanding process.nextTick()","slug":"understanding-process-nexttick","section":"Getting Started"},{"title":"Understanding setImmediate()","slug":"understanding-setimmediate","section":"Getting Started"},{"title":"Discover JavaScript Timers","slug":"discover-javascript-timers","section":"Getting Started"},{"title":"JavaScript Asynchronous Programming and Callbacks","slug":"javascript-asynchronous-programming-and-callbacks","section":"Getting Started"},{"title":"Understanding JavaScript Promises","slug":"understanding-javascript-promises","section":"Getting Started"},{"title":"Modern Asynchronous JavaScript with Async and Await","slug":"modern-asynchronous-javascript-with-async-and-await","section":"Getting Started"},{"title":"The Node.js Event emitter","slug":"the-nodejs-event-emitter","section":"Getting Started"},{"title":"Build an HTTP Server","slug":"build-an-http-server","section":"Getting Started"},{"title":"Making HTTP requests with Node.js","slug":"making-http-requests-with-nodejs","section":"Getting Started"},{"title":"Make an HTTP POST request using Node.js","slug":"make-an-http-post-request-using-nodejs","section":"Getting Started"},{"title":"Get HTTP request body data using Node.js","slug":"get-http-request-body-data-using-nodejs","section":"Getting Started"},{"title":"Working with file descriptors in Node.js","slug":"working-with-file-descriptors-in-nodejs","section":"Getting Started"},{"title":"Node.js file stats","slug":"nodejs-file-stats","section":"Getting Started"},{"title":"Node.js File Paths","slug":"nodejs-file-paths","section":"Getting Started"},{"title":"Reading files with Node.js","slug":"reading-files-with-nodejs","section":"Getting Started"},{"title":"Writing files with Node.js","slug":"writing-files-with-nodejs","section":"Getting Started"},{"title":"Working with folders in Node.js","slug":"working-with-folders-in-nodejs","section":"Getting Started"},{"title":"The Node.js fs module","slug":"the-nodejs-fs-module","section":"Getting Started"},{"title":"The Node.js path module","slug":"the-nodejs-path-module","section":"Getting Started"},{"title":"The Node.js os module","slug":"the-nodejs-os-module","section":"Getting Started"},{"title":"The Node.js events module","slug":"the-nodejs-events-module","section":"Getting Started"},{"title":"The Node.js http module","slug":"the-nodejs-http-module","section":"Getting Started"},{"title":"Node.js Buffers","slug":"nodejs-buffers","section":"Getting Started"},{"title":"Node.js Streams","slug":"nodejs-streams","section":"Getting Started"},{"title":"Node.js, the difference between development and production","slug":"nodejs-the-difference-between-development-and-production","section":"Getting Started"},{"title":"Error handling in Node.js","slug":"error-handling-in-nodejs","section":"Getting Started"},{"title":"How to log an object in Node.js","slug":"how-to-log-an-object-in-nodejs","section":"Getting Started"},{"title":"Node.js with TypeScript","slug":"nodejs-with-typescript","section":"Getting Started"}]}}},"staticQueryHashes":[]}