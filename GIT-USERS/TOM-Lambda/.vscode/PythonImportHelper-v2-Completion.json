[
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "World",
        "importPath": "world",
        "description": "world",
        "isExtraImport": true,
        "detail": "world",
        "documentation": {}
    },
    {
        "label": "World",
        "importPath": "world",
        "description": "world",
        "isExtraImport": true,
        "detail": "world",
        "documentation": {}
    },
    {
        "label": "World",
        "importPath": "world",
        "description": "world",
        "isExtraImport": true,
        "detail": "world",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "climbing_stairs",
        "importPath": "climbing_stairs",
        "description": "climbing_stairs",
        "isExtraImport": true,
        "detail": "climbing_stairs",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "knapsack_solver",
        "importPath": "knapsack",
        "description": "knapsack",
        "isExtraImport": true,
        "detail": "knapsack",
        "documentation": {}
    },
    {
        "label": "making_change",
        "importPath": "making_change",
        "description": "making_change",
        "isExtraImport": true,
        "detail": "making_change",
        "documentation": {}
    },
    {
        "label": "recipe_batches",
        "importPath": "recipe_batches",
        "description": "recipe_batches",
        "isExtraImport": true,
        "detail": "recipe_batches",
        "documentation": {}
    },
    {
        "label": "rock_paper_scissors",
        "importPath": "rps",
        "description": "rps",
        "isExtraImport": true,
        "detail": "rps",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "find_max_profit",
        "importPath": "stock_prices",
        "description": "stock_prices",
        "isExtraImport": true,
        "detail": "stock_prices",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "CPU",
        "importPath": "cpu",
        "description": "cpu",
        "isExtraImport": true,
        "detail": "cpu",
        "documentation": {}
    },
    {
        "label": "CPU",
        "importPath": "cpu",
        "description": "cpu",
        "isExtraImport": true,
        "detail": "cpu",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cpu",
        "description": "cpu",
        "isExtraImport": true,
        "detail": "cpu",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cpu",
        "description": "cpu",
        "isExtraImport": true,
        "detail": "cpu",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cpu",
        "description": "cpu",
        "isExtraImport": true,
        "detail": "cpu",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cpu",
        "description": "cpu",
        "isExtraImport": true,
        "detail": "cpu",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cpu",
        "description": "cpu",
        "isExtraImport": true,
        "detail": "cpu",
        "documentation": {}
    },
    {
        "label": "CPU",
        "importPath": "cpu",
        "description": "cpu",
        "isExtraImport": true,
        "detail": "cpu",
        "documentation": {}
    },
    {
        "label": "CPU",
        "importPath": "cpu",
        "description": "cpu",
        "isExtraImport": true,
        "detail": "cpu",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "importPath": "ancestor",
        "description": "ancestor",
        "isExtraImport": true,
        "detail": "ancestor",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "importPath": "ancestor",
        "description": "ancestor",
        "isExtraImport": true,
        "detail": "ancestor",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "stack",
        "description": "stack",
        "isExtraImport": true,
        "detail": "stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "stack",
        "description": "stack",
        "isExtraImport": true,
        "detail": "stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "stack",
        "description": "stack",
        "isExtraImport": true,
        "detail": "stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "stack",
        "description": "stack",
        "isExtraImport": true,
        "detail": "stack",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "importPath": "singly_linked_list",
        "description": "singly_linked_list",
        "isExtraImport": true,
        "detail": "singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "importPath": "singly_linked_list",
        "description": "singly_linked_list",
        "isExtraImport": true,
        "detail": "singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "importPath": "singly_linked_list",
        "description": "singly_linked_list",
        "isExtraImport": true,
        "detail": "singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "importPath": "singly_linked_list",
        "description": "singly_linked_list",
        "isExtraImport": true,
        "detail": "singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "importPath": "singly_linked_list",
        "description": "singly_linked_list",
        "isExtraImport": true,
        "detail": "singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "importPath": "singly_linked_list",
        "description": "singly_linked_list",
        "isExtraImport": true,
        "detail": "singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "importPath": "singly_linked_list",
        "description": "singly_linked_list",
        "isExtraImport": true,
        "detail": "singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "importPath": "singly_linked_list",
        "description": "singly_linked_list",
        "isExtraImport": true,
        "detail": "singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "importPath": "singly_linked_list",
        "description": "singly_linked_list",
        "isExtraImport": true,
        "detail": "singly_linked_list",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "importPath": "bst",
        "description": "bst",
        "isExtraImport": true,
        "detail": "bst",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "importPath": "bst",
        "description": "bst",
        "isExtraImport": true,
        "detail": "bst",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Store",
        "importPath": "store",
        "description": "store",
        "isExtraImport": true,
        "detail": "store",
        "documentation": {}
    },
    {
        "label": "Store",
        "importPath": "store",
        "description": "store",
        "isExtraImport": true,
        "detail": "store",
        "documentation": {}
    },
    {
        "label": "cats",
        "importPath": "data_for_store",
        "description": "data_for_store",
        "isExtraImport": true,
        "detail": "data_for_store",
        "documentation": {}
    },
    {
        "label": "cats",
        "importPath": "data_for_store",
        "description": "data_for_store",
        "isExtraImport": true,
        "detail": "data_for_store",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "category",
        "description": "category",
        "isExtraImport": true,
        "detail": "category",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "category",
        "description": "category",
        "isExtraImport": true,
        "detail": "category",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "category",
        "description": "category",
        "isExtraImport": true,
        "detail": "category",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "category",
        "description": "category",
        "isExtraImport": true,
        "detail": "category",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "category",
        "description": "category",
        "isExtraImport": true,
        "detail": "category",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "category",
        "description": "category",
        "isExtraImport": true,
        "detail": "category",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "Clothing",
        "importPath": "clothing",
        "description": "clothing",
        "isExtraImport": true,
        "detail": "clothing",
        "documentation": {}
    },
    {
        "label": "Clothing",
        "importPath": "clothing",
        "description": "clothing",
        "isExtraImport": true,
        "detail": "clothing",
        "documentation": {}
    },
    {
        "label": "Equipment",
        "importPath": "equipment",
        "description": "equipment",
        "isExtraImport": true,
        "detail": "equipment",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "PersonalNoteViewSet",
        "importPath": "notes.api",
        "description": "notes.api",
        "isExtraImport": true,
        "detail": "notes.api",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework.authtoken",
        "description": "rest_framework.authtoken",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "Pusher",
        "importPath": "pusher",
        "description": "pusher",
        "isExtraImport": true,
        "detail": "pusher",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "SessionAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "BasicAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "TokenAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "django_heroku",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_heroku",
        "description": "django_heroku",
        "detail": "django_heroku",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "adventure.models",
        "description": "adventure.models",
        "isExtraImport": true,
        "detail": "adventure.models",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "adventure.models",
        "description": "adventure.models",
        "isExtraImport": true,
        "detail": "adventure.models",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyboard",
        "description": "keyboard",
        "detail": "keyboard",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "Category",
        "description": "Category",
        "isExtraImport": true,
        "detail": "Category",
        "documentation": {}
    },
    {
        "label": "Ball",
        "importPath": "ball",
        "description": "ball",
        "isExtraImport": true,
        "detail": "ball",
        "documentation": {}
    },
    {
        "label": "Footware",
        "importPath": "footware",
        "description": "footware",
        "isExtraImport": true,
        "detail": "footware",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "dll_queue",
        "description": "dll_queue",
        "isExtraImport": true,
        "detail": "dll_queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "dll_queue",
        "description": "dll_queue",
        "isExtraImport": true,
        "detail": "dll_queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "dll_queue",
        "description": "dll_queue",
        "isExtraImport": true,
        "detail": "dll_queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "dll_queue",
        "description": "dll_queue",
        "isExtraImport": true,
        "detail": "dll_queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "dll_queue",
        "description": "dll_queue",
        "isExtraImport": true,
        "detail": "dll_queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "dll_queue",
        "description": "dll_queue",
        "isExtraImport": true,
        "detail": "dll_queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "dll_queue",
        "description": "dll_queue",
        "isExtraImport": true,
        "detail": "dll_queue",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "dll_stack",
        "description": "dll_stack",
        "isExtraImport": true,
        "detail": "dll_stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "dll_stack",
        "description": "dll_stack",
        "isExtraImport": true,
        "detail": "dll_stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "dll_stack",
        "description": "dll_stack",
        "isExtraImport": true,
        "detail": "dll_stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "dll_stack",
        "description": "dll_stack",
        "isExtraImport": true,
        "detail": "dll_stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "dll_stack",
        "description": "dll_stack",
        "isExtraImport": true,
        "detail": "dll_stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "dll_stack",
        "description": "dll_stack",
        "isExtraImport": true,
        "detail": "dll_stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "dll_stack",
        "description": "dll_stack",
        "isExtraImport": true,
        "detail": "dll_stack",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "importPath": "binary_search_tree",
        "description": "binary_search_tree",
        "isExtraImport": true,
        "detail": "binary_search_tree",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "importPath": "binary_search_tree",
        "description": "binary_search_tree",
        "isExtraImport": true,
        "detail": "binary_search_tree",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "importPath": "binary_search_tree",
        "description": "binary_search_tree",
        "isExtraImport": true,
        "detail": "binary_search_tree",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "importPath": "binary_search_tree",
        "description": "binary_search_tree",
        "isExtraImport": true,
        "detail": "binary_search_tree",
        "documentation": {}
    },
    {
        "label": "LRUCache",
        "importPath": "lru_cache",
        "description": "lru_cache",
        "isExtraImport": true,
        "detail": "lru_cache",
        "documentation": {}
    },
    {
        "label": "LRUCache",
        "importPath": "lru_cache",
        "description": "lru_cache",
        "isExtraImport": true,
        "detail": "lru_cache",
        "documentation": {}
    },
    {
        "label": "LRUCache",
        "importPath": "lru_cache",
        "description": "lru_cache",
        "isExtraImport": true,
        "detail": "lru_cache",
        "documentation": {}
    },
    {
        "label": "LRUCache",
        "importPath": "lru_cache",
        "description": "lru_cache",
        "isExtraImport": true,
        "detail": "lru_cache",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "importPath": "ans",
        "description": "ans",
        "isExtraImport": true,
        "detail": "ans",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "importPath": "ans",
        "description": "ans",
        "isExtraImport": true,
        "detail": "ans",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "Book",
        "importPath": "book",
        "description": "book",
        "isExtraImport": true,
        "detail": "book",
        "documentation": {}
    },
    {
        "label": "Book",
        "importPath": "book",
        "description": "book",
        "isExtraImport": true,
        "detail": "book",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "importPath": "hash_table",
        "description": "hash_table",
        "isExtraImport": true,
        "detail": "hash_table",
        "documentation": {}
    },
    {
        "label": "find_duplicate",
        "importPath": "find_duplicate",
        "description": "find_duplicate",
        "isExtraImport": true,
        "detail": "find_duplicate",
        "documentation": {}
    },
    {
        "label": "search",
        "importPath": "search_array",
        "description": "search_array",
        "isExtraImport": true,
        "detail": "search_array",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "day4",
        "description": "day4",
        "isExtraImport": true,
        "detail": "day4",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "day4",
        "description": "day4",
        "isExtraImport": true,
        "detail": "day4",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "day4",
        "description": "day4",
        "isExtraImport": true,
        "detail": "day4",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "day4",
        "description": "day4",
        "isExtraImport": true,
        "detail": "day4",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "day4",
        "description": "day4",
        "isExtraImport": true,
        "detail": "day4",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "day4",
        "description": "day4",
        "isExtraImport": true,
        "detail": "day4",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "iterative_sorting",
        "description": "iterative_sorting",
        "isExtraImport": true,
        "detail": "iterative_sorting",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "Treasure",
        "importPath": "items",
        "description": "items",
        "isExtraImport": true,
        "detail": "items",
        "documentation": {}
    },
    {
        "label": "LightSource",
        "importPath": "items",
        "description": "items",
        "isExtraImport": true,
        "detail": "items",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "world",
        "kind": 5,
        "importPath": "adv1.adventure.adv",
        "description": "adv1.adventure.adv",
        "peekOfCode": "world = World()\n# You may uncomment the smaller graphs for development and testing purposes.\nmap_file = \"maps/test_line.txt\"\n# map_file = \"maps/test_cross.txt\"\n# map_file = \"maps/test_loop.txt\"\n# map_file = \"maps/test_loop_fork.txt\"\n# map_file = \"maps/main_maze.txt\"\n# Loads the map into a dictionary\nroom_graph=literal_eval(open(map_file, \"r\").read())\nworld.load_graph(room_graph)",
        "detail": "adv1.adventure.adv",
        "documentation": {}
    },
    {
        "label": "map_file",
        "kind": 5,
        "importPath": "adv1.adventure.adv",
        "description": "adv1.adventure.adv",
        "peekOfCode": "map_file = \"maps/test_line.txt\"\n# map_file = \"maps/test_cross.txt\"\n# map_file = \"maps/test_loop.txt\"\n# map_file = \"maps/test_loop_fork.txt\"\n# map_file = \"maps/main_maze.txt\"\n# Loads the map into a dictionary\nroom_graph=literal_eval(open(map_file, \"r\").read())\nworld.load_graph(room_graph)\n# Print an ASCII map\nworld.print_rooms()",
        "detail": "adv1.adventure.adv",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "adv1.adventure.adv",
        "description": "adv1.adventure.adv",
        "peekOfCode": "player = Player(world.starting_room)\n# Fill this out with directions to walk\n# traversal_path = ['n', 'n']\ntraversal_path = []\n# TRAVERSAL TEST\nvisited_rooms = set()\nplayer.current_room = world.starting_room\nvisited_rooms.add(player.current_room)\nfor move in traversal_path:\n    player.travel(move)",
        "detail": "adv1.adventure.adv",
        "documentation": {}
    },
    {
        "label": "traversal_path",
        "kind": 5,
        "importPath": "adv1.adventure.adv",
        "description": "adv1.adventure.adv",
        "peekOfCode": "traversal_path = []\n# TRAVERSAL TEST\nvisited_rooms = set()\nplayer.current_room = world.starting_room\nvisited_rooms.add(player.current_room)\nfor move in traversal_path:\n    player.travel(move)\n    visited_rooms.add(player.current_room)\nif len(visited_rooms) == len(room_graph):\n    print(f\"TESTS PASSED: {len(traversal_path)} moves, {len(visited_rooms)} rooms visited\")",
        "detail": "adv1.adventure.adv",
        "documentation": {}
    },
    {
        "label": "visited_rooms",
        "kind": 5,
        "importPath": "adv1.adventure.adv",
        "description": "adv1.adventure.adv",
        "peekOfCode": "visited_rooms = set()\nplayer.current_room = world.starting_room\nvisited_rooms.add(player.current_room)\nfor move in traversal_path:\n    player.travel(move)\n    visited_rooms.add(player.current_room)\nif len(visited_rooms) == len(room_graph):\n    print(f\"TESTS PASSED: {len(traversal_path)} moves, {len(visited_rooms)} rooms visited\")\nelse:\n    print(\"TESTS FAILED: INCOMPLETE TRAVERSAL\")",
        "detail": "adv1.adventure.adv",
        "documentation": {}
    },
    {
        "label": "player.current_room",
        "kind": 5,
        "importPath": "adv1.adventure.adv",
        "description": "adv1.adventure.adv",
        "peekOfCode": "player.current_room = world.starting_room\nvisited_rooms.add(player.current_room)\nfor move in traversal_path:\n    player.travel(move)\n    visited_rooms.add(player.current_room)\nif len(visited_rooms) == len(room_graph):\n    print(f\"TESTS PASSED: {len(traversal_path)} moves, {len(visited_rooms)} rooms visited\")\nelse:\n    print(\"TESTS FAILED: INCOMPLETE TRAVERSAL\")\n    print(f\"{len(room_graph) - len(visited_rooms)} unvisited rooms\")",
        "detail": "adv1.adventure.adv",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "adv1.adventure.player",
        "description": "adv1.adventure.player",
        "peekOfCode": "class Player:\n    def __init__(self, starting_room):\n        self.current_room = starting_room\n    def travel(self, direction, show_rooms = False):\n        next_room = self.current_room.get_room_in_direction(direction)\n        if next_room is not None:\n            self.current_room = next_room\n            if (show_rooms):\n                next_room.print_room_description(self)\n        else:",
        "detail": "adv1.adventure.player",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "adv1.adventure.queue",
        "description": "adv1.adventure.queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "adv1.adventure.queue",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "adv1.adventure.room",
        "description": "adv1.adventure.room",
        "peekOfCode": "class Room:\n    def __init__(self, name, description, id=0, x=None, y=None):\n        self.id = id\n        self.name = name\n        self.description = description\n        self.n_to = None\n        self.s_to = None\n        self.e_to = None\n        self.w_to = None\n        self.x = x",
        "detail": "adv1.adventure.room",
        "documentation": {}
    },
    {
        "label": "backtrack_to_unexplored_room",
        "kind": 2,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "def backtrack_to_unexplored_room(player, moves_queue):\n    # get back to the old room with unexplored exits\n    # create a queue\n    q = Queue()\n    # create a visited set\n    visited = set()\n    # enqueue the current room path\n    q.enqueue([player.current_room.id])\n    #while the queue is not empty\n    while q.size() > 0:",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "enqueue_moves",
        "kind": 2,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "def enqueue_moves(player, moves_queue):\n    # add all the moves to the moves queue\n    # set up some current rooms exits\n    current_room_exits = graph[player.current_room.id]\n    # create a list of unexplored exits\n    unexplored_exits = []\n    # for each direction in the current rooms exits\n    for direction in current_room_exits:\n        # check if the data at the current rooms exit is a \"?\"\n        if current_room_exits[direction] == \"?\":",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "map_file",
        "kind": 5,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "map_file = \"maps/main_maze.txt\"\n# traversal with path\ndef backtrack_to_unexplored_room(player, moves_queue):\n    # get back to the old room with unexplored exits\n    # create a queue\n    q = Queue()\n    # create a visited set\n    visited = set()\n    # enqueue the current room path\n    q.enqueue([player.current_room.id])",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "world",
        "kind": 5,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "world = World()\n# Loads the map into a dictionary\nroom_graph=literal_eval(open(map_file, \"r\").read())\nworld.load_graph(room_graph)\nplayer = Player(world.starting_room)\ninverse_directions = {\"n\": \"s\", \"s\": \"n\", \"e\": \"w\", \"w\": \"e\"}\ngraph = {}\nnew_room = {}\nfor direction in player.current_room.get_exits():\n    new_room[direction] = \"?\"",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "player = Player(world.starting_room)\ninverse_directions = {\"n\": \"s\", \"s\": \"n\", \"e\": \"w\", \"w\": \"e\"}\ngraph = {}\nnew_room = {}\nfor direction in player.current_room.get_exits():\n    new_room[direction] = \"?\"\ngraph[world.starting_room.id] = new_room\nmoves_queue = Queue()\ntotal_moves = []\n# build the graph",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "inverse_directions",
        "kind": 5,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "inverse_directions = {\"n\": \"s\", \"s\": \"n\", \"e\": \"w\", \"w\": \"e\"}\ngraph = {}\nnew_room = {}\nfor direction in player.current_room.get_exits():\n    new_room[direction] = \"?\"\ngraph[world.starting_room.id] = new_room\nmoves_queue = Queue()\ntotal_moves = []\n# build the graph\nenqueue_moves(player, moves_queue)",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "graph = {}\nnew_room = {}\nfor direction in player.current_room.get_exits():\n    new_room[direction] = \"?\"\ngraph[world.starting_room.id] = new_room\nmoves_queue = Queue()\ntotal_moves = []\n# build the graph\nenqueue_moves(player, moves_queue)\n# traverse the graph",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "new_room",
        "kind": 5,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "new_room = {}\nfor direction in player.current_room.get_exits():\n    new_room[direction] = \"?\"\ngraph[world.starting_room.id] = new_room\nmoves_queue = Queue()\ntotal_moves = []\n# build the graph\nenqueue_moves(player, moves_queue)\n# traverse the graph\n# while there are still moves on the queue",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "graph[world.starting_room.id]",
        "kind": 5,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "graph[world.starting_room.id] = new_room\nmoves_queue = Queue()\ntotal_moves = []\n# build the graph\nenqueue_moves(player, moves_queue)\n# traverse the graph\n# while there are still moves on the queue\nwhile moves_queue.size() > 0:\n    # set a start room to the current room id of the player\n    start_room = player.current_room.id",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "moves_queue",
        "kind": 5,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "moves_queue = Queue()\ntotal_moves = []\n# build the graph\nenqueue_moves(player, moves_queue)\n# traverse the graph\n# while there are still moves on the queue\nwhile moves_queue.size() > 0:\n    # set a start room to the current room id of the player\n    start_room = player.current_room.id\n    # dequeue the next move from the moves queue",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "total_moves",
        "kind": 5,
        "importPath": "adv1.adventure.tmp",
        "description": "adv1.adventure.tmp",
        "peekOfCode": "total_moves = []\n# build the graph\nenqueue_moves(player, moves_queue)\n# traverse the graph\n# while there are still moves on the queue\nwhile moves_queue.size() > 0:\n    # set a start room to the current room id of the player\n    start_room = player.current_room.id\n    # dequeue the next move from the moves queue\n    next_move = moves_queue.dequeue()",
        "detail": "adv1.adventure.tmp",
        "documentation": {}
    },
    {
        "label": "World",
        "kind": 6,
        "importPath": "adv1.adventure.world",
        "description": "adv1.adventure.world",
        "peekOfCode": "class World:\n    def __init__(self):\n        self.starting_room = None\n        self.rooms = {}\n        self.room_grid = []\n        self.grid_size = 0\n    def load_graph(self, room_graph):\n        num_rooms = len(room_graph)\n        rooms = [None] * num_rooms\n        grid_size = 1",
        "detail": "adv1.adventure.world",
        "documentation": {}
    },
    {
        "label": "climbing_stairs",
        "kind": 2,
        "importPath": "Algorithms.climbing_stairs.climbing_stairs",
        "description": "Algorithms.climbing_stairs.climbing_stairs",
        "peekOfCode": "def climbing_stairs(n, cache=None):\n  # base case for n is zero\n  if n == 0:\n      return 1\n  # secondary base of n < 0\n  elif n < 0:\n      return 0\n  # now testing for cache and cahce of n being greater than 0\n  elif cache and cache[n] > 0:\n      return cache[n]",
        "detail": "Algorithms.climbing_stairs.climbing_stairs",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "Algorithms.climbing_stairs.test_climbing_stairs",
        "description": "Algorithms.climbing_stairs.test_climbing_stairs",
        "peekOfCode": "class Test(unittest.TestCase):\n  def test_climbing_stairs_small_n(self):\n    self.assertEqual(climbing_stairs(0), 1)\n    self.assertEqual(climbing_stairs(1), 1)\n    self.assertEqual(climbing_stairs(2), 2)\n    self.assertEqual(climbing_stairs(5), 13)\n    self.assertEqual(climbing_stairs(10), 274)\n  def test_climbing_stairs_large_n(self):\n    self.assertEqual(climbing_stairs(50, [0 for i in range(51)]), 10562230626642)\n    self.assertEqual(climbing_stairs(100, [0 for i in range(101)]), 180396380815100901214157639)",
        "detail": "Algorithms.climbing_stairs.test_climbing_stairs",
        "documentation": {}
    },
    {
        "label": "knapsack_solver",
        "kind": 2,
        "importPath": "Algorithms.knapsack.knapsack",
        "description": "Algorithms.knapsack.knapsack",
        "peekOfCode": "def knapsack_solver(items, capacity):\n  # using a nested list comprehension we can make our initial cache\n  cache = [[{} for k in range(capacity + 1)] for k in range(len(items) + 1)]\n  # still using a nested for loop so there still may be alot of room for optimization\n  # going to iterate over a range of length of items + 1\n  for i in range(len(items) + 1):\n    # inner look will itterate over a range of capacity + 1\n    for j in range(capacity + 1):\n      # if we are at the first iteration then set the Value to zero and the Chosen to an empty list\n      if i == 0 or j == 0:",
        "detail": "Algorithms.knapsack.knapsack",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 5,
        "importPath": "Algorithms.knapsack.knapsack",
        "description": "Algorithms.knapsack.knapsack",
        "peekOfCode": "Item = namedtuple('Item', ['index', 'size', 'value'])\n# trying to do my first pass of dynamic programming with memorization \n# utilizing a bottom up approach. which is a bit backward to my general way of thinking.\n# but lets see how well it works\ndef knapsack_solver(items, capacity):\n  # using a nested list comprehension we can make our initial cache\n  cache = [[{} for k in range(capacity + 1)] for k in range(len(items) + 1)]\n  # still using a nested for loop so there still may be alot of room for optimization\n  # going to iterate over a range of length of items + 1\n  for i in range(len(items) + 1):",
        "detail": "Algorithms.knapsack.knapsack",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "Algorithms.knapsack.test_knapsack",
        "description": "Algorithms.knapsack.test_knapsack",
        "peekOfCode": "class Test(unittest.TestCase):\n  def setUp_small(self):\n    file_contents = open('data/small1.txt', 'r')\n    self.small_1_items = []\n    for line in file_contents.readlines():\n      data = line.rstrip().split()\n      self.small_1_items.append(Item(int(data[0]), int(data[1]), int(data[2])))\n    file_contents.close()\n    file_contents = open('data/small2.txt', 'r')\n    self.small_2_items = []",
        "detail": "Algorithms.knapsack.test_knapsack",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 5,
        "importPath": "Algorithms.knapsack.test_knapsack",
        "description": "Algorithms.knapsack.test_knapsack",
        "peekOfCode": "Item = namedtuple('Item', ['index', 'size', 'value'])\nclass Test(unittest.TestCase):\n  def setUp_small(self):\n    file_contents = open('data/small1.txt', 'r')\n    self.small_1_items = []\n    for line in file_contents.readlines():\n      data = line.rstrip().split()\n      self.small_1_items.append(Item(int(data[0]), int(data[1]), int(data[2])))\n    file_contents.close()\n    file_contents = open('data/small2.txt', 'r')",
        "detail": "Algorithms.knapsack.test_knapsack",
        "documentation": {}
    },
    {
        "label": "making_change",
        "kind": 2,
        "importPath": "Algorithms.making_change.making_change",
        "description": "Algorithms.making_change.making_change",
        "peekOfCode": "def making_change(amount, denominations):\n    # create a cache for this set the cache = a list of [0] + the ammount + 1 in case of a zero input\n    cache = [0] * (amount + 1)\n    # set the index of zero to 1\n    cache[0] = 1 \n    #using a nested for loop and adding to the cache\n    # loop over the denom in denominations\n    for denom in denominations:\n        # inner loop - upper in range of denom to ammount + 1\n        for upper in range(denom, amount+1):",
        "detail": "Algorithms.making_change.making_change",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "Algorithms.making_change.test_making_change",
        "description": "Algorithms.making_change.test_making_change",
        "peekOfCode": "class Test(unittest.TestCase):\n  def setUp(self):\n    self.denominations = [1, 5, 10, 25, 50]\n  def test_making_change_small_amount(self):\n    self.assertEqual(making_change(0, self.denominations), 1)\n    self.assertEqual(making_change(1, self.denominations), 1)\n    self.assertEqual(making_change(5, self.denominations), 2)\n    self.assertEqual(making_change(10, self.denominations), 4)\n    self.assertEqual(making_change(20, self.denominations), 9)\n    self.assertEqual(making_change(30, self.denominations), 18)",
        "detail": "Algorithms.making_change.test_making_change",
        "documentation": {}
    },
    {
        "label": "recipe_batches",
        "kind": 2,
        "importPath": "Algorithms.recipe_batches.recipe_batches",
        "description": "Algorithms.recipe_batches.recipe_batches",
        "peekOfCode": "def recipe_batches(recipe, ingredients):\n  # had a read over this for general dictionary stuff : http://www.pythonlearn.com/html-009/book010.html\n  # also to address a minimalistic approach \n  # this one feels like it should be fairly straight forward. looking up a few builtins\n  # initial thoughts were to use a min on the ingredients against an element vs 0 and use a single for loop to make sure i am only looping on a low factor\n  # but it seems that using a division i may need to fix up the return maybe floor or int()\n  # return min(ingredients.get(elem, 0) / num for elem, num in recipe.items()) # FIXME: possibly cast to int?\n  # testing with int variation casting the division in to an int for the return as it seems that we get a 2.5 at times which was failing\n  return min(int(ingredients.get(elem, 0) / num) for elem, num in recipe.items()) # fixed passing!\nif __name__ == '__main__':",
        "detail": "Algorithms.recipe_batches.recipe_batches",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "Algorithms.recipe_batches.test_recipe_batches",
        "description": "Algorithms.recipe_batches.test_recipe_batches",
        "peekOfCode": "class Test(unittest.TestCase):\n  def test_recipe_batches(self):\n    self.assertEqual(recipe_batches({ 'milk': 100, 'flour': 4, 'sugar': 10, 'butter': 5 }, { 'milk': 1288, 'flour': 9, 'sugar': 95 }), 0)\n    self.assertEqual(recipe_batches({ 'milk': 100, 'butter': 50, 'cheese': 10 }, { 'milk': 198, 'butter': 52, 'cheese': 10 }), 1)\n    self.assertEqual(recipe_batches({ 'milk': 2, 'sugar': 40, 'butter': 20 }, { 'milk': 5, 'sugar': 120, 'butter': 500 }), 2)\n    self.assertEqual(recipe_batches({ 'milk': 2 }, { 'milk': 200}), 100)\nif __name__ == '__main__':\n  unittest.main()",
        "detail": "Algorithms.recipe_batches.test_recipe_batches",
        "documentation": {}
    },
    {
        "label": "rock_paper_scissors",
        "kind": 2,
        "importPath": "Algorithms.rock_paper_scissors.rps",
        "description": "Algorithms.rock_paper_scissors.rps",
        "peekOfCode": "def rock_paper_scissors(n):\n  # (fixed) : conditions = [\"r\", \"p\", \"s\"] # FIXME: change my abreviations to actual rock paper scissors, missread the specs\n  conditions = [\"rock\", \"paper\", \"scissors\"] # now passing test in 0.001s\n  game_list = []\n  # lets try to implement a produc() function of my own\n  def my_product(n, result=[]):\n    # test for the case of n = zero\n    if n == 0:\n      # append the result to the game list\n      game_list.append(result)",
        "detail": "Algorithms.rock_paper_scissors.rps",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "Algorithms.rock_paper_scissors.test_rps",
        "description": "Algorithms.rock_paper_scissors.test_rps",
        "peekOfCode": "class Test(unittest.TestCase):\n  def test_rock_paper_scissors_output(self):\n    self.assertEqual(rock_paper_scissors(0), [[]])\n    self.assertEqual(rock_paper_scissors(1), [['rock'], ['paper'], ['scissors']])\n    self.assertEqual(rock_paper_scissors(2), [['rock', 'rock'], ['rock', 'paper'], ['rock', 'scissors'], ['paper', 'rock'], ['paper', 'paper'], ['paper', 'scissors'], ['scissors', 'rock'], ['scissors', 'paper'], ['scissors', 'scissors']])\n    self.assertEqual(rock_paper_scissors(3), [['rock', 'rock', 'rock'], ['rock', 'rock', 'paper'], ['rock', 'rock', 'scissors'], ['rock', 'paper', 'rock'], ['rock', 'paper', 'paper'], ['rock', 'paper', 'scissors'], ['rock', 'scissors', 'rock'], ['rock', 'scissors', 'paper'], ['rock', 'scissors', 'scissors'], ['paper', 'rock', 'rock'], ['paper', 'rock', 'paper'], ['paper', 'rock', 'scissors'], ['paper', 'paper', 'rock'], ['paper', 'paper', 'paper'], ['paper', 'paper', 'scissors'], ['paper', 'scissors', 'rock'], ['paper', 'scissors', 'paper'], ['paper', 'scissors', 'scissors'], ['scissors', 'rock', 'rock'], ['scissors', 'rock', 'paper'], ['scissors', 'rock', 'scissors'], ['scissors', 'paper', 'rock'], ['scissors', 'paper', 'paper'], ['scissors', 'paper', 'scissors'], ['scissors', 'scissors', 'rock'], ['scissors', 'scissors', 'paper'], ['scissors', 'scissors', 'scissors']])\n    self.assertEqual(rock_paper_scissors(4), [['rock', 'rock', 'rock', 'rock'], ['rock', 'rock', 'rock', 'paper'], ['rock', 'rock', 'rock', 'scissors'], ['rock', 'rock', 'paper', 'rock'], ['rock', 'rock', 'paper', 'paper'], ['rock', 'rock', 'paper', 'scissors'], ['rock', 'rock', 'scissors', 'rock'], ['rock', 'rock', 'scissors', 'paper'], ['rock', 'rock', 'scissors', 'scissors'], ['rock', 'paper', 'rock', 'rock'], ['rock', 'paper', 'rock', 'paper'], ['rock', 'paper', 'rock', 'scissors'], ['rock', 'paper', 'paper', 'rock'], ['rock', 'paper', 'paper', 'paper'], ['rock', 'paper', 'paper', 'scissors'], ['rock', 'paper', 'scissors', 'rock'], ['rock', 'paper', 'scissors', 'paper'], ['rock', 'paper', 'scissors', 'scissors'], ['rock', 'scissors', 'rock', 'rock'], ['rock', 'scissors', 'rock', 'paper'], ['rock', 'scissors', 'rock', 'scissors'], ['rock', 'scissors', 'paper', 'rock'], ['rock', 'scissors', 'paper', 'paper'], ['rock', 'scissors', 'paper', 'scissors'], ['rock', 'scissors', 'scissors', 'rock'], ['rock', 'scissors', 'scissors', 'paper'], ['rock', 'scissors', 'scissors', 'scissors'], ['paper', 'rock', 'rock', 'rock'], ['paper', 'rock', 'rock', 'paper'], ['paper', 'rock', 'rock', 'scissors'], ['paper', 'rock', 'paper', 'rock'], ['paper', 'rock', 'paper', 'paper'], ['paper', 'rock', 'paper', 'scissors'], ['paper', 'rock', 'scissors', 'rock'], ['paper', 'rock', 'scissors', 'paper'], ['paper', 'rock', 'scissors', 'scissors'], ['paper', 'paper', 'rock', 'rock'], ['paper', 'paper', 'rock', 'paper'], ['paper', 'paper', 'rock', 'scissors'], ['paper', 'paper', 'paper', 'rock'], ['paper', 'paper', 'paper', 'paper'], ['paper', 'paper', 'paper', 'scissors'], ['paper', 'paper', 'scissors', 'rock'], ['paper', 'paper', 'scissors', 'paper'], ['paper', 'paper', 'scissors', 'scissors'], ['paper', 'scissors', 'rock', 'rock'], ['paper', 'scissors', 'rock', 'paper'], ['paper', 'scissors', 'rock', 'scissors'], ['paper', 'scissors', 'paper', 'rock'], ['paper', 'scissors', 'paper', 'paper'], ['paper', 'scissors', 'paper', 'scissors'], ['paper', 'scissors', 'scissors', 'rock'], ['paper', 'scissors', 'scissors', 'paper'], ['paper', 'scissors', 'scissors', 'scissors'], ['scissors', 'rock', 'rock', 'rock'], ['scissors', 'rock', 'rock', 'paper'], ['scissors', 'rock', 'rock', 'scissors'], ['scissors', 'rock', 'paper', 'rock'], ['scissors', 'rock', 'paper', 'paper'], ['scissors', 'rock', 'paper', 'scissors'], ['scissors', 'rock', 'scissors', 'rock'], ['scissors', 'rock', 'scissors', 'paper'], ['scissors', 'rock', 'scissors', 'scissors'], ['scissors', 'paper', 'rock', 'rock'], ['scissors', 'paper', 'rock', 'paper'], ['scissors', 'paper', 'rock', 'scissors'], ['scissors', 'paper', 'paper', 'rock'], ['scissors', 'paper', 'paper', 'paper'], ['scissors', 'paper', 'paper', 'scissors'], ['scissors', 'paper', 'scissors', 'rock'], ['scissors', 'paper', 'scissors', 'paper'], ['scissors', 'paper', 'scissors', 'scissors'], ['scissors', 'scissors', 'rock', 'rock'], ['scissors', 'scissors', 'rock', 'paper'], ['scissors', 'scissors', 'rock', 'scissors'], ['scissors', 'scissors', 'paper', 'rock'], ['scissors', 'scissors', 'paper', 'paper'], ['scissors', 'scissors', 'paper', 'scissors'], ['scissors', 'scissors', 'scissors', 'rock'], ['scissors', 'scissors', 'scissors', 'paper'], ['scissors', 'scissors', 'scissors', 'scissors']])\n    self.assertEqual(rock_paper_scissors(5), [['rock', 'rock', 'rock', 'rock', 'rock'], ['rock', 'rock', 'rock', 'rock', 'paper'], ['rock', 'rock', 'rock', 'rock', 'scissors'], ['rock', 'rock', 'rock', 'paper', 'rock'], ['rock', 'rock', 'rock', 'paper', 'paper'], ['rock', 'rock', 'rock', 'paper', 'scissors'], ['rock', 'rock', 'rock', 'scissors', 'rock'], ['rock', 'rock', 'rock', 'scissors', 'paper'], ['rock', 'rock', 'rock', 'scissors', 'scissors'], ['rock', 'rock', 'paper', 'rock', 'rock'], ['rock', 'rock', 'paper', 'rock', 'paper'], ['rock', 'rock', 'paper', 'rock', 'scissors'], ['rock', 'rock', 'paper', 'paper', 'rock'], ['rock', 'rock', 'paper', 'paper', 'paper'], ['rock', 'rock', 'paper', 'paper', 'scissors'], ['rock', 'rock', 'paper', 'scissors', 'rock'], ['rock', 'rock', 'paper', 'scissors', 'paper'], ['rock', 'rock', 'paper', 'scissors', 'scissors'], ['rock', 'rock', 'scissors', 'rock', 'rock'], ['rock', 'rock', 'scissors', 'rock', 'paper'], ['rock', 'rock', 'scissors', 'rock', 'scissors'], ['rock', 'rock', 'scissors', 'paper', 'rock'], ['rock', 'rock', 'scissors', 'paper', 'paper'], ['rock', 'rock', 'scissors', 'paper', 'scissors'], ['rock', 'rock', 'scissors', 'scissors', 'rock'], ['rock', 'rock', 'scissors', 'scissors', 'paper'], ['rock', 'rock', 'scissors', 'scissors', 'scissors'], ['rock', 'paper', 'rock', 'rock', 'rock'], ['rock', 'paper', 'rock', 'rock', 'paper'], ['rock', 'paper', 'rock', 'rock', 'scissors'], ['rock', 'paper', 'rock', 'paper', 'rock'], ['rock', 'paper', 'rock', 'paper', 'paper'], ['rock', 'paper', 'rock', 'paper', 'scissors'], ['rock', 'paper', 'rock', 'scissors', 'rock'], ['rock', 'paper', 'rock', 'scissors', 'paper'], ['rock', 'paper', 'rock', 'scissors', 'scissors'], ['rock', 'paper', 'paper', 'rock', 'rock'], ['rock', 'paper', 'paper', 'rock', 'paper'], ['rock', 'paper', 'paper', 'rock', 'scissors'], ['rock', 'paper', 'paper', 'paper', 'rock'], ['rock', 'paper', 'paper', 'paper', 'paper'], ['rock', 'paper', 'paper', 'paper', 'scissors'], ['rock', 'paper', 'paper', 'scissors', 'rock'], ['rock', 'paper', 'paper', 'scissors', 'paper'], ['rock', 'paper', 'paper', 'scissors', 'scissors'], ['rock', 'paper', 'scissors', 'rock', 'rock'], ['rock', 'paper', 'scissors', 'rock', 'paper'], ['rock', 'paper', 'scissors', 'rock', 'scissors'], ['rock', 'paper', 'scissors', 'paper', 'rock'], ['rock', 'paper', 'scissors', 'paper', 'paper'], ['rock', 'paper', 'scissors', 'paper', 'scissors'], ['rock', 'paper', 'scissors', 'scissors', 'rock'], ['rock', 'paper', 'scissors', 'scissors', 'paper'], ['rock', 'paper', 'scissors', 'scissors', 'scissors'], ['rock', 'scissors', 'rock', 'rock', 'rock'], ['rock', 'scissors', 'rock', 'rock', 'paper'], ['rock', 'scissors', 'rock', 'rock', 'scissors'], ['rock', 'scissors', 'rock', 'paper', 'rock'], ['rock', 'scissors', 'rock', 'paper', 'paper'], ['rock', 'scissors', 'rock', 'paper', 'scissors'], ['rock', 'scissors', 'rock', 'scissors', 'rock'], ['rock', 'scissors', 'rock', 'scissors', 'paper'], ['rock', 'scissors', 'rock', 'scissors', 'scissors'], ['rock', 'scissors', 'paper', 'rock', 'rock'], ['rock', 'scissors', 'paper', 'rock', 'paper'], ['rock', 'scissors', 'paper', 'rock', 'scissors'], ['rock', 'scissors', 'paper', 'paper', 'rock'], ['rock', 'scissors', 'paper', 'paper', 'paper'], ['rock', 'scissors', 'paper', 'paper', 'scissors'], ['rock', 'scissors', 'paper', 'scissors', 'rock'], ['rock', 'scissors', 'paper', 'scissors', 'paper'], ['rock', 'scissors', 'paper', 'scissors', 'scissors'], ['rock', 'scissors', 'scissors', 'rock', 'rock'], ['rock', 'scissors', 'scissors', 'rock', 'paper'], ['rock', 'scissors', 'scissors', 'rock', 'scissors'], ['rock', 'scissors', 'scissors', 'paper', 'rock'], ['rock', 'scissors', 'scissors', 'paper', 'paper'], ['rock', 'scissors', 'scissors', 'paper', 'scissors'], ['rock', 'scissors', 'scissors', 'scissors', 'rock'], ['rock', 'scissors', 'scissors', 'scissors', 'paper'], ['rock', 'scissors', 'scissors', 'scissors', 'scissors'], ['paper', 'rock', 'rock', 'rock', 'rock'], ['paper', 'rock', 'rock', 'rock', 'paper'], ['paper', 'rock', 'rock', 'rock', 'scissors'], ['paper', 'rock', 'rock', 'paper', 'rock'], ['paper', 'rock', 'rock', 'paper', 'paper'], ['paper', 'rock', 'rock', 'paper', 'scissors'], ['paper', 'rock', 'rock', 'scissors', 'rock'], ['paper', 'rock', 'rock', 'scissors', 'paper'], ['paper', 'rock', 'rock', 'scissors', 'scissors'], ['paper', 'rock', 'paper', 'rock', 'rock'], ['paper', 'rock', 'paper', 'rock', 'paper'], ['paper', 'rock', 'paper', 'rock', 'scissors'], ['paper', 'rock', 'paper', 'paper', 'rock'], ['paper', 'rock', 'paper', 'paper', 'paper'], ['paper', 'rock', 'paper', 'paper', 'scissors'], ['paper', 'rock', 'paper', 'scissors', 'rock'], ['paper', 'rock', 'paper', 'scissors', 'paper'], ['paper', 'rock', 'paper', 'scissors', 'scissors'], ['paper', 'rock', 'scissors', 'rock', 'rock'], ['paper', 'rock', 'scissors', 'rock', 'paper'], ['paper', 'rock', 'scissors', 'rock', 'scissors'], ['paper', 'rock', 'scissors', 'paper', 'rock'], ['paper', 'rock', 'scissors', 'paper', 'paper'], ['paper', 'rock', 'scissors', 'paper', 'scissors'], ['paper', 'rock', 'scissors', 'scissors', 'rock'], ['paper', 'rock', 'scissors', 'scissors', 'paper'], ['paper', 'rock', 'scissors', 'scissors', 'scissors'], ['paper', 'paper', 'rock', 'rock', 'rock'], ['paper', 'paper', 'rock', 'rock', 'paper'], ['paper', 'paper', 'rock', 'rock', 'scissors'], ['paper', 'paper', 'rock', 'paper', 'rock'], ['paper', 'paper', 'rock', 'paper', 'paper'], ['paper', 'paper', 'rock', 'paper', 'scissors'], ['paper', 'paper', 'rock', 'scissors', 'rock'], ['paper', 'paper', 'rock', 'scissors', 'paper'], ['paper', 'paper', 'rock', 'scissors', 'scissors'], ['paper', 'paper', 'paper', 'rock', 'rock'], ['paper', 'paper', 'paper', 'rock', 'paper'], ['paper', 'paper', 'paper', 'rock', 'scissors'], ['paper', 'paper', 'paper', 'paper', 'rock'], ['paper', 'paper', 'paper', 'paper', 'paper'], ['paper', 'paper', 'paper', 'paper', 'scissors'], ['paper', 'paper', 'paper', 'scissors', 'rock'], ['paper', 'paper', 'paper', 'scissors', 'paper'], ['paper', 'paper', 'paper', 'scissors', 'scissors'], ['paper', 'paper', 'scissors', 'rock', 'rock'], ['paper', 'paper', 'scissors', 'rock', 'paper'], ['paper', 'paper', 'scissors', 'rock', 'scissors'], ['paper', 'paper', 'scissors', 'paper', 'rock'], ['paper', 'paper', 'scissors', 'paper', 'paper'], ['paper', 'paper', 'scissors', 'paper', 'scissors'], ['paper', 'paper', 'scissors', 'scissors', 'rock'], ['paper', 'paper', 'scissors', 'scissors', 'paper'], ['paper', 'paper', 'scissors', 'scissors', 'scissors'], ['paper', 'scissors', 'rock', 'rock', 'rock'], ['paper', 'scissors', 'rock', 'rock', 'paper'], ['paper', 'scissors', 'rock', 'rock', 'scissors'], ['paper', 'scissors', 'rock', 'paper', 'rock'], ['paper', 'scissors', 'rock', 'paper', 'paper'], ['paper', 'scissors', 'rock', 'paper', 'scissors'], ['paper', 'scissors', 'rock', 'scissors', 'rock'], ['paper', 'scissors', 'rock', 'scissors', 'paper'], ['paper', 'scissors', 'rock', 'scissors', 'scissors'], ['paper', 'scissors', 'paper', 'rock', 'rock'], ['paper', 'scissors', 'paper', 'rock', 'paper'], ['paper', 'scissors', 'paper', 'rock', 'scissors'], ['paper', 'scissors', 'paper', 'paper', 'rock'], ['paper', 'scissors', 'paper', 'paper', 'paper'], ['paper', 'scissors', 'paper', 'paper', 'scissors'], ['paper', 'scissors', 'paper', 'scissors', 'rock'], ['paper', 'scissors', 'paper', 'scissors', 'paper'], ['paper', 'scissors', 'paper', 'scissors', 'scissors'], ['paper', 'scissors', 'scissors', 'rock', 'rock'], ['paper', 'scissors', 'scissors', 'rock', 'paper'], ['paper', 'scissors', 'scissors', 'rock', 'scissors'], ['paper', 'scissors', 'scissors', 'paper', 'rock'], ['paper', 'scissors', 'scissors', 'paper', 'paper'], ['paper', 'scissors', 'scissors', 'paper', 'scissors'], ['paper', 'scissors', 'scissors', 'scissors', 'rock'], ['paper', 'scissors', 'scissors', 'scissors', 'paper'], ['paper', 'scissors', 'scissors', 'scissors', 'scissors'], ['scissors', 'rock', 'rock', 'rock', 'rock'], ['scissors', 'rock', 'rock', 'rock', 'paper'], ['scissors', 'rock', 'rock', 'rock', 'scissors'], ['scissors', 'rock', 'rock', 'paper', 'rock'], ['scissors', 'rock', 'rock', 'paper', 'paper'], ['scissors', 'rock', 'rock', 'paper', 'scissors'], ['scissors', 'rock', 'rock', 'scissors', 'rock'], ['scissors', 'rock', 'rock', 'scissors', 'paper'], ['scissors', 'rock', 'rock', 'scissors', 'scissors'], ['scissors', 'rock', 'paper', 'rock', 'rock'], ['scissors', 'rock', 'paper', 'rock', 'paper'], ['scissors', 'rock', 'paper', 'rock', 'scissors'], ['scissors', 'rock', 'paper', 'paper', 'rock'], ['scissors', 'rock', 'paper', 'paper', 'paper'], ['scissors', 'rock', 'paper', 'paper', 'scissors'], ['scissors', 'rock', 'paper', 'scissors', 'rock'], ['scissors', 'rock', 'paper', 'scissors', 'paper'], ['scissors', 'rock', 'paper', 'scissors', 'scissors'], ['scissors', 'rock', 'scissors', 'rock', 'rock'], ['scissors', 'rock', 'scissors', 'rock', 'paper'], ['scissors', 'rock', 'scissors', 'rock', 'scissors'], ['scissors', 'rock', 'scissors', 'paper', 'rock'], ['scissors', 'rock', 'scissors', 'paper', 'paper'], ['scissors', 'rock', 'scissors', 'paper', 'scissors'], ['scissors', 'rock', 'scissors', 'scissors', 'rock'], ['scissors', 'rock', 'scissors', 'scissors', 'paper'], ['scissors', 'rock', 'scissors', 'scissors', 'scissors'], ['scissors', 'paper', 'rock', 'rock', 'rock'], ['scissors', 'paper', 'rock', 'rock', 'paper'], ['scissors', 'paper', 'rock', 'rock', 'scissors'], ['scissors', 'paper', 'rock', 'paper', 'rock'], ['scissors', 'paper', 'rock', 'paper', 'paper'], ['scissors', 'paper', 'rock', 'paper', 'scissors'], ['scissors', 'paper', 'rock', 'scissors', 'rock'], ['scissors', 'paper', 'rock', 'scissors', 'paper'], ['scissors', 'paper', 'rock', 'scissors', 'scissors'], ['scissors', 'paper', 'paper', 'rock', 'rock'], ['scissors', 'paper', 'paper', 'rock', 'paper'], ['scissors', 'paper', 'paper', 'rock', 'scissors'], ['scissors', 'paper', 'paper', 'paper', 'rock'], ['scissors', 'paper', 'paper', 'paper', 'paper'], ['scissors', 'paper', 'paper', 'paper', 'scissors'], ['scissors', 'paper', 'paper', 'scissors', 'rock'], ['scissors', 'paper', 'paper', 'scissors', 'paper'], ['scissors', 'paper', 'paper', 'scissors', 'scissors'], ['scissors', 'paper', 'scissors', 'rock', 'rock'], ['scissors', 'paper', 'scissors', 'rock', 'paper'], ['scissors', 'paper', 'scissors', 'rock', 'scissors'], ['scissors', 'paper', 'scissors', 'paper', 'rock'], ['scissors', 'paper', 'scissors', 'paper', 'paper'], ['scissors', 'paper', 'scissors', 'paper', 'scissors'], ['scissors', 'paper', 'scissors', 'scissors', 'rock'], ['scissors', 'paper', 'scissors', 'scissors', 'paper'], ['scissors', 'paper', 'scissors', 'scissors', 'scissors'], ['scissors', 'scissors', 'rock', 'rock', 'rock'], ['scissors', 'scissors', 'rock', 'rock', 'paper'], ['scissors', 'scissors', 'rock', 'rock', 'scissors'], ['scissors', 'scissors', 'rock', 'paper', 'rock'], ['scissors', 'scissors', 'rock', 'paper', 'paper'], ['scissors', 'scissors', 'rock', 'paper', 'scissors'], ['scissors', 'scissors', 'rock', 'scissors', 'rock'], ['scissors', 'scissors', 'rock', 'scissors', 'paper'], ['scissors', 'scissors', 'rock', 'scissors', 'scissors'], ['scissors', 'scissors', 'paper', 'rock', 'rock'], ['scissors', 'scissors', 'paper', 'rock', 'paper'], ['scissors', 'scissors', 'paper', 'rock', 'scissors'], ['scissors', 'scissors', 'paper', 'paper', 'rock'], ['scissors', 'scissors', 'paper', 'paper', 'paper'], ['scissors', 'scissors', 'paper', 'paper', 'scissors'], ['scissors', 'scissors', 'paper', 'scissors', 'rock'], ['scissors', 'scissors', 'paper', 'scissors', 'paper'], ['scissors', 'scissors', 'paper', 'scissors', 'scissors'], ['scissors', 'scissors', 'scissors', 'rock', 'rock'], ['scissors', 'scissors', 'scissors', 'rock', 'paper'], ['scissors', 'scissors', 'scissors', 'rock', 'scissors'], ['scissors', 'scissors', 'scissors', 'paper', 'rock'], ['scissors', 'scissors', 'scissors', 'paper', 'paper'], ['scissors', 'scissors', 'scissors', 'paper', 'scissors'], ['scissors', 'scissors', 'scissors', 'scissors', 'rock'], ['scissors', 'scissors', 'scissors', 'scissors', 'paper'], ['scissors', 'scissors', 'scissors', 'scissors', 'scissors']]) \nif __name__ == '__main__':\n  unittest.main()",
        "detail": "Algorithms.rock_paper_scissors.test_rps",
        "documentation": {}
    },
    {
        "label": "find_max_profit",
        "kind": 2,
        "importPath": "Algorithms.stock_prices.stock_prices",
        "description": "Algorithms.stock_prices.stock_prices",
        "peekOfCode": "def find_max_profit(prices):\n  largest_profit = 0\n  # for index, initial_number in prices: (fixed)\n  # 2 for loops nested : not very performant but just hashing out the idea of solving the problem \n  for index, initial_number in enumerate(prices):\n    for secondary_number in prices[ index + 1: ]:\n      # set the current profit variable to the secondary - initial\n      profit = secondary_number - initial_number\n      # test for profit being greater than largest profit\n      if largest_profit == 0 or profit > largest_profit:",
        "detail": "Algorithms.stock_prices.stock_prices",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "Algorithms.stock_prices.test_stock_prices",
        "description": "Algorithms.stock_prices.test_stock_prices",
        "peekOfCode": "class Test(unittest.TestCase):\n  def test_find_max_profit(self):\n    self.assertEqual(find_max_profit([10, 7, 5, 8, 11, 9]), 6)\n    self.assertEqual(find_max_profit([100, 90, 80, 50, 20, 10]), -10)\n    self.assertEqual(find_max_profit([1050, 270, 1540, 3800, 2]), 3530)\n    self.assertEqual(find_max_profit([100, 55, 4, 98, 10, 18, 90, 95, 43, 11, 47, 67, 89, 42, 49, 79]), 94)\nif __name__ == '__main__':\n  unittest.main()",
        "detail": "Algorithms.stock_prices.test_stock_prices",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "blockchain.basic_block_gp.blockchain",
        "description": "blockchain.basic_block_gp.blockchain",
        "peekOfCode": "class Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        self.nodes = set()\n        self.new_block(previous_hash=1, proof=100)\n    def new_block(self, proof, previous_hash=None):\n        \"\"\"\n        Create a new Block in the Blockchain\n        :param proof: <int> The proof given by the Proof of Work algorithm",
        "detail": "blockchain.basic_block_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "mine",
        "kind": 2,
        "importPath": "blockchain.basic_block_gp.blockchain",
        "description": "blockchain.basic_block_gp.blockchain",
        "peekOfCode": "def mine():\n    # We run the proof of work algorithm to get the next proof...\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    proof = blockchain.proof_of_work(last_proof)\n    # We must receive a reward for finding the proof.\n    # The sender is \"0\" to signify that this node has mine a new coin\n    # The recipient is the current node, it did the mining!\n    # The amount is 1 coin as a reward for mining the next block\n    blockchain.new_transaction( sender=\"0\", recipient=node_identifier, amount=1)",
        "detail": "blockchain.basic_block_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "new_transaction",
        "kind": 2,
        "importPath": "blockchain.basic_block_gp.blockchain",
        "description": "blockchain.basic_block_gp.blockchain",
        "peekOfCode": "def new_transaction():\n    values = request.get_json()\n    # Check that the required fields are in the POST'ed data\n    required = ['sender', 'recipient', 'amount']\n    if not all(k in values for k in required):\n        return 'Missing Values', 400\n    # Create a new Transaction\n    index = blockchain.new_transaction(values['sender'],\n                                       values['recipient'],\n                                       values['amount'])",
        "detail": "blockchain.basic_block_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "full_chain",
        "kind": 2,
        "importPath": "blockchain.basic_block_gp.blockchain",
        "description": "blockchain.basic_block_gp.blockchain",
        "peekOfCode": "def full_chain():\n    response = {\n        'chain': blockchain.chain,\n        'length': len(blockchain.chain)\n    }\n    return jsonify(response), 200\n# Run the program on port 5000\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "blockchain.basic_block_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "blockchain.basic_block_gp.blockchain",
        "description": "blockchain.basic_block_gp.blockchain",
        "peekOfCode": "app = Flask(__name__)\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']",
        "detail": "blockchain.basic_block_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "node_identifier",
        "kind": 5,
        "importPath": "blockchain.basic_block_gp.blockchain",
        "description": "blockchain.basic_block_gp.blockchain",
        "peekOfCode": "node_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    proof = blockchain.proof_of_work(last_proof)\n    # We must receive a reward for finding the proof.",
        "detail": "blockchain.basic_block_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "blockchain",
        "kind": 5,
        "importPath": "blockchain.basic_block_gp.blockchain",
        "description": "blockchain.basic_block_gp.blockchain",
        "peekOfCode": "blockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    proof = blockchain.proof_of_work(last_proof)\n    # We must receive a reward for finding the proof.\n    # The sender is \"0\" to signify that this node has mine a new coin\n    # The recipient is the current node, it did the mining!",
        "detail": "blockchain.basic_block_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "blockchain.client_mining_p.blockchain",
        "description": "blockchain.client_mining_p.blockchain",
        "peekOfCode": "class Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        self.nodes = set()\n        self.new_block(previous_hash=1, proof=100)\n    def new_block(self, proof, previous_hash=None):\n        \"\"\"\n        Create a new Block in the Blockchain\n        :param proof: <int> The proof given by the Proof of Work algorithm",
        "detail": "blockchain.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "mine",
        "kind": 2,
        "importPath": "blockchain.client_mining_p.blockchain",
        "description": "blockchain.client_mining_p.blockchain",
        "peekOfCode": "def mine():\n    # We run the proof of work algorithm to get the next proof...\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    proof = blockchain.proof_of_work(last_proof)\n    # We must receive a reward for finding the proof.\n    # The sender is \"0\" to signify that this node has mine a new coin\n    blockchain.new_transaction(\n        sender=\"0\",\n        recipient=node_identifier,",
        "detail": "blockchain.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "new_transaction",
        "kind": 2,
        "importPath": "blockchain.client_mining_p.blockchain",
        "description": "blockchain.client_mining_p.blockchain",
        "peekOfCode": "def new_transaction():\n    values = request.get_json()\n    # Check that the required fields are in the POST'ed data\n    required = ['sender', 'recipient', 'amount']\n    if not all(k in values for k in required):\n        return 'Missing Values', 400\n    # Create a new Transaction\n    index = blockchain.new_transaction(values['sender'],\n                                       values['recipient'],\n                                       values['amount'])",
        "detail": "blockchain.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "full_chain",
        "kind": 2,
        "importPath": "blockchain.client_mining_p.blockchain",
        "description": "blockchain.client_mining_p.blockchain",
        "peekOfCode": "def full_chain():\n    response = {\n        'chain': blockchain.chain,\n        'length': len(blockchain.chain),\n    }\n    return jsonify(response), 200\n# Note, when demoing, start with this, then change to the below\n# if __name__ == '__main__':\n#     app.run(host='0.0.0.0', port=5000)\nif __name__ == '__main__':",
        "detail": "blockchain.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "blockchain.client_mining_p.blockchain",
        "description": "blockchain.client_mining_p.blockchain",
        "peekOfCode": "app = Flask(__name__)\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']",
        "detail": "blockchain.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "node_identifier",
        "kind": 5,
        "importPath": "blockchain.client_mining_p.blockchain",
        "description": "blockchain.client_mining_p.blockchain",
        "peekOfCode": "node_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    proof = blockchain.proof_of_work(last_proof)\n    # We must receive a reward for finding the proof.",
        "detail": "blockchain.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "blockchain",
        "kind": 5,
        "importPath": "blockchain.client_mining_p.blockchain",
        "description": "blockchain.client_mining_p.blockchain",
        "peekOfCode": "blockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    proof = blockchain.proof_of_work(last_proof)\n    # We must receive a reward for finding the proof.\n    # The sender is \"0\" to signify that this node has mine a new coin\n    blockchain.new_transaction(",
        "detail": "blockchain.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "blockchain.communication_gp.blockchain",
        "description": "blockchain.communication_gp.blockchain",
        "peekOfCode": "class Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        self.nodes = set()\n        self.new_block(previous_hash=1, proof=100)\n    def new_block(self, proof, previous_hash=None):\n        \"\"\"\n        Create a new Block in the Blockchain\n        :param proof: <int> The proof given by the Proof of Work algorithm",
        "detail": "blockchain.communication_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "mine",
        "kind": 2,
        "importPath": "blockchain.communication_gp.blockchain",
        "description": "blockchain.communication_gp.blockchain",
        "peekOfCode": "def mine():\n    # Determine if proof is valid\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    values = request.get_json()\n    submitted_proof = values.get('proof')\n    if blockchain.valid_proof(last_proof, submitted_proof):\n        # We must receive a reward for finding the proof.\n        # The sender is \"0\" to signify that this node has mine a new coin\n        blockchain.new_transaction(",
        "detail": "blockchain.communication_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "new_transaction",
        "kind": 2,
        "importPath": "blockchain.communication_gp.blockchain",
        "description": "blockchain.communication_gp.blockchain",
        "peekOfCode": "def new_transaction():\n    values = request.get_json()\n    # Check that the required fields are in the POST'ed data\n    required = ['sender', 'recipient', 'amount']\n    if not all(k in values for k in required):\n        return 'Missing Values', 400\n    # Create a new Transaction\n    index = blockchain.new_transaction(values['sender'],\n                                       values['recipient'],\n                                       values['amount'])",
        "detail": "blockchain.communication_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "full_chain",
        "kind": 2,
        "importPath": "blockchain.communication_gp.blockchain",
        "description": "blockchain.communication_gp.blockchain",
        "peekOfCode": "def full_chain():\n    response = {\n        'chain': blockchain.chain,\n        'length': len(blockchain.chain),\n    }\n    return jsonify(response), 200\n@app.route('/last_proof', methods=['GET'])\ndef last_proof():\n    last_proof_value = blockchain.last_block.get('proof')\n    response = {",
        "detail": "blockchain.communication_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "last_proof",
        "kind": 2,
        "importPath": "blockchain.communication_gp.blockchain",
        "description": "blockchain.communication_gp.blockchain",
        "peekOfCode": "def last_proof():\n    last_proof_value = blockchain.last_block.get('proof')\n    response = {\n        'proof': last_proof_value\n    }\n    return jsonify(response), 200\n# Post body as JSON to add node\n# {\n# \t\"nodes\": [\"http://localhost:5001\"]\n# }",
        "detail": "blockchain.communication_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "register_nodes",
        "kind": 2,
        "importPath": "blockchain.communication_gp.blockchain",
        "description": "blockchain.communication_gp.blockchain",
        "peekOfCode": "def register_nodes():\n    values = request.get_json()\n    nodes = values.get('nodes')\n    if nodes is None:\n        return \"Error: Please supply a valid list of nodes\", 400\n    for node in nodes:\n        blockchain.register_node(node)\n    response = {\n        'message': 'New nodes have been added',\n        'total_nodes': list(blockchain.nodes),",
        "detail": "blockchain.communication_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "consensus",
        "kind": 2,
        "importPath": "blockchain.communication_gp.blockchain",
        "description": "blockchain.communication_gp.blockchain",
        "peekOfCode": "def consensus():\n    replaced = blockchain.resolve_conflicts()\n    if replaced:\n        response = {\n            'message': 'Our chain was replaced',\n            'new_chain': blockchain.chain\n        }\n    else:\n        response = {\n            'message': 'Our chain is authoritative',",
        "detail": "blockchain.communication_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "blockchain.communication_gp.blockchain",
        "description": "blockchain.communication_gp.blockchain",
        "peekOfCode": "app = Flask(__name__)\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # Determine if proof is valid\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']",
        "detail": "blockchain.communication_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "node_identifier",
        "kind": 5,
        "importPath": "blockchain.communication_gp.blockchain",
        "description": "blockchain.communication_gp.blockchain",
        "peekOfCode": "node_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # Determine if proof is valid\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    values = request.get_json()\n    submitted_proof = values.get('proof')",
        "detail": "blockchain.communication_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "blockchain",
        "kind": 5,
        "importPath": "blockchain.communication_gp.blockchain",
        "description": "blockchain.communication_gp.blockchain",
        "peekOfCode": "blockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # Determine if proof is valid\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    values = request.get_json()\n    submitted_proof = values.get('proof')\n    if blockchain.valid_proof(last_proof, submitted_proof):\n        # We must receive a reward for finding the proof.",
        "detail": "blockchain.communication_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "proof_of_work",
        "kind": 2,
        "importPath": "blockchain.communication_gp.miner",
        "description": "blockchain.communication_gp.miner",
        "peekOfCode": "def proof_of_work(last_proof):\n    \"\"\"\n    Simple Proof of Work Algorithm\n    - Find a number p' such that hash(pp') contains 6 leading\n    zeroes, where p is the previous p'\n    - p is the previous proof, and p' is the new proof\n    \"\"\"\n    print(\"Searching for next proof\")\n    proof = 0\n    while valid_proof(last_proof, proof) is False:",
        "detail": "blockchain.communication_gp.miner",
        "documentation": {}
    },
    {
        "label": "valid_proof",
        "kind": 2,
        "importPath": "blockchain.communication_gp.miner",
        "description": "blockchain.communication_gp.miner",
        "peekOfCode": "def valid_proof(last_proof, proof):\n    \"\"\"\n    Validates the Proof:  Does hash(last_proof, proof) contain 6\n    leading zeroes?\n    \"\"\"\n    guess = f'{last_proof}{proof}'.encode()\n    guess_hash = hashlib.sha256(guess).hexdigest()\n    return guess_hash[:6] == \"000000\"\nif __name__ == '__main__':\n    # What node are we interacting with?",
        "detail": "blockchain.communication_gp.miner",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "class Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        self.nodes = set()\n        self.genesis_block()\n        # Don't create a block automatically.  If we do,\n        # every node will have a different anchor\n        # self.new_block(previous_hash=1, proof=99)  # 99 is faster for 1st\n    def genesis_block(self):",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "mine",
        "kind": 2,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "def mine():\n    # Determine if proof is valid\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    values = request.get_json()\n    submitted_proof = values.get('proof')\n    if blockchain.valid_proof(last_proof, submitted_proof):\n        # We must receive a reward for finding the proof.\n        # The sender is \"0\" to signify that this node has mine a new coin\n        blockchain.new_transaction(",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "new_block",
        "kind": 2,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "def new_block():\n    values = request.get_json()\n    # Check that the required fields are in the POST'ed data\n    required = ['block']\n    if not all(k in values for k in required):\n        return 'Missing Values', 400\n    # TODO: Verify that the sender is one of our peers\n    # Check that the new block index is 1 higher than our last block\n    new_block = values.get('block')\n    old_block = blockchain.last_block",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "new_transaction",
        "kind": 2,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "def new_transaction():\n    values = request.get_json()\n    # Check that the required fields are in the POST'ed data\n    required = ['sender', 'recipient', 'amount']\n    if not all(k in values for k in required):\n        return 'Missing Values', 400\n    # Create a new Transaction\n    index = blockchain.new_transaction(values['sender'],\n                                       values['recipient'],\n                                       values['amount'])",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "full_chain",
        "kind": 2,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "def full_chain():\n    response = {\n        'chain': blockchain.chain,\n        'length': len(blockchain.chain),\n    }\n    return jsonify(response), 200\n@app.route('/last_proof', methods=['GET'])\ndef last_proof():\n    last_proof_value = blockchain.last_block.get('proof')\n    response = {",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "last_proof",
        "kind": 2,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "def last_proof():\n    last_proof_value = blockchain.last_block.get('proof')\n    response = {\n        'proof': last_proof_value\n    }\n    return jsonify(response), 200\n# Post body as JSON to add node\n# {\n# \t\"nodes\": [\"http://localhost:5001\"]\n# }",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "register_nodes",
        "kind": 2,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "def register_nodes():\n    values = request.get_json()\n    nodes = values.get('nodes')\n    if nodes is None:\n        return \"Error: Please supply a valid list of nodes\", 400\n    for node in nodes:\n        blockchain.register_node(node)\n    response = {\n        'message': 'New nodes have been added',\n        'total_nodes': list(blockchain.nodes),",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "consensus",
        "kind": 2,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "def consensus():\n    replaced = blockchain.resolve_conflicts()\n    if replaced:\n        response = {\n            'message': 'Our chain was replaced',\n            'new_chain': blockchain.chain\n        }\n    else:\n        response = {\n            'message': 'Our chain is authoritative',",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "app = Flask(__name__)\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # Determine if proof is valid\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "node_identifier",
        "kind": 5,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "node_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # Determine if proof is valid\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    values = request.get_json()\n    submitted_proof = values.get('proof')",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "blockchain",
        "kind": 5,
        "importPath": "blockchain.credit_for_mining_p.blockchain",
        "description": "blockchain.credit_for_mining_p.blockchain",
        "peekOfCode": "blockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # Determine if proof is valid\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    values = request.get_json()\n    submitted_proof = values.get('proof')\n    if blockchain.valid_proof(last_proof, submitted_proof):\n        # We must receive a reward for finding the proof.",
        "detail": "blockchain.credit_for_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "proof_of_work",
        "kind": 2,
        "importPath": "blockchain.credit_for_mining_p.miner",
        "description": "blockchain.credit_for_mining_p.miner",
        "peekOfCode": "def proof_of_work(last_proof):\n    \"\"\"\n    Simple Proof of Work Algorithm\n    - Find a number p' such that hash(pp') contains 6 leading\n    zeroes, where p is the previous p'\n    - p is the previous proof, and p' is the new proof\n    \"\"\"\n    print(\"Searching for next proof\")\n    proof = 0\n    while valid_proof(last_proof, proof) is False:",
        "detail": "blockchain.credit_for_mining_p.miner",
        "documentation": {}
    },
    {
        "label": "valid_proof",
        "kind": 2,
        "importPath": "blockchain.credit_for_mining_p.miner",
        "description": "blockchain.credit_for_mining_p.miner",
        "peekOfCode": "def valid_proof(last_proof, proof):\n    \"\"\"\n    Validates the Proof:  Does hash(last_proof, proof) contain 6\n    leading zeroes?\n    \"\"\"\n    guess = f'{last_proof}{proof}'.encode()\n    guess_hash = hashlib.sha256(guess).hexdigest()\n    return guess_hash[:6] == \"000000\"\nif __name__ == '__main__':\n    # What node are we interacting with?",
        "detail": "blockchain.credit_for_mining_p.miner",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "CellularAutomata-EU1.src.conways",
        "description": "CellularAutomata-EU1.src.conways",
        "peekOfCode": "BLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nGRAY = (25, 25, 25)\nWIN_SIZE = 500\npygame.init()\n# Set the width and height of the screen [width, height]\nsize = (WIN_SIZE, WIN_SIZE)\nscreen = pygame.display.set_mode(size)\n# Add a title\npygame.display.set_caption(\"Conway's Game of Life\")",
        "detail": "CellularAutomata-EU1.src.conways",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "CellularAutomata-EU1.src.conways",
        "description": "CellularAutomata-EU1.src.conways",
        "peekOfCode": "WHITE = (255, 255, 255)\nGRAY = (25, 25, 25)\nWIN_SIZE = 500\npygame.init()\n# Set the width and height of the screen [width, height]\nsize = (WIN_SIZE, WIN_SIZE)\nscreen = pygame.display.set_mode(size)\n# Add a title\npygame.display.set_caption(\"Conway's Game of Life\")\n# Loop until the user clicks the close button.",
        "detail": "CellularAutomata-EU1.src.conways",
        "documentation": {}
    },
    {
        "label": "GRAY",
        "kind": 5,
        "importPath": "CellularAutomata-EU1.src.conways",
        "description": "CellularAutomata-EU1.src.conways",
        "peekOfCode": "GRAY = (25, 25, 25)\nWIN_SIZE = 500\npygame.init()\n# Set the width and height of the screen [width, height]\nsize = (WIN_SIZE, WIN_SIZE)\nscreen = pygame.display.set_mode(size)\n# Add a title\npygame.display.set_caption(\"Conway's Game of Life\")\n# Loop until the user clicks the close button.\ndone = False",
        "detail": "CellularAutomata-EU1.src.conways",
        "documentation": {}
    },
    {
        "label": "WIN_SIZE",
        "kind": 5,
        "importPath": "CellularAutomata-EU1.src.conways",
        "description": "CellularAutomata-EU1.src.conways",
        "peekOfCode": "WIN_SIZE = 500\npygame.init()\n# Set the width and height of the screen [width, height]\nsize = (WIN_SIZE, WIN_SIZE)\nscreen = pygame.display.set_mode(size)\n# Add a title\npygame.display.set_caption(\"Conway's Game of Life\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates",
        "detail": "CellularAutomata-EU1.src.conways",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "CellularAutomata-EU1.src.conways",
        "description": "CellularAutomata-EU1.src.conways",
        "peekOfCode": "size = (WIN_SIZE, WIN_SIZE)\nscreen = pygame.display.set_mode(size)\n# Add a title\npygame.display.set_caption(\"Conway's Game of Life\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# -------- Main Program Loop -----------\nwhile not done:",
        "detail": "CellularAutomata-EU1.src.conways",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "CellularAutomata-EU1.src.conways",
        "description": "CellularAutomata-EU1.src.conways",
        "peekOfCode": "screen = pygame.display.set_mode(size)\n# Add a title\npygame.display.set_caption(\"Conway's Game of Life\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop",
        "detail": "CellularAutomata-EU1.src.conways",
        "documentation": {}
    },
    {
        "label": "done",
        "kind": 5,
        "importPath": "CellularAutomata-EU1.src.conways",
        "description": "CellularAutomata-EU1.src.conways",
        "peekOfCode": "done = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n    # --- Game logic should go here",
        "detail": "CellularAutomata-EU1.src.conways",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "CellularAutomata-EU1.src.conways",
        "description": "CellularAutomata-EU1.src.conways",
        "peekOfCode": "clock = pygame.time.Clock()\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n    # --- Game logic should go here\n    # --- Screen-clearing code goes here\n    # Here, we clear the screen to gray. Don't put other drawing commands",
        "detail": "CellularAutomata-EU1.src.conways",
        "documentation": {}
    },
    {
        "label": "pivot_index",
        "kind": 2,
        "importPath": "cs-guided-project-array-string-manipulation.src.demonstration_1",
        "description": "cs-guided-project-array-string-manipulation.src.demonstration_1",
        "peekOfCode": "def pivot_index(nums):\n    # Your code here",
        "detail": "cs-guided-project-array-string-manipulation.src.demonstration_1",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": "cs-guided-project-array-string-manipulation.src.demonstration_2",
        "description": "cs-guided-project-array-string-manipulation.src.demonstration_2",
        "peekOfCode": "def plus_one(digits):\n    # Your code here",
        "detail": "cs-guided-project-array-string-manipulation.src.demonstration_2",
        "documentation": {}
    },
    {
        "label": "to_decimal",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day1.conv",
        "description": "CS32_Architecture_GP.day1.conv",
        "peekOfCode": "def to_decimal(num_string, base):\n    # turn num string in to a list\n    num_list = list(num_string)\n    # reverse the list\n    num_list.reverse()\n    # set up a sum or value\n    value = 0\n    # loop over the num list\n    for i in range(len(num_list)):\n        # increment our sum or value by?",
        "detail": "CS32_Architecture_GP.day1.conv",
        "documentation": {}
    },
    {
        "label": "PRINT_VLAD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "PRINT_VLAD = 1\nHALT = 2\nPRINT_NUM = 3\nPRINT_REG = 4\nSAVE = 5\nADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "HALT = 2\nPRINT_NUM = 3\nPRINT_REG = 4\nSAVE = 5\nADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory\nmem = [0] * 256",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "PRINT_NUM = 3\nPRINT_REG = 4\nSAVE = 5\nADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory\nmem = [0] * 256\nmemory = [",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "PRINT_REG = 4\nSAVE = 5\nADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory\nmem = [0] * 256\nmemory = [\n    PRINT_VLAD,",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "SAVE = 5\nADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory\nmem = [0] * 256\nmemory = [\n    PRINT_VLAD,\n    SAVE,",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "ADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory\nmem = [0] * 256\nmemory = [\n    PRINT_VLAD,\n    SAVE,\n    300,",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "SUB",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "SUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory\nmem = [0] * 256\nmemory = [\n    PRINT_VLAD,\n    SAVE,\n    300,\n    3,",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "LDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory\nmem = [0] * 256\nmemory = [\n    PRINT_VLAD,\n    SAVE,\n    300,\n    3,\n    PRINT_REG,",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "PRN = 0b01000111\n# some sort of memory\nmem = [0] * 256\nmemory = [\n    PRINT_VLAD,\n    SAVE,\n    300,\n    3,\n    PRINT_REG,\n    3,",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "mem",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "mem = [0] * 256\nmemory = [\n    PRINT_VLAD,\n    SAVE,\n    300,\n    3,\n    PRINT_REG,\n    3,\n    SAVE,\n    24,",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "memory = [\n    PRINT_VLAD,\n    SAVE,\n    300,\n    3,\n    PRINT_REG,\n    3,\n    SAVE,\n    24,\n    2,",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "running = True\n# some sort of counter\npc = 0\n# Some local var holders [registers]\nregisters = [0] * 10\n# size of opcode\nop_size = 1\n# REPL to run once per cycle of CPU\n# inside this we will have our FETCH, DECODE, EXECUTE CYCLE\nwhile running:",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "pc = 0\n# Some local var holders [registers]\nregisters = [0] * 10\n# size of opcode\nop_size = 1\n# REPL to run once per cycle of CPU\n# inside this we will have our FETCH, DECODE, EXECUTE CYCLE\nwhile running:\n    # FETCH\n    cmd = memory[pc]",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "registers",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "registers = [0] * 10\n# size of opcode\nop_size = 1\n# REPL to run once per cycle of CPU\n# inside this we will have our FETCH, DECODE, EXECUTE CYCLE\nwhile running:\n    # FETCH\n    cmd = memory[pc]\n    # DECODE\n    if cmd == PRINT_VLAD:",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day1.simple",
        "description": "CS32_Architecture_GP.day1.simple",
        "peekOfCode": "op_size = 1\n# REPL to run once per cycle of CPU\n# inside this we will have our FETCH, DECODE, EXECUTE CYCLE\nwhile running:\n    # FETCH\n    cmd = memory[pc]\n    # DECODE\n    if cmd == PRINT_VLAD:\n        # EXECUTE\n        print(\"Vlad\")",
        "detail": "CS32_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "def load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                comment_split = line.split(\"#\")\n                n = comment_split[0].strip()\n                if n == '':\n                    continue",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "HALT = 1\nPRINT_VLAD = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_VLAD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "PRINT_VLAD = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "ADD = 6\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "SUB",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "SUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "LDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                comment_split = line.split(\"#\")",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "PRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                comment_split = line.split(\"#\")\n                n = comment_split[0].strip()",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "memory = [0] * 256\n# memory = [\n#     PRINT_VLAD,\n#     SAVE,\n#     300,\n#     3,\n#     PRINT_REG,\n#     3,\n#     SAVE,\n#     24,",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "running = True\n# some sort of counter\npc = 0\n# Some local var holders [registers]\nregisters = [0] * 10\n# size of opcode\nop_size = 1\n# TODO: grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\")",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "pc = 0\n# Some local var holders [registers]\nregisters = [0] * 10\n# size of opcode\nop_size = 1\n# TODO: grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\")\n    sys.exit(1)\n# TODO: load opcodes in to memory",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "registers",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "registers = [0] * 10\n# size of opcode\nop_size = 1\n# TODO: grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\")\n    sys.exit(1)\n# TODO: load opcodes in to memory\nload_memory(sys.argv[1])\n# REPL to run once per cycle of CPU",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day2.simple",
        "description": "CS32_Architecture_GP.day2.simple",
        "peekOfCode": "op_size = 1\n# TODO: grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\")\n    sys.exit(1)\n# TODO: load opcodes in to memory\nload_memory(sys.argv[1])\n# REPL to run once per cycle of CPU\n# inside this we will have our FETCH, DECODE, EXECUTE CYCLE\nwhile running:",
        "detail": "CS32_Architecture_GP.day2.simple",
        "documentation": {}
    },
    {
        "label": "CPU",
        "kind": 6,
        "importPath": "CS32_Architecture_GP.day3.ls8.cpu",
        "description": "CS32_Architecture_GP.day3.ls8.cpu",
        "peekOfCode": "class CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256\n        self.pc = 0\n        self.halted = False\n    def ram_write(self, mdr, mar):\n        self.ram[mar] = mdr",
        "detail": "CS32_Architecture_GP.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "HLT",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.ls8.cpu",
        "description": "CS32_Architecture_GP.day3.ls8.cpu",
        "peekOfCode": "HLT = 0b00000001\nLDI = 0b10000010\nPRN = 0b01000111\nMUL = 0b10100010\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8",
        "detail": "CS32_Architecture_GP.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.ls8.cpu",
        "description": "CS32_Architecture_GP.day3.ls8.cpu",
        "peekOfCode": "LDI = 0b10000010\nPRN = 0b01000111\nMUL = 0b10100010\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256",
        "detail": "CS32_Architecture_GP.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.ls8.cpu",
        "description": "CS32_Architecture_GP.day3.ls8.cpu",
        "peekOfCode": "PRN = 0b01000111\nMUL = 0b10100010\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256\n        self.pc = 0",
        "detail": "CS32_Architecture_GP.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "MUL",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.ls8.cpu",
        "description": "CS32_Architecture_GP.day3.ls8.cpu",
        "peekOfCode": "MUL = 0b10100010\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256\n        self.pc = 0\n        self.halted = False",
        "detail": "CS32_Architecture_GP.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "cpu",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.ls8.ls8",
        "description": "CS32_Architecture_GP.day3.ls8.ls8",
        "peekOfCode": "cpu = CPU()\ncpu.load(sys.argv[1])\ncpu.run()",
        "detail": "CS32_Architecture_GP.day3.ls8.ls8",
        "documentation": {}
    },
    {
        "label": "PC",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "PC = 0\nSP = 5\noperation_size = 2\nmemory_stack = [0] * 10\nregister = [0] * 10\nregister[7] = 5\nreg1 = 12\nreg2 = 23\nreg3 = 0\nreg7 = 5",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "SP = 5\noperation_size = 2\nmemory_stack = [0] * 10\nregister = [0] * 10\nregister[7] = 5\nreg1 = 12\nreg2 = 23\nreg3 = 0\nreg7 = 5\nSP = 7",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "operation_size",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "operation_size = 2\nmemory_stack = [0] * 10\nregister = [0] * 10\nregister[7] = 5\nreg1 = 12\nreg2 = 23\nreg3 = 0\nreg7 = 5\nSP = 7\n# PUSH, 2",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "memory_stack",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "memory_stack = [0] * 10\nregister = [0] * 10\nregister[7] = 5\nreg1 = 12\nreg2 = 23\nreg3 = 0\nreg7 = 5\nSP = 7\n# PUSH, 2\nregister[SP] -= 1 # step 1",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "register = [0] * 10\nregister[7] = 5\nreg1 = 12\nreg2 = 23\nreg3 = 0\nreg7 = 5\nSP = 7\n# PUSH, 2\nregister[SP] -= 1 # step 1\nmemory_stack[register[SP]] = register[2]  # step 2",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "register[7]",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "register[7] = 5\nreg1 = 12\nreg2 = 23\nreg3 = 0\nreg7 = 5\nSP = 7\n# PUSH, 2\nregister[SP] -= 1 # step 1\nmemory_stack[register[SP]] = register[2]  # step 2\n# POP, 3",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "reg1",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "reg1 = 12\nreg2 = 23\nreg3 = 0\nreg7 = 5\nSP = 7\n# PUSH, 2\nregister[SP] -= 1 # step 1\nmemory_stack[register[SP]] = register[2]  # step 2\n# POP, 3\nregister[3] = memory_stack[register[SP]]  # step 1",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "reg2",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "reg2 = 23\nreg3 = 0\nreg7 = 5\nSP = 7\n# PUSH, 2\nregister[SP] -= 1 # step 1\nmemory_stack[register[SP]] = register[2]  # step 2\n# POP, 3\nregister[3] = memory_stack[register[SP]]  # step 1\nregister[SP] += 1 # Step 2",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "reg3",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "reg3 = 0\nreg7 = 5\nSP = 7\n# PUSH, 2\nregister[SP] -= 1 # step 1\nmemory_stack[register[SP]] = register[2]  # step 2\n# POP, 3\nregister[3] = memory_stack[register[SP]]  # step 1\nregister[SP] += 1 # Step 2\nPC += operation_size",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "reg7",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "reg7 = 5\nSP = 7\n# PUSH, 2\nregister[SP] -= 1 # step 1\nmemory_stack[register[SP]] = register[2]  # step 2\n# POP, 3\nregister[3] = memory_stack[register[SP]]  # step 1\nregister[SP] += 1 # Step 2\nPC += operation_size",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "SP = 7\n# PUSH, 2\nregister[SP] -= 1 # step 1\nmemory_stack[register[SP]] = register[2]  # step 2\n# POP, 3\nregister[3] = memory_stack[register[SP]]  # step 1\nregister[SP] += 1 # Step 2\nPC += operation_size",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "memory_stack[register[SP]]",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "memory_stack[register[SP]] = register[2]  # step 2\n# POP, 3\nregister[3] = memory_stack[register[SP]]  # step 1\nregister[SP] += 1 # Step 2\nPC += operation_size",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "register[3]",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.pushpop",
        "description": "CS32_Architecture_GP.day3.pushpop",
        "peekOfCode": "register[3] = memory_stack[register[SP]]  # step 1\nregister[SP] += 1 # Step 2\nPC += operation_size",
        "detail": "CS32_Architecture_GP.day3.pushpop",
        "documentation": {}
    },
    {
        "label": "rec_func",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day3.rec",
        "description": "CS32_Architecture_GP.day3.rec",
        "peekOfCode": "def rec_func(n):\n    if n == 0:\n        return\n    print(n)\n    rec_func(n - 1)\n    rec_func(n - 2)\n    rec_func(n - 3)\nrec_func(200)",
        "detail": "CS32_Architecture_GP.day3.rec",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "def load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                comment_split = line.split(\"#\")\n                n = comment_split[0].strip()\n                if n == '':\n                    continue",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "HALT = 1\nPRINT_VLAD = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# TODO: PUSH and POP\nPUSH = 7\nPOP = 8\nSUB = 23",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_VLAD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "PRINT_VLAD = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# TODO: PUSH and POP\nPUSH = 7\nPOP = 8\nSUB = 23\nLDI = 0b10000010",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# TODO: PUSH and POP\nPUSH = 7\nPOP = 8\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\n# TODO: PUSH and POP\nPUSH = 7\nPOP = 8\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\n# TODO: PUSH and POP\nPUSH = 7\nPOP = 8\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "ADD = 6\n# TODO: PUSH and POP\nPUSH = 7\nPOP = 8\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "PUSH = 7\nPOP = 8\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "POP = 8\nSUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "SUB",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "SUB = 23\nLDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "LDI = 0b10000010\nPRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                comment_split = line.split(\"#\")",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "PRN = 0b01000111\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                comment_split = line.split(\"#\")\n                n = comment_split[0].strip()",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "memory = [0] * 256\n# keep track of running?\nrunning = True\n# some sort of counter\npc = 0\n# Some local var holders [registers]\nregisters = [0] * 10\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list \n# SP",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "running = True\n# some sort of counter\npc = 0\n# Some local var holders [registers]\nregisters = [0] * 10\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list \n# SP\nSP = 7\n# to use to store where the top of the stack is",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "pc = 0\n# Some local var holders [registers]\nregisters = [0] * 10\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list \n# SP\nSP = 7\n# to use to store where the top of the stack is\n# 0xF4 (244)\nregisters[SP] = 244",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "registers",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "registers = [0] * 10\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list \n# SP\nSP = 7\n# to use to store where the top of the stack is\n# 0xF4 (244)\nregisters[SP] = 244\n# size of opcode\nop_size = 1",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "SP = 7\n# to use to store where the top of the stack is\n# 0xF4 (244)\nregisters[SP] = 244\n# size of opcode\nop_size = 1\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\")\n    sys.exit(1)",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "registers[SP]",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "registers[SP] = 244\n# size of opcode\nop_size = 1\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\")\n    sys.exit(1)\n# load opcodes in to memory\nload_memory(sys.argv[1])\n# REPL to run once per cycle of CPU",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day3.simple",
        "description": "CS32_Architecture_GP.day3.simple",
        "peekOfCode": "op_size = 1\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\")\n    sys.exit(1)\n# load opcodes in to memory\nload_memory(sys.argv[1])\n# REPL to run once per cycle of CPU\n# inside this we will have our FETCH, DECODE, EXECUTE CYCLE\nwhile running:",
        "detail": "CS32_Architecture_GP.day3.simple",
        "documentation": {}
    },
    {
        "label": "mult2",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day3.stack_frame",
        "description": "CS32_Architecture_GP.day3.stack_frame",
        "peekOfCode": "def mult2(x, y):\n    z = x * y\n    return z\ndef main():\n    a = 2\n    b = mult2(a, 7)\n    print(b) # 14",
        "detail": "CS32_Architecture_GP.day3.stack_frame",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day3.stack_frame",
        "description": "CS32_Architecture_GP.day3.stack_frame",
        "peekOfCode": "def main():\n    a = 2\n    b = mult2(a, 7)\n    print(b) # 14",
        "detail": "CS32_Architecture_GP.day3.stack_frame",
        "documentation": {}
    },
    {
        "label": "op_add",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "def op_add(op1, op2):\n    op1 += op2\n    return 2\ndef some_function_i_just_made(op1, op2):\n    print(\"Doing something here...\")\n    return 1\ndef op_sub(op1, op2):\n    op1 -= op2\n    return 2\ndef op_print_some_stuff(op1, op2):",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "some_function_i_just_made",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "def some_function_i_just_made(op1, op2):\n    print(\"Doing something here...\")\n    return 1\ndef op_sub(op1, op2):\n    op1 -= op2\n    return 2\ndef op_print_some_stuff(op1, op2):\n    print(\"Some Stuff...\")\n    return 1\nbt = {",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "op_sub",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "def op_sub(op1, op2):\n    op1 -= op2\n    return 2\ndef op_print_some_stuff(op1, op2):\n    print(\"Some Stuff...\")\n    return 1\nbt = {\n    ADD: op_add,\n    SUB: op_sub,\n    PRINT_SOME_STUFF: op_print_some_stuff,",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "op_print_some_stuff",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "def op_print_some_stuff(op1, op2):\n    print(\"Some Stuff...\")\n    return 1\nbt = {\n    ADD: op_add,\n    SUB: op_sub,\n    PRINT_SOME_STUFF: op_print_some_stuff,\n    SOME_THING: some_function_i_just_made\n}\n\"\"\"",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "ADD = 23\nSUB = 34\nPRINT_SOME_STUFF = 50\nSOME_THING = 34\ndef op_add(op1, op2):\n    op1 += op2\n    return 2\ndef some_function_i_just_made(op1, op2):\n    print(\"Doing something here...\")\n    return 1",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "SUB",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "SUB = 34\nPRINT_SOME_STUFF = 50\nSOME_THING = 34\ndef op_add(op1, op2):\n    op1 += op2\n    return 2\ndef some_function_i_just_made(op1, op2):\n    print(\"Doing something here...\")\n    return 1\ndef op_sub(op1, op2):",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "PRINT_SOME_STUFF",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "PRINT_SOME_STUFF = 50\nSOME_THING = 34\ndef op_add(op1, op2):\n    op1 += op2\n    return 2\ndef some_function_i_just_made(op1, op2):\n    print(\"Doing something here...\")\n    return 1\ndef op_sub(op1, op2):\n    op1 -= op2",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "SOME_THING",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "SOME_THING = 34\ndef op_add(op1, op2):\n    op1 += op2\n    return 2\ndef some_function_i_just_made(op1, op2):\n    print(\"Doing something here...\")\n    return 1\ndef op_sub(op1, op2):\n    op1 -= op2\n    return 2",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "bt",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "bt = {\n    ADD: op_add,\n    SUB: op_sub,\n    PRINT_SOME_STUFF: op_print_some_stuff,\n    SOME_THING: some_function_i_just_made\n}\n\"\"\"\nADD\n0\n1",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "memory = [0] * 128\npc = 0\nrunning = True\nwhile running:\n    ir = memory[pc]\n    op1 = memory[pc + 1]\n    op2 = memory[pc + 2]\n    if ir in bt: # is ADD in the branch table?\n        pc += bt[ir](op1, op2) # bt[ADD](op1, op2) => op_add(op1, op2)\n    else:",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "pc = 0\nrunning = True\nwhile running:\n    ir = memory[pc]\n    op1 = memory[pc + 1]\n    op2 = memory[pc + 2]\n    if ir in bt: # is ADD in the branch table?\n        pc += bt[ir](op1, op2) # bt[ADD](op1, op2) => op_add(op1, op2)\n    else:\n        print(\"not valid\")",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.branch_table",
        "description": "CS32_Architecture_GP.day4.branch_table",
        "peekOfCode": "running = True\nwhile running:\n    ir = memory[pc]\n    op1 = memory[pc + 1]\n    op2 = memory[pc + 2]\n    if ir in bt: # is ADD in the branch table?\n        pc += bt[ir](op1, op2) # bt[ADD](op1, op2) => op_add(op1, op2)\n    else:\n        print(\"not valid\")",
        "detail": "CS32_Architecture_GP.day4.branch_table",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day4.functions",
        "description": "CS32_Architecture_GP.day4.functions",
        "peekOfCode": "def add(a, b): # ADD 0, 1\n    # ADD R0 R1\n    return a + b # RET\n# CALL reg\n# store our variables on the stack\nr0 = add(x, y)\n# RET\n# store our variables in registers R0 R1\n# return value can be stored in a register R0\nprint(r0)",
        "detail": "CS32_Architecture_GP.day4.functions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.functions",
        "description": "CS32_Architecture_GP.day4.functions",
        "peekOfCode": "x = 2\n# SAVE 4 R1\ny = 4\n# CALL 11\n# PRINT_REG R0\n# halt\ndef add(a, b): # ADD 0, 1\n    # ADD R0 R1\n    return a + b # RET\n# CALL reg",
        "detail": "CS32_Architecture_GP.day4.functions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.functions",
        "description": "CS32_Architecture_GP.day4.functions",
        "peekOfCode": "y = 4\n# CALL 11\n# PRINT_REG R0\n# halt\ndef add(a, b): # ADD 0, 1\n    # ADD R0 R1\n    return a + b # RET\n# CALL reg\n# store our variables on the stack\nr0 = add(x, y)",
        "detail": "CS32_Architecture_GP.day4.functions",
        "documentation": {}
    },
    {
        "label": "r0",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.functions",
        "description": "CS32_Architecture_GP.day4.functions",
        "peekOfCode": "r0 = add(x, y)\n# RET\n# store our variables in registers R0 R1\n# return value can be stored in a register R0\nprint(r0)\n\"\"\"\nSAVE\n2\n0\nSAVE",
        "detail": "CS32_Architecture_GP.day4.functions",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "def load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                comment_split = line.split(\"#\")\n                n = comment_split[0].strip()\n                if n == '':\n                    continue",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "HALT = 0b00000001\nPRINT_VLAD = 2\nPRINT_NUM = 3\nSAVE = 0b10000010\nPRINT_REG = 5\nADD = 6\n# PUSH and POP\nPUSH = 7\nPOP = 8\n# TODO: CALL and RET",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_VLAD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "PRINT_VLAD = 2\nPRINT_NUM = 3\nSAVE = 0b10000010\nPRINT_REG = 5\nADD = 6\n# PUSH and POP\nPUSH = 7\nPOP = 8\n# TODO: CALL and RET\nCALL = 0b01001001",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 0b10000010\nPRINT_REG = 5\nADD = 6\n# PUSH and POP\nPUSH = 7\nPOP = 8\n# TODO: CALL and RET\nCALL = 0b01001001\nRET = 0b00001010",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "SAVE = 0b10000010\nPRINT_REG = 5\nADD = 6\n# PUSH and POP\nPUSH = 7\nPOP = 8\n# TODO: CALL and RET\nCALL = 0b01001001\nRET = 0b00001010\nSUB = 23",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\n# PUSH and POP\nPUSH = 7\nPOP = 8\n# TODO: CALL and RET\nCALL = 0b01001001\nRET = 0b00001010\nSUB = 23\nPRN = 0b01000111",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "ADD = 6\n# PUSH and POP\nPUSH = 7\nPOP = 8\n# TODO: CALL and RET\nCALL = 0b01001001\nRET = 0b00001010\nSUB = 23\nPRN = 0b01000111\nSHL = 0b10101100",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "PUSH = 7\nPOP = 8\n# TODO: CALL and RET\nCALL = 0b01001001\nRET = 0b00001010\nSUB = 23\nPRN = 0b01000111\nSHL = 0b10101100\nSHR = 0b10101101\n# some sort of memory (lets refactor this to load in opcodes from a file)",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "POP = 8\n# TODO: CALL and RET\nCALL = 0b01001001\nRET = 0b00001010\nSUB = 23\nPRN = 0b01000111\nSHL = 0b10101100\nSHR = 0b10101101\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "CALL",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "CALL = 0b01001001\nRET = 0b00001010\nSUB = 23\nPRN = 0b01000111\nSHL = 0b10101100\nSHR = 0b10101101\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "RET",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "RET = 0b00001010\nSUB = 23\nPRN = 0b01000111\nSHL = 0b10101100\nSHR = 0b10101101\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "SUB",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "SUB = 23\nPRN = 0b01000111\nSHL = 0b10101100\nSHR = 0b10101101\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "PRN = 0b01000111\nSHL = 0b10101100\nSHR = 0b10101101\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "SHL",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "SHL = 0b10101100\nSHR = 0b10101101\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                comment_split = line.split(\"#\")",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "SHR",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "SHR = 0b10101101\n# some sort of memory (lets refactor this to load in opcodes from a file)\ndef load_memory(filename):\n    # TODO do some logic here\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                comment_split = line.split(\"#\")\n                n = comment_split[0].strip()",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "memory = [0] * 256\n# keep track of running?\nrunning = True\n# some sort of counter\npc = 0\n# Some local var holders [registers]\nregisters = [0] * 10\n# Stack Pointer (R7) as per specs\n# index of the registers list \n# SP",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "running = True\n# some sort of counter\npc = 0\n# Some local var holders [registers]\nregisters = [0] * 10\n# Stack Pointer (R7) as per specs\n# index of the registers list \n# SP\nSP = 7\n# to use to store where the top of the stack is",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "pc = 0\n# Some local var holders [registers]\nregisters = [0] * 10\n# Stack Pointer (R7) as per specs\n# index of the registers list \n# SP\nSP = 7\n# to use to store where the top of the stack is\n# 0xF4 (244)\nregisters[SP] = 244",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "registers",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "registers = [0] * 10\n# Stack Pointer (R7) as per specs\n# index of the registers list \n# SP\nSP = 7\n# to use to store where the top of the stack is\n# 0xF4 (244)\nregisters[SP] = 244\n# size of opcode\nop_size = 1",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "SP = 7\n# to use to store where the top of the stack is\n# 0xF4 (244)\nregisters[SP] = 244\n# size of opcode\nop_size = 1\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\")\n    sys.exit(1)",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "registers[SP]",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "registers[SP] = 244\n# size of opcode\nop_size = 1\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\")\n    sys.exit(1)\n# load opcodes in to memory\nload_memory(sys.argv[1])\n# REPL to run once per cycle of CPU",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple",
        "description": "CS32_Architecture_GP.day4.simple",
        "peekOfCode": "op_size = 1\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\")\n    sys.exit(1)\n# load opcodes in to memory\nload_memory(sys.argv[1])\n# REPL to run once per cycle of CPU\n# inside this we will have our FETCH, DECODE, EXECUTE CYCLE\nwhile running:",
        "detail": "CS32_Architecture_GP.day4.simple",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "def load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')\n                num = comment_split[0].strip()\n                if num == '':\n                    continue",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "HALT = 1\nPRINT_VLAD = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "PRINT_VLAD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "PRINT_VLAD = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "ADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list ",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "PUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "POP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "CALL",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "CALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "memory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "register = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "SP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "register[SP]",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "register[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')\n                num = comment_split[0].strip()",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "running = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CS32_Architecture_GP.day4.simple2",
        "description": "CS32_Architecture_GP.day4.simple2",
        "peekOfCode": "op_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL\n# lets make a running loop...",
        "detail": "CS32_Architecture_GP.day4.simple2",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CS32_Graphs_GP.ancestor.ancestor",
        "description": "CS32_Graphs_GP.ancestor.ancestor",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CS32_Graphs_GP.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CS32_Graphs_GP.ancestor.ancestor",
        "description": "CS32_Graphs_GP.ancestor.ancestor",
        "peekOfCode": "class Graph:\n    \"\"\"Represent a graph as a dictionary of vertices mapping labels to edges.\"\"\"\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex_id):\n        if vertex_id not in self.vertices:\n            self.vertices[vertex_id] = set()\n    def add_edge(self, v1, v2):\n        if v1 in self.vertices and v2 in self.vertices:\n            self.vertices[v1].add(v2)",
        "detail": "CS32_Graphs_GP.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "kind": 2,
        "importPath": "CS32_Graphs_GP.ancestor.ancestor",
        "description": "CS32_Graphs_GP.ancestor.ancestor",
        "peekOfCode": "def earliest_ancestor(ancestors, starting_node):\n    # Build the graph\n    graph = Graph()\n    for pair in ancestors:\n        graph.add_vertex(pair[0])\n        graph.add_vertex(pair[1])\n        graph.add_edge(pair[1], pair[0])\n    # Do a BFS storing the path\n    q = Queue()\n    q.enqueue([starting_node])",
        "detail": "CS32_Graphs_GP.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "CS32_Graphs_GP.ancestor.test_ancestor",
        "description": "CS32_Graphs_GP.ancestor.test_ancestor",
        "peekOfCode": "class Test(unittest.TestCase):\n    '''\n       10\n     /\n    1   2   4  11\n     \\ /   / \\ /\n      3   5   8\n       \\ / \\   \\\n        6   7   9\n    '''",
        "detail": "CS32_Graphs_GP.ancestor.test_ancestor",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CS32_Graphs_GP.adj_list",
        "description": "CS32_Graphs_GP.adj_list",
        "peekOfCode": "class Graph:\n    \"\"\"Represent a graph as a dictionary of vertices mapping labels to edges.\"\"\"\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex_id):\n        self.vertices[vertex_id] = set()\n    def add_edge(self, v1, v2):\n        if v1 in self.vertices and v2 in self.vertices:\n            self.vertices[v1].add(v2)\n        else:",
        "detail": "CS32_Graphs_GP.adj_list",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CS32_Graphs_GP.island_count",
        "description": "CS32_Graphs_GP.island_count",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CS32_Graphs_GP.island_count",
        "documentation": {}
    },
    {
        "label": "dft",
        "kind": 2,
        "importPath": "CS32_Graphs_GP.island_count",
        "description": "CS32_Graphs_GP.island_count",
        "peekOfCode": "def dft(row, col, matrix, visited):\n    s = Stack()\n    s.push((row, col))\n    while s.size() > 0:\n        v = s.pop()\n        row = v[0]\n        col = v[1]\n        if not visited[row][col]:\n            visited[row][col] = True\n            for neighbor in get_neighbors(col, row, matrix):",
        "detail": "CS32_Graphs_GP.island_count",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "CS32_Graphs_GP.island_count",
        "description": "CS32_Graphs_GP.island_count",
        "peekOfCode": "def get_neighbors(col, row, matrix):\n    neighbors = []\n    # check north\n    if row > 0 and matrix[row - 1][col] == 1:\n        neighbors.append((row - 1, col))\n    # check south\n    if row < len(matrix) - 1 and matrix[row + 1][col] == 1:\n        neighbors.append((row + 1, col))\n    # check east\n    if col < len(matrix[0]) - 1 and matrix[row][col + 1] == 1:",
        "detail": "CS32_Graphs_GP.island_count",
        "documentation": {}
    },
    {
        "label": "island_counter",
        "kind": 2,
        "importPath": "CS32_Graphs_GP.island_count",
        "description": "CS32_Graphs_GP.island_count",
        "peekOfCode": "def island_counter(matrix):\n    # create a visited matrix\n    counter_of_islands = 0\n    visited = []\n    for _ in range(len(matrix)):\n        visited.append([False] * len(matrix[0]))\n    # walk through each of the cels in the matrix\n    for col in range(len(matrix[0])):\n        for row in range(len(matrix)):\n            # if not visited",
        "detail": "CS32_Graphs_GP.island_count",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "CS32_Graphs_GP.island_count",
        "description": "CS32_Graphs_GP.island_count",
        "peekOfCode": "islands = [[0, 1, 0, 1, 0],\n           [1, 1, 0, 1, 1],\n           [0, 0, 1, 0, 0],\n           [1, 0, 1, 0, 0],\n           [1, 1, 0, 0, 0]]\nisland_counter(islands) # returns 4\ntraversal (define a function) => dft(row, col, matrix, visited) => returns visited\nget neighbors (define function) => get_nieghbors(col, row, matrix) => check north south east and west for connections / x, y / col / row\neach island is a vertex\neach connection of north, south, east or west (edge)",
        "detail": "CS32_Graphs_GP.island_count",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CS32_Graphs_GP.queue",
        "description": "CS32_Graphs_GP.queue",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CS32_Graphs_GP.queue",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "CS32_Graphs_GP.social",
        "description": "CS32_Graphs_GP.social",
        "peekOfCode": "class User:\n    def __init__(self, name):\n        self.name = name\nclass SocialGraph:\n    def __init__(self):\n        self.last_id = 0\n        self.users = {}\n        self.friendships = {}\n    def add_friendship(self, user_id, friend_id):\n        \"\"\"",
        "detail": "CS32_Graphs_GP.social",
        "documentation": {}
    },
    {
        "label": "SocialGraph",
        "kind": 6,
        "importPath": "CS32_Graphs_GP.social",
        "description": "CS32_Graphs_GP.social",
        "peekOfCode": "class SocialGraph:\n    def __init__(self):\n        self.last_id = 0\n        self.users = {}\n        self.friendships = {}\n    def add_friendship(self, user_id, friend_id):\n        \"\"\"\n        Creates a bi-directional friendship\n        \"\"\"\n        if user_id == friend_id:",
        "detail": "CS32_Graphs_GP.social",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CS32_Graphs_GP.stack",
        "description": "CS32_Graphs_GP.stack",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CS32_Graphs_GP.stack",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "CS32_Graphs_GP.word_ladder",
        "description": "CS32_Graphs_GP.word_ladder",
        "peekOfCode": "def get_neighbors(word):\n    neighbors = []\n    # turn our word in to a letters list\n    letters_list = list(word)\n    # for each letters\n    for i in range(len(letters_list)): # O(n)\n        # swap each letter\n        for letter in letters: # O(1)\n            temp_word = list(letters_list)\n            temp_word[i] = letter",
        "detail": "CS32_Graphs_GP.word_ladder",
        "documentation": {}
    },
    {
        "label": "find_ladders",
        "kind": 2,
        "importPath": "CS32_Graphs_GP.word_ladder",
        "description": "CS32_Graphs_GP.word_ladder",
        "peekOfCode": "def find_ladders(begin_word, end_word):\n    q = Queue()\n    visited = set()\n    # begin_word = begin_word.lower()\n    q.enqueue([begin_word])\n    while q.size() > 0:\n        path = q.dequeue()\n        v = path[-1]\n        if v not in visited:\n            visited.add(v)",
        "detail": "CS32_Graphs_GP.word_ladder",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "CS32_Graphs_GP.word_ladder",
        "description": "CS32_Graphs_GP.word_ladder",
        "peekOfCode": "f = open('words.txt', 'r')\nwords = f.read().split(\"\\n\")\nf.close()\nword_set = set()\nfor word in words:\n    word_set.add(word.lower())\nletters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# get neighbors\ndef get_neighbors(word):\n    neighbors = []",
        "detail": "CS32_Graphs_GP.word_ladder",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "CS32_Graphs_GP.word_ladder",
        "description": "CS32_Graphs_GP.word_ladder",
        "peekOfCode": "words = f.read().split(\"\\n\")\nf.close()\nword_set = set()\nfor word in words:\n    word_set.add(word.lower())\nletters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# get neighbors\ndef get_neighbors(word):\n    neighbors = []\n    # turn our word in to a letters list",
        "detail": "CS32_Graphs_GP.word_ladder",
        "documentation": {}
    },
    {
        "label": "word_set",
        "kind": 5,
        "importPath": "CS32_Graphs_GP.word_ladder",
        "description": "CS32_Graphs_GP.word_ladder",
        "peekOfCode": "word_set = set()\nfor word in words:\n    word_set.add(word.lower())\nletters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# get neighbors\ndef get_neighbors(word):\n    neighbors = []\n    # turn our word in to a letters list\n    letters_list = list(word)\n    # for each letters",
        "detail": "CS32_Graphs_GP.word_ladder",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": "CS32_Graphs_GP.word_ladder",
        "description": "CS32_Graphs_GP.word_ladder",
        "peekOfCode": "letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# get neighbors\ndef get_neighbors(word):\n    neighbors = []\n    # turn our word in to a letters list\n    letters_list = list(word)\n    # for each letters\n    for i in range(len(letters_list)): # O(n)\n        # swap each letter\n        for letter in letters: # O(1)",
        "detail": "CS32_Graphs_GP.word_ladder",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.problems.middle",
        "description": "CS35_DataStructures_GP.problems.middle",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n    def add(self, value):\n        self.next = Node(value)\n    def find_middle(self):\n        # pointer to middle\n        middle = self\n        # pointer to end",
        "detail": "CS35_DataStructures_GP.problems.middle",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle",
        "description": "CS35_DataStructures_GP.problems.middle",
        "peekOfCode": "root = Node(4)\ncurrent_node = root\ncurrent_node.add(7)\ncurrent_node = current_node.next\ncurrent_node.add(9)\ncurrent_node = current_node.next\ncurrent_node.add(2)\ncurrent_node = current_node.next\ncurrent_node.add(12)\ncurrent_node = current_node.next",
        "detail": "CS35_DataStructures_GP.problems.middle",
        "documentation": {}
    },
    {
        "label": "current_node",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle",
        "description": "CS35_DataStructures_GP.problems.middle",
        "peekOfCode": "current_node = root\ncurrent_node.add(7)\ncurrent_node = current_node.next\ncurrent_node.add(9)\ncurrent_node = current_node.next\ncurrent_node.add(2)\ncurrent_node = current_node.next\ncurrent_node.add(12)\ncurrent_node = current_node.next\ncurrent_node.add(120)",
        "detail": "CS35_DataStructures_GP.problems.middle",
        "documentation": {}
    },
    {
        "label": "current_node",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle",
        "description": "CS35_DataStructures_GP.problems.middle",
        "peekOfCode": "current_node = current_node.next\ncurrent_node.add(9)\ncurrent_node = current_node.next\ncurrent_node.add(2)\ncurrent_node = current_node.next\ncurrent_node.add(12)\ncurrent_node = current_node.next\ncurrent_node.add(120)\nroot.find_middle()\n# middle and end are now root",
        "detail": "CS35_DataStructures_GP.problems.middle",
        "documentation": {}
    },
    {
        "label": "current_node",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle",
        "description": "CS35_DataStructures_GP.problems.middle",
        "peekOfCode": "current_node = current_node.next\ncurrent_node.add(2)\ncurrent_node = current_node.next\ncurrent_node.add(12)\ncurrent_node = current_node.next\ncurrent_node.add(120)\nroot.find_middle()\n# middle and end are now root",
        "detail": "CS35_DataStructures_GP.problems.middle",
        "documentation": {}
    },
    {
        "label": "current_node",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle",
        "description": "CS35_DataStructures_GP.problems.middle",
        "peekOfCode": "current_node = current_node.next\ncurrent_node.add(12)\ncurrent_node = current_node.next\ncurrent_node.add(120)\nroot.find_middle()\n# middle and end are now root",
        "detail": "CS35_DataStructures_GP.problems.middle",
        "documentation": {}
    },
    {
        "label": "current_node",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle",
        "description": "CS35_DataStructures_GP.problems.middle",
        "peekOfCode": "current_node = current_node.next\ncurrent_node.add(120)\nroot.find_middle()\n# middle and end are now root",
        "detail": "CS35_DataStructures_GP.problems.middle",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.problems.middle2",
        "description": "CS35_DataStructures_GP.problems.middle2",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n    def add(self, value):\n        self.next = Node(value)\n    def find_middle(self):\n        # pointer to middle\n        middle = self\n        # pointer to end",
        "detail": "CS35_DataStructures_GP.problems.middle2",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle2",
        "description": "CS35_DataStructures_GP.problems.middle2",
        "peekOfCode": "root = Node(4)\ncurrent_node = root\ncurrent_node.add(7)\ncurrent_node = current_node.next\ncurrent_node.add(9)\ncurrent_node = current_node.next\ncurrent_node.add(2)\ncurrent_node = current_node.next\ncurrent_node.add(12)\ncurrent_node = current_node.next",
        "detail": "CS35_DataStructures_GP.problems.middle2",
        "documentation": {}
    },
    {
        "label": "current_node",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle2",
        "description": "CS35_DataStructures_GP.problems.middle2",
        "peekOfCode": "current_node = root\ncurrent_node.add(7)\ncurrent_node = current_node.next\ncurrent_node.add(9)\ncurrent_node = current_node.next\ncurrent_node.add(2)\ncurrent_node = current_node.next\ncurrent_node.add(12)\ncurrent_node = current_node.next\ncurrent_node.add(120)",
        "detail": "CS35_DataStructures_GP.problems.middle2",
        "documentation": {}
    },
    {
        "label": "current_node",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle2",
        "description": "CS35_DataStructures_GP.problems.middle2",
        "peekOfCode": "current_node = current_node.next\ncurrent_node.add(9)\ncurrent_node = current_node.next\ncurrent_node.add(2)\ncurrent_node = current_node.next\ncurrent_node.add(12)\ncurrent_node = current_node.next\ncurrent_node.add(120)\nroot.find_middle()\n# middle and end are now root",
        "detail": "CS35_DataStructures_GP.problems.middle2",
        "documentation": {}
    },
    {
        "label": "current_node",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle2",
        "description": "CS35_DataStructures_GP.problems.middle2",
        "peekOfCode": "current_node = current_node.next\ncurrent_node.add(2)\ncurrent_node = current_node.next\ncurrent_node.add(12)\ncurrent_node = current_node.next\ncurrent_node.add(120)\nroot.find_middle()\n# middle and end are now root",
        "detail": "CS35_DataStructures_GP.problems.middle2",
        "documentation": {}
    },
    {
        "label": "current_node",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle2",
        "description": "CS35_DataStructures_GP.problems.middle2",
        "peekOfCode": "current_node = current_node.next\ncurrent_node.add(12)\ncurrent_node = current_node.next\ncurrent_node.add(120)\nroot.find_middle()\n# middle and end are now root",
        "detail": "CS35_DataStructures_GP.problems.middle2",
        "documentation": {}
    },
    {
        "label": "current_node",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.problems.middle2",
        "description": "CS35_DataStructures_GP.problems.middle2",
        "peekOfCode": "current_node = current_node.next\ncurrent_node.add(120)\nroot.find_middle()\n# middle and end are now root",
        "detail": "CS35_DataStructures_GP.problems.middle2",
        "documentation": {}
    },
    {
        "label": "smallest_missing",
        "kind": 2,
        "importPath": "CS35_DataStructures_GP.problems.smallest",
        "description": "CS35_DataStructures_GP.problems.smallest",
        "peekOfCode": "def smallest_missing(arr, left, right):\n    \"\"\" \n        run a binary search on our sorted list\n        because we know that the input should already be sorted\n        and this would give us a O(log n) time complexity \n        over doing a linear search that would yield a time complexity of O(n)\n    \"\"\"\n    # check if left is greater than right\n    if left > right:\n        # if so return left",
        "detail": "CS35_DataStructures_GP.problems.smallest",
        "documentation": {}
    },
    {
        "label": "smallest",
        "kind": 2,
        "importPath": "CS35_DataStructures_GP.problems.smallest",
        "description": "CS35_DataStructures_GP.problems.smallest",
        "peekOfCode": "def smallest(arr):\n    for ind, num in enumerate(arr):\n        if num != ind:\n            return ind\n    return (arr[-1] + 1)\nprint(smallest([0, 1, 2, 6, 9, 11, 15]))\nprint(smallest([1, 2, 3, 4, 6, 9, 11, 15]))\nprint(smallest([0, 1, 2, 3, 4, 5, 6]))\n\"\"\"\nif __name__ == '__main__':",
        "detail": "CS35_DataStructures_GP.problems.smallest",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.bst",
        "description": "CS35_DataStructures_GP.bst",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    # Insert the given value into the tree\n    def insert(self, value):\n        # left case?\n        # check if the value is less than the root value?\n        if value < self.value:",
        "detail": "CS35_DataStructures_GP.bst",
        "documentation": {}
    },
    {
        "label": "bst",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.bst",
        "description": "CS35_DataStructures_GP.bst",
        "peekOfCode": "bst = BSTNode(1)\nbst.insert(8)\nbst.insert(5)\nbst.insert(7)\nbst.insert(6)\nbst.insert(3)\nbst.insert(4)\nbst.insert(2)\nbst.bft_print()\nbst.dft_print()",
        "detail": "CS35_DataStructures_GP.bst",
        "documentation": {}
    },
    {
        "label": "Vec2",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.class_design",
        "description": "CS35_DataStructures_GP.class_design",
        "peekOfCode": "class Vec2:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"Vec2: ({self.x}, {self.y})\"\n    # def __str__(self):\n    #     return self.__repr__()\n    def add(self, fred):\n        self.x += fred.x",
        "detail": "CS35_DataStructures_GP.class_design",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.class_design",
        "description": "CS35_DataStructures_GP.class_design",
        "peekOfCode": "class BTNode:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n    def __add_left__(self, value):\n        self.left = BTNode(value)\n    def __add_right__(self, value):\n        self.right = BTNode(value)\n    def insert(self, value):",
        "detail": "CS35_DataStructures_GP.class_design",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.class_design",
        "description": "CS35_DataStructures_GP.class_design",
        "peekOfCode": "v1 = Vec2(20, 10)\nv2 = Vec2(10, 10)\nprint(v1)\nprint(v2)\nv1.add(v2)\nprint(v1)\nprint(v2)\nv1.sub(v2)\nprint(v1)\nprint(v2)",
        "detail": "CS35_DataStructures_GP.class_design",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.class_design",
        "description": "CS35_DataStructures_GP.class_design",
        "peekOfCode": "v2 = Vec2(10, 10)\nprint(v1)\nprint(v2)\nv1.add(v2)\nprint(v1)\nprint(v2)\nv1.sub(v2)\nprint(v1)\nprint(v2)\nv3 = v1 + v2",
        "detail": "CS35_DataStructures_GP.class_design",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.class_design",
        "description": "CS35_DataStructures_GP.class_design",
        "peekOfCode": "v3 = v1 + v2\n3 - 5\nprint(v3)\nprint(v1)\nprint(v2)\n# 2.\n# Linked Lists to trees\n# SLL\n# (value)->(value)->()\n# DLL",
        "detail": "CS35_DataStructures_GP.class_design",
        "documentation": {}
    },
    {
        "label": "bt1",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.class_design",
        "description": "CS35_DataStructures_GP.class_design",
        "peekOfCode": "bt1 = BTNode(10)\n# bt2 = BTNode(20)\n# bt34 = BTNode(8)\n# bt7 = BTNode(5)\n# bt1.right = bt2\n# bt1.left = bt34\n# bt34.left = bt7\nbt1.add_left(8)\nbt1.add_right(20)",
        "detail": "CS35_DataStructures_GP.class_design",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.doubly_linked_list",
        "description": "CS35_DataStructures_GP.doubly_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, value, prev=None, next=None):\n        self.value = value\n        self.prev = prev\n        self.next = next\n    \"\"\"Wrap the given value in a ListNode and insert it\n    after this node. Note that this node could already\n    have a next node it is point to.\"\"\"\n    def insert_after(self, value):\n        current_next = self.next",
        "detail": "CS35_DataStructures_GP.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.doubly_linked_list",
        "description": "CS35_DataStructures_GP.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self, node=None):\n        self.head = node\n        self.tail = node\n        self.length = 1 if node is not None else 0\n    def __len__(self):\n        return self.length\n    \"\"\"Wraps the given value in a ListNode and inserts it \n    as the new head of the list. Don't forget to handle \n    the old head node's previous pointer accordingly.\"\"\"",
        "detail": "CS35_DataStructures_GP.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.queue",
        "description": "CS35_DataStructures_GP.queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.size = 0\n        self.storage = LinkedList()\n    def __len__(self):\n        return self.size\n        # other option return len(self.storage)\n    def enqueue(self, value):\n        self.storage.add_to_tail(value)\n        self.size += 1",
        "detail": "CS35_DataStructures_GP.queue",
        "documentation": {}
    },
    {
        "label": "my_loop",
        "kind": 2,
        "importPath": "CS35_DataStructures_GP.recursion",
        "description": "CS35_DataStructures_GP.recursion",
        "peekOfCode": "def my_loop(n):\n    if n > 0:\n        return my_loop(n - 1)",
        "detail": "CS35_DataStructures_GP.recursion",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CS35_DataStructures_GP.recursion",
        "description": "CS35_DataStructures_GP.recursion",
        "peekOfCode": "a = 10\nwhile a > 0:\n    a -= 1\ndef my_loop(n):\n    if n > 0:\n        return my_loop(n - 1)",
        "detail": "CS35_DataStructures_GP.recursion",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.singly_linked_list",
        "description": "CS35_DataStructures_GP.singly_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, value=None, next_node=None):\n        # the value at this linked list node\n        self.value = value\n        # reference to the next node in the list\n        self.next_node = next_node\n    def get_value(self):\n        return self.value\n    def get_next(self):\n        return self.next_node",
        "detail": "CS35_DataStructures_GP.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.singly_linked_list",
        "description": "CS35_DataStructures_GP.singly_linked_list",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        # reference to the head of the list\n        self.head = None\n        # reference to the tail of the list\n        self.tail = None\n    def add_to_tail(self, value):\n        # wrap the input value in a node\n        new_node = Node(value, None)\n        # check if there is no head (i.e., the list is empty)",
        "detail": "CS35_DataStructures_GP.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.stack",
        "description": "CS35_DataStructures_GP.stack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.size = 0\n        self.storage = LinkedList()\n    def __len__(self):\n        return self.size\n        # other option return len(self.storage)\n    def push(self, value):\n        self.storage.add_to_tail(value)\n        self.size += 1",
        "detail": "CS35_DataStructures_GP.stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.stack2",
        "description": "CS35_DataStructures_GP.stack2",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.size = 0\n        self.storage = LinkedList()\n    def __len__(self):\n        return self.size\n        # other option return len(self.storage)\n    def enqueue(self, value):\n        self.storage.add_to_tail(value)\n        self.size += 1",
        "detail": "CS35_DataStructures_GP.stack2",
        "documentation": {}
    },
    {
        "label": "BinarySearchTreeTests",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.test_bst",
        "description": "CS35_DataStructures_GP.test_bst",
        "peekOfCode": "class BinarySearchTreeTests(unittest.TestCase):\n    def setUp(self):\n        self.bst = BSTNode(5)\n    def test_insert(self):\n        self.bst.insert(2)\n        self.bst.insert(3)\n        self.bst.insert(7)\n        self.bst.insert(6)\n        self.assertEqual(self.bst.left.right.value, 3)\n        self.assertEqual(self.bst.right.left.value, 6)",
        "detail": "CS35_DataStructures_GP.test_bst",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedListTests",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.test_doubly_linked_list",
        "description": "CS35_DataStructures_GP.test_doubly_linked_list",
        "peekOfCode": "class DoublyLinkedListTests(unittest.TestCase):\n    def setUp(self):\n        self.node = ListNode(1)\n        self.dll = DoublyLinkedList(self.node)\n    def test_list_remove_from_tail(self):\n        self.dll.remove_from_tail()\n        self.assertIsNone(self.dll.head)\n        self.assertIsNone(self.dll.tail)\n        self.assertEqual(len(self.dll), 0)\n        self.dll.add_to_tail(33)",
        "detail": "CS35_DataStructures_GP.test_doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "QueueTests",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.test_queue",
        "description": "CS35_DataStructures_GP.test_queue",
        "peekOfCode": "class QueueTests(unittest.TestCase):\n    def setUp(self):\n        self.q = Queue()\n    def test_len_returns_0_for_empty_queue(self):\n        self.assertEqual(len(self.q), 0)\n    def test_len_returns_correct_length_after_enqueue(self):\n        self.assertEqual(len(self.q), 0)\n        self.q.enqueue(2)\n        self.assertEqual(len(self.q), 1)\n        self.q.enqueue(4)",
        "detail": "CS35_DataStructures_GP.test_queue",
        "documentation": {}
    },
    {
        "label": "StackTests",
        "kind": 6,
        "importPath": "CS35_DataStructures_GP.test_stack",
        "description": "CS35_DataStructures_GP.test_stack",
        "peekOfCode": "class StackTests(unittest.TestCase):\n    def setUp(self):\n        self.stack = Stack()\n    def test_len_returns_0_for_empty_stack(self):\n        self.assertEqual(len(self.stack), 0)\n    def test_len_returns_correct_length_after_push(self):\n        self.assertEqual(len(self.stack), 0)\n        self.stack.push(2)\n        self.assertEqual(len(self.stack), 1)\n        self.stack.push(4)",
        "detail": "CS35_DataStructures_GP.test_stack",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "first_name = \"Tom\"\n# print(\"Hello CS35 and \" + first_name)\n# num = 23.87\n# # f strings\n# my_string = \"    this is a string tom    \"\n# print(my_string)\n# print(my_string.strip())\n# print(len(my_string))\n# print(len(my_string.strip()))\nst = \"sdfsd sdfsdf\"",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "st",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "st = \"sdfsd sdfsdf\"\n# print(f\"Hello CS35 and           {len('this is a test')}     {first_name}.......\".strip())\n# print(\"something on a new line\")\n# first_name\n# collections\n# create an empty list? Array\n# my_list = []\n# my_list2 = list()\n# print(my_list)\n# create a list with numbers 1, 2, 3, 4, 5",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "lst1",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "lst1 = [1, 2, 3, 4, 5, \"this is a string\", [23, \"bob\", ['s','w', []]]]\n# add an element 24 to lst1\nlst1.append(24)\n# add an element 12 to the start of lst1\nlst1.insert(0, 12)\n# print(lst1)\n# # print all values in lst2\n# print(lst2)\n# print(lst1[0])\n# print(lst1[1])",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "numbers = [1, 2, 3, 4]\nsquares = [num * num for num in numbers]\n# for num in numbers:\n#     squares.append(num * num)\n# print(numbers)\n# print(squares)\n# Filtering with a list comprehension\nevens = [num for num in numbers if num % 2 == 0]\n# for num in numbers:\n#     if num % 2 == 0:",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "squares = [num * num for num in numbers]\n# for num in numbers:\n#     squares.append(num * num)\n# print(numbers)\n# print(squares)\n# Filtering with a list comprehension\nevens = [num for num in numbers if num % 2 == 0]\n# for num in numbers:\n#     if num % 2 == 0:\n#         evens.append(num)",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "evens",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "evens = [num for num in numbers if num % 2 == 0]\n# for num in numbers:\n#     if num % 2 == 0:\n#         evens.append(num)\n# create a new list of even numbers using the values of the numbers list as inputs\n# print(evens)\n# create a new list containing only the names that start with 's' make sure they are capitalized (regardless of their original case)\nnames = [\"Sarah\", \"jorge\", \"sam\", \"frank\", \"bob\", \"sandy\"]\ns_names = [name.capitalize() for name in names if name[0].lower() == 's']\n# print(s_names)",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "names = [\"Sarah\", \"jorge\", \"sam\", \"frank\", \"bob\", \"sandy\"]\ns_names = [name.capitalize() for name in names if name[0].lower() == 's']\n# print(s_names)\n# Dictionaries\n# Create a new dictionary\n# empty\nd1 = {}\nd2 = dict()\n# key value pairs\nd3 = {",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "s_names",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "s_names = [name.capitalize() for name in names if name[0].lower() == 's']\n# print(s_names)\n# Dictionaries\n# Create a new dictionary\n# empty\nd1 = {}\nd2 = dict()\n# key value pairs\nd3 = {\n    \"name\": \"Tom\",",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "d1 = {}\nd2 = dict()\n# key value pairs\nd3 = {\n    \"name\": \"Tom\",\n    5676: \"woooooo\",\n    \"age\": 40\n}\n# access an element via its key\nd3[\"name\"]  # => \"Tom\"",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "d2 = dict()\n# key value pairs\nd3 = {\n    \"name\": \"Tom\",\n    5676: \"woooooo\",\n    \"age\": 40\n}\n# access an element via its key\nd3[\"name\"]  # => \"Tom\"\nprint(d3[\"name\"]) # +> \"Tom\"",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "d3",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "d3 = {\n    \"name\": \"Tom\",\n    5676: \"woooooo\",\n    \"age\": 40\n}\n# access an element via its key\nd3[\"name\"]  # => \"Tom\"\nprint(d3[\"name\"]) # +> \"Tom\"\nprint(d3[5676])  # +> \"woooooo\"\nd3[\"height\"] = 345",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "d3[\"height\"]",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day1.00_intro",
        "description": "CS35_IntroPython_GP.day1.00_intro",
        "peekOfCode": "d3[\"height\"] = 345\nprint(d3)",
        "detail": "CS35_IntroPython_GP.day1.00_intro",
        "documentation": {}
    },
    {
        "label": "mult2",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "def mult2(x):\n    return x * 2\n# define a doubling function that passes args by reference\ndef mult2_list(l):\n    for i in range(len(l)):\n        l[i] *= 2\n# # try out the functions\n# a = 12\n# new_number = mult2(a)\n# print(new_number)",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "mult2_list",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "def mult2_list(l):\n    for i in range(len(l)):\n        l[i] *= 2\n# # try out the functions\n# a = 12\n# new_number = mult2(a)\n# print(new_number)\n# lst = [2, 4, 6, 8] # mutable\n# mult2_list(lst)\n# for num in lst:",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "centered_avg1",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "def centered_avg1(ints):\n    pass\ndef centered_avg2(ints):\n    pass\n# tests\nnumbers = [1, 41, 34, 29, 50, 50]\nimport time\nstart = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "centered_avg2",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "def centered_avg2(ints):\n    pass\n# tests\nnumbers = [1, 41, 34, 29, 50, 50]\nimport time\nstart = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()\nprint(end - start)",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "x = 5\ny = 7\na = \"5\"\nb = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 # \n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "y = 7\na = \"5\"\nb = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 # \n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]\n# b = 23423542",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "a = \"5\"\nb = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 # \n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]\n# b = 23423542\ndef mult2(x):",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "b = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 # \n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]\n# b = 23423542\ndef mult2(x):\n    return x * 2",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "numbers = [1, 41, 34, 29, 50, 50]\nimport time\nstart = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "start = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "end = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()\nprint(end - start)\n# a = 41 + 34 + 29 + 50\n# print(a)",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "start = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()\nprint(end - start)\n# a = 41 + 34 + 29 + 50\n# print(a)\n# b = a // 4\n# print(b)",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.00_intro2",
        "description": "CS35_IntroPython_GP.day2.00_intro2",
        "peekOfCode": "end = time.time()\nprint(end - start)\n# a = 41 + 34 + 29 + 50\n# print(a)\n# b = a // 4\n# print(b)",
        "detail": "CS35_IntroPython_GP.day2.00_intro2",
        "documentation": {}
    },
    {
        "label": "centered_avg",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day2.01_centered_avg",
        "description": "CS35_IntroPython_GP.day2.01_centered_avg",
        "peekOfCode": "def centered_avg(ints):\n    smallest = min(ints)\n    largest = max(ints)\n    sum = 0\n    for num in ints:\n        sum += num\n    sum = sum - largest - smallest\n    return sum // (len(ints) - 2)\n# print(centered_avg([1, 2, 3, 4, 100])) # 3\n# print(centered_avg([1, 1, 5, 5, 10, 8, 7]))  # ",
        "detail": "CS35_IntroPython_GP.day2.01_centered_avg",
        "documentation": {}
    },
    {
        "label": "centered_avg2",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day2.01_centered_avg",
        "description": "CS35_IntroPython_GP.day2.01_centered_avg",
        "peekOfCode": "def centered_avg2(ints):\n    ints.sort()\n    return int(statistics.mean(ints[1:-1]))\n# print(centered_avg2([1, 2, 3, 4, 100])) # 3\n# print(centered_avg2([1, 1, 5, 5, 10, 8, 7]))  # \n# print(centered_avg2([-10, -4, -2, -4, -2, 0]))  # -3?\n# print(centered_avg2([1, 3, 2, 7, 9, 0])) # ?\nnumbers = [1, 2, 3, 4, 100]\n# print(centered_avg1(numbers))\nimport time",
        "detail": "CS35_IntroPython_GP.day2.01_centered_avg",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.01_centered_avg",
        "description": "CS35_IntroPython_GP.day2.01_centered_avg",
        "peekOfCode": "numbers = [1, 2, 3, 4, 100]\n# print(centered_avg1(numbers))\nimport time\nstart = time.time()\nfor i in range(1000):\n    centered_avg(numbers)\nend = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()",
        "detail": "CS35_IntroPython_GP.day2.01_centered_avg",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.01_centered_avg",
        "description": "CS35_IntroPython_GP.day2.01_centered_avg",
        "peekOfCode": "start = time.time()\nfor i in range(1000):\n    centered_avg(numbers)\nend = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()",
        "detail": "CS35_IntroPython_GP.day2.01_centered_avg",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.01_centered_avg",
        "description": "CS35_IntroPython_GP.day2.01_centered_avg",
        "peekOfCode": "end = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()\nprint(end - start)",
        "detail": "CS35_IntroPython_GP.day2.01_centered_avg",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.01_centered_avg",
        "description": "CS35_IntroPython_GP.day2.01_centered_avg",
        "peekOfCode": "start = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()\nprint(end - start)",
        "detail": "CS35_IntroPython_GP.day2.01_centered_avg",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.01_centered_avg",
        "description": "CS35_IntroPython_GP.day2.01_centered_avg",
        "peekOfCode": "end = time.time()\nprint(end - start)",
        "detail": "CS35_IntroPython_GP.day2.01_centered_avg",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.02_repl_guessing_game",
        "description": "CS35_IntroPython_GP.day2.02_repl_guessing_game",
        "peekOfCode": "value = random.randint(1, 100)\nguess = None\nwhile (value != guess):\n    guess = input(\"Guess a number between 1 and 100! \")\n    guess = int(guess)\n    if value == guess:\n        print(\"Great guess. You Win!\")\n    else:\n        print(\"Not correct. Guess again!\")",
        "detail": "CS35_IntroPython_GP.day2.02_repl_guessing_game",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.02_repl_guessing_game",
        "description": "CS35_IntroPython_GP.day2.02_repl_guessing_game",
        "peekOfCode": "guess = None\nwhile (value != guess):\n    guess = input(\"Guess a number between 1 and 100! \")\n    guess = int(guess)\n    if value == guess:\n        print(\"Great guess. You Win!\")\n    else:\n        print(\"Not correct. Guess again!\")",
        "detail": "CS35_IntroPython_GP.day2.02_repl_guessing_game",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.08_comprehensions",
        "description": "CS35_IntroPython_GP.day2.08_comprehensions",
        "peekOfCode": "y = [i for i in range(1, 6)]\nprint (y)\n# Write a list comprehension to produce the cubes of the numbers 0-9:\n# [0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n# for i in range(10):\n#     i ** 3\ny = [i ** 3 for i in range(10)]\nprint(y)\n# Write a list comprehension to produce the uppercase version of all the\n# elements in array a. Hint: \"foo\".upper() is \"FOO\".",
        "detail": "CS35_IntroPython_GP.day2.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.08_comprehensions",
        "description": "CS35_IntroPython_GP.day2.08_comprehensions",
        "peekOfCode": "y = [i ** 3 for i in range(10)]\nprint(y)\n# Write a list comprehension to produce the uppercase version of all the\n# elements in array a. Hint: \"foo\".upper() is \"FOO\".\na = [\"foo\", \"bar\", \"baz\"]\n# for word in a:\n#     word.upper()\ny = [word.upper() for word in a]\nprint(y)\n# Use a list comprehension to create a list containing only the _even_ elements",
        "detail": "CS35_IntroPython_GP.day2.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.08_comprehensions",
        "description": "CS35_IntroPython_GP.day2.08_comprehensions",
        "peekOfCode": "a = [\"foo\", \"bar\", \"baz\"]\n# for word in a:\n#     word.upper()\ny = [word.upper() for word in a]\nprint(y)\n# Use a list comprehension to create a list containing only the _even_ elements\n# the user entered into list x.\nx = input(\"Enter comma-separated numbers: \").split(',')\n# What do you need between the square brackets to make it work?\ny = [num for num in x if int(num) % 2 == 0]",
        "detail": "CS35_IntroPython_GP.day2.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.08_comprehensions",
        "description": "CS35_IntroPython_GP.day2.08_comprehensions",
        "peekOfCode": "y = [word.upper() for word in a]\nprint(y)\n# Use a list comprehension to create a list containing only the _even_ elements\n# the user entered into list x.\nx = input(\"Enter comma-separated numbers: \").split(',')\n# What do you need between the square brackets to make it work?\ny = [num for num in x if int(num) % 2 == 0]\nprint(y)",
        "detail": "CS35_IntroPython_GP.day2.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.08_comprehensions",
        "description": "CS35_IntroPython_GP.day2.08_comprehensions",
        "peekOfCode": "x = input(\"Enter comma-separated numbers: \").split(',')\n# What do you need between the square brackets to make it work?\ny = [num for num in x if int(num) % 2 == 0]\nprint(y)",
        "detail": "CS35_IntroPython_GP.day2.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.08_comprehensions",
        "description": "CS35_IntroPython_GP.day2.08_comprehensions",
        "peekOfCode": "y = [num for num in x if int(num) % 2 == 0]\nprint(y)",
        "detail": "CS35_IntroPython_GP.day2.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day2.tuples",
        "description": "CS35_IntroPython_GP.day2.tuples",
        "peekOfCode": "def f(x):\n    x.append(29)\nf(l1)\nprint(l1)\nf(t1)\nprint(t1)",
        "detail": "CS35_IntroPython_GP.day2.tuples",
        "documentation": {}
    },
    {
        "label": "l1",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.tuples",
        "description": "CS35_IntroPython_GP.day2.tuples",
        "peekOfCode": "l1 = [1, 3, 5, 7, 9] # list mutable (read write)\nt1 = (1, 3, 5, 7, 9)  # tuple imutable (read only)\ndef f(x):\n    x.append(29)\nf(l1)\nprint(l1)\nf(t1)\nprint(t1)",
        "detail": "CS35_IntroPython_GP.day2.tuples",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day2.tuples",
        "description": "CS35_IntroPython_GP.day2.tuples",
        "peekOfCode": "t1 = (1, 3, 5, 7, 9)  # tuple imutable (read only)\ndef f(x):\n    x.append(29)\nf(l1)\nprint(l1)\nf(t1)\nprint(t1)",
        "detail": "CS35_IntroPython_GP.day2.tuples",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.02_datatypes",
        "description": "CS35_IntroPython_GP.day3.intro.02_datatypes",
        "peekOfCode": "x = 5\ny = \"7\"\n# Write a print statement that combines x + y into the integer value 12\nprint(x + int(y))\n# Write a print statement that combines x + y into the string value 57\nprint(str(x) + y)",
        "detail": "CS35_IntroPython_GP.day3.intro.02_datatypes",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.02_datatypes",
        "description": "CS35_IntroPython_GP.day3.intro.02_datatypes",
        "peekOfCode": "y = \"7\"\n# Write a print statement that combines x + y into the integer value 12\nprint(x + int(y))\n# Write a print statement that combines x + y into the string value 57\nprint(str(x) + y)",
        "detail": "CS35_IntroPython_GP.day3.intro.02_datatypes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.04_printing",
        "description": "CS35_IntroPython_GP.day3.intro.04_printing",
        "peekOfCode": "x = 10\ny = 2.24552\nz = \"I like turtles!\"\n# Using the printf operator (%), print the following feeding in the values of x,\n# y, and z:\n# x is 10, y is 2.25, z is \"I like turtles!\"\nprint(\"x is %d, y is %.2f, z is \\\"%s\\\"\" % (x, y, z))\n# Use the 'format' string method to print the same thing\nprint(\"x is {}, y is {:.2f}, z is \\\"{}\\\"\".format(x, y, z))\n# Finally, print the same thing using an f-string",
        "detail": "CS35_IntroPython_GP.day3.intro.04_printing",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.04_printing",
        "description": "CS35_IntroPython_GP.day3.intro.04_printing",
        "peekOfCode": "y = 2.24552\nz = \"I like turtles!\"\n# Using the printf operator (%), print the following feeding in the values of x,\n# y, and z:\n# x is 10, y is 2.25, z is \"I like turtles!\"\nprint(\"x is %d, y is %.2f, z is \\\"%s\\\"\" % (x, y, z))\n# Use the 'format' string method to print the same thing\nprint(\"x is {}, y is {:.2f}, z is \\\"{}\\\"\".format(x, y, z))\n# Finally, print the same thing using an f-string\nprint(f'x is {x}, y is {y:.2f}, z is {z}')",
        "detail": "CS35_IntroPython_GP.day3.intro.04_printing",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.04_printing",
        "description": "CS35_IntroPython_GP.day3.intro.04_printing",
        "peekOfCode": "z = \"I like turtles!\"\n# Using the printf operator (%), print the following feeding in the values of x,\n# y, and z:\n# x is 10, y is 2.25, z is \"I like turtles!\"\nprint(\"x is %d, y is %.2f, z is \\\"%s\\\"\" % (x, y, z))\n# Use the 'format' string method to print the same thing\nprint(\"x is {}, y is {:.2f}, z is \\\"{}\\\"\".format(x, y, z))\n# Finally, print the same thing using an f-string\nprint(f'x is {x}, y is {y:.2f}, z is {z}')",
        "detail": "CS35_IntroPython_GP.day3.intro.04_printing",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.05_lists",
        "description": "CS35_IntroPython_GP.day3.intro.05_lists",
        "peekOfCode": "x = [1, 2, 3]\ny = [8, 9, 10]\n# For the following, DO NOT USE AN ASSIGNMENT (=).\n# Change x so that it is [1, 2, 3, 4]\nx.append(4)\nprint(x)\n# Using y, change x so that it is [1, 2, 3, 4, 8, 9, 10]\nx.extend(y)\nprint(x)\n# Change x so that it is [1, 2, 3, 4, 9, 10]",
        "detail": "CS35_IntroPython_GP.day3.intro.05_lists",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.05_lists",
        "description": "CS35_IntroPython_GP.day3.intro.05_lists",
        "peekOfCode": "y = [8, 9, 10]\n# For the following, DO NOT USE AN ASSIGNMENT (=).\n# Change x so that it is [1, 2, 3, 4]\nx.append(4)\nprint(x)\n# Using y, change x so that it is [1, 2, 3, 4, 8, 9, 10]\nx.extend(y)\nprint(x)\n# Change x so that it is [1, 2, 3, 4, 9, 10]\nx.remove(8)",
        "detail": "CS35_IntroPython_GP.day3.intro.05_lists",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "description": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "peekOfCode": "def dist(a, b):\n    \"\"\"Compute the distance between two x,y points.\"\"\"\n    x0, y0 = a  # Destructuring assignment\n    x1, y1 = b\n    return math.sqrt((x1 - x0)**2 + (y1 - y0)**2)\na = (2, 7)   # <-- x,y coordinates stored in tuples\nb = (-14, 72)\n# Prints \"Distance is 66.94\"\nprint(\"Distance is: {:.2f}\".format(dist(a, b)))\n# Write a function `print_tuple` that prints all the values in a tuple",
        "detail": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "print_tuple",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "description": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "peekOfCode": "def print_tuple(t):\n  for i in t:\n    print(i)\nt = (1, 2, 5, 7, 99)\nprint_tuple(t)  # Prints 1 2 5 7 99, one per line\n# Declare a tuple of 1 element then print it\nu = (1,)  # What needs to be added to make this work?\nprint_tuple(u)",
        "detail": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "description": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "peekOfCode": "a = (2, 7)   # <-- x,y coordinates stored in tuples\nb = (-14, 72)\n# Prints \"Distance is 66.94\"\nprint(\"Distance is: {:.2f}\".format(dist(a, b)))\n# Write a function `print_tuple` that prints all the values in a tuple\ndef print_tuple(t):\n  for i in t:\n    print(i)\nt = (1, 2, 5, 7, 99)\nprint_tuple(t)  # Prints 1 2 5 7 99, one per line",
        "detail": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "description": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "peekOfCode": "b = (-14, 72)\n# Prints \"Distance is 66.94\"\nprint(\"Distance is: {:.2f}\".format(dist(a, b)))\n# Write a function `print_tuple` that prints all the values in a tuple\ndef print_tuple(t):\n  for i in t:\n    print(i)\nt = (1, 2, 5, 7, 99)\nprint_tuple(t)  # Prints 1 2 5 7 99, one per line\n# Declare a tuple of 1 element then print it",
        "detail": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "description": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "peekOfCode": "t = (1, 2, 5, 7, 99)\nprint_tuple(t)  # Prints 1 2 5 7 99, one per line\n# Declare a tuple of 1 element then print it\nu = (1,)  # What needs to be added to make this work?\nprint_tuple(u)",
        "detail": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "description": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "peekOfCode": "u = (1,)  # What needs to be added to make this work?\nprint_tuple(u)",
        "detail": "CS35_IntroPython_GP.day3.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.07_slices",
        "description": "CS35_IntroPython_GP.day3.intro.07_slices",
        "peekOfCode": "a = [2, 4, 1, 7, 9, 6]\n# Output the second element: 4:\nprint(a[1])\n# Output the second-to-last element: 9\nprint(a[-2])\n# Output the last three elements in the array: [7, 9, 6]\nprint(a[-3:])\n# Output the two middle elements in the array: [1, 7]\nprint(a[2:4])\n# Output every element except the first one: [4, 1, 7, 9, 6]",
        "detail": "CS35_IntroPython_GP.day3.intro.07_slices",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.07_slices",
        "description": "CS35_IntroPython_GP.day3.intro.07_slices",
        "peekOfCode": "s = \"Hello, world!\"\n# Output just the 8th-12th characters: \"world\"\nprint(s[7:12])",
        "detail": "CS35_IntroPython_GP.day3.intro.07_slices",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "description": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "peekOfCode": "y = [i for i in range(1, 6)]\nprint (y)\n# Write a list comprehension to produce the cubes of the numbers 0-9:\n# [0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\ny = [i**3 for i in range(10)]\nprint(y)\n# Write a list comprehension to produce the uppercase version of all the\n# elements in array a. Hint: \"foo\".upper() is \"FOO\".\na = [\"foo\", \"bar\", \"baz\"]\ny = [i.upper() for i in a]",
        "detail": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "description": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "peekOfCode": "y = [i**3 for i in range(10)]\nprint(y)\n# Write a list comprehension to produce the uppercase version of all the\n# elements in array a. Hint: \"foo\".upper() is \"FOO\".\na = [\"foo\", \"bar\", \"baz\"]\ny = [i.upper() for i in a]\nprint(y)\n# Use a list comprehension to create a list containing only the _even_ elements\n# the user entered into list x.\nx = input(\"Enter comma-separated numbers: \").split(',')",
        "detail": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "description": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "peekOfCode": "a = [\"foo\", \"bar\", \"baz\"]\ny = [i.upper() for i in a]\nprint(y)\n# Use a list comprehension to create a list containing only the _even_ elements\n# the user entered into list x.\nx = input(\"Enter comma-separated numbers: \").split(',')\n# What do you need between the square brackets to make it work?\ny = [i for i in x if int(i) % 2 == 0]\nprint(y)",
        "detail": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "description": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "peekOfCode": "y = [i.upper() for i in a]\nprint(y)\n# Use a list comprehension to create a list containing only the _even_ elements\n# the user entered into list x.\nx = input(\"Enter comma-separated numbers: \").split(',')\n# What do you need between the square brackets to make it work?\ny = [i for i in x if int(i) % 2 == 0]\nprint(y)",
        "detail": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "description": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "peekOfCode": "x = input(\"Enter comma-separated numbers: \").split(',')\n# What do you need between the square brackets to make it work?\ny = [i for i in x if int(i) % 2 == 0]\nprint(y)",
        "detail": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "description": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "peekOfCode": "y = [i for i in x if int(i) % 2 == 0]\nprint(y)",
        "detail": "CS35_IntroPython_GP.day3.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "waypoints",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.09_dictionaries",
        "description": "CS35_IntroPython_GP.day3.intro.09_dictionaries",
        "peekOfCode": "waypoints = [\n    {\n        \"lat\": 43,\n        \"lon\": -121,\n        \"name\": \"a place\"\n    }, \n    {\n        \"lat\": 41,\n        \"lon\": -123,\n        \"name\": \"another place\"",
        "detail": "CS35_IntroPython_GP.day3.intro.09_dictionaries",
        "documentation": {}
    },
    {
        "label": "waypoints[0]['lon']",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.09_dictionaries",
        "description": "CS35_IntroPython_GP.day3.intro.09_dictionaries",
        "peekOfCode": "waypoints[0]['lon'] = -130\nwaypoints[0]['name'] = 'not a real place'\n# Write a loop that prints out all the field values for all the waypoints\nfor w in waypoints:\n    print(w['name'], w['lat'], w['lon'])",
        "detail": "CS35_IntroPython_GP.day3.intro.09_dictionaries",
        "documentation": {}
    },
    {
        "label": "waypoints[0]['name']",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.09_dictionaries",
        "description": "CS35_IntroPython_GP.day3.intro.09_dictionaries",
        "peekOfCode": "waypoints[0]['name'] = 'not a real place'\n# Write a loop that prints out all the field values for all the waypoints\nfor w in waypoints:\n    print(w['name'], w['lat'], w['lon'])",
        "detail": "CS35_IntroPython_GP.day3.intro.09_dictionaries",
        "documentation": {}
    },
    {
        "label": "is_even",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day3.intro.10_functions",
        "description": "CS35_IntroPython_GP.day3.intro.10_functions",
        "peekOfCode": "def is_even(n):\n  return n % 2 == 0\n# Read a number from the keyboard\nnum = input(\"Enter a number: \")\nnum = int(num)\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\nif is_even(num):\n  print(\"Even!\")\nelse:\n  print(\"Odd\")",
        "detail": "CS35_IntroPython_GP.day3.intro.10_functions",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.10_functions",
        "description": "CS35_IntroPython_GP.day3.intro.10_functions",
        "peekOfCode": "num = input(\"Enter a number: \")\nnum = int(num)\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\nif is_even(num):\n  print(\"Even!\")\nelse:\n  print(\"Odd\")",
        "detail": "CS35_IntroPython_GP.day3.intro.10_functions",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.10_functions",
        "description": "CS35_IntroPython_GP.day3.intro.10_functions",
        "peekOfCode": "num = int(num)\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\nif is_even(num):\n  print(\"Even!\")\nelse:\n  print(\"Odd\")",
        "detail": "CS35_IntroPython_GP.day3.intro.10_functions",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day3.intro.11_args",
        "description": "CS35_IntroPython_GP.day3.intro.11_args",
        "peekOfCode": "def f1(a, b):\n  return a + b\nprint(f1(1, 2))\n# Write a function f2 that takes any number of integer arguments and prints the\n# sum. Google for \"python arbitrary arguments\" and look for \"*args\"\ndef f2(*args):\n  sum = 0\n  for i in args:\n    sum += i\n  return sum",
        "detail": "CS35_IntroPython_GP.day3.intro.11_args",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day3.intro.11_args",
        "description": "CS35_IntroPython_GP.day3.intro.11_args",
        "peekOfCode": "def f2(*args):\n  sum = 0\n  for i in args:\n    sum += i\n  return sum\nprint(f2(1))                    # Should print 1\nprint(f2(1, 3))                 # Should print 4\nprint(f2(1, 4, -12))            # Should print -7\nprint(f2(7, 9, 1, 3, 4, 9, 0))  # Should print 33\na = [7, 6, 5, 4]",
        "detail": "CS35_IntroPython_GP.day3.intro.11_args",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day3.intro.11_args",
        "description": "CS35_IntroPython_GP.day3.intro.11_args",
        "peekOfCode": "def f3(a, b=1):\n  return a + b\nprint(f3(1, 2))  # Should print 3\nprint(f3(8))     # Should print 9\n# Write a function f4 that accepts an arbitrary number of keyword arguments and\n# prints out the keys and values like so:\n#\n# key: foo, value: bar\n# key: baz, value: 12\n#",
        "detail": "CS35_IntroPython_GP.day3.intro.11_args",
        "documentation": {}
    },
    {
        "label": "f4",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day3.intro.11_args",
        "description": "CS35_IntroPython_GP.day3.intro.11_args",
        "peekOfCode": "def f4(**kwargs):\n  for k, v in kwargs.items():\n    print(f'key: {k}, value: {v}')\n  # Alternate:\n  # for k in kwargs:\n  #   print(f'key: {k}, value: {kwargs[k]}')\n# Should print\n# key: a, value: 12\n# key: b, value: 30\nf4(a=12, b=30)",
        "detail": "CS35_IntroPython_GP.day3.intro.11_args",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.11_args",
        "description": "CS35_IntroPython_GP.day3.intro.11_args",
        "peekOfCode": "a = [7, 6, 5, 4]\n# What thing do you have to add to make this work?\nprint(f2(*a))    # Should print 22\n# Write a function f3 that accepts either one or two arguments. If one argument,\n# it returns that value plus 1. If two arguments, it returns the sum of the\n# arguments. Google \"python default arguments\" for a hint.\ndef f3(a, b=1):\n  return a + b\nprint(f3(1, 2))  # Should print 3\nprint(f3(8))     # Should print 9",
        "detail": "CS35_IntroPython_GP.day3.intro.11_args",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.11_args",
        "description": "CS35_IntroPython_GP.day3.intro.11_args",
        "peekOfCode": "d = {\n    \"monster\": \"goblin\",\n    \"hp\": 3\n}\n# What thing do you have to add to make this work?\nf4(**d)",
        "detail": "CS35_IntroPython_GP.day3.intro.11_args",
        "documentation": {}
    },
    {
        "label": "changeX",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day3.intro.12_scopes",
        "description": "CS35_IntroPython_GP.day3.intro.12_scopes",
        "peekOfCode": "def changeX():\n    # tell Python to use x in the global scope\n    global x\n    x = 99\nchangeX()\n# This prints 12. What do we have to modify in changeX() to get it to print 99?\nprint(x)\n# This nested function has a similar problem.\ndef outer():\n    y = 120",
        "detail": "CS35_IntroPython_GP.day3.intro.12_scopes",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "CS35_IntroPython_GP.day3.intro.12_scopes",
        "description": "CS35_IntroPython_GP.day3.intro.12_scopes",
        "peekOfCode": "def outer():\n    y = 120\n    def inner():\n        # tell Python to use y from the containing scope\n        nonlocal y\n        y = 999\n    inner()\n    # This prints 120. What do we have to change in inner() to get it to print\n    # 999? Google \"python nested function scope\".\n    print(y)",
        "detail": "CS35_IntroPython_GP.day3.intro.12_scopes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.12_scopes",
        "description": "CS35_IntroPython_GP.day3.intro.12_scopes",
        "peekOfCode": "x = 12\ndef changeX():\n    # tell Python to use x in the global scope\n    global x\n    x = 99\nchangeX()\n# This prints 12. What do we have to modify in changeX() to get it to print 99?\nprint(x)\n# This nested function has a similar problem.\ndef outer():",
        "detail": "CS35_IntroPython_GP.day3.intro.12_scopes",
        "documentation": {}
    },
    {
        "label": "fp",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.13_file_io",
        "description": "CS35_IntroPython_GP.day3.intro.13_file_io",
        "peekOfCode": "fp = open(\"bar.txt\", \"w\")\nfp.write(\"\"\"Line 1\n            Line 2\n            Line 3\"\"\")",
        "detail": "CS35_IntroPython_GP.day3.intro.13_file_io",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.14_cal",
        "description": "CS35_IntroPython_GP.day3.intro.14_cal",
        "peekOfCode": "l = len(sys.argv)\nif l == 1:\n  # User didn't specify any input\n  month = datetime.now().month\n  year = datetime.now().year\nelif l == 2:\n  # User didn't specify year\n  month = int(sys.argv[1])\n  year = datetime.now().year \nelif l == 3:",
        "detail": "CS35_IntroPython_GP.day3.intro.14_cal",
        "documentation": {}
    },
    {
        "label": "cal",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.14_cal",
        "description": "CS35_IntroPython_GP.day3.intro.14_cal",
        "peekOfCode": "cal = calendar.TextCalendar()\ncal.prmonth(year, month)",
        "detail": "CS35_IntroPython_GP.day3.intro.14_cal",
        "documentation": {}
    },
    {
        "label": "LatLon",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day3.intro.15_classes",
        "description": "CS35_IntroPython_GP.day3.intro.15_classes",
        "peekOfCode": "class LatLon:\n  def __init__(self, lat=0, lon=0):\n    self.lat = lat\n    self.lon = lon\n# Make a class Waypoint that can be passed parameters `name`, `lat`, and `lon` to the\n# constructor. It should inherit from LatLon.\nclass Waypoint(LatLon):\n  def __init__(self, name, lat=0, lon=0):\n    super().__init__(lat, lon)\n    self.name = name",
        "detail": "CS35_IntroPython_GP.day3.intro.15_classes",
        "documentation": {}
    },
    {
        "label": "Waypoint",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day3.intro.15_classes",
        "description": "CS35_IntroPython_GP.day3.intro.15_classes",
        "peekOfCode": "class Waypoint(LatLon):\n  def __init__(self, name, lat=0, lon=0):\n    super().__init__(lat, lon)\n    self.name = name\n  def __str__(self):\n    return \"<Waypoint '{}' {:f},{}>\".format(self.name, self.lat, self.lon)\n# Make a class Geocache that can be passed parameters `name`, `difficulty`,\n# `size`, `lat`, and `lon` to the constructor. What should it inherit from?\nclass Geocache(Waypoint):\n  def __init__(self, name, difficulty, size, lat=0, lon=0):",
        "detail": "CS35_IntroPython_GP.day3.intro.15_classes",
        "documentation": {}
    },
    {
        "label": "Geocache",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day3.intro.15_classes",
        "description": "CS35_IntroPython_GP.day3.intro.15_classes",
        "peekOfCode": "class Geocache(Waypoint):\n  def __init__(self, name, difficulty, size, lat=0, lon=0):\n    super().__init__(name, lat, lon)\n    self.difficulty = difficulty\n    self.size = size\n  def __str__(self):\n    return \"<Geocache '{}' {} {} {:f},{}>\".format(self.name, self.difficulty, self.size, self.lat, self.lon)\n# Make a new waypoint and print it out: \"Catacombs\", 41.70505, -121.51521\nwaypoint = Waypoint(\"Catacombs\", 41.70505, -121.51521)\n# Without changing the following line, how can you make it print into something",
        "detail": "CS35_IntroPython_GP.day3.intro.15_classes",
        "documentation": {}
    },
    {
        "label": "waypoint",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.15_classes",
        "description": "CS35_IntroPython_GP.day3.intro.15_classes",
        "peekOfCode": "waypoint = Waypoint(\"Catacombs\", 41.70505, -121.51521)\n# Without changing the following line, how can you make it print into something\n# more human-readable? Hint: Look up the `object.__str__` method\nprint(waypoint)\n# Make a new geocache \"Newberry Views\", diff 1.5, size 2, 44.052137, -121.41556\ngeocache = Geocache(\"Newberry Views\", 1.5, 2, 44.052137, -121.41556)\n# Print it--also make this print more nicely\nprint(geocache)",
        "detail": "CS35_IntroPython_GP.day3.intro.15_classes",
        "documentation": {}
    },
    {
        "label": "geocache",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.intro.15_classes",
        "description": "CS35_IntroPython_GP.day3.intro.15_classes",
        "peekOfCode": "geocache = Geocache(\"Newberry Views\", 1.5, 2, 44.052137, -121.41556)\n# Print it--also make this print more nicely\nprint(geocache)",
        "detail": "CS35_IntroPython_GP.day3.intro.15_classes",
        "documentation": {}
    },
    {
        "label": "Vec2",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day3.00_classes",
        "description": "CS35_IntroPython_GP.day3.00_classes",
        "peekOfCode": "class Vec2:\n    def __init__(self, x, y): \n        self.x = x\n        self.y = y\n    def __my_thing__(self, name):\n        print(f\"My name is {name}: ({self.x}, {self.y})\")\n    def call_my_thing(self, name):\n        self.__my_thing__(name)\n# l = []\n# l.__add__()",
        "detail": "CS35_IntroPython_GP.day3.00_classes",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.00_classes",
        "description": "CS35_IntroPython_GP.day3.00_classes",
        "peekOfCode": "v = Vec2(12, 23)\nv.call_my_thing(\"Bob\")\nv.__my_thing__(\"Dave\")",
        "detail": "CS35_IntroPython_GP.day3.00_classes",
        "documentation": {}
    },
    {
        "label": "my_store",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.01_my_shop",
        "description": "CS35_IntroPython_GP.day3.01_my_shop",
        "peekOfCode": "my_store = Store(\"Bobs Emporium\", [cats[\"legs\"], cats[\"fruit\"], cats[\"special\"], cats[\"bats\"]])\nprint(my_store)\n# print(repr(my_store))\nselection = 0\nwhile selection != len(my_store.categories) + 1:\n    selection = input(\"Please select the number of a department. \")\n    try:\n        selection = int(selection)\n        if selection == len(my_store.categories) + 1:\n            print(f\"Thanks for shopping at {my_store.name}\")",
        "detail": "CS35_IntroPython_GP.day3.01_my_shop",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.01_my_shop",
        "description": "CS35_IntroPython_GP.day3.01_my_shop",
        "peekOfCode": "selection = 0\nwhile selection != len(my_store.categories) + 1:\n    selection = input(\"Please select the number of a department. \")\n    try:\n        selection = int(selection)\n        if selection == len(my_store.categories) + 1:\n            print(f\"Thanks for shopping at {my_store.name}\")\n        elif selection > 0 and selection <= len(my_store.categories):\n            print(my_store.categories[selection - 1])\n        else:",
        "detail": "CS35_IntroPython_GP.day3.01_my_shop",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day3.category",
        "description": "CS35_IntroPython_GP.day3.category",
        "peekOfCode": "class Category:\n    def __init__(self, name):  #, products):\n        self.name = name\n        # self.products = products\n    def __str__(self):\n        return f\"No Products in {self.name}\"",
        "detail": "CS35_IntroPython_GP.day3.category",
        "documentation": {}
    },
    {
        "label": "cats",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day3.data_for_store",
        "description": "CS35_IntroPython_GP.day3.data_for_store",
        "peekOfCode": "cats = {\n    \"legs\": Category(\"False Legs\"),\n    \"bats\": Category(\"Baseball Bats\"),\n    \"fruit\": Category(\"Fruit\"),\n    \"special\": Category(\"Bobs Special Place\")\n}",
        "detail": "CS35_IntroPython_GP.day3.data_for_store",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day3.store",
        "description": "CS35_IntroPython_GP.day3.store",
        "peekOfCode": "class Store:\n    def __init__(self, name, categories):\n        # attributes\n        self.name = name\n        self.categories = categories\n    def __str__(self):\n        ret = f\"{self.name}\\n\"\n        for i, c in enumerate(self.categories):\n            ret += \"    \" + str(i + 1) + \": \" + c.name + \"\\n\"\n        ret += \"    \" + str(i + 2) + \": Exit\"",
        "detail": "CS35_IntroPython_GP.day3.store",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.00_composition",
        "description": "CS35_IntroPython_GP.day4.00_composition",
        "peekOfCode": "class Entity:\n    def __init__(self, id, x, y):\n        self.id = id\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"{self.id}: position({self.x}, {self.y})\"\nclass Mob(Entity):\n    def __init__(self, id, x, y, speed):\n        super().__init__(id, x, y)",
        "detail": "CS35_IntroPython_GP.day4.00_composition",
        "documentation": {}
    },
    {
        "label": "Mob",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.00_composition",
        "description": "CS35_IntroPython_GP.day4.00_composition",
        "peekOfCode": "class Mob(Entity):\n    def __init__(self, id, x, y, speed):\n        super().__init__(id, x, y)\n        self.speed = speed\n    def move(self, dir):\n        if dir == \"n\":\n            self.y -= self.speed\n        elif dir == \"s\":\n            self.y += self.speed\n        elif dir == \"w\":",
        "detail": "CS35_IntroPython_GP.day4.00_composition",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.00_composition",
        "description": "CS35_IntroPython_GP.day4.00_composition",
        "peekOfCode": "class Room:\n    def __init__(self, name, description):\n        self.name = name # has_a name (String)\n        self.description = description # has_a description (String)\n        self.contents = []  # make a space to put items of some sort has_a ?\nclass Item:\n    def __init__(self):  # what things could this have / properties ?\n        pass\n# Weapon is_a Item\nclass Weapon(Item):",
        "detail": "CS35_IntroPython_GP.day4.00_composition",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.00_composition",
        "description": "CS35_IntroPython_GP.day4.00_composition",
        "peekOfCode": "class Item:\n    def __init__(self):  # what things could this have / properties ?\n        pass\n# Weapon is_a Item\nclass Weapon(Item):\n    def __init__(self):  # what properties would we use here?\n        pass\n# Treasure is_a Item\nclass Treasure(Item):\n    def __init__(self):  # what properties could you have in this init function?",
        "detail": "CS35_IntroPython_GP.day4.00_composition",
        "documentation": {}
    },
    {
        "label": "Weapon",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.00_composition",
        "description": "CS35_IntroPython_GP.day4.00_composition",
        "peekOfCode": "class Weapon(Item):\n    def __init__(self):  # what properties would we use here?\n        pass\n# Treasure is_a Item\nclass Treasure(Item):\n    def __init__(self):  # what properties could you have in this init function?\n        pass\n# player\nclass Player:\n    def __init__(self, starting_room):",
        "detail": "CS35_IntroPython_GP.day4.00_composition",
        "documentation": {}
    },
    {
        "label": "Treasure",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.00_composition",
        "description": "CS35_IntroPython_GP.day4.00_composition",
        "peekOfCode": "class Treasure(Item):\n    def __init__(self):  # what properties could you have in this init function?\n        pass\n# player\nclass Player:\n    def __init__(self, starting_room):\n        self.current_room = starting_room\n        self.inventory = []  # has_a relationship (Items?)\n        self.gold = 0 # has_a number\n    def move(self, direction):",
        "detail": "CS35_IntroPython_GP.day4.00_composition",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.00_composition",
        "description": "CS35_IntroPython_GP.day4.00_composition",
        "peekOfCode": "class Player:\n    def __init__(self, starting_room):\n        self.current_room = starting_room\n        self.inventory = []  # has_a relationship (Items?)\n        self.gold = 0 # has_a number\n    def move(self, direction):\n        # check if the current room has direction_to\n            # return the current room at the direction to\n        # otherwise\n            # Tell the player they can not go that way",
        "detail": "CS35_IntroPython_GP.day4.00_composition",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day4.00_composition",
        "description": "CS35_IntroPython_GP.day4.00_composition",
        "peekOfCode": "e = Entity(0, 10, 10)\nm = Mob(1, 10, 20, 2)\n# adventure\nclass Room:\n    def __init__(self, name, description):\n        self.name = name # has_a name (String)\n        self.description = description # has_a description (String)\n        self.contents = []  # make a space to put items of some sort has_a ?\nclass Item:\n    def __init__(self):  # what things could this have / properties ?",
        "detail": "CS35_IntroPython_GP.day4.00_composition",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day4.00_composition",
        "description": "CS35_IntroPython_GP.day4.00_composition",
        "peekOfCode": "m = Mob(1, 10, 20, 2)\n# adventure\nclass Room:\n    def __init__(self, name, description):\n        self.name = name # has_a name (String)\n        self.description = description # has_a description (String)\n        self.contents = []  # make a space to put items of some sort has_a ?\nclass Item:\n    def __init__(self):  # what things could this have / properties ?\n        pass",
        "detail": "CS35_IntroPython_GP.day4.00_composition",
        "documentation": {}
    },
    {
        "label": "my_store",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day4.01_my_shop",
        "description": "CS35_IntroPython_GP.day4.01_my_shop",
        "peekOfCode": "my_store = Store(\"Bobs Emporium\", [cats[\"legs\"], cats[\"fruit\"], cats[\"special\"], cats[\"bats\"]])\nprint(my_store)\n# print(repr(my_store))\nselection = 0\nwhile selection != len(my_store.categories) + 1:\n    selection = input(\"Please select the number of a department. \")\n    try:\n        selection = int(selection)\n        if selection == len(my_store.categories) + 1:\n            print(f\"Thanks for shopping at {my_store.name}\")",
        "detail": "CS35_IntroPython_GP.day4.01_my_shop",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day4.01_my_shop",
        "description": "CS35_IntroPython_GP.day4.01_my_shop",
        "peekOfCode": "selection = 0\nwhile selection != len(my_store.categories) + 1:\n    selection = input(\"Please select the number of a department. \")\n    try:\n        selection = int(selection)\n        if selection == len(my_store.categories) + 1:\n            print(f\"Thanks for shopping at {my_store.name}\")\n        elif selection > 0 and selection <= len(my_store.categories):\n            print(my_store.categories[selection - 1])\n        else:",
        "detail": "CS35_IntroPython_GP.day4.01_my_shop",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.category",
        "description": "CS35_IntroPython_GP.day4.category",
        "peekOfCode": "class Category:\n    def __init__(self, name, products):\n        self.name = name\n        self.products = products\n    def __str__(self):\n        return f\"No Products in {self.name}\"",
        "detail": "CS35_IntroPython_GP.day4.category",
        "documentation": {}
    },
    {
        "label": "Clothing",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.clothing",
        "description": "CS35_IntroPython_GP.day4.clothing",
        "peekOfCode": "class Clothing(Product):\n    def __init__(self, name, price, color, size):\n        super().__init__(name, price)\n        self.color = color\n        self.size = size\n    def __str__(self):\n        return f\"{super().__str__()} comes in {self.color}, {self.size}\"",
        "detail": "CS35_IntroPython_GP.day4.clothing",
        "documentation": {}
    },
    {
        "label": "cats",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day4.data_for_store",
        "description": "CS35_IntroPython_GP.day4.data_for_store",
        "peekOfCode": "cats = {\n    \"legs\": Category(\"False Legs\", [Clothing(\"Hat\", 23, \"Red\", 5), Clothing(\"Shirt\", 23, \"Green\", 5)]),\n    \"bats\": Category(\"Baseball Bats\", [Equipment(\"Long Bat\", 450, \"Metal\", 10000)]),\n    \"fruit\": Category(\"Fruit\", []),\n    \"special\": Category(\"Bobs Special Place\", [])\n}",
        "detail": "CS35_IntroPython_GP.day4.data_for_store",
        "documentation": {}
    },
    {
        "label": "Equipment",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.equipment",
        "description": "CS35_IntroPython_GP.day4.equipment",
        "peekOfCode": "class Equipment(Product):\n    def __init__(self, name, price, style, weight):\n        super().__init__(name, price)\n        self.style = style\n        self.weight = weight",
        "detail": "CS35_IntroPython_GP.day4.equipment",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.product",
        "description": "CS35_IntroPython_GP.day4.product",
        "peekOfCode": "class Product: # like an item\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    def __str__(self):\n        return f\"{self.name} \\t ${self.price}\"",
        "detail": "CS35_IntroPython_GP.day4.product",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.store",
        "description": "CS35_IntroPython_GP.day4.store",
        "peekOfCode": "class Store:\n    def __init__(self, name, categories):\n        # attributes\n        self.name = name\n        self.categories = categories\n    def __str__(self):\n        ret = f\"{self.name}\\n\"\n        for i, c in enumerate(self.categories):\n            ret += \"    \" + str(i + 1) + \": \" + c.name + \"\\n\"\n        ret += \"    \" + str(i + 2) + \": Exit\"",
        "detail": "CS35_IntroPython_GP.day4.store",
        "documentation": {}
    },
    {
        "label": "Thing",
        "kind": 6,
        "importPath": "CS35_IntroPython_GP.day4.things",
        "description": "CS35_IntroPython_GP.day4.things",
        "peekOfCode": "class Thing:\n    def __init__(self, x, y, name):\n        self.x = x\n        self.y = y\n        self.name = name\nt = Thing(12, 34, \"dave\")\nprint(vars(t)) # {'x': 12, 'y': 34, 'name': 'dave'}",
        "detail": "CS35_IntroPython_GP.day4.things",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "CS35_IntroPython_GP.day4.things",
        "description": "CS35_IntroPython_GP.day4.things",
        "peekOfCode": "t = Thing(12, 34, \"dave\")\nprint(vars(t)) # {'x': 12, 'y': 34, 'name': 'dave'}",
        "detail": "CS35_IntroPython_GP.day4.things",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.asgi",
        "description": "cs41long_django.cs41lorg.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "cs41long_django.cs41lorg.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\n# SECRET_KEY = 'o0vsv6!%3t7yy$x#(53^&r+n9cclwcprricc!w(cv%=0x+(c-p'\nSECRET_KEY = config('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', cast=bool)\nALLOWED_HOSTS = []\n# Application definition",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "SECRET_KEY = config('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', cast=bool)\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'rest_framework',\n    'rest_framework.authtoken',\n    'notes',\n    'django.contrib.admin',",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "DEBUG = config('DEBUG', cast=bool)\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'rest_framework',\n    'rest_framework.authtoken',\n    'notes',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'rest_framework',\n    'rest_framework.authtoken',\n    'notes',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'rest_framework',\n    'rest_framework.authtoken',\n    'notes',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication'\n    )\n}",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'cs41lorg.urls'",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "ROOT_URLCONF = 'cs41lorg.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "WSGI_APPLICATION = 'cs41lorg.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.settings",
        "description": "cs41long_django.cs41lorg.settings",
        "peekOfCode": "STATIC_URL = '/static/'",
        "detail": "cs41long_django.cs41lorg.settings",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.urls",
        "description": "cs41long_django.cs41lorg.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register(r'notes', PersonalNoteViewSet)\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include(router.urls)),\n    re_path(r'^api-token-auth/', views.obtain_auth_token)\n]",
        "detail": "cs41long_django.cs41lorg.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.urls",
        "description": "cs41long_django.cs41lorg.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include(router.urls)),\n    re_path(r'^api-token-auth/', views.obtain_auth_token)\n]",
        "detail": "cs41long_django.cs41lorg.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "cs41long_django.cs41lorg.wsgi",
        "description": "cs41long_django.cs41lorg.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "cs41long_django.cs41lorg.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cs41long_django.notes.migrations.0001_initial",
        "description": "cs41long_django.notes.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Note',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('title', models.CharField(max_length=200)),",
        "detail": "cs41long_django.notes.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cs41long_django.notes.migrations.0002_auto_20210330_1736",
        "description": "cs41long_django.notes.migrations.0002_auto_20210330_1736",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notes', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='note',\n            name='created_at',\n            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),\n            preserve_default=False,",
        "detail": "cs41long_django.notes.migrations.0002_auto_20210330_1736",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cs41long_django.notes.migrations.0003_personalnote",
        "description": "cs41long_django.notes.migrations.0003_personalnote",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('notes', '0002_auto_20210330_1736'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PersonalNote',\n            fields=[\n                ('note_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notes.note')),",
        "detail": "cs41long_django.notes.migrations.0003_personalnote",
        "documentation": {}
    },
    {
        "label": "NoteAdmin",
        "kind": 6,
        "importPath": "cs41long_django.notes.admin",
        "description": "cs41long_django.notes.admin",
        "peekOfCode": "class NoteAdmin(admin.ModelAdmin):\n    readonly_fields=('created_at', 'last_modified')\n# Register your models here.\nadmin.site.register(Note, NoteAdmin)\nadmin.site.register(PersonalNote)",
        "detail": "cs41long_django.notes.admin",
        "documentation": {}
    },
    {
        "label": "PersonalNoteSerializer",
        "kind": 6,
        "importPath": "cs41long_django.notes.api",
        "description": "cs41long_django.notes.api",
        "peekOfCode": "class PersonalNoteSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = PersonalNote\n        fields = ('title', 'content')\n    def create(self, validated_data):\n        user = self.context['request'].user\n        note = PersonalNote.objects.create(user=user, **validated_data)\n        return note\nclass PersonalNoteViewSet(viewsets.ModelViewSet):\n    serializer_class = PersonalNoteSerializer",
        "detail": "cs41long_django.notes.api",
        "documentation": {}
    },
    {
        "label": "PersonalNoteViewSet",
        "kind": 6,
        "importPath": "cs41long_django.notes.api",
        "description": "cs41long_django.notes.api",
        "peekOfCode": "class PersonalNoteViewSet(viewsets.ModelViewSet):\n    serializer_class = PersonalNoteSerializer\n    queryset = PersonalNote.objects.none()\n    def get_queryset(self):\n        user = self.request.user\n        if user.is_anonymous:\n            PersonalNote.objects.none()\n        else:\n            return PersonalNote.objects.filter(user=user)",
        "detail": "cs41long_django.notes.api",
        "documentation": {}
    },
    {
        "label": "NotesConfig",
        "kind": 6,
        "importPath": "cs41long_django.notes.apps",
        "description": "cs41long_django.notes.apps",
        "peekOfCode": "class NotesConfig(AppConfig):\n    name = 'notes'",
        "detail": "cs41long_django.notes.apps",
        "documentation": {}
    },
    {
        "label": "Note",
        "kind": 6,
        "importPath": "cs41long_django.notes.models",
        "description": "cs41long_django.notes.models",
        "peekOfCode": "class Note(models.Model): # Table in a database\n    # each of the variables are columns in the table\n    id = models.UUIDField(primary_key=True, default=uuid4, editable=False)\n    title = models.CharField(max_length=200)\n    content = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    last_modified = models.DateTimeField(auto_now=True)\nclass PersonalNote(Note):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)",
        "detail": "cs41long_django.notes.models",
        "documentation": {}
    },
    {
        "label": "PersonalNote",
        "kind": 6,
        "importPath": "cs41long_django.notes.models",
        "description": "cs41long_django.notes.models",
        "peekOfCode": "class PersonalNote(Note):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)",
        "detail": "cs41long_django.notes.models",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "cs41long_django.manage",
        "description": "cs41long_django.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cs41lorg.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "cs41long_django.manage",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cs41long_lambda_mud_server.adventure.migrations.0001_initial",
        "description": "cs41long_lambda_mud_server.adventure.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Room',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "cs41long_lambda_mud_server.adventure.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cs41long_lambda_mud_server.adventure.migrations.0002_room_img_url",
        "description": "cs41long_lambda_mud_server.adventure.migrations.0002_room_img_url",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adventure', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='room',\n            name='img_url',\n            field=models.CharField(default='http://https://i.stack.imgur.com/y9DpT.jpg', max_length=500),\n        ),",
        "detail": "cs41long_lambda_mud_server.adventure.migrations.0002_room_img_url",
        "documentation": {}
    },
    {
        "label": "initialize",
        "kind": 2,
        "importPath": "cs41long_lambda_mud_server.adventure.api",
        "description": "cs41long_lambda_mud_server.adventure.api",
        "peekOfCode": "def initialize(request):\n    user = request.user\n    player = user.player\n    player_id = player.id\n    uuid = player.uuid\n    room = player.room()\n    players = room.playerNames(player_id)\n    return JsonResponse({'uuid': uuid, 'name':player.user.username, 'title':room.title, 'description':room.description, 'img_url':room.img_url, 'players':players}, safe=True)\n# @csrf_exempt\n@api_view([\"POST\"])",
        "detail": "cs41long_lambda_mud_server.adventure.api",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "cs41long_lambda_mud_server.adventure.api",
        "description": "cs41long_lambda_mud_server.adventure.api",
        "peekOfCode": "def move(request):\n    dirs={\"n\": \"north\", \"s\": \"south\", \"e\": \"east\", \"w\": \"west\"}\n    reverse_dirs = {\"n\": \"south\", \"s\": \"north\", \"e\": \"west\", \"w\": \"east\"}\n    player = request.user.player\n    player_id = player.id\n    player_uuid = player.uuid\n    data = json.loads(request.body)\n    direction = data['direction']\n    room = player.room()\n    nextRoomID = None",
        "detail": "cs41long_lambda_mud_server.adventure.api",
        "documentation": {}
    },
    {
        "label": "say",
        "kind": 2,
        "importPath": "cs41long_lambda_mud_server.adventure.api",
        "description": "cs41long_lambda_mud_server.adventure.api",
        "peekOfCode": "def say(request):\n    # IMPLEMENT\n    return JsonResponse({'error':\"Not yet implemented\"}, safe=True, status=500)",
        "detail": "cs41long_lambda_mud_server.adventure.api",
        "documentation": {}
    },
    {
        "label": "pusher",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adventure.api",
        "description": "cs41long_lambda_mud_server.adventure.api",
        "peekOfCode": "pusher = Pusher(app_id=config('PUSHER_APP_ID'), key=config('PUSHER_KEY'), secret=config('PUSHER_SECRET'), cluster=config('PUSHER_CLUSTER'))\n@csrf_exempt\n@api_view([\"GET\"])\ndef initialize(request):\n    user = request.user\n    player = user.player\n    player_id = player.id\n    uuid = player.uuid\n    room = player.room()\n    players = room.playerNames(player_id)",
        "detail": "cs41long_lambda_mud_server.adventure.api",
        "documentation": {}
    },
    {
        "label": "AdventureConfig",
        "kind": 6,
        "importPath": "cs41long_lambda_mud_server.adventure.apps",
        "description": "cs41long_lambda_mud_server.adventure.apps",
        "peekOfCode": "class AdventureConfig(AppConfig):\n    name = 'adventure'",
        "detail": "cs41long_lambda_mud_server.adventure.apps",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "cs41long_lambda_mud_server.adventure.models",
        "description": "cs41long_lambda_mud_server.adventure.models",
        "peekOfCode": "class Room(models.Model):\n    title = models.CharField(max_length=50, default=\"DEFAULT TITLE\")\n    description = models.CharField(max_length=500, default=\"DEFAULT DESCRIPTION\")\n    img_url = models.CharField(max_length=500, default=\"http://https://i.stack.imgur.com/y9DpT.jpg\")\n    n_to = models.IntegerField(default=0)\n    s_to = models.IntegerField(default=0)\n    e_to = models.IntegerField(default=0)\n    w_to = models.IntegerField(default=0)\n    def connectRooms(self, destinationRoom, direction):\n        destinationRoomID = destinationRoom.id",
        "detail": "cs41long_lambda_mud_server.adventure.models",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "cs41long_lambda_mud_server.adventure.models",
        "description": "cs41long_lambda_mud_server.adventure.models",
        "peekOfCode": "class Player(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    currentRoom = models.IntegerField(default=0)\n    uuid = models.UUIDField(default=uuid.uuid4, unique=True)\n    def initialize(self):\n        if self.currentRoom == 0:\n            self.currentRoom = Room.objects.first().id\n            self.save()\n    def room(self):\n        try:",
        "detail": "cs41long_lambda_mud_server.adventure.models",
        "documentation": {}
    },
    {
        "label": "create_user_player",
        "kind": 2,
        "importPath": "cs41long_lambda_mud_server.adventure.models",
        "description": "cs41long_lambda_mud_server.adventure.models",
        "peekOfCode": "def create_user_player(sender, instance, created, **kwargs):\n    if created:\n        Player.objects.create(user=instance)\n        Token.objects.create(user=instance)\n@receiver(post_save, sender=User)\ndef save_user_player(sender, instance, **kwargs):\n    instance.player.save()",
        "detail": "cs41long_lambda_mud_server.adventure.models",
        "documentation": {}
    },
    {
        "label": "save_user_player",
        "kind": 2,
        "importPath": "cs41long_lambda_mud_server.adventure.models",
        "description": "cs41long_lambda_mud_server.adventure.models",
        "peekOfCode": "def save_user_player(sender, instance, **kwargs):\n    instance.player.save()",
        "detail": "cs41long_lambda_mud_server.adventure.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adventure.urls",
        "description": "cs41long_lambda_mud_server.adventure.urls",
        "peekOfCode": "urlpatterns = [\n    url('init', api.initialize),\n    url('move', api.move),\n    url('say', api.say),\n]",
        "detail": "cs41long_lambda_mud_server.adventure.urls",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', cast=bool)\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "SECRET_KEY = config('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', cast=bool)\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "DEBUG = config('DEBUG', cast=bool)\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'adventure',",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'adventure',\n    'api',\n    'corsheaders',",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nSITE_ID = 1\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "SITE_ID = 1\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'corsheaders.middleware.CorsMiddleware',",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "ROOT_URLCONF = 'adv_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "WSGI_APPLICATION = 'adv_project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/2.1/ref/settings/#databases\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.sqlite3',\n#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n#     }\n# }\n# DATABASES = {}",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\ndb_from_env = dj_database_url.config(conn_max_age=500)\n# DATABASES['default'].update(db_from_env)\n# DATABASES = {\n#     'default': {",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "db_from_env",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "db_from_env = dj_database_url.config(conn_max_age=500)\n# DATABASES['default'].update(db_from_env)\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.sqlite3',\n#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n#     }\n# }\n# DATABASES['default'] = dj_database_url.config(default=config('DATABASE_URL'))\n# Password validation",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    # 'DEFAULT_PERMISSION_CLASSES': [\n    #     'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',\n    # ],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n    ),\n}",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\nimport django_heroku\ndjango_heroku.settings(locals())",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\nimport django_heroku\ndjango_heroku.settings(locals())",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\nimport django_heroku\ndjango_heroku.settings(locals())",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\nimport django_heroku\ndjango_heroku.settings(locals())",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\nimport django_heroku\ndjango_heroku.settings(locals())",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.settings",
        "description": "cs41long_lambda_mud_server.adv_project.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nimport django_heroku\ndjango_heroku.settings(locals())",
        "detail": "cs41long_lambda_mud_server.adv_project.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.urls",
        "description": "cs41long_lambda_mud_server.adv_project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n    path('api/adv/', include('adventure.urls')),\n]",
        "detail": "cs41long_lambda_mud_server.adv_project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.adv_project.wsgi",
        "description": "cs41long_lambda_mud_server.adv_project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "cs41long_lambda_mud_server.adv_project.wsgi",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "cs41long_lambda_mud_server.api.apps",
        "description": "cs41long_lambda_mud_server.api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    name = 'api'",
        "detail": "cs41long_lambda_mud_server.api.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.api.urls",
        "description": "cs41long_lambda_mud_server.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include('rest_auth.urls')),\n    path('registration/', include('rest_auth.registration.urls')),\n]",
        "detail": "cs41long_lambda_mud_server.api.urls",
        "documentation": {}
    },
    {
        "label": "r_outside",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.util.create_world",
        "description": "cs41long_lambda_mud_server.util.create_world",
        "peekOfCode": "r_outside = Room(title=\"Outside Cave Entrance\", description=\"North of you, the cave mount beckons\")\nr_foyer = Room(title=\"Foyer\", description=\"\"\"Dim light filters in from the south. Dusty passages run north and east.\"\"\")\nr_overlook = Room(title=\"Grand Overlook\", description=\"\"\"A steep cliff appears before you, falling into the darkness. Ahead to the north, a light flickers in\nthe distance, but there is no way across the chasm.\"\"\")\nr_narrow = Room(title=\"Narrow Passage\", description=\"\"\"The narrow passage bends here from west to north. The smell of gold permeates the air.\"\"\")\nr_treasure = Room(title=\"Treasure Chamber\", description=\"\"\"You've found the long-lost treasure chamber! Sadly, it has already been completely emptied by\nearlier adventurers. The only exit is to the south.\"\"\")\nr_outside.save()\nr_foyer.save()\nr_overlook.save()",
        "detail": "cs41long_lambda_mud_server.util.create_world",
        "documentation": {}
    },
    {
        "label": "r_foyer",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.util.create_world",
        "description": "cs41long_lambda_mud_server.util.create_world",
        "peekOfCode": "r_foyer = Room(title=\"Foyer\", description=\"\"\"Dim light filters in from the south. Dusty passages run north and east.\"\"\")\nr_overlook = Room(title=\"Grand Overlook\", description=\"\"\"A steep cliff appears before you, falling into the darkness. Ahead to the north, a light flickers in\nthe distance, but there is no way across the chasm.\"\"\")\nr_narrow = Room(title=\"Narrow Passage\", description=\"\"\"The narrow passage bends here from west to north. The smell of gold permeates the air.\"\"\")\nr_treasure = Room(title=\"Treasure Chamber\", description=\"\"\"You've found the long-lost treasure chamber! Sadly, it has already been completely emptied by\nearlier adventurers. The only exit is to the south.\"\"\")\nr_outside.save()\nr_foyer.save()\nr_overlook.save()\nr_narrow.save()",
        "detail": "cs41long_lambda_mud_server.util.create_world",
        "documentation": {}
    },
    {
        "label": "r_overlook",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.util.create_world",
        "description": "cs41long_lambda_mud_server.util.create_world",
        "peekOfCode": "r_overlook = Room(title=\"Grand Overlook\", description=\"\"\"A steep cliff appears before you, falling into the darkness. Ahead to the north, a light flickers in\nthe distance, but there is no way across the chasm.\"\"\")\nr_narrow = Room(title=\"Narrow Passage\", description=\"\"\"The narrow passage bends here from west to north. The smell of gold permeates the air.\"\"\")\nr_treasure = Room(title=\"Treasure Chamber\", description=\"\"\"You've found the long-lost treasure chamber! Sadly, it has already been completely emptied by\nearlier adventurers. The only exit is to the south.\"\"\")\nr_outside.save()\nr_foyer.save()\nr_overlook.save()\nr_narrow.save()\nr_treasure.save()",
        "detail": "cs41long_lambda_mud_server.util.create_world",
        "documentation": {}
    },
    {
        "label": "r_narrow",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.util.create_world",
        "description": "cs41long_lambda_mud_server.util.create_world",
        "peekOfCode": "r_narrow = Room(title=\"Narrow Passage\", description=\"\"\"The narrow passage bends here from west to north. The smell of gold permeates the air.\"\"\")\nr_treasure = Room(title=\"Treasure Chamber\", description=\"\"\"You've found the long-lost treasure chamber! Sadly, it has already been completely emptied by\nearlier adventurers. The only exit is to the south.\"\"\")\nr_outside.save()\nr_foyer.save()\nr_overlook.save()\nr_narrow.save()\nr_treasure.save()\n# Link rooms together\nr_outside.connectRooms(r_foyer, \"n\")",
        "detail": "cs41long_lambda_mud_server.util.create_world",
        "documentation": {}
    },
    {
        "label": "r_treasure",
        "kind": 5,
        "importPath": "cs41long_lambda_mud_server.util.create_world",
        "description": "cs41long_lambda_mud_server.util.create_world",
        "peekOfCode": "r_treasure = Room(title=\"Treasure Chamber\", description=\"\"\"You've found the long-lost treasure chamber! Sadly, it has already been completely emptied by\nearlier adventurers. The only exit is to the south.\"\"\")\nr_outside.save()\nr_foyer.save()\nr_overlook.save()\nr_narrow.save()\nr_treasure.save()\n# Link rooms together\nr_outside.connectRooms(r_foyer, \"n\")\nr_foyer.connectRooms(r_outside, \"s\")",
        "detail": "cs41long_lambda_mud_server.util.create_world",
        "documentation": {}
    },
    {
        "label": "CPU",
        "kind": 6,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "class CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.pc = 0\n        self.fl = 0b00000000\n        self.ie = 1\n        self.reg = [0] * 8\n        self.ram = [0] * 256\n        self.reg[7] = 0xf4",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "LDI = 0b10000010\nLD   = 0b10000011\nPRN = 0b01000111\nPRA  = 0b01001000\nHLT = 0b00000001\nPOP  = 0b01000110\nPUSH = 0b01000101\nADD  = 0b10100000\nSUB  = 0b10100001\nCALL = 0b01010000",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "PRN = 0b01000111\nPRA  = 0b01001000\nHLT = 0b00000001\nPOP  = 0b01000110\nPUSH = 0b01000101\nADD  = 0b10100000\nSUB  = 0b10100001\nCALL = 0b01010000\nRET = 0b00010001\nADDI = 0b10101111",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "HLT",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "HLT = 0b00000001\nPOP  = 0b01000110\nPUSH = 0b01000101\nADD  = 0b10100000\nSUB  = 0b10100001\nCALL = 0b01010000\nRET = 0b00010001\nADDI = 0b10101111\nMUL  = 0b10100010\nDIV  = 0b10100011",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "PUSH = 0b01000101\nADD  = 0b10100000\nSUB  = 0b10100001\nCALL = 0b01010000\nRET = 0b00010001\nADDI = 0b10101111\nMUL  = 0b10100010\nDIV  = 0b10100011\nMOD = 0b10100100\nINC = 0b01100101",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "CALL",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "CALL = 0b01010000\nRET = 0b00010001\nADDI = 0b10101111\nMUL  = 0b10100010\nDIV  = 0b10100011\nMOD = 0b10100100\nINC = 0b01100101\nDEC = 0b01100110\nAND = 0b10101000\nNOT = 0b01101001",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "RET",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "RET = 0b00010001\nADDI = 0b10101111\nMUL  = 0b10100010\nDIV  = 0b10100011\nMOD = 0b10100100\nINC = 0b01100101\nDEC = 0b01100110\nAND = 0b10101000\nNOT = 0b01101001\nOR = 0b10101010",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "ADDI",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "ADDI = 0b10101111\nMUL  = 0b10100010\nDIV  = 0b10100011\nMOD = 0b10100100\nINC = 0b01100101\nDEC = 0b01100110\nAND = 0b10101000\nNOT = 0b01101001\nOR = 0b10101010\nXOR = 0b10101011",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "MOD",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "MOD = 0b10100100\nINC = 0b01100101\nDEC = 0b01100110\nAND = 0b10101000\nNOT = 0b01101001\nOR = 0b10101010\nXOR = 0b10101011\nSHL = 0b10101100\nSHR = 0b10101101\nCMP = 0b10100111",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "INC",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "INC = 0b01100101\nDEC = 0b01100110\nAND = 0b10101000\nNOT = 0b01101001\nOR = 0b10101010\nXOR = 0b10101011\nSHL = 0b10101100\nSHR = 0b10101101\nCMP = 0b10100111\nST   = 0b10000100",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "DEC",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "DEC = 0b01100110\nAND = 0b10101000\nNOT = 0b01101001\nOR = 0b10101010\nXOR = 0b10101011\nSHL = 0b10101100\nSHR = 0b10101101\nCMP = 0b10100111\nST   = 0b10000100\nIRET = 0b00010011",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "AND",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "AND = 0b10101000\nNOT = 0b01101001\nOR = 0b10101010\nXOR = 0b10101011\nSHL = 0b10101100\nSHR = 0b10101101\nCMP = 0b10100111\nST   = 0b10000100\nIRET = 0b00010011\nJEQ  = 0b01010101",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "NOT",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "NOT = 0b01101001\nOR = 0b10101010\nXOR = 0b10101011\nSHL = 0b10101100\nSHR = 0b10101101\nCMP = 0b10100111\nST   = 0b10000100\nIRET = 0b00010011\nJEQ  = 0b01010101\nJLE  = 0b01011001",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "OR",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "OR = 0b10101010\nXOR = 0b10101011\nSHL = 0b10101100\nSHR = 0b10101101\nCMP = 0b10100111\nST   = 0b10000100\nIRET = 0b00010011\nJEQ  = 0b01010101\nJLE  = 0b01011001\nJLT  = 0b01011000",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "XOR",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "XOR = 0b10101011\nSHL = 0b10101100\nSHR = 0b10101101\nCMP = 0b10100111\nST   = 0b10000100\nIRET = 0b00010011\nJEQ  = 0b01010101\nJLE  = 0b01011001\nJLT  = 0b01011000\nJMP  = 0b01010100",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "SHL",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "SHL = 0b10101100\nSHR = 0b10101101\nCMP = 0b10100111\nST   = 0b10000100\nIRET = 0b00010011\nJEQ  = 0b01010101\nJLE  = 0b01011001\nJLT  = 0b01011000\nJMP  = 0b01010100\nJGT  = 0b01010111",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "SHR",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "SHR = 0b10101101\nCMP = 0b10100111\nST   = 0b10000100\nIRET = 0b00010011\nJEQ  = 0b01010101\nJLE  = 0b01011001\nJLT  = 0b01011000\nJMP  = 0b01010100\nJGT  = 0b01010111\nJGE  = 0b01011010",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "CMP",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "CMP = 0b10100111\nST   = 0b10000100\nIRET = 0b00010011\nJEQ  = 0b01010101\nJLE  = 0b01011001\nJLT  = 0b01011000\nJMP  = 0b01010100\nJGT  = 0b01010111\nJGE  = 0b01011010\nJNE  = 0b01010110",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "IRET",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "IRET = 0b00010011\nJEQ  = 0b01010101\nJLE  = 0b01011001\nJLT  = 0b01011000\nJMP  = 0b01010100\nJGT  = 0b01010111\nJGE  = 0b01011010\nJNE  = 0b01010110\n# Reserved general-purpose register numbers:\nIM = 5",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "IM",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "IM = 5\nIS = 6\nSP = 7\n# CMP flags:\nFL_LT = 0b100\nFL_GT = 0b010\nFL_EQ = 0b001\n# IS flags\nIS_TIMER    = 0b00000001\nIS_KEYBOARD = 0b00000010",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "IS",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "IS = 6\nSP = 7\n# CMP flags:\nFL_LT = 0b100\nFL_GT = 0b010\nFL_EQ = 0b001\n# IS flags\nIS_TIMER    = 0b00000001\nIS_KEYBOARD = 0b00000010\nclass CPU:",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "SP = 7\n# CMP flags:\nFL_LT = 0b100\nFL_GT = 0b010\nFL_EQ = 0b001\n# IS flags\nIS_TIMER    = 0b00000001\nIS_KEYBOARD = 0b00000010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "FL_LT",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "FL_LT = 0b100\nFL_GT = 0b010\nFL_EQ = 0b001\n# IS flags\nIS_TIMER    = 0b00000001\nIS_KEYBOARD = 0b00000010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "FL_GT",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "FL_GT = 0b010\nFL_EQ = 0b001\n# IS flags\nIS_TIMER    = 0b00000001\nIS_KEYBOARD = 0b00000010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.pc = 0",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "FL_EQ",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "FL_EQ = 0b001\n# IS flags\nIS_TIMER    = 0b00000001\nIS_KEYBOARD = 0b00000010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.pc = 0\n        self.fl = 0b00000000",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "IS_KEYBOARD",
        "kind": 5,
        "importPath": "cs42long.Arch.cpu",
        "description": "cs42long.Arch.cpu",
        "peekOfCode": "IS_KEYBOARD = 0b00000010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.pc = 0\n        self.fl = 0b00000000\n        self.ie = 1\n        self.reg = [0] * 8\n        self.ram = [0] * 256",
        "detail": "cs42long.Arch.cpu",
        "documentation": {}
    },
    {
        "label": "cpu",
        "kind": 5,
        "importPath": "cs42long.Arch.ls8",
        "description": "cs42long.Arch.ls8",
        "peekOfCode": "cpu = CPU()\ncpu.load(sys.argv[1])\ncpu.run()",
        "detail": "cs42long.Arch.ls8",
        "documentation": {}
    },
    {
        "label": "CPU",
        "kind": 6,
        "importPath": "cs42long.Arch.scratchpad",
        "description": "cs42long.Arch.scratchpad",
        "peekOfCode": "class CPU:\n    def __init__(self):\n        self.registers = [0] * 8 # the actual registers inside the cpu\n        self.registers[7] = 0xf4\n        self.ram = [0] * 256\n        self.pc = 0\n        self.fl = 0\n    def run(self):\n        self.running = True\n        # fetch decode execute cycle",
        "detail": "cs42long.Arch.scratchpad",
        "documentation": {}
    },
    {
        "label": "alu",
        "kind": 2,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "def alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7\nreg = [0] * 8\nreg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB\nram[1] = PRINT_BOB",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "def load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()\n            if data == \"\":\n                continue\n            num = int(data)\n            ram[addr] = num\n            # self.ram_write(addr, num)",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "HALT = 1\nPRINT_BOB = 2\nPRINT_NUM = 3\nSTORE = 4\nPRINT_REG = 5\nPUSH = 6\nPOP = 7\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_BOB",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "PRINT_BOB = 2\nPRINT_NUM = 3\nSTORE = 4\nPRINT_REG = 5\nPUSH = 6\nPOP = 7\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "PRINT_NUM = 3\nSTORE = 4\nPRINT_REG = 5\nPUSH = 6\nPOP = 7\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "STORE",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "STORE = 4\nPRINT_REG = 5\nPUSH = 6\nPOP = 7\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "PRINT_REG = 5\nPUSH = 6\nPOP = 7\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "PUSH = 6\nPOP = 7\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7\nreg = [0] * 8",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "POP = 7\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7\nreg = [0] * 8\nreg[sp] = 0xf4",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "LDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7\nreg = [0] * 8\nreg[sp] = 0xf4\n# our program",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "HLT",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "HLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7\nreg = [0] * 8\nreg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram = [0] * 256\nsp = 7\nreg = [0] * 8\nreg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB\nram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "sp",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "sp = 7\nreg = [0] * 8\nreg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB\nram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "reg",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "reg = [0] * 8\nreg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB\nram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "reg[sp]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "reg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB\nram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[0]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[0] = PRINT_BOB\nram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[1]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[2]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[3]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[4]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[5]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[6]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[7]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[8]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[9]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[10]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[11]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = HALT",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[12]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = HALT\ndef load(filename):",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[13]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = HALT\ndef load(filename):\n    with open(filename) as filedata:",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[14]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = HALT\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[15]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = HALT\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[16]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = HALT\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[17]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = HALT\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()\n            if data == \"\":",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[18]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[18] = PRINT_REG\nram[19] = 0\nram[20] = HALT\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()\n            if data == \"\":\n                continue",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[19]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[19] = 0\nram[20] = HALT\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()\n            if data == \"\":\n                continue\n            num = int(data)",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[20]",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "ram[20] = HALT\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()\n            if data == \"\":\n                continue\n            num = int(data)\n            ram[addr] = num",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "pc = 0\nrunning = True\nwhile running:\n    inst = ram[pc]\n    if inst == HALT:\n        print(\"Halting CPU\")\n        running = False\n    elif inst == PRINT_BOB:\n        print(\"BOB\")\n        pc += 1",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "cs42long.Arch.simple",
        "description": "cs42long.Arch.simple",
        "peekOfCode": "running = True\nwhile running:\n    inst = ram[pc]\n    if inst == HALT:\n        print(\"Halting CPU\")\n        running = False\n    elif inst == PRINT_BOB:\n        print(\"BOB\")\n        pc += 1\n    elif inst == PRINT_NUM:",
        "detail": "cs42long.Arch.simple",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "cs42long.Graphs.islands",
        "description": "cs42long.Graphs.islands",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.storage = []\n    def push(self, value):\n        self.storage.append(value)\n    def pop(self):\n        return self.storage.pop()\n    def size(self):\n        return len(self.storage)\nclass Queue():",
        "detail": "cs42long.Graphs.islands",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "cs42long.Graphs.islands",
        "description": "cs42long.Graphs.islands",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, value):\n        self.storage.append(value)\n    def dequeue(self):\n        return self.storage.pop(0)\n    def size(self):\n        return len(self.storage)\n# helper functions",
        "detail": "cs42long.Graphs.islands",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  get_neighbors(row, col, islands):\n    # create an empty neighbors list\n    neighbors = []\n    # check north.\n    if row > 0 and islands[row - 1][col] == 1:\n        neighbors.append((row - 1, col))\n    # check south.\n    if row < len(islands) - 1 and islands[row + 1][col] == 1:\n        neighbors.append((row + 1, col))\n    # check east."
        },
        "kind": 2,
        "importPath": "cs42long.Graphs.islands",
        "description": "cs42long.Graphs.islands",
        "peekOfCode": "def  get_neighbors(row, col, islands):\n    # create an empty neighbors list\n    neighbors = []\n    # check north.\n    if row > 0 and islands[row - 1][col] == 1:\n        neighbors.append((row - 1, col))\n    # check south.\n    if row < len(islands) - 1 and islands[row + 1][col] == 1:\n        neighbors.append((row + 1, col))\n    # check east.",
        "detail": "cs42long.Graphs.islands",
        "documentation": {}
    },
    {
        "label": "dft",
        "kind": 2,
        "importPath": "cs42long.Graphs.islands",
        "description": "cs42long.Graphs.islands",
        "peekOfCode": "def dft(row, col, islands, visited):\n    # create a intermediate data structure\n    s = Stack()\n    # put the starting node on to our intermediate data structure.\n    s.push( (row, col) )\n    # while our intermediate data structure is not empty\n    while s.size() > 0:\n        # get the node from our intermediate data structure.\n        v = s.pop()\n        # extract the row and col from our node.",
        "detail": "cs42long.Graphs.islands",
        "documentation": {}
    },
    {
        "label": "bft",
        "kind": 2,
        "importPath": "cs42long.Graphs.islands",
        "description": "cs42long.Graphs.islands",
        "peekOfCode": "def bft(row, col, islands, visited):\n    # create a intermediate data structure\n    q = Queue()\n    # put the starting node on to our intermediate data structure.\n    q.enqueue( (row, col) )\n    # while our intermediate data structure is not empty\n    while q.size() > 0:\n        # get the node from our intermediate data structure.\n        v = q.dequeue()\n        # extract the row and col from our node.",
        "detail": "cs42long.Graphs.islands",
        "documentation": {}
    },
    {
        "label": "island_counter",
        "kind": 2,
        "importPath": "cs42long.Graphs.islands",
        "description": "cs42long.Graphs.islands",
        "peekOfCode": "def island_counter(islands):\n    # some visited list / dict / matrix.\n    visited = []\n    # create our visited graph.\n    for i in range(len(islands)):\n        visited.append([False] * len(islands[0]))\n    # set a counter to zero\n    counter = 0\n    # traverse the islands\n    for col in range(len(islands[0])):",
        "detail": "cs42long.Graphs.islands",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "cs42long.Graphs.islands",
        "description": "cs42long.Graphs.islands",
        "peekOfCode": "islands = [[0, 1, 0, 1, 0],\n           [1, 1, 0, 1, 1],\n           [0, 0, 1, 0, 0],\n           [1, 0, 1, 0, 0],\n           [1, 1, 0, 0, 0]]\nclass Stack():\n    def __init__(self):\n        self.storage = []\n    def push(self, value):\n        self.storage.append(value)",
        "detail": "cs42long.Graphs.islands",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "cs42long.Graphs.islands",
        "description": "cs42long.Graphs.islands",
        "peekOfCode": "islands = [[1, 0, 0, 1, 1, 0, 1, 1, 0, 1],\n           [0, 0, 1, 1, 0, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 1, 0, 1],\n           [0, 0, 1, 0, 0, 1, 0, 0, 1, 1],\n           [0, 0, 1, 1, 0, 1, 0, 1, 1, 0],\n           [0, 1, 0, 1, 1, 1, 0, 1, 0, 0],\n           [0, 0, 1, 0, 0, 1, 1, 0, 0, 0],\n           [1, 0, 1, 1, 0, 0, 0, 1, 1, 0],\n           [0, 1, 1, 0, 0, 0, 1, 1, 0, 0],\n           [0, 0, 1, 1, 0, 1, 0, 0, 1, 0]]",
        "detail": "cs42long.Graphs.islands",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "cs42long.Graphs.social",
        "description": "cs42long.Graphs.social",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, value):\n        self.storage.append(value)\n    def dequeue(self):\n        return self.storage.pop(0)\n    def size(self):\n        return len(self.storage)\nclass User:",
        "detail": "cs42long.Graphs.social",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "cs42long.Graphs.social",
        "description": "cs42long.Graphs.social",
        "peekOfCode": "class User:\n    def __init__(self, name):\n        self.name = name\nclass SocialGraph:\n    def __init__(self):\n        self.last_id = 0\n        self.users = {}\n        self.friendships = {}\n    def add_friendship(self, user_id, friend_id):\n        \"\"\"",
        "detail": "cs42long.Graphs.social",
        "documentation": {}
    },
    {
        "label": "SocialGraph",
        "kind": 6,
        "importPath": "cs42long.Graphs.social",
        "description": "cs42long.Graphs.social",
        "peekOfCode": "class SocialGraph:\n    def __init__(self):\n        self.last_id = 0\n        self.users = {}\n        self.friendships = {}\n    def add_friendship(self, user_id, friend_id):\n        \"\"\"\n        Creates a bi-directional friendship\n        \"\"\"\n        if user_id == friend_id:",
        "detail": "cs42long.Graphs.social",
        "documentation": {}
    },
    {
        "label": "room",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "room = {\n    'outside':  Room(\"Outside Cave Entrance\",\n                     \"North of you, the cave mount beckons\"),\n    'foyer':    Room(\"Foyer\", \"\"\"Dim light filters in from the south. Dusty\npassages run north and east.\"\"\"),\n    'overlook': Room(\"Grand Overlook\", \"\"\"A steep cliff appears before you, falling\ninto the darkness. Ahead to the north, a light flickers in\nthe distance, but there is no way across the chasm.\"\"\"),\n    'narrow':   Room(\"Narrow Passage\", \"\"\"The narrow passage bends here from west\nto north. The smell of gold permeates the air.\"\"\"),",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "room['outside'].n_to",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "room['outside'].n_to = room['foyer']\nroom['foyer'].s_to = room['outside']\nroom['foyer'].n_to = room['overlook']\nroom['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n# # helper functions\n# def try_a_direction(player, dir):",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "room['foyer'].s_to",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "room['foyer'].s_to = room['outside']\nroom['foyer'].n_to = room['overlook']\nroom['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n# # helper functions\n# def try_a_direction(player, dir):\n#     attribute = dir + '_to'",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "room['foyer'].n_to",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "room['foyer'].n_to = room['overlook']\nroom['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n# # helper functions\n# def try_a_direction(player, dir):\n#     attribute = dir + '_to'\n#     if hasattr(player.current_room, attribute):",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "room['foyer'].e_to",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "room['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n# # helper functions\n# def try_a_direction(player, dir):\n#     attribute = dir + '_to'\n#     if hasattr(player.current_room, attribute):\n#         return getattr(player.current_room, attribute)",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "room['overlook'].s_to",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "room['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n# # helper functions\n# def try_a_direction(player, dir):\n#     attribute = dir + '_to'\n#     if hasattr(player.current_room, attribute):\n#         return getattr(player.current_room, attribute)\n#     print(\"you may not go in that direction!\\n\")",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "room['narrow'].w_to",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "room['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n# # helper functions\n# def try_a_direction(player, dir):\n#     attribute = dir + '_to'\n#     if hasattr(player.current_room, attribute):\n#         return getattr(player.current_room, attribute)\n#     print(\"you may not go in that direction!\\n\")\n#     return player.current_room",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "room['narrow'].n_to",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "room['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n# # helper functions\n# def try_a_direction(player, dir):\n#     attribute = dir + '_to'\n#     if hasattr(player.current_room, attribute):\n#         return getattr(player.current_room, attribute)\n#     print(\"you may not go in that direction!\\n\")\n#     return player.current_room",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "room['treasure'].s_to",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "room['treasure'].s_to = room['narrow']\n# # helper functions\n# def try_a_direction(player, dir):\n#     attribute = dir + '_to'\n#     if hasattr(player.current_room, attribute):\n#         return getattr(player.current_room, attribute)\n#     print(\"you may not go in that direction!\\n\")\n#     return player.current_room",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "directions",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "directions = [\"n\", 's', 'e', 'w']\n# Make a new player object that is currently in the 'outside' room.\nplayer = Player(\"Dave\", room['outside'])\n# Write a loop that:\n#\n# * Prints the current room name\n# * Prints the current description (the textwrap module might be useful here).\n# * Waits for user input and decides what to do.\n#\n# If the user enters a cardinal direction, attempt to move to the room there.",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "player = Player(\"Dave\", room['outside'])\n# Write a loop that:\n#\n# * Prints the current room name\n# * Prints the current description (the textwrap module might be useful here).\n# * Waits for user input and decides what to do.\n#\n# If the user enters a cardinal direction, attempt to move to the room there.\n# Print an error message if the movement isn't allowed.\n#",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "playing",
        "kind": 5,
        "importPath": "cs42long.OOP.Adv.adv",
        "description": "cs42long.OOP.Adv.adv",
        "peekOfCode": "playing = True\nwhile playing:\n    # print surroundings\n    print(f\"Location: {player.current_room.name}\")\n    print(f\"{player.current_room.description}\\n\")\n    # prompt for commands\n    command = input(\"\\nCommand>\").strip().lower()\n    # single verb commands\n    if command in directions:\n        # player.current_room = try_a_direction(player, command)",
        "detail": "cs42long.OOP.Adv.adv",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "cs42long.OOP.Adv.player",
        "description": "cs42long.OOP.Adv.player",
        "peekOfCode": "class Player:\n    def __init__(self, name, current_room):\n        self.name = name\n        self.current_room = current_room\n    def move(self, direction):\n        attribute = direction + '_to'\n        if hasattr(self.current_room, attribute):\n            self.current_room = getattr(self.current_room, attribute)\n        else:\n            print(\"you may not go in that direction!\\n\")",
        "detail": "cs42long.OOP.Adv.player",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "cs42long.OOP.Adv.room",
        "description": "cs42long.OOP.Adv.room",
        "peekOfCode": "class Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description",
        "detail": "cs42long.OOP.Adv.room",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "cs42long.OOP.Category",
        "description": "cs42long.OOP.Category",
        "peekOfCode": "class Category:\n    def __init__(self, name): # , products):\n        self.name = name\n    def __str__(self):\n        return f\"No products available in {self.name}\"",
        "detail": "cs42long.OOP.Category",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "cs42long.OOP.scratchpad",
        "description": "cs42long.OOP.scratchpad",
        "peekOfCode": "class Entity:\n    def __init__(self, x, y):\n        \"\"\"\n            all data members are presumed private\n        \"\"\"\n        self.x = x\n        self.y = y\ne = Entity(10, 1) # e is an instance of the Entity() class\ne.x = 23",
        "detail": "cs42long.OOP.scratchpad",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "cs42long.OOP.scratchpad",
        "description": "cs42long.OOP.scratchpad",
        "peekOfCode": "e = Entity(10, 1) # e is an instance of the Entity() class\ne.x = 23",
        "detail": "cs42long.OOP.scratchpad",
        "documentation": {}
    },
    {
        "label": "e.x",
        "kind": 5,
        "importPath": "cs42long.OOP.scratchpad",
        "description": "cs42long.OOP.scratchpad",
        "peekOfCode": "e.x = 23",
        "detail": "cs42long.OOP.scratchpad",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "cs42long.OOP.Store",
        "description": "cs42long.OOP.Store",
        "peekOfCode": "class Store:\n    def __init__(self, name, catagories):\n        self.name = name\n        self.categories = catagories\n    def __str__(self):\n        output = f\"{self.name}\\n\"\n        for i, c in enumerate(self.categories):\n            output += f\"    [{i + 1}]  {c.name}\\n\"\n        output += f\"    [{i + 2}]  Exit\\n\"\n        return output",
        "detail": "cs42long.OOP.Store",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "cs42long.OOP.Store",
        "description": "cs42long.OOP.Store",
        "peekOfCode": "s = Store(\"Steves Shop\", [Category(\"Tools\"), Category(\"Clothes\"), Category(\"Groceries\"), Category(\"another category!\")])\nselection = 0\nwhile selection != len(s.categories) + 1:\n    print(s)\n    try:\n        selection = int(input(\"Select the number of a department \"))\n        if selection == len(s.categories) + 1:\n            print(\"Thank's for shopping with us!\")\n            break\n        elif selection > 0 and selection <= len(s.categories):",
        "detail": "cs42long.OOP.Store",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 5,
        "importPath": "cs42long.OOP.Store",
        "description": "cs42long.OOP.Store",
        "peekOfCode": "selection = 0\nwhile selection != len(s.categories) + 1:\n    print(s)\n    try:\n        selection = int(input(\"Select the number of a department \"))\n        if selection == len(s.categories) + 1:\n            print(\"Thank's for shopping with us!\")\n            break\n        elif selection > 0 and selection <= len(s.categories):\n            print(f\"{s.categories[selection - 1]} department\")",
        "detail": "cs42long.OOP.Store",
        "documentation": {}
    },
    {
        "label": "CPU",
        "kind": 6,
        "importPath": "cs43l.arch.cpu",
        "description": "cs43l.arch.cpu",
        "peekOfCode": "class CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        pass\n    def load(self):\n        \"\"\"Load a program into memory.\"\"\"\n        address = 0\n        # For now, we've just hardcoded a program:\n        program = [",
        "detail": "cs43l.arch.cpu",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "cs43l.arch.functions",
        "description": "cs43l.arch.functions",
        "peekOfCode": "def add(x, y):\n    z = y + y\n    return z\ndef mult(a, b):\n    c = a * b\n    add(3, 5)\n    return c\nd = mult(10, 2)\nprint(d)",
        "detail": "cs43l.arch.functions",
        "documentation": {}
    },
    {
        "label": "mult",
        "kind": 2,
        "importPath": "cs43l.arch.functions",
        "description": "cs43l.arch.functions",
        "peekOfCode": "def mult(a, b):\n    c = a * b\n    add(3, 5)\n    return c\nd = mult(10, 2)\nprint(d)",
        "detail": "cs43l.arch.functions",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "cs43l.arch.functions",
        "description": "cs43l.arch.functions",
        "peekOfCode": "d = mult(10, 2)\nprint(d)",
        "detail": "cs43l.arch.functions",
        "documentation": {}
    },
    {
        "label": "cpu",
        "kind": 5,
        "importPath": "cs43l.arch.ls8",
        "description": "cs43l.arch.ls8",
        "peekOfCode": "cpu = CPU()\nif len(sys.argv) != 2:\n    print(f\"Usage: simple.py <filename>\")\n    sys.exit(1)\ncpu.load(sys.argv[1])\ncpu.run()",
        "detail": "cs43l.arch.ls8",
        "documentation": {}
    },
    {
        "label": "alu",
        "kind": 2,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "def alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7\nreg = [0] * 8\nreg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB\nram[1] = PRINT_BOB",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "def load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()\n            if data == \"\":\n                continue\n            num = int(data)\n            ram[addr] = num\n            # self.ram_write(addr, num)",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "HALT = 1\nPRINT_BOB = 2\nPRINT_NUM = 3\nSTORE = 4\nPRINT_REG = 5\nPUSH = 6\nPOP = 7\nCALL = 8\nRET = 9\nADD = 10",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_BOB",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "PRINT_BOB = 2\nPRINT_NUM = 3\nSTORE = 4\nPRINT_REG = 5\nPUSH = 6\nPOP = 7\nCALL = 8\nRET = 9\nADD = 10\nLDI = 0b10000010",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "PRINT_NUM = 3\nSTORE = 4\nPRINT_REG = 5\nPUSH = 6\nPOP = 7\nCALL = 8\nRET = 9\nADD = 10\nLDI = 0b10000010\nHLT = 0b00000001",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "STORE",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "STORE = 4\nPRINT_REG = 5\nPUSH = 6\nPOP = 7\nCALL = 8\nRET = 9\nADD = 10\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "PRINT_REG = 5\nPUSH = 6\nPOP = 7\nCALL = 8\nRET = 9\nADD = 10\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "PUSH = 6\nPOP = 7\nCALL = 8\nRET = 9\nADD = 10\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "POP = 7\nCALL = 8\nRET = 9\nADD = 10\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "CALL",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "CALL = 8\nRET = 9\nADD = 10\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "RET",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "RET = 9\nADD = 10\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7\nreg = [0] * 8",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ADD = 10\nLDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7\nreg = [0] * 8\nreg[sp] = 0xf4",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "LDI = 0b10000010\nHLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7\nreg = [0] * 8\nreg[sp] = 0xf4\n# our program",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "HLT",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "HLT = 0b00000001\ndef alu(op, opa, opb):\n    if op == \"ADD\":\n        reg[opa] += reg[opb]\nram = [0] * 256\nsp = 7\nreg = [0] * 8\nreg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram = [0] * 256\nsp = 7\nreg = [0] * 8\nreg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB\nram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "sp",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "sp = 7\nreg = [0] * 8\nreg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB\nram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "reg",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "reg = [0] * 8\nreg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB\nram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "reg[sp]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "reg[sp] = 0xf4\n# our program\nram[0] = PRINT_BOB\nram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[0]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[0] = PRINT_BOB\nram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[1]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[1] = PRINT_BOB\nram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[2]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[2] = PRINT_NUM\nram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[3]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[3] = 34\nram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[4]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[4] = STORE\nram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[5]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[5] = 0\nram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[6]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[6] = 120\nram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[7]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[7] = PRINT_REG\nram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[8]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[8] = 0\nram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[9]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[9] = PUSH\nram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[10]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[10] = 0\nram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[11]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[11] = STORE\nram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = STORE",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[12]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[12] = 0\nram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = STORE\nram[21] = 1",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[13]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[13] = 12\nram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = STORE\nram[21] = 1\nram[22] = 2",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[14]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[14] = PRINT_REG\nram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = STORE\nram[21] = 1\nram[22] = 2\nram[23] = STORE",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[15]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[15] = 0\nram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = STORE\nram[21] = 1\nram[22] = 2\nram[23] = STORE\nram[24] = 3",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[16]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[16] = POP\nram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = STORE\nram[21] = 1\nram[22] = 2\nram[23] = STORE\nram[24] = 3\nram[25] = 31",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[17]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[17] = 0\nram[18] = PRINT_REG\nram[19] = 0\nram[20] = STORE\nram[21] = 1\nram[22] = 2\nram[23] = STORE\nram[24] = 3\nram[25] = 31\nram[26] = CALL",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[18]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[18] = PRINT_REG\nram[19] = 0\nram[20] = STORE\nram[21] = 1\nram[22] = 2\nram[23] = STORE\nram[24] = 3\nram[25] = 31\nram[26] = CALL\nram[27] = 3",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[19]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[19] = 0\nram[20] = STORE\nram[21] = 1\nram[22] = 2\nram[23] = STORE\nram[24] = 3\nram[25] = 31\nram[26] = CALL\nram[27] = 3\nram[28] = PRINT_REG",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[20]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[20] = STORE\nram[21] = 1\nram[22] = 2\nram[23] = STORE\nram[24] = 3\nram[25] = 31\nram[26] = CALL\nram[27] = 3\nram[28] = PRINT_REG\nram[29] = 3",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[21]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[21] = 1\nram[22] = 2\nram[23] = STORE\nram[24] = 3\nram[25] = 31\nram[26] = CALL\nram[27] = 3\nram[28] = PRINT_REG\nram[29] = 3\nram[30] = HALT",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[22]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[22] = 2\nram[23] = STORE\nram[24] = 3\nram[25] = 31\nram[26] = CALL\nram[27] = 3\nram[28] = PRINT_REG\nram[29] = 3\nram[30] = HALT\nram[31] = ADD",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[23]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[23] = STORE\nram[24] = 3\nram[25] = 31\nram[26] = CALL\nram[27] = 3\nram[28] = PRINT_REG\nram[29] = 3\nram[30] = HALT\nram[31] = ADD\nram[32] = 3",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[24]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[24] = 3\nram[25] = 31\nram[26] = CALL\nram[27] = 3\nram[28] = PRINT_REG\nram[29] = 3\nram[30] = HALT\nram[31] = ADD\nram[32] = 3\nram[33] = 0",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[25]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[25] = 31\nram[26] = CALL\nram[27] = 3\nram[28] = PRINT_REG\nram[29] = 3\nram[30] = HALT\nram[31] = ADD\nram[32] = 3\nram[33] = 0\nram[34] = RET",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[26]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[26] = CALL\nram[27] = 3\nram[28] = PRINT_REG\nram[29] = 3\nram[30] = HALT\nram[31] = ADD\nram[32] = 3\nram[33] = 0\nram[34] = RET\ndef load(filename):",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[27]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[27] = 3\nram[28] = PRINT_REG\nram[29] = 3\nram[30] = HALT\nram[31] = ADD\nram[32] = 3\nram[33] = 0\nram[34] = RET\ndef load(filename):\n    with open(filename) as filedata:",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[28]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[28] = PRINT_REG\nram[29] = 3\nram[30] = HALT\nram[31] = ADD\nram[32] = 3\nram[33] = 0\nram[34] = RET\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[29]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[29] = 3\nram[30] = HALT\nram[31] = ADD\nram[32] = 3\nram[33] = 0\nram[34] = RET\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[30]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[30] = HALT\nram[31] = ADD\nram[32] = 3\nram[33] = 0\nram[34] = RET\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[31]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[31] = ADD\nram[32] = 3\nram[33] = 0\nram[34] = RET\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()\n            if data == \"\":",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[32]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[32] = 3\nram[33] = 0\nram[34] = RET\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()\n            if data == \"\":\n                continue",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[33]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[33] = 0\nram[34] = RET\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()\n            if data == \"\":\n                continue\n            num = int(data)",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "ram[34]",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "ram[34] = RET\ndef load(filename):\n    with open(filename) as filedata:\n        addr = 0\n        for line in filedata:\n            data = line.split('#')[0].strip()\n            if data == \"\":\n                continue\n            num = int(data)\n            ram[addr] = num",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "pc = 0\nrunning = True\nwhile running:\n    inst = ram[pc]\n    opera = ram[pc + 1]\n    operb = ram[pc + 2]\n    if inst == HALT:\n        print(\"Halting CPU\")\n        running = False\n    elif inst == PRINT_BOB:",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "cs43l.arch.simple",
        "description": "cs43l.arch.simple",
        "peekOfCode": "running = True\nwhile running:\n    inst = ram[pc]\n    opera = ram[pc + 1]\n    operb = ram[pc + 2]\n    if inst == HALT:\n        print(\"Halting CPU\")\n        running = False\n    elif inst == PRINT_BOB:\n        print(\"BOB\")",
        "detail": "cs43l.arch.simple",
        "documentation": {}
    },
    {
        "label": "Simple",
        "kind": 6,
        "importPath": "cs43l.arch.simpleoop",
        "description": "cs43l.arch.simpleoop",
        "peekOfCode": "class Simple:\n    def __init__(self):\n        # TODO: Refactor to OOP\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.running = True\n    def alu(self, op, opa, opb):\n        if op == \"ADD\":\n            self.reg[opa] += self.reg[opb]",
        "detail": "cs43l.arch.simpleoop",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "cs43l.arch.simpleoop",
        "description": "cs43l.arch.simpleoop",
        "peekOfCode": "HALT = 1\nPRINT_BOB = 2\nPRINT_NUM = 3\nSTORE = 4\nPRINT_REG = 5\nADD = 6\nSUB = 7\nLDI = 0b10000010\nHLT = 0b00000001\nclass Simple:",
        "detail": "cs43l.arch.simpleoop",
        "documentation": {}
    },
    {
        "label": "PRINT_BOB",
        "kind": 5,
        "importPath": "cs43l.arch.simpleoop",
        "description": "cs43l.arch.simpleoop",
        "peekOfCode": "PRINT_BOB = 2\nPRINT_NUM = 3\nSTORE = 4\nPRINT_REG = 5\nADD = 6\nSUB = 7\nLDI = 0b10000010\nHLT = 0b00000001\nclass Simple:\n    def __init__(self):",
        "detail": "cs43l.arch.simpleoop",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "cs43l.arch.simpleoop",
        "description": "cs43l.arch.simpleoop",
        "peekOfCode": "PRINT_NUM = 3\nSTORE = 4\nPRINT_REG = 5\nADD = 6\nSUB = 7\nLDI = 0b10000010\nHLT = 0b00000001\nclass Simple:\n    def __init__(self):\n        # TODO: Refactor to OOP",
        "detail": "cs43l.arch.simpleoop",
        "documentation": {}
    },
    {
        "label": "STORE",
        "kind": 5,
        "importPath": "cs43l.arch.simpleoop",
        "description": "cs43l.arch.simpleoop",
        "peekOfCode": "STORE = 4\nPRINT_REG = 5\nADD = 6\nSUB = 7\nLDI = 0b10000010\nHLT = 0b00000001\nclass Simple:\n    def __init__(self):\n        # TODO: Refactor to OOP\n        self.ram = [0] * 256",
        "detail": "cs43l.arch.simpleoop",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "cs43l.arch.simpleoop",
        "description": "cs43l.arch.simpleoop",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nSUB = 7\nLDI = 0b10000010\nHLT = 0b00000001\nclass Simple:\n    def __init__(self):\n        # TODO: Refactor to OOP\n        self.ram = [0] * 256\n        self.reg = [0] * 8",
        "detail": "cs43l.arch.simpleoop",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "cs43l.arch.simpleoop",
        "description": "cs43l.arch.simpleoop",
        "peekOfCode": "ADD = 6\nSUB = 7\nLDI = 0b10000010\nHLT = 0b00000001\nclass Simple:\n    def __init__(self):\n        # TODO: Refactor to OOP\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0",
        "detail": "cs43l.arch.simpleoop",
        "documentation": {}
    },
    {
        "label": "SUB",
        "kind": 5,
        "importPath": "cs43l.arch.simpleoop",
        "description": "cs43l.arch.simpleoop",
        "peekOfCode": "SUB = 7\nLDI = 0b10000010\nHLT = 0b00000001\nclass Simple:\n    def __init__(self):\n        # TODO: Refactor to OOP\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.running = True",
        "detail": "cs43l.arch.simpleoop",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "cs43l.arch.simpleoop",
        "description": "cs43l.arch.simpleoop",
        "peekOfCode": "LDI = 0b10000010\nHLT = 0b00000001\nclass Simple:\n    def __init__(self):\n        # TODO: Refactor to OOP\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.running = True\n    def alu(self, op, opa, opb):",
        "detail": "cs43l.arch.simpleoop",
        "documentation": {}
    },
    {
        "label": "HLT",
        "kind": 5,
        "importPath": "cs43l.arch.simpleoop",
        "description": "cs43l.arch.simpleoop",
        "peekOfCode": "HLT = 0b00000001\nclass Simple:\n    def __init__(self):\n        # TODO: Refactor to OOP\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.running = True\n    def alu(self, op, opa, opb):\n        if op == \"ADD\":",
        "detail": "cs43l.arch.simpleoop",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "cs43l.graphs.islands",
        "description": "cs43l.graphs.islands",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.storage = []\n    def push(self, value):\n        self.storage.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.storage.pop()\n        else:\n            return None",
        "detail": "cs43l.graphs.islands",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "cs43l.graphs.islands",
        "description": "cs43l.graphs.islands",
        "peekOfCode": "def get_neighbors(row, col, graph_matrix):\n    neighbors = []\n    # Check north\n    if row > 0 and graph_matrix[row-1][col] == 1:\n        neighbors.append((row-1, col))\n    # Check south\n    if row < len(graph_matrix) - 1 and graph_matrix[row+1][col] == 1:\n        neighbors.append((row+1, col))\n    # Check east\n    if col < len(graph_matrix[0]) - 1 and graph_matrix[row][col+1] == 1:",
        "detail": "cs43l.graphs.islands",
        "documentation": {}
    },
    {
        "label": "dft",
        "kind": 2,
        "importPath": "cs43l.graphs.islands",
        "description": "cs43l.graphs.islands",
        "peekOfCode": "def dft(row, col, islands, visited):\n    s = Stack()\n    s.push((row, col))\n    while s.size() > 0:\n        row, col = s.pop()\n        # node = s.pop()\n        # row = node[0]\n        # col = node[1]\n        if not visited[row][col]:\n            visited[row][col] = True",
        "detail": "cs43l.graphs.islands",
        "documentation": {}
    },
    {
        "label": "island_counter",
        "kind": 2,
        "importPath": "cs43l.graphs.islands",
        "description": "cs43l.graphs.islands",
        "peekOfCode": "def island_counter(islands):\n    counter = 0\n    visited = []\n    for i in range(len(islands)):\n        visited.append([False] * len(islands[0]))\n    for col in range(len(islands[0])):\n        for row in range(len(islands)):\n            if not visited[row][col]:\n                if islands[row][col] == 1:\n                    visited = dft(row, col, islands, visited)",
        "detail": "cs43l.graphs.islands",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "cs43l.graphs.islands",
        "description": "cs43l.graphs.islands",
        "peekOfCode": "islands = [[0, 1, 0, 1, 0],\n           [1, 1, 0, 1, 1],\n           [0, 0, 1, 0, 0],\n           [1, 0, 1, 0, 0],\n           [1, 1, 0, 0, 0]]\nprint(island_counter(islands)) # returns 4\n# islands = [[1, 0, 0, 1, 1, 0, 1, 1, 0, 1],\n#            [0, 0, 1, 1, 0, 1, 0, 0, 0, 0],\n#            [0, 1, 1, 1, 0, 0, 0, 1, 0, 1],\n#            [0, 0, 1, 0, 0, 1, 0, 0, 1, 1],",
        "detail": "cs43l.graphs.islands",
        "documentation": {}
    },
    {
        "label": "populate_graph",
        "kind": 2,
        "importPath": "cs43l.graphs.populate",
        "description": "cs43l.graphs.populate",
        "peekOfCode": "def populate_graph(self, num_users, avg_friendships):\n    # Reset graph\n    self.last_id = 0\n    self.users = {}\n    self.friendships = {}\n    # Add users\n    for i in range(0, num_users):\n        self.addUser(f\"User {i}\")\n    # Create Frienships\n    # Generate all possible friendship combinations",
        "detail": "cs43l.graphs.populate",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "cs43l.graphs.social",
        "description": "cs43l.graphs.social",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.storage = []\n    def push(self, value):\n        self.storage.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.storage.pop()\n        else:\n            return None",
        "detail": "cs43l.graphs.social",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "cs43l.graphs.social",
        "description": "cs43l.graphs.social",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, value):\n        self.storage.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.storage.pop(0)\n        else:\n            return None",
        "detail": "cs43l.graphs.social",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "cs43l.graphs.social",
        "description": "cs43l.graphs.social",
        "peekOfCode": "class User:\n    def __init__(self, name):\n        self.name = name\nclass SocialGraph:\n    def __init__(self):\n        self.last_id = 0\n        self.users = {}\n        self.friendships = {}\n    def add_friendship(self, user_id, friend_id):\n        \"\"\"",
        "detail": "cs43l.graphs.social",
        "documentation": {}
    },
    {
        "label": "SocialGraph",
        "kind": 6,
        "importPath": "cs43l.graphs.social",
        "description": "cs43l.graphs.social",
        "peekOfCode": "class SocialGraph:\n    def __init__(self):\n        self.last_id = 0\n        self.users = {}\n        self.friendships = {}\n    def add_friendship(self, user_id, friend_id):\n        \"\"\"\n        Creates a bi-directional friendship\n        \"\"\"\n        if user_id == friend_id:",
        "detail": "cs43l.graphs.social",
        "documentation": {}
    },
    {
        "label": "room",
        "kind": 5,
        "importPath": "cs43l.intro.adv.adv",
        "description": "cs43l.intro.adv.adv",
        "peekOfCode": "room = {\n    'outside':  Room(\"Outside Cave Entrance\",\n                     \"North of you, the cave mount beckons\"),\n    'foyer':    Room(\"Foyer\", \"\"\"Dim light filters in from the south. Dusty\npassages run north and east.\"\"\"),\n    'overlook': Room(\"Grand Overlook\", \"\"\"A steep cliff appears before you, falling\ninto the darkness. Ahead to the north, a light flickers in\nthe distance, but there is no way across the chasm.\"\"\"),\n    'narrow':   Room(\"Narrow Passage\", \"\"\"The narrow passage bends here from west\nto north. The smell of gold permeates the air.\"\"\"),",
        "detail": "cs43l.intro.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['outside'].n_to",
        "kind": 5,
        "importPath": "cs43l.intro.adv.adv",
        "description": "cs43l.intro.adv.adv",
        "peekOfCode": "room['outside'].n_to = room['foyer']\nroom['foyer'].s_to = room['outside']\nroom['foyer'].n_to = room['overlook']\nroom['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n#\n# Main",
        "detail": "cs43l.intro.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['foyer'].s_to",
        "kind": 5,
        "importPath": "cs43l.intro.adv.adv",
        "description": "cs43l.intro.adv.adv",
        "peekOfCode": "room['foyer'].s_to = room['outside']\nroom['foyer'].n_to = room['overlook']\nroom['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n#\n# Main\n#",
        "detail": "cs43l.intro.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['foyer'].n_to",
        "kind": 5,
        "importPath": "cs43l.intro.adv.adv",
        "description": "cs43l.intro.adv.adv",
        "peekOfCode": "room['foyer'].n_to = room['overlook']\nroom['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n#\n# Main\n#\n# Make a new player object that is currently in the 'outside' room.",
        "detail": "cs43l.intro.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['foyer'].e_to",
        "kind": 5,
        "importPath": "cs43l.intro.adv.adv",
        "description": "cs43l.intro.adv.adv",
        "peekOfCode": "room['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n#\n# Main\n#\n# Make a new player object that is currently in the 'outside' room.\n# Write a loop that:",
        "detail": "cs43l.intro.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['overlook'].s_to",
        "kind": 5,
        "importPath": "cs43l.intro.adv.adv",
        "description": "cs43l.intro.adv.adv",
        "peekOfCode": "room['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n#\n# Main\n#\n# Make a new player object that is currently in the 'outside' room.\n# Write a loop that:\n#",
        "detail": "cs43l.intro.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['narrow'].w_to",
        "kind": 5,
        "importPath": "cs43l.intro.adv.adv",
        "description": "cs43l.intro.adv.adv",
        "peekOfCode": "room['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n#\n# Main\n#\n# Make a new player object that is currently in the 'outside' room.\n# Write a loop that:\n#\n# * Prints the current room name",
        "detail": "cs43l.intro.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['narrow'].n_to",
        "kind": 5,
        "importPath": "cs43l.intro.adv.adv",
        "description": "cs43l.intro.adv.adv",
        "peekOfCode": "room['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\n#\n# Main\n#\n# Make a new player object that is currently in the 'outside' room.\n# Write a loop that:\n#\n# * Prints the current room name\n# * Prints the current description (the textwrap module might be useful here).",
        "detail": "cs43l.intro.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['treasure'].s_to",
        "kind": 5,
        "importPath": "cs43l.intro.adv.adv",
        "description": "cs43l.intro.adv.adv",
        "peekOfCode": "room['treasure'].s_to = room['narrow']\n#\n# Main\n#\n# Make a new player object that is currently in the 'outside' room.\n# Write a loop that:\n#\n# * Prints the current room name\n# * Prints the current description (the textwrap module might be useful here).\n# * Waits for user input and decides what to do.",
        "detail": "cs43l.intro.adv.adv",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "cs43l.intro.adv.player",
        "description": "cs43l.intro.adv.player",
        "peekOfCode": "class Player:\n    def __init__(self, name, starting_room):\n        self.name = name\n        self.current_room = starting_room\n    def move(self, dir):\n        # check if the player can move in the dir? <===\n            # if they can. get the players current room <===\n            # and set the players current room. to the current rooms dir_to",
        "detail": "cs43l.intro.adv.player",
        "documentation": {}
    },
    {
        "label": "Box",
        "kind": 6,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "class Box:\n    def __init__(self, name):\n        self.name = name\nclass Person:\n    def __init__(self, name, current_box):\n        self.name = name\n        self.current_box = current_box\nbox1 = Box(\"box1\")\nbox2 = Box(\"box2\")\nbox3 = Box(\"box3\")",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "class Person:\n    def __init__(self, name, current_box):\n        self.name = name\n        self.current_box = current_box\nbox1 = Box(\"box1\")\nbox2 = Box(\"box2\")\nbox3 = Box(\"box3\")\nbox4 = Box(\"box4\")\nbox1.n_box = box3\nbox3.s_box = box1",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "box1",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "box1 = Box(\"box1\")\nbox2 = Box(\"box2\")\nbox3 = Box(\"box3\")\nbox4 = Box(\"box4\")\nbox1.n_box = box3\nbox3.s_box = box1\nbox3.w_box = box4\nbox4.e_box = box3\nbox4.n_box = box2\nbox2.s_box = box4",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "box2",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "box2 = Box(\"box2\")\nbox3 = Box(\"box3\")\nbox4 = Box(\"box4\")\nbox1.n_box = box3\nbox3.s_box = box1\nbox3.w_box = box4\nbox4.e_box = box3\nbox4.n_box = box2\nbox2.s_box = box4\nperson = Person(\"Dave\", box1)",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "box3",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "box3 = Box(\"box3\")\nbox4 = Box(\"box4\")\nbox1.n_box = box3\nbox3.s_box = box1\nbox3.w_box = box4\nbox4.e_box = box3\nbox4.n_box = box2\nbox2.s_box = box4\nperson = Person(\"Dave\", box1)\ndir = \"n\"",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "box4",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "box4 = Box(\"box4\")\nbox1.n_box = box3\nbox3.s_box = box1\nbox3.w_box = box4\nbox4.e_box = box3\nbox4.n_box = box2\nbox2.s_box = box4\nperson = Person(\"Dave\", box1)\ndir = \"n\"\nattrib = dir + \"_box\"",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "box1.n_box",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "box1.n_box = box3\nbox3.s_box = box1\nbox3.w_box = box4\nbox4.e_box = box3\nbox4.n_box = box2\nbox2.s_box = box4\nperson = Person(\"Dave\", box1)\ndir = \"n\"\nattrib = dir + \"_box\"\n# current_box = box4",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "box3.s_box",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "box3.s_box = box1\nbox3.w_box = box4\nbox4.e_box = box3\nbox4.n_box = box2\nbox2.s_box = box4\nperson = Person(\"Dave\", box1)\ndir = \"n\"\nattrib = dir + \"_box\"\n# current_box = box4\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 4",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "box3.w_box",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "box3.w_box = box4\nbox4.e_box = box3\nbox4.n_box = box2\nbox2.s_box = box4\nperson = Person(\"Dave\", box1)\ndir = \"n\"\nattrib = dir + \"_box\"\n# current_box = box4\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 4\nif hasattr(person.current_box, attrib):",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "box4.e_box",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "box4.e_box = box3\nbox4.n_box = box2\nbox2.s_box = box4\nperson = Person(\"Dave\", box1)\ndir = \"n\"\nattrib = dir + \"_box\"\n# current_box = box4\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 4\nif hasattr(person.current_box, attrib):\n    person.current_box = getattr(person.current_box, attrib) # person.current_box.n_box",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "box4.n_box",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "box4.n_box = box2\nbox2.s_box = box4\nperson = Person(\"Dave\", box1)\ndir = \"n\"\nattrib = dir + \"_box\"\n# current_box = box4\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 4\nif hasattr(person.current_box, attrib):\n    person.current_box = getattr(person.current_box, attrib) # person.current_box.n_box\nelse:",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "box2.s_box",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "box2.s_box = box4\nperson = Person(\"Dave\", box1)\ndir = \"n\"\nattrib = dir + \"_box\"\n# current_box = box4\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 4\nif hasattr(person.current_box, attrib):\n    person.current_box = getattr(person.current_box, attrib) # person.current_box.n_box\nelse:\n    print(f\"{person.name} can not go that way!\")",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "person = Person(\"Dave\", box1)\ndir = \"n\"\nattrib = dir + \"_box\"\n# current_box = box4\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 4\nif hasattr(person.current_box, attrib):\n    person.current_box = getattr(person.current_box, attrib) # person.current_box.n_box\nelse:\n    print(f\"{person.name} can not go that way!\")\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 2",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "dir",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "dir = \"n\"\nattrib = dir + \"_box\"\n# current_box = box4\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 4\nif hasattr(person.current_box, attrib):\n    person.current_box = getattr(person.current_box, attrib) # person.current_box.n_box\nelse:\n    print(f\"{person.name} can not go that way!\")\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 2",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "attrib",
        "kind": 5,
        "importPath": "cs43l.intro.adv.scratchpad",
        "description": "cs43l.intro.adv.scratchpad",
        "peekOfCode": "attrib = dir + \"_box\"\n# current_box = box4\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 4\nif hasattr(person.current_box, attrib):\n    person.current_box = getattr(person.current_box, attrib) # person.current_box.n_box\nelse:\n    print(f\"{person.name} can not go that way!\")\nprint(f\"{person.name} is in {person.current_box.name}\") # => box 2",
        "detail": "cs43l.intro.adv.scratchpad",
        "documentation": {}
    },
    {
        "label": "Ball",
        "kind": 6,
        "importPath": "cs43l.intro.ball",
        "description": "cs43l.intro.ball",
        "peekOfCode": "class Ball(Product):\n    def __init__(self, name, price, solid):\n        super().__init__(name, price)\n        self.solid = solid\n    def __str__(self):\n        return f\"{super().__str__()} and {'is solid' if self.solid else 'is inflatable'}\"\n# basketball = Ball(\"Wilson Power Ball\", 25, True)\n# print(basketball)",
        "detail": "cs43l.intro.ball",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "cs43l.intro.category",
        "description": "cs43l.intro.category",
        "peekOfCode": "class Category:\n    def __init__(self, name, products = []):\n        self.name = name\n        self.products = products\n    def __str__(self):\n        output = f\"  {self.name}\\n\"\n        if len(self.products) < 1:\n            output = f\"No products available in {self.name}\"\n        else:\n            for p in self.products:",
        "detail": "cs43l.intro.category",
        "documentation": {}
    },
    {
        "label": "Footware",
        "kind": 6,
        "importPath": "cs43l.intro.footware",
        "description": "cs43l.intro.footware",
        "peekOfCode": "class Footware(Product):\n    def __init__(self, name, price, color, size):\n        super().__init__(name, price)\n        self.color = color\n        self.size = size\n    def __str__(self):\n        return f\"{super().__str__()} in {self.color} size {self.size}\"\n# shoes = Footware(\"Running Shoes\", 20, \"Red\", 12)\n# print(shoes)",
        "detail": "cs43l.intro.footware",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "cs43l.intro.product",
        "description": "cs43l.intro.product",
        "peekOfCode": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    def __str__(self):\n        return f\"{self.name} \\t ${self.price}\"",
        "detail": "cs43l.intro.product",
        "documentation": {}
    },
    {
        "label": "SomeClassName",
        "kind": 6,
        "importPath": "cs43l.intro.scratchpad",
        "description": "cs43l.intro.scratchpad",
        "peekOfCode": "class SomeClassName:\n    # initializer (other languages this is part of the constructor)\n    def __init__(self, name):\n        self.name = name # name field\n        self.age = None\nthisthing = SomeClassName(\"Dave\") # calls __new__() which creates a self ref and calls __init__()\notherthing = SomeClassName(\"Joe\")\nthisthing.wooooooo = 3 # live patching of an object\nprint(thisthing.wooooooo) # => 3\n# print(otherthing.wooooooo) # => error",
        "detail": "cs43l.intro.scratchpad",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "cs43l.intro.scratchpad",
        "description": "cs43l.intro.scratchpad",
        "peekOfCode": "name = \"something\"\nclass SomeClassName:\n    # initializer (other languages this is part of the constructor)\n    def __init__(self, name):\n        self.name = name # name field\n        self.age = None\nthisthing = SomeClassName(\"Dave\") # calls __new__() which creates a self ref and calls __init__()\notherthing = SomeClassName(\"Joe\")\nthisthing.wooooooo = 3 # live patching of an object\nprint(thisthing.wooooooo) # => 3",
        "detail": "cs43l.intro.scratchpad",
        "documentation": {}
    },
    {
        "label": "thisthing",
        "kind": 5,
        "importPath": "cs43l.intro.scratchpad",
        "description": "cs43l.intro.scratchpad",
        "peekOfCode": "thisthing = SomeClassName(\"Dave\") # calls __new__() which creates a self ref and calls __init__()\notherthing = SomeClassName(\"Joe\")\nthisthing.wooooooo = 3 # live patching of an object\nprint(thisthing.wooooooo) # => 3\n# print(otherthing.wooooooo) # => error",
        "detail": "cs43l.intro.scratchpad",
        "documentation": {}
    },
    {
        "label": "otherthing",
        "kind": 5,
        "importPath": "cs43l.intro.scratchpad",
        "description": "cs43l.intro.scratchpad",
        "peekOfCode": "otherthing = SomeClassName(\"Joe\")\nthisthing.wooooooo = 3 # live patching of an object\nprint(thisthing.wooooooo) # => 3\n# print(otherthing.wooooooo) # => error",
        "detail": "cs43l.intro.scratchpad",
        "documentation": {}
    },
    {
        "label": "thisthing.wooooooo",
        "kind": 5,
        "importPath": "cs43l.intro.scratchpad",
        "description": "cs43l.intro.scratchpad",
        "peekOfCode": "thisthing.wooooooo = 3 # live patching of an object\nprint(thisthing.wooooooo) # => 3\n# print(otherthing.wooooooo) # => error",
        "detail": "cs43l.intro.scratchpad",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "cs43l.intro.store",
        "description": "cs43l.intro.store",
        "peekOfCode": "class Store:\n    def __init__(self, name, categories):\n        self.name = name\n        self.categories = categories # category\n    def __str__(self):\n        output = f\"{self.name}\\n\"\n        for i, cat in enumerate(self.categories):\n            output += f\" [{i + 1}] {cat.name}\\n\"\n        output += f\" [{i + 2}] Exit\"\n        return output",
        "detail": "cs43l.intro.store",
        "documentation": {}
    },
    {
        "label": "store",
        "kind": 5,
        "importPath": "cs43l.intro.store",
        "description": "cs43l.intro.store",
        "peekOfCode": "store = Store(\"My Shop\", [Category(\"Running\", [Footware(\"some Shoe Product\", 23, \"Red\", 12), Product(\"some Boot Product\", 34), Product(\"some Sock Product\", 90)]), Category(\"Baseball\"), Category(\"Basketball\", [Ball(\"Wilson Super Charge\", 900, False)])])\nselection = 0\nwhile selection != len(store.categories) + 1:\n    print(store)\n    try:\n        selection = int(input(\"Select the number of a department. \"))\n        if selection == len(store.categories) + 1:\n            print(f\"Thank's for shopping at {store.name}\")\n        elif selection > 0 and selection <= len(store.categories):\n            print(f\"{store.categories[selection - 1]}\")",
        "detail": "cs43l.intro.store",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 5,
        "importPath": "cs43l.intro.store",
        "description": "cs43l.intro.store",
        "peekOfCode": "selection = 0\nwhile selection != len(store.categories) + 1:\n    print(store)\n    try:\n        selection = int(input(\"Select the number of a department. \"))\n        if selection == len(store.categories) + 1:\n            print(f\"Thank's for shopping at {store.name}\")\n        elif selection > 0 and selection <= len(store.categories):\n            print(f\"{store.categories[selection - 1]}\")\n    except ValueError:",
        "detail": "cs43l.intro.store",
        "documentation": {}
    },
    {
        "label": "first_pass_anagrams",
        "kind": 2,
        "importPath": "CSEU2-Algorithms-gp.src.anagrams.anagrams",
        "description": "CSEU2-Algorithms-gp.src.anagrams.anagrams",
        "peekOfCode": "def first_pass_anagrams(words):\n    import random\n    import operator\n    # generate random values for each character a-z\n    chars = [0] * 26\n    for i in range(26):\n        chars[i] = random.randint(0, 1000000)\n    # create a new dictionary\n    anagrams = {}\n    signature = 0",
        "detail": "CSEU2-Algorithms-gp.src.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "secons_pass_anagrams",
        "kind": 2,
        "importPath": "CSEU2-Algorithms-gp.src.anagrams.anagrams",
        "description": "CSEU2-Algorithms-gp.src.anagrams.anagrams",
        "peekOfCode": "def secons_pass_anagrams(words):\n    # create a new dictionary\n    anagrams = {}\n    longest = None\n    # GENERATE ALL SETS of ANAGRAMS\n    for word in words:\n        # convert the list to a string\n        signature = \"\".join(sorted(word.lower()))\n        if signature not in anagrams:\n            anagrams[signature] = []     ",
        "detail": "CSEU2-Algorithms-gp.src.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "baz",
        "kind": 2,
        "importPath": "CSEU2-Algorithms-gp.src.challenge",
        "description": "CSEU2-Algorithms-gp.src.challenge",
        "peekOfCode": "def baz(n):\n    s = 0\n    for i in range(n): #  O(n)\n        for j in range(int(math.sqrt(n))): # O(sqrt(n)) n * sqrt n\n            s += i * j # O(1)\n    return s # O(1)\n# O(n sqrt(n))\n# 2\ndef frotz(n):\n    s = 0 # O(1)",
        "detail": "CSEU2-Algorithms-gp.src.challenge",
        "documentation": {}
    },
    {
        "label": "frotz",
        "kind": 2,
        "importPath": "CSEU2-Algorithms-gp.src.challenge",
        "description": "CSEU2-Algorithms-gp.src.challenge",
        "peekOfCode": "def frotz(n):\n    s = 0 # O(1)\n    for i in range(n): # O(n)\n        for j in range(2 * n): # O(2n) => O(n) => O(n^2)\n            s += i * j # O(1)\n    return s # O(1)\n# O(2 n^2) => O(n^2)\n# 3\ndef bar(x):\n    sum = 0 # O(1)",
        "detail": "CSEU2-Algorithms-gp.src.challenge",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "CSEU2-Algorithms-gp.src.challenge",
        "description": "CSEU2-Algorithms-gp.src.challenge",
        "peekOfCode": "def bar(x):\n    sum = 0 # O(1)\n    for i in range(0, 1463): # O(1436) =>  O(1)\n        i += sum # O(1)\n        for _ in range(0, x): # O(x)\n            for _ in range(x, x + 15): # O(15) => O(1)\n                sum += 1 # O(1) * O(x) * O(1) => O(1 * X * 1) => O(x)\n# O(n) linear",
        "detail": "CSEU2-Algorithms-gp.src.challenge",
        "documentation": {}
    },
    {
        "label": "fact_i",
        "kind": 2,
        "importPath": "CSEU2-Algorithms-gp.src.factorial",
        "description": "CSEU2-Algorithms-gp.src.factorial",
        "peekOfCode": "def fact_i(n):\n    # set a end point fact initial value\n    fact = 1\n    # loop from 1 to n+1 using an index\n    for i in range(1, n + 1):\n        # set fact to fact multiplied by index\n        fact = fact * i\n    # return fact\n    return fact\nprint(fact_i(4))",
        "detail": "CSEU2-Algorithms-gp.src.factorial",
        "documentation": {}
    },
    {
        "label": "rec_fact",
        "kind": 2,
        "importPath": "CSEU2-Algorithms-gp.src.factorial",
        "description": "CSEU2-Algorithms-gp.src.factorial",
        "peekOfCode": "def rec_fact(n):\n    # base case\n    if n <= 1:\n        return 1\n    else:\n        # call rec_fact on n - 1\n        # return n multiplied by rec_fact of n - 1\n        return n * rec_fact(n - 1)\nprint(rec_fact(4))",
        "detail": "CSEU2-Algorithms-gp.src.factorial",
        "documentation": {}
    },
    {
        "label": "rec_pow",
        "kind": 2,
        "importPath": "CSEU2-Algorithms-gp.src.power",
        "description": "CSEU2-Algorithms-gp.src.power",
        "peekOfCode": "def rec_pow(a, b):\n    # anything raised to the power of 0 is 1\n    if b <= 0:\n        return 1\n    else:\n        # call a multiplied by rec_pow on a and b - 1\n        return a * rec_pow(a, b - 1)\nprint(rec_pow(2, 8))\n# negative exponents\ndef n_rec_pow(a, b):",
        "detail": "CSEU2-Algorithms-gp.src.power",
        "documentation": {}
    },
    {
        "label": "n_rec_pow",
        "kind": 2,
        "importPath": "CSEU2-Algorithms-gp.src.power",
        "description": "CSEU2-Algorithms-gp.src.power",
        "peekOfCode": "def n_rec_pow(a, b):\n    # anything raised to the power of 0 is 1\n    if b == 0:\n        return 1\n    # positive exponent\n    elif b > 0:\n        # call a multiplied by rec_pow on a and b - 1\n        return a * n_rec_pow(a, b - 1)\n    else:\n    # negative exponent",
        "detail": "CSEU2-Algorithms-gp.src.power",
        "documentation": {}
    },
    {
        "label": "e_rec_pow",
        "kind": 2,
        "importPath": "CSEU2-Algorithms-gp.src.power",
        "description": "CSEU2-Algorithms-gp.src.power",
        "peekOfCode": "def e_rec_pow(a, b):\n    # Error checking\n    try:\n        # try to take value and convert to int\n        _ = int(b)\n    # otherwise throw and error and catch the exception\n    except ValueError:\n        print(\"Exponent (b) must be an integer\")\n        return\n    # anything raised to the power of 0 is 1",
        "detail": "CSEU2-Algorithms-gp.src.power",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple01",
        "description": "CSEU2-Architecture-gp.src.day1.simple01",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    HALT,      # [0000 0001] \n    PRINT_TOM  # [0000 0010]\n]",
        "detail": "CSEU2-Architecture-gp.src.day1.simple01",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple01",
        "description": "CSEU2-Architecture-gp.src.day1.simple01",
        "peekOfCode": "PRINT_TOM = 2\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    HALT,      # [0000 0001] \n    PRINT_TOM  # [0000 0010]\n]\n# flags",
        "detail": "CSEU2-Architecture-gp.src.day1.simple01",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple01",
        "description": "CSEU2-Architecture-gp.src.day1.simple01",
        "peekOfCode": "memory = [\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    HALT,      # [0000 0001] \n    PRINT_TOM  # [0000 0010]\n]\n# flags\n# program counter\npc = 0",
        "detail": "CSEU2-Architecture-gp.src.day1.simple01",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple01",
        "description": "CSEU2-Architecture-gp.src.day1.simple01",
        "peekOfCode": "pc = 0\n# state (running)\nrunning = True\n# REPL (FETCH, DECODE, EXECUTE)\nwhile running:\n    # FETCH\n    command = memory[pc]\n    # DECODE\n    if command == PRINT_TOM:\n        # EXECUTE",
        "detail": "CSEU2-Architecture-gp.src.day1.simple01",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple01",
        "description": "CSEU2-Architecture-gp.src.day1.simple01",
        "peekOfCode": "running = True\n# REPL (FETCH, DECODE, EXECUTE)\nwhile running:\n    # FETCH\n    command = memory[pc]\n    # DECODE\n    if command == PRINT_TOM:\n        # EXECUTE\n        print(\"Tom\")\n    # DECODE",
        "detail": "CSEU2-Architecture-gp.src.day1.simple01",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple02",
        "description": "CSEU2-Architecture-gp.src.day1.simple02",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_NUM,\n    45,",
        "detail": "CSEU2-Architecture-gp.src.day1.simple02",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple02",
        "description": "CSEU2-Architecture-gp.src.day1.simple02",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_NUM,\n    45,\n    PRINT_TOM,  # [0000 0010]",
        "detail": "CSEU2-Architecture-gp.src.day1.simple02",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple02",
        "description": "CSEU2-Architecture-gp.src.day1.simple02",
        "peekOfCode": "PRINT_NUM = 3\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_NUM,\n    45,\n    PRINT_TOM,  # [0000 0010]\n    HALT      # [0000 0001] ",
        "detail": "CSEU2-Architecture-gp.src.day1.simple02",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple02",
        "description": "CSEU2-Architecture-gp.src.day1.simple02",
        "peekOfCode": "memory = [\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_TOM, # [0000 0010]\n    PRINT_NUM,\n    45,\n    PRINT_TOM,  # [0000 0010]\n    HALT      # [0000 0001] \n]\n# flags",
        "detail": "CSEU2-Architecture-gp.src.day1.simple02",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple02",
        "description": "CSEU2-Architecture-gp.src.day1.simple02",
        "peekOfCode": "pc = 0\n# state (running)\nrunning = True\n# REPL (FETCH, DECODE, EXECUTE)\nwhile running:\n    # FETCH\n    command = memory[pc]\n    # DECODE\n    if command == PRINT_TOM:\n        # EXECUTE",
        "detail": "CSEU2-Architecture-gp.src.day1.simple02",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple02",
        "description": "CSEU2-Architecture-gp.src.day1.simple02",
        "peekOfCode": "running = True\n# REPL (FETCH, DECODE, EXECUTE)\nwhile running:\n    # FETCH\n    command = memory[pc]\n    # DECODE\n    if command == PRINT_TOM:\n        # EXECUTE\n        instruction_size = 1\n        print(\"Tom\")",
        "detail": "CSEU2-Architecture-gp.src.day1.simple02",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple03",
        "description": "CSEU2-Architecture-gp.src.day1.simple03",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    SAVE, # save the value 65 to register 2",
        "detail": "CSEU2-Architecture-gp.src.day1.simple03",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple03",
        "description": "CSEU2-Architecture-gp.src.day1.simple03",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    SAVE, # save the value 65 to register 2\n    65,",
        "detail": "CSEU2-Architecture-gp.src.day1.simple03",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple03",
        "description": "CSEU2-Architecture-gp.src.day1.simple03",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    SAVE, # save the value 65 to register 2\n    65,\n    2,",
        "detail": "CSEU2-Architecture-gp.src.day1.simple03",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple03",
        "description": "CSEU2-Architecture-gp.src.day1.simple03",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    SAVE, # save the value 65 to register 2\n    65,\n    2,\n    SAVE, # save the value 20 to register 3",
        "detail": "CSEU2-Architecture-gp.src.day1.simple03",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple03",
        "description": "CSEU2-Architecture-gp.src.day1.simple03",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    SAVE, # save the value 65 to register 2\n    65,\n    2,\n    SAVE, # save the value 20 to register 3\n    20,",
        "detail": "CSEU2-Architecture-gp.src.day1.simple03",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple03",
        "description": "CSEU2-Architecture-gp.src.day1.simple03",
        "peekOfCode": "ADD = 6\n# memory\nmemory = [\n    PRINT_TOM, # [0000 0010]\n    SAVE, # save the value 65 to register 2\n    65,\n    2,\n    SAVE, # save the value 20 to register 3\n    20,\n    3,",
        "detail": "CSEU2-Architecture-gp.src.day1.simple03",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple03",
        "description": "CSEU2-Architecture-gp.src.day1.simple03",
        "peekOfCode": "memory = [\n    PRINT_TOM, # [0000 0010]\n    SAVE, # save the value 65 to register 2\n    65,\n    2,\n    SAVE, # save the value 20 to register 3\n    20,\n    3,\n    ADD, # Add the content of reg 2 and reg 3 together\n    2,",
        "detail": "CSEU2-Architecture-gp.src.day1.simple03",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple03",
        "description": "CSEU2-Architecture-gp.src.day1.simple03",
        "peekOfCode": "pc = 0\n# registers\nregister = [0] * 8 # list of 8 registers\n# state (running)\nrunning = True\n# REPL (FETCH, DECODE, EXECUTE)\nwhile running:\n    # FETCH\n    command = memory[pc]\n    # DECODE",
        "detail": "CSEU2-Architecture-gp.src.day1.simple03",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple03",
        "description": "CSEU2-Architecture-gp.src.day1.simple03",
        "peekOfCode": "register = [0] * 8 # list of 8 registers\n# state (running)\nrunning = True\n# REPL (FETCH, DECODE, EXECUTE)\nwhile running:\n    # FETCH\n    command = memory[pc]\n    # DECODE\n    if command == PRINT_TOM:\n        # EXECUTE",
        "detail": "CSEU2-Architecture-gp.src.day1.simple03",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day1.simple03",
        "description": "CSEU2-Architecture-gp.src.day1.simple03",
        "peekOfCode": "running = True\n# REPL (FETCH, DECODE, EXECUTE)\nwhile running:\n    # FETCH\n    command = memory[pc]\n    # DECODE\n    if command == PRINT_TOM:\n        # EXECUTE\n        instruction_size = 1\n        print(\"Tom\")",
        "detail": "CSEU2-Architecture-gp.src.day1.simple03",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.00-masking",
        "description": "CSEU2-Architecture-gp.src.day2.00-masking",
        "peekOfCode": "a = 8\nb = 2\nprint(a << b)\nprint(a * (2 ** b))\n#       AABCDDDD\nLDI = 0b10000010\nLDI                      1\n2 <--- operand_1         1\n10 <--- operand_2        1\n3",
        "detail": "CSEU2-Architecture-gp.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.00-masking",
        "description": "CSEU2-Architecture-gp.src.day2.00-masking",
        "peekOfCode": "b = 2\nprint(a << b)\nprint(a * (2 ** b))\n#       AABCDDDD\nLDI = 0b10000010\nLDI                      1\n2 <--- operand_1         1\n10 <--- operand_2        1\n3\ncpu.pc += 3",
        "detail": "CSEU2-Architecture-gp.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.00-masking",
        "description": "CSEU2-Architecture-gp.src.day2.00-masking",
        "peekOfCode": "LDI = 0b10000010\nLDI                      1\n2 <--- operand_1         1\n10 <--- operand_2        1\n3\ncpu.pc += 3\nOPERANDS = LDI >> 6\nINCREMENT_PC = OPERANDS + 1\ncpu.pc += INCREMENT_PC\n# ls8",
        "detail": "CSEU2-Architecture-gp.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "OPERANDS",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.00-masking",
        "description": "CSEU2-Architecture-gp.src.day2.00-masking",
        "peekOfCode": "OPERANDS = LDI >> 6\nINCREMENT_PC = OPERANDS + 1\ncpu.pc += INCREMENT_PC\n# ls8\nIR = 0b1000010\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the operation\nelif IR  == ADD:\n    # do the add stuff",
        "detail": "CSEU2-Architecture-gp.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "INCREMENT_PC",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.00-masking",
        "description": "CSEU2-Architecture-gp.src.day2.00-masking",
        "peekOfCode": "INCREMENT_PC = OPERANDS + 1\ncpu.pc += INCREMENT_PC\n# ls8\nIR = 0b1000010\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the operation\nelif IR  == ADD:\n    # do the add stuff\ncpu.pc += add_to_pc",
        "detail": "CSEU2-Architecture-gp.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "IR",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.00-masking",
        "description": "CSEU2-Architecture-gp.src.day2.00-masking",
        "peekOfCode": "IR = 0b1000010\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the operation\nelif IR  == ADD:\n    # do the add stuff\ncpu.pc += add_to_pc",
        "detail": "CSEU2-Architecture-gp.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "add_to_pc",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.00-masking",
        "description": "CSEU2-Architecture-gp.src.day2.00-masking",
        "peekOfCode": "add_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the operation\nelif IR  == ADD:\n    # do the add stuff\ncpu.pc += add_to_pc",
        "detail": "CSEU2-Architecture-gp.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "def load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # deal with comments\n                # split before and after any comment symbol '#'\n                comment_split = line.split(\"#\")\n                # convert the pre-comment portion (to the left) from binary to a value\n                # extract the first part of the split to a number variable",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# flags\n# program counter\npc = 0\n# memory",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# flags\n# program counter\npc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# flags\n# program counter\npc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\n# flags\n# program counter\npc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\n# flags\n# program counter\npc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers\n# state (running)",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "ADD = 6\n# flags\n# program counter\npc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers\n# state (running)\nrunning = True",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "pc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):\n    try:",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "memory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "register = [0] * 8 # list of 8 registers\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # deal with comments",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day2.simple04",
        "description": "CSEU2-Architecture-gp.src.day2.simple04",
        "peekOfCode": "running = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # deal with comments\n                # split before and after any comment symbol '#'\n                comment_split = line.split(\"#\")",
        "detail": "CSEU2-Architecture-gp.src.day2.simple04",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "def load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # deal with comments\n                # split before and after any comment symbol '#'\n                comment_split = line.split(\"#\")\n                # convert the pre-comment portion (to the left) from binary to a value\n                # extract the first part of the split to a number variable",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# flags\n# program counter",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# flags\n# program counter\npc = 0",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# flags\n# program counter\npc = 0\n# memory",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# flags\n# program counter\npc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# flags\n# program counter\npc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "ADD = 6\nPUSH = 7\nPOP = 8\n# flags\n# program counter\npc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "PUSH = 7\nPOP = 8\n# flags\n# program counter\npc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers\nSP = 7 # Stack pointer R7",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "POP = 8\n# flags\n# program counter\npc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers\nSP = 7 # Stack pointer R7\n# state (running)",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "pc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers\nSP = 7 # Stack pointer R7\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "memory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers\nSP = 7 # Stack pointer R7\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "register = [0] * 8 # list of 8 registers\nSP = 7 # Stack pointer R7\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "SP = 7 # Stack pointer R7\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # deal with comments",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day3.simple05",
        "description": "CSEU2-Architecture-gp.src.day3.simple05",
        "peekOfCode": "running = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # deal with comments\n                # split before and after any comment symbol '#'\n                comment_split = line.split(\"#\")",
        "detail": "CSEU2-Architecture-gp.src.day3.simple05",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "def load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # deal with comments\n                # split before and after any comment symbol '#'\n                comment_split = line.split(\"#\")\n                # convert the pre-comment portion (to the left) from binary to a value\n                # extract the first part of the split to a number variable",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET = 10",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET = 10\n## branch table",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET = 10\n## branch table\n# bt = {",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET = 10\n## branch table\n# bt = {\n#     HALT: op_halt,",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET = 10\n## branch table\n# bt = {\n#     HALT: op_halt,\n#     PRINT_TOM: op_print_tom,",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "ADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET = 10\n## branch table\n# bt = {\n#     HALT: op_halt,\n#     PRINT_TOM: op_print_tom,\n#     PRINT_NUM: op_print_num,",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "PUSH = 7\nPOP = 8\nCALL = 9\nRET = 10\n## branch table\n# bt = {\n#     HALT: op_halt,\n#     PRINT_TOM: op_print_tom,\n#     PRINT_NUM: op_print_num,\n#     SAVE: op_save,",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "POP = 8\nCALL = 9\nRET = 10\n## branch table\n# bt = {\n#     HALT: op_halt,\n#     PRINT_TOM: op_print_tom,\n#     PRINT_NUM: op_print_num,\n#     SAVE: op_save,\n#     PRINT_REG: op_print_reg,",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "CALL",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "CALL = 9\nRET = 10\n## branch table\n# bt = {\n#     HALT: op_halt,\n#     PRINT_TOM: op_print_tom,\n#     PRINT_NUM: op_print_num,\n#     SAVE: op_save,\n#     PRINT_REG: op_print_reg,\n#     ADD: op_add,",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "RET",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "RET = 10\n## branch table\n# bt = {\n#     HALT: op_halt,\n#     PRINT_TOM: op_print_tom,\n#     PRINT_NUM: op_print_num,\n#     SAVE: op_save,\n#     PRINT_REG: op_print_reg,\n#     ADD: op_add,\n#     PUSH: op_push,",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "pc = 0\n# memory\nmemory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers\nSP = 7 # Stack pointer R7\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "memory = [0] * 128 # 128 bytes of RAM\n# registers\nregister = [0] * 8 # list of 8 registers\nSP = 7 # Stack pointer R7\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "register = [0] * 8 # list of 8 registers\nSP = 7 # Stack pointer R7\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "SP = 7 # Stack pointer R7\n# state (running)\nrunning = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # deal with comments",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "running = True\n# Helper Functions\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # deal with comments\n                # split before and after any comment symbol '#'\n                comment_split = line.split(\"#\")",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "op_pc",
        "kind": 5,
        "importPath": "CSEU2-Architecture-gp.src.day4.simple06",
        "description": "CSEU2-Architecture-gp.src.day4.simple06",
        "peekOfCode": "op_pc = False\n# REPL (FETCH, DECODE, EXECUTE)\nwhile running:\n    # FETCH\n    command = memory[pc]\n    # DECODE\n    if command == PRINT_TOM:\n        # EXECUTE\n        instruction_size = 1\n        print(\"Tom\")",
        "detail": "CSEU2-Architecture-gp.src.day4.simple06",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "description": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "peekOfCode": "class Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        self.nodes = set()\n        self.new_block(previous_hash=1, proof=100)\n    def new_block(self, proof, previous_hash=None):\n        \"\"\"\n        Create a new Block in the Blockchain\n        :param proof: <int> The proof given by the Proof of Work algorithm",
        "detail": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "mine",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "description": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "peekOfCode": "def mine():\n    # handle non json responses\n    values = request.get_json()\n    # check that the required fields are in the posted data\n    required_fields = ['proof', 'id']\n    if not all(k in values for k in required_fields):\n        response = {'message': \"Missing Values\"}\n        return jsonify(response), 400\n    # get the submitted proof from the values data\n    submitted_proof = values.get('proof')",
        "detail": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "full_chain",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "description": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "peekOfCode": "def full_chain():\n    response = {\n        'length': len(blockchain.chain),\n        'chain': blockchain.chain,\n    }\n    return jsonify(response), 200\n@app.route('/last_block', methods=['GET'])\ndef last_block():\n    response = { 'last_block': blockchain.last_block }\n    return jsonify(response), 200",
        "detail": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "last_block",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "description": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "peekOfCode": "def last_block():\n    response = { 'last_block': blockchain.last_block }\n    return jsonify(response), 200\n@app.route('/transactions/new', methods=['POST'])\ndef new_transaction():\n    # get the values in json format\n    values = request.get_json()\n    # check that the required fields exist\n    required_fields = ['sender', 'recipient', 'amount']\n    if not all(k in values for k in required_fields):",
        "detail": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "new_transaction",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "description": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "peekOfCode": "def new_transaction():\n    # get the values in json format\n    values = request.get_json()\n    # check that the required fields exist\n    required_fields = ['sender', 'recipient', 'amount']\n    if not all(k in values for k in required_fields):\n        response = { 'message': 'Error Missing values' }\n        return jsonify(response), 400\n    # create a new transaction\n    index = blockchain.new_transaction(values['sender'], values['recipient'], values['amount'])",
        "detail": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "description": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "peekOfCode": "app = Flask(__name__)\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json responses\n    values = request.get_json()\n    # check that the required fields are in the posted data",
        "detail": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "node_identifier",
        "kind": 5,
        "importPath": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "description": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "peekOfCode": "node_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json responses\n    values = request.get_json()\n    # check that the required fields are in the posted data\n    required_fields = ['proof', 'id']\n    if not all(k in values for k in required_fields):",
        "detail": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "blockchain",
        "kind": 5,
        "importPath": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "description": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "peekOfCode": "blockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json responses\n    values = request.get_json()\n    # check that the required fields are in the posted data\n    required_fields = ['proof', 'id']\n    if not all(k in values for k in required_fields):\n        response = {'message': \"Missing Values\"}\n        return jsonify(response), 400",
        "detail": "CSEU2-Blockchain-gp.src.basic_transactions_gp.blockchain",
        "documentation": {}
    },
    {
        "label": "proof_of_work",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.basic_transactions_gp.miner",
        "description": "CSEU2-Blockchain-gp.src.basic_transactions_gp.miner",
        "peekOfCode": "def proof_of_work(block):\n        \"\"\"\n        Simple Proof of Work Algorithm\n        Stringify the block and look for a proof.\n        Loop through possibilities, checking each one against `valid_proof`\n        in an effort to find a number that is a valid proof\n        :return: A valid proof for the provided block\n        \"\"\"\n        # One line version of code to stringify a block\n        block_string = json.dumps(block, sort_keys=True).encode()",
        "detail": "CSEU2-Blockchain-gp.src.basic_transactions_gp.miner",
        "documentation": {}
    },
    {
        "label": "valid_proof",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.basic_transactions_gp.miner",
        "description": "CSEU2-Blockchain-gp.src.basic_transactions_gp.miner",
        "peekOfCode": "def valid_proof(block_string, proof):\n    \"\"\"\n    Validates the Proof:  Does hash(block_string, proof) contain 6\n    leading zeroes?  Return true if the proof is valid\n    :param block_string: <string> The stringified block to use to\n    check in combination with `proof`\n    :param proof: <int?> The value that when combined with the\n    stringified previous block results in a hash that has the\n    correct number of leading zeroes.\n    :return: True if the resulting hash is a valid proof, False otherwise",
        "detail": "CSEU2-Blockchain-gp.src.basic_transactions_gp.miner",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "description": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "peekOfCode": "class Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        self.nodes = set()\n        self.new_block(previous_hash=1, proof=100)\n    def new_block(self, proof, previous_hash=None):\n        \"\"\"\n        Create a new Block in the Blockchain\n        :param proof: <int> The proof given by the Proof of Work algorithm",
        "detail": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "mine",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "description": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "peekOfCode": "def mine():\n    # handle non json responses\n    values = request.get_json()\n    # check that the required fields are in the posted data\n    required_fields = ['proof', 'id']\n    if not all(k in values for k in required_fields):\n        response = {'message': \"Missing Values\"}\n        return jsonify(response), 400\n    # get the submitted proof from the values data\n    submitted_proof = values.get('proof')",
        "detail": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "full_chain",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "description": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "peekOfCode": "def full_chain():\n    response = {\n        'length': len(blockchain.chain),\n        'chain': blockchain.chain,\n    }\n    return jsonify(response), 200\n@app.route('/last_block', methods=['GET'])\ndef last_block():\n    response = { 'last_block': blockchain.last_block }\n    return jsonify(response), 200",
        "detail": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "last_block",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "description": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "peekOfCode": "def last_block():\n    response = { 'last_block': blockchain.last_block }\n    return jsonify(response), 200\n@app.route('/transactions/new', methods=['POST'])\ndef new_transaction():\n    # get the values in json format\n    values = request.get_json()\n    # check that the required fields exist\n    required_fields = ['sender', 'recipient', 'amount']\n    if not all(k in values for k in required_fields):",
        "detail": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "new_transaction",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "description": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "peekOfCode": "def new_transaction():\n    # get the values in json format\n    values = request.get_json()\n    # check that the required fields exist\n    required_fields = ['sender', 'recipient', 'amount']\n    if not all(k in values for k in required_fields):\n        response = { 'message': 'Error Missing values' }\n        return jsonify(response), 400\n    # create a new transaction\n    index = blockchain.new_transaction(values['sender'], values['recipient'], values['amount'])",
        "detail": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "description": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "peekOfCode": "app = Flask(__name__)\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json responses\n    values = request.get_json()\n    # check that the required fields are in the posted data",
        "detail": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "node_identifier",
        "kind": 5,
        "importPath": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "description": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "peekOfCode": "node_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json responses\n    values = request.get_json()\n    # check that the required fields are in the posted data\n    required_fields = ['proof', 'id']\n    if not all(k in values for k in required_fields):",
        "detail": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "blockchain",
        "kind": 5,
        "importPath": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "description": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "peekOfCode": "blockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json responses\n    values = request.get_json()\n    # check that the required fields are in the posted data\n    required_fields = ['proof', 'id']\n    if not all(k in values for k in required_fields):\n        response = {'message': \"Missing Values\"}\n        return jsonify(response), 400",
        "detail": "CSEU2-Blockchain-gp.src.client_mining_p.blockchain",
        "documentation": {}
    },
    {
        "label": "proof_of_work",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.client_mining_p.miner",
        "description": "CSEU2-Blockchain-gp.src.client_mining_p.miner",
        "peekOfCode": "def proof_of_work(block):\n        \"\"\"\n        Simple Proof of Work Algorithm\n        Stringify the block and look for a proof.\n        Loop through possibilities, checking each one against `valid_proof`\n        in an effort to find a number that is a valid proof\n        :return: A valid proof for the provided block\n        \"\"\"\n        # One line version of code to stringify a block\n        block_string = json.dumps(block, sort_keys=True).encode()",
        "detail": "CSEU2-Blockchain-gp.src.client_mining_p.miner",
        "documentation": {}
    },
    {
        "label": "valid_proof",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.client_mining_p.miner",
        "description": "CSEU2-Blockchain-gp.src.client_mining_p.miner",
        "peekOfCode": "def valid_proof(block_string, proof):\n    \"\"\"\n    Validates the Proof:  Does hash(block_string, proof) contain 6\n    leading zeroes?  Return true if the proof is valid\n    :param block_string: <string> The stringified block to use to\n    check in combination with `proof`\n    :param proof: <int?> The value that when combined with the\n    stringified previous block results in a hash that has the\n    correct number of leading zeroes.\n    :return: True if the resulting hash is a valid proof, False otherwise",
        "detail": "CSEU2-Blockchain-gp.src.client_mining_p.miner",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "CSEU2-Blockchain-gp.src.basic_block",
        "description": "CSEU2-Blockchain-gp.src.basic_block",
        "peekOfCode": "class Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        self.nodes = set()\n        self.new_block(previous_hash=1, proof=100)\n    def new_block(self, proof, previous_hash=None):\n        \"\"\"\n        Create a new Block in the Blockchain\n        :param proof: <int> The proof given by the Proof of Work algorithm",
        "detail": "CSEU2-Blockchain-gp.src.basic_block",
        "documentation": {}
    },
    {
        "label": "mine",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.basic_block",
        "description": "CSEU2-Blockchain-gp.src.basic_block",
        "peekOfCode": "def mine():\n    # We run the proof of work algorithm to get the next proof...\n    proof = blockchain.proof_of_work()\n    # Forge the new Block by adding it to the chain\n    previous_hash = blockchain.hash(blockchain.last_block)\n    block = blockchain.new_block(proof, previous_hash)\n    response = {\n        'message': \"New Block Forged\",\n        'index': block['index'],\n        'transactions': block['transactions'],",
        "detail": "CSEU2-Blockchain-gp.src.basic_block",
        "documentation": {}
    },
    {
        "label": "full_chain",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.basic_block",
        "description": "CSEU2-Blockchain-gp.src.basic_block",
        "peekOfCode": "def full_chain():\n    response = {\n        'length': len(blockchain.chain),\n        'chain': blockchain.chain,\n    }\n    return jsonify(response), 200\n# Run the program on port 5000\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "CSEU2-Blockchain-gp.src.basic_block",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "CSEU2-Blockchain-gp.src.basic_block",
        "description": "CSEU2-Blockchain-gp.src.basic_block",
        "peekOfCode": "app = Flask(__name__)\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    proof = blockchain.proof_of_work()\n    # Forge the new Block by adding it to the chain",
        "detail": "CSEU2-Blockchain-gp.src.basic_block",
        "documentation": {}
    },
    {
        "label": "node_identifier",
        "kind": 5,
        "importPath": "CSEU2-Blockchain-gp.src.basic_block",
        "description": "CSEU2-Blockchain-gp.src.basic_block",
        "peekOfCode": "node_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    proof = blockchain.proof_of_work()\n    # Forge the new Block by adding it to the chain\n    previous_hash = blockchain.hash(blockchain.last_block)\n    block = blockchain.new_block(proof, previous_hash)",
        "detail": "CSEU2-Blockchain-gp.src.basic_block",
        "documentation": {}
    },
    {
        "label": "blockchain",
        "kind": 5,
        "importPath": "CSEU2-Blockchain-gp.src.basic_block",
        "description": "CSEU2-Blockchain-gp.src.basic_block",
        "peekOfCode": "blockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    proof = blockchain.proof_of_work()\n    # Forge the new Block by adding it to the chain\n    previous_hash = blockchain.hash(blockchain.last_block)\n    block = blockchain.new_block(proof, previous_hash)\n    response = {\n        'message': \"New Block Forged\",",
        "detail": "CSEU2-Blockchain-gp.src.basic_block",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.hello_world",
        "description": "CSEU2-Blockchain-gp.src.hello_world",
        "peekOfCode": "def hello():\n    return \"Hello CSEU2!\"\n@app.route(\"/sum\")\ndef sum():\n    return f\"2 * 4 = {2 * 4}\"\n# take in an argument\n@app.route(\"/api/<argument>\")\ndef run_stuff(argument):\n    return f\"Some {argument}!\"\nif __name__ == '__main__':",
        "detail": "CSEU2-Blockchain-gp.src.hello_world",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.hello_world",
        "description": "CSEU2-Blockchain-gp.src.hello_world",
        "peekOfCode": "def sum():\n    return f\"2 * 4 = {2 * 4}\"\n# take in an argument\n@app.route(\"/api/<argument>\")\ndef run_stuff(argument):\n    return f\"Some {argument}!\"\nif __name__ == '__main__':\n    app.run()",
        "detail": "CSEU2-Blockchain-gp.src.hello_world",
        "documentation": {}
    },
    {
        "label": "run_stuff",
        "kind": 2,
        "importPath": "CSEU2-Blockchain-gp.src.hello_world",
        "description": "CSEU2-Blockchain-gp.src.hello_world",
        "peekOfCode": "def run_stuff(argument):\n    return f\"Some {argument}!\"\nif __name__ == '__main__':\n    app.run()",
        "detail": "CSEU2-Blockchain-gp.src.hello_world",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "CSEU2-Blockchain-gp.src.hello_world",
        "description": "CSEU2-Blockchain-gp.src.hello_world",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef hello():\n    return \"Hello CSEU2!\"\n@app.route(\"/sum\")\ndef sum():\n    return f\"2 * 4 = {2 * 4}\"\n# take in an argument\n@app.route(\"/api/<argument>\")\ndef run_stuff(argument):",
        "detail": "CSEU2-Blockchain-gp.src.hello_world",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedListTests",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day1.doubly_linked_list.test_doubly_linked_list",
        "description": "CSEU2-DataStructures-gp.src.day1.doubly_linked_list.test_doubly_linked_list",
        "peekOfCode": "class DoublyLinkedListTests(unittest.TestCase):\n    def setUp(self):\n        self.node = ListNode(1)\n        self.dll = DoublyLinkedList(self.node)\n    def test_list_remove_from_tail(self):\n        self.dll.remove_from_tail()\n        self.assertIsNone(self.dll.head)\n        self.assertIsNone(self.dll.tail)\n        self.assertEqual(len(self.dll), 0)\n        self.dll.add_to_tail(33)",
        "detail": "CSEU2-DataStructures-gp.src.day1.doubly_linked_list.test_doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.dll_queue",
        "description": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.dll_queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.size = 0\n        # Why is our DLL a good choice to store our elements?\n        self.storage = DoublyLinkedList()\n    def enqueue(self, value):\n        # add the value to the DLL\n        self.storage.add_to_tail(value)\n        # increment size counter\n        self.size += 1",
        "detail": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.dll_queue",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.dll_stack",
        "description": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.dll_stack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.size = 0\n        # Why is our DLL a good choice to store our elements?\n        # self.storage = ?\n    def push(self, value):\n        pass\n    def pop(self):\n        pass\n    def len(self):",
        "detail": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.dll_stack",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.doubly_linked_list",
        "description": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.doubly_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, value, prev=None, next=None):\n        self.value = value\n        self.prev = prev\n        self.next = next\n    \"\"\"Wrap the given value in a ListNode and insert it\n    after this node. Note that this node could already\n    have a next node it is point to.\"\"\"\n    def insert_after(self, value):\n        current_next = self.next",
        "detail": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.doubly_linked_list",
        "description": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self, node=None):\n        self.head = node\n        self.tail = node\n        self.length = 1 if node is not None else 0\n    def __len__(self):\n        return self.length\n    \"\"\"Wraps the given value in a ListNode and inserts it \n    as the new head of the list. Don't forget to handle \n    the old head node's previous pointer accordingly.\"\"\"",
        "detail": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "QueueTests",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.test_queue",
        "description": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.test_queue",
        "peekOfCode": "class QueueTests(unittest.TestCase):\n    def setUp(self):\n        self.q = Queue()\n    def test_len_returns_0_for_empty_queue(self):\n        self.assertEqual(self.q.len(), 0)\n    def test_len_returns_correct_length_after_enqueue(self):\n        self.assertEqual(self.q.len(), 0)\n        self.q.enqueue(2)\n        self.assertEqual(self.q.len(), 1)\n        self.q.enqueue(4)",
        "detail": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.test_queue",
        "documentation": {}
    },
    {
        "label": "QueueTests",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.test_stack",
        "description": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.test_stack",
        "peekOfCode": "class QueueTests(unittest.TestCase):\n    def setUp(self):\n        self.s = Stack()\n    def test_len_returns_0_for_empty_stack(self):\n        self.assertEqual(self.s.len(), 0)\n    def test_len_returns_correct_length_after_push(self):\n        self.assertEqual(self.s.len(), 0)\n        self.s.push(2)\n        self.assertEqual(self.s.len(), 1)\n        self.s.push(4)",
        "detail": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.test_stack",
        "documentation": {}
    },
    {
        "label": "TextBuffer",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.text_buffer",
        "description": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.text_buffer",
        "peekOfCode": "class TextBuffer:\n    def __init__(self, init=None):\n        # create a storage contents for the buffer\n        self.contents = DoublyLinkedList()\n        # check if an init string has been provided\n        if init:\n            # if so insert the init string in to the contents\n            for char in init:\n                self.contents.add_to_tail(char)\n    def __str__(self):",
        "detail": "CSEU2-DataStructures-gp.src.day2.queue_and_stack.text_buffer",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day2.problem1",
        "description": "CSEU2-DataStructures-gp.src.day2.problem1",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n    # define add\n    def add(self, value):\n        self.next = Node(value)\n    # define find middle\n    def find_middle(self):\n        # set the middle to self",
        "detail": "CSEU2-DataStructures-gp.src.day2.problem1",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "CSEU2-DataStructures-gp.src.day2.problem1",
        "description": "CSEU2-DataStructures-gp.src.day2.problem1",
        "peekOfCode": "root = Node(3)\ncur = root\ncur.add(4)\ncur = cur.next\ncur.add(5)\ncur = cur.next\ncur.add(6)\ncur = cur.next\ncur.add(7)\ncur = cur.next",
        "detail": "CSEU2-DataStructures-gp.src.day2.problem1",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU2-DataStructures-gp.src.day2.problem1",
        "description": "CSEU2-DataStructures-gp.src.day2.problem1",
        "peekOfCode": "cur = root\ncur.add(4)\ncur = cur.next\ncur.add(5)\ncur = cur.next\ncur.add(6)\ncur = cur.next\ncur.add(7)\ncur = cur.next\nprint(cur.next)",
        "detail": "CSEU2-DataStructures-gp.src.day2.problem1",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU2-DataStructures-gp.src.day2.problem1",
        "description": "CSEU2-DataStructures-gp.src.day2.problem1",
        "peekOfCode": "cur = cur.next\ncur.add(5)\ncur = cur.next\ncur.add(6)\ncur = cur.next\ncur.add(7)\ncur = cur.next\nprint(cur.next)\nprint(root.find_middle())",
        "detail": "CSEU2-DataStructures-gp.src.day2.problem1",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU2-DataStructures-gp.src.day2.problem1",
        "description": "CSEU2-DataStructures-gp.src.day2.problem1",
        "peekOfCode": "cur = cur.next\ncur.add(6)\ncur = cur.next\ncur.add(7)\ncur = cur.next\nprint(cur.next)\nprint(root.find_middle())",
        "detail": "CSEU2-DataStructures-gp.src.day2.problem1",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU2-DataStructures-gp.src.day2.problem1",
        "description": "CSEU2-DataStructures-gp.src.day2.problem1",
        "peekOfCode": "cur = cur.next\ncur.add(7)\ncur = cur.next\nprint(cur.next)\nprint(root.find_middle())",
        "detail": "CSEU2-DataStructures-gp.src.day2.problem1",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU2-DataStructures-gp.src.day2.problem1",
        "description": "CSEU2-DataStructures-gp.src.day2.problem1",
        "peekOfCode": "cur = cur.next\nprint(cur.next)\nprint(root.find_middle())",
        "detail": "CSEU2-DataStructures-gp.src.day2.problem1",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.binary_search_tree",
        "description": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.binary_search_tree",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self, value):\n        # set the value at the current node\n        self.value = value\n        # add ref to left child node\n        self.left = None\n        # add ref to the right child node\n        self.right = None\n    # Insert the given value into the tree\n    def insert(self, value):",
        "detail": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.dll_queue",
        "description": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.dll_queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.size = 0\n        # Why is our DLL a good choice to store our elements?\n        self.storage = DoublyLinkedList()\n    def enqueue(self, value):\n        # add the value to the DLL\n        self.storage.add_to_tail(value)\n        # increment size counter\n        self.size += 1",
        "detail": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.dll_queue",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.dll_stack",
        "description": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.dll_stack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.size = 0\n        self.storage = DoublyLinkedList()\n    def push(self, value):\n        self.storage.add_to_head(value)\n    def pop(self):\n        if self.len() > 0:\n            return self.storage.remove_from_head()\n        else:",
        "detail": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.dll_stack",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.doubly_linked_list",
        "description": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.doubly_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, value, prev=None, next=None):\n        self.value = value\n        self.prev = prev\n        self.next = next\n    \"\"\"Wrap the given value in a ListNode and insert it\n    after this node. Note that this node could already\n    have a next node it is point to.\"\"\"\n    def insert_after(self, value):\n        current_next = self.next",
        "detail": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.doubly_linked_list",
        "description": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self, node=None):\n        self.head = node\n        self.tail = node\n        self.length = 1 if node is not None else 0\n    def __len__(self):\n        return self.length\n    \"\"\"Wraps the given value in a ListNode and inserts it \n    as the new head of the list. Don't forget to handle \n    the old head node's previous pointer accordingly.\"\"\"",
        "detail": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "BinarySearchTreeTests",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.test_binary_search_tree",
        "description": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.test_binary_search_tree",
        "peekOfCode": "class BinarySearchTreeTests(unittest.TestCase):\n    def setUp(self):\n        self.bst = BinarySearchTree(5)\n    def test_insert(self):\n        self.bst.insert(2)\n        self.bst.insert(3)\n        self.bst.insert(7)\n        self.bst.insert(6)\n        self.assertEqual(self.bst.left.right.value, 3)\n        self.assertEqual(self.bst.right.left.value, 6)",
        "detail": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.test_binary_search_tree",
        "documentation": {}
    },
    {
        "label": "test_print_traversals",
        "kind": 2,
        "importPath": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.test_binary_search_tree",
        "description": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.test_binary_search_tree",
        "peekOfCode": "def test_print_traversals(self):\n        # WARNING:  Tests are for Print()\n        # Debug calls to Print() in functions will cause failure\n        stdout_ = sys.stdout  # Keep previous value\n        sys.stdout = io.StringIO()\n        self.bst = BinarySearchTree(1)\n        self.bst.insert(8)\n        self.bst.insert(5)\n        self.bst.insert(7)\n        self.bst.insert(6)",
        "detail": "CSEU2-DataStructures-gp.src.day3.binary_search_tree.test_binary_search_tree",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day3.lru_cache.doubly_linked_list",
        "description": "CSEU2-DataStructures-gp.src.day3.lru_cache.doubly_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, value, prev=None, next=None):\n        self.value = value\n        self.prev = prev\n        self.next = next\n    \"\"\"Wrap the given value in a ListNode and insert it\n    after this node. Note that this node could already\n    have a next node it is point to.\"\"\"\n    def insert_after(self, value):\n        current_next = self.next",
        "detail": "CSEU2-DataStructures-gp.src.day3.lru_cache.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day3.lru_cache.doubly_linked_list",
        "description": "CSEU2-DataStructures-gp.src.day3.lru_cache.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self, node=None):\n        self.head = node\n        self.tail = node\n        self.length = 1 if node is not None else 0\n    def __len__(self):\n        return self.length\n    \"\"\"Wraps the given value in a ListNode and inserts it \n    as the new head of the list. Don't forget to handle \n    the old head node's previous pointer accordingly.\"\"\"",
        "detail": "CSEU2-DataStructures-gp.src.day3.lru_cache.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "LRUCache",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day3.lru_cache.lru_cache",
        "description": "CSEU2-DataStructures-gp.src.day3.lru_cache.lru_cache",
        "peekOfCode": "class LRUCache:\n    \"\"\"\n    Our LRUCache class keeps track of the max number of nodes it\n    can hold, the current number of nodes it is holding, a doubly-\n    linked list that holds the key-value entries in the correct\n    order, as well as a storage dict that provides fast access\n    to every node stored in the cache.\n    \"\"\"\n    def __init__(self, limit=10):\n        self.limit = limit",
        "detail": "CSEU2-DataStructures-gp.src.day3.lru_cache.lru_cache",
        "documentation": {}
    },
    {
        "label": "CacheTests",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day3.lru_cache.test_lru_cache",
        "description": "CSEU2-DataStructures-gp.src.day3.lru_cache.test_lru_cache",
        "peekOfCode": "class CacheTests(unittest.TestCase):\n    def setUp(self):\n        self.cache = LRUCache(3)\n    def test_cache_overwrite_appropriately(self):\n        self.cache.set('item1', 'a')\n        self.cache.set('item2', 'b')\n        self.cache.set('item3', 'c')\n        self.cache.set('item2', 'z')\n        self.assertEqual(self.cache.get('item1'), 'a')\n        self.assertEqual(self.cache.get('item2'), 'z')",
        "detail": "CSEU2-DataStructures-gp.src.day3.lru_cache.test_lru_cache",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.binary_search_tree",
        "description": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.binary_search_tree",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self, value):\n        # set the value at the current node\n        self.value = value\n        # add ref to left child node\n        self.left = None\n        # add ref to the right child node\n        self.right = None\n    # Insert the given value into the tree\n    def insert(self, value):",
        "detail": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.dll_queue",
        "description": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.dll_queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.size = 0\n        # Why is our DLL a good choice to store our elements?\n        self.storage = DoublyLinkedList()\n    def enqueue(self, value):\n        # add the value to the DLL\n        self.storage.add_to_tail(value)\n        # increment size counter\n        self.size += 1",
        "detail": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.dll_queue",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.dll_stack",
        "description": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.dll_stack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.size = 0\n        self.storage = DoublyLinkedList()\n    def push(self, value):\n        self.storage.add_to_head(value)\n    def pop(self):\n        if self.len() > 0:\n            return self.storage.remove_from_head()\n        else:",
        "detail": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.dll_stack",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.doubly_linked_list",
        "description": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.doubly_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, value, prev=None, next=None):\n        self.value = value\n        self.prev = prev\n        self.next = next\n    \"\"\"Wrap the given value in a ListNode and insert it\n    after this node. Note that this node could already\n    have a next node it is point to.\"\"\"\n    def insert_after(self, value):\n        current_next = self.next",
        "detail": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.doubly_linked_list",
        "description": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self, node=None):\n        self.head = node\n        self.tail = node\n        self.length = 1 if node is not None else 0\n    def __len__(self):\n        return self.length\n    \"\"\"Wraps the given value in a ListNode and inserts it \n    as the new head of the list. Don't forget to handle \n    the old head node's previous pointer accordingly.\"\"\"",
        "detail": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "BinarySearchTreeTests",
        "kind": 6,
        "importPath": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.test_binary_search_tree",
        "description": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.test_binary_search_tree",
        "peekOfCode": "class BinarySearchTreeTests(unittest.TestCase):\n    def setUp(self):\n        self.bst = BinarySearchTree(5)\n    def test_insert(self):\n        self.bst.insert(2)\n        self.bst.insert(3)\n        self.bst.insert(7)\n        self.bst.insert(6)\n        self.assertEqual(self.bst.left.right.value, 3)\n        self.assertEqual(self.bst.right.left.value, 6)",
        "detail": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.test_binary_search_tree",
        "documentation": {}
    },
    {
        "label": "test_print_traversals",
        "kind": 2,
        "importPath": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.test_binary_search_tree",
        "description": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.test_binary_search_tree",
        "peekOfCode": "def test_print_traversals(self):\n        # WARNING:  Tests are for Print()\n        # Debug calls to Print() in functions will cause failure\n        stdout_ = sys.stdout  # Keep previous value\n        sys.stdout = io.StringIO()\n        self.bst = BinarySearchTree(1)\n        self.bst.insert(8)\n        self.bst.insert(5)\n        self.bst.insert(7)\n        self.bst.insert(6)",
        "detail": "CSEU2-DataStructures-gp.src.day4.binary_search_tree.test_binary_search_tree",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.challenge.util",
        "description": "CSEU2-Graphs-gp.src.challenge.util",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.challenge.util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.challenge.util",
        "description": "CSEU2-Graphs-gp.src.challenge.util",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.challenge.util",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "description": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "peekOfCode": "def get_neighbors(word):\n    # make an empty list for neighbors\n    neighbors = []\n    # create a list of chars from the word\n    string_word = list(word)\n    # loop over the index of the string word\n    for i in range(len(string_word)):\n        # loop over each letter in the alphabet\n        for letter in letters:\n            # make a temporary word to work on",
        "detail": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "find_word_ladder",
        "kind": 2,
        "importPath": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "description": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "peekOfCode": "def find_word_ladder(beginWord, endWord):\n    # create a queue\n    q = Queue()\n    # enqueue a list holding the starting vertex id\n    q.enqueue([beginWord])\n    # created an empty visited set\n    visited = set()\n    # while the queue is not empty\n    while q.size() > 0:\n        # dequeue to the path",
        "detail": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "description": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "peekOfCode": "f = open('words.txt', 'r')\nwords = f.read().split(\"\\n\")\nf.close()\n# create a set of the words from the file\nword_set = set()\nfor word in words:\n      word_set.add(word.lower())\nletters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n# Utility function (Helper Function)\n\"\"\"",
        "detail": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "description": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "peekOfCode": "words = f.read().split(\"\\n\")\nf.close()\n# create a set of the words from the file\nword_set = set()\nfor word in words:\n      word_set.add(word.lower())\nletters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n# Utility function (Helper Function)\n\"\"\"\n    This could be part of your find word ladder function",
        "detail": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "word_set",
        "kind": 5,
        "importPath": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "description": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "peekOfCode": "word_set = set()\nfor word in words:\n      word_set.add(word.lower())\nletters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n# Utility function (Helper Function)\n\"\"\"\n    This could be part of your find word ladder function\n    but I would decompose the problem in to smaller steps\n    using a helper function to get the neighbors \n    and to work on the letters",
        "detail": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "description": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "peekOfCode": "letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n# Utility function (Helper Function)\n\"\"\"\n    This could be part of your find word ladder function\n    but I would decompose the problem in to smaller steps\n    using a helper function to get the neighbors \n    and to work on the letters\n\"\"\"\ndef get_neighbors(word):\n    # make an empty list for neighbors",
        "detail": "CSEU2-Graphs-gp.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "island_counter",
        "kind": 2,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.isl",
        "description": "CSEU2-Graphs-gp.src.challenge2.isl",
        "peekOfCode": "def island_counter(arr):\n  rows = len(arr) \n  cols = len(arr[0])\n  count = 0\n  for i in range(rows):\n    for j in range(cols):\n      if arr[i][j] == 1: \n        deleteOnes(arr, i, j, rows, cols)\n        count += 1\n  return count",
        "detail": "CSEU2-Graphs-gp.src.challenge2.isl",
        "documentation": {}
    },
    {
        "label": "deleteOnes",
        "kind": 2,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.isl",
        "description": "CSEU2-Graphs-gp.src.challenge2.isl",
        "peekOfCode": "def deleteOnes(grid, i, j, rows, cols):\n  q = Queue()\n  q.enqueue([i, j])\n  grid[i][j] = 0\n  while q.size() > 0:\n    node = q.dequeue()\n    row = node[0]\n    col = node[1]\n    for row2, col2 in ((row + 1, col), (row - 1, col), (row, col + 1), (row, col -1)):\n      if 0 <= row2 < rows and 0 <= col2 < cols and grid[row2][col2] != 0:",
        "detail": "CSEU2-Graphs-gp.src.challenge2.isl",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.isl",
        "description": "CSEU2-Graphs-gp.src.challenge2.isl",
        "peekOfCode": "islands = [[0, 1, 0, 1, 0],\n        [1, 1, 0, 1, 1],\n        [0, 0, 1, 0, 0],\n        [1, 0, 1, 0, 0],\n        [1, 1, 0, 0, 0]]\nisland_counter(islands)  # 4\nislands = [[1, 0, 0, 1, 1, 0, 1, 1, 0, 1],\n        [0, 0, 1, 1, 0, 1, 0, 0, 0, 0],\n        [0, 1, 1, 1, 0, 0, 0, 1, 0, 1],\n        [0, 0, 1, 0, 0, 1, 0, 0, 1, 1],",
        "detail": "CSEU2-Graphs-gp.src.challenge2.isl",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.isl",
        "description": "CSEU2-Graphs-gp.src.challenge2.isl",
        "peekOfCode": "islands = [[1, 0, 0, 1, 1, 0, 1, 1, 0, 1],\n        [0, 0, 1, 1, 0, 1, 0, 0, 0, 0],\n        [0, 1, 1, 1, 0, 0, 0, 1, 0, 1],\n        [0, 0, 1, 0, 0, 1, 0, 0, 1, 1],\n        [0, 0, 1, 1, 0, 1, 0, 1, 1, 0],\n        [0, 1, 0, 1, 1, 1, 0, 1, 0, 0],\n        [0, 0, 1, 0, 0, 1, 1, 0, 0, 0],\n        [1, 0, 1, 1, 0, 0, 0, 1, 1, 0],\n        [0, 1, 1, 0, 0, 0, 1, 1, 0, 0],\n        [0, 0, 1, 1, 0, 1, 0, 0, 1, 0]]",
        "detail": "CSEU2-Graphs-gp.src.challenge2.isl",
        "documentation": {}
    },
    {
        "label": "OLDStack",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.islands",
        "description": "CSEU2-Graphs-gp.src.challenge2.islands",
        "peekOfCode": "class OLDStack:\n    def __init__(self):\n        self.storage = []\n    \"\"\" \n        Push method\n        -----------\n        takes in a value and appends it to the storage\n    \"\"\"\n    def push(self, value):\n        self.storage.append(value)",
        "detail": "CSEU2-Graphs-gp.src.challenge2.islands",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.islands",
        "description": "CSEU2-Graphs-gp.src.challenge2.islands",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.challenge2.islands",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.islands",
        "description": "CSEU2-Graphs-gp.src.challenge2.islands",
        "peekOfCode": "def get_neighbors(x, y, matrix):\n    # create a neighbors list\n    neighbors = []\n    # check the north south east and west for any 1's\n    # (this would be a bunch of if conditions)\n        # and append any positive finds \n        # to the neighbors list as a tuple\n    if x > 0 and matrix[y][x - 1] == 1:\n        neighbors.append((x - 1, y))\n    if x < len(matrix[0]) - 1 and matrix[y][x + 1] == 1:",
        "detail": "CSEU2-Graphs-gp.src.challenge2.islands",
        "documentation": {}
    },
    {
        "label": "dft",
        "kind": 2,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.islands",
        "description": "CSEU2-Graphs-gp.src.challenge2.islands",
        "peekOfCode": "def dft(x, y, matrix, visited):\n    # create a stack\n    s = Stack()\n    # push (x, y) tuple to the stack\n    s.push((x, y))\n    # while the stack has data\n    while s.size() > 0:\n        # pop a vert off the stack\n        v = s.pop()\n        # extract the x and y from the tuple",
        "detail": "CSEU2-Graphs-gp.src.challenge2.islands",
        "documentation": {}
    },
    {
        "label": "island_counter",
        "kind": 2,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.islands",
        "description": "CSEU2-Graphs-gp.src.challenge2.islands",
        "peekOfCode": "def island_counter(matrix):\n    # create a visited matrix\n    visited = []\n    # loop over the matrix\n    for _ in range(len(matrix)):\n        # append False to the visited matrix \n        # times the length of the matrix[0]\n        visited.append([False] * len(matrix[0]))\n    # set an island counter\n    island_count = 0",
        "detail": "CSEU2-Graphs-gp.src.challenge2.islands",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.util",
        "description": "CSEU2-Graphs-gp.src.challenge2.util",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.challenge2.util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.challenge2.util",
        "description": "CSEU2-Graphs-gp.src.challenge2.util",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.challenge2.util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.earliest_ancestor.ans",
        "description": "CSEU2-Graphs-gp.src.earliest_ancestor.ans",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, value):\n        self.storage.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.storage.pop(0)\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.earliest_ancestor.ans",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.earliest_ancestor.ans",
        "description": "CSEU2-Graphs-gp.src.earliest_ancestor.ans",
        "peekOfCode": "class Graph:\n    \"\"\" \n        Represent a graph as a dictionary of verts \n        mapping labels to edges \n    \"\"\"\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex_id):\n        if vertex_id not in self.vertices:\n            self.vertices[vertex_id] = set()",
        "detail": "CSEU2-Graphs-gp.src.earliest_ancestor.ans",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "kind": 2,
        "importPath": "CSEU2-Graphs-gp.src.earliest_ancestor.ans",
        "description": "CSEU2-Graphs-gp.src.earliest_ancestor.ans",
        "peekOfCode": "def earliest_ancestor(ancestors, starting_node):\n    # 1. Build the graph\n    # instantiate a new graph object\n    graph = Graph()\n    # loop over all pairs in ancestors\n    for pair in ancestors:\n        # add pair[0] and pair[1] to the graph\n        graph.add_vertex(pair[0])\n        graph.add_vertex(pair[1])\n        # build the edges in reverse",
        "detail": "CSEU2-Graphs-gp.src.earliest_ancestor.ans",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.earliest_ancestor.test_ans",
        "description": "CSEU2-Graphs-gp.src.earliest_ancestor.test_ans",
        "peekOfCode": "class Test(unittest.TestCase):\n    '''\n       10\n     /\n    1   2   4  11\n     \\ /   / \\ /\n      3   5   8\n       \\ / \\   \\\n        6   7   9\n    '''",
        "detail": "CSEU2-Graphs-gp.src.earliest_ancestor.test_ans",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.social_graph.social",
        "description": "CSEU2-Graphs-gp.src.social_graph.social",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, value):\n        self.storage.append(value)\n    def dequeue(self):\n        if (self.size()) > 0:\n            return self.storage.pop(0)\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.social_graph.social",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.social_graph.social",
        "description": "CSEU2-Graphs-gp.src.social_graph.social",
        "peekOfCode": "class User:\n    def __init__(self, name):\n        self.name = name\nclass SocialGraph:\n    def __init__(self):\n        self.lastID = 0\n        self.users = {}\n        self.friendships = {}\n    def addFriendship(self, userID, friendID):\n        \"\"\"",
        "detail": "CSEU2-Graphs-gp.src.social_graph.social",
        "documentation": {}
    },
    {
        "label": "SocialGraph",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.social_graph.social",
        "description": "CSEU2-Graphs-gp.src.social_graph.social",
        "peekOfCode": "class SocialGraph:\n    def __init__(self):\n        self.lastID = 0\n        self.users = {}\n        self.friendships = {}\n    def addFriendship(self, userID, friendID):\n        \"\"\"\n        Creates a bi-directional friendship\n        \"\"\"\n        if userID == friendID:",
        "detail": "CSEU2-Graphs-gp.src.social_graph.social",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.adjacency_list",
        "description": "CSEU2-Graphs-gp.src.adjacency_list",
        "peekOfCode": "class Graph:\n    \"\"\" Represent a Graph as dictionary of vertices map the labels to edges.\"\"\"\n    # constructor\n    def __init__(self):\n        # empty dictionary for verts\n        self.vertices = {}\n    # add vertex\n    def add_vertex(self, vertex_id):\n        # at vertex_id create an empty set\n        self.vertices[vertex_id] = set()",
        "detail": "CSEU2-Graphs-gp.src.adjacency_list",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.bft",
        "description": "CSEU2-Graphs-gp.src.bft",
        "peekOfCode": "class Graph:\n    \"\"\" Represent a Graph as dictionary of vertices map the labels to edges.\"\"\"\n    # constructor\n    def __init__(self):\n        # empty dictionary for verts\n        self.vertices = {}\n    # add vertex\n    def add_vertex(self, vertex_id):\n        # at vertex_id create an empty set\n        self.vertices[vertex_id] = set()",
        "detail": "CSEU2-Graphs-gp.src.bft",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.dft",
        "description": "CSEU2-Graphs-gp.src.dft",
        "peekOfCode": "class Graph:\n    \"\"\" Represent a Graph as dictionary of vertices map the labels to edges.\"\"\"\n    # constructor\n    def __init__(self):\n        # empty dictionary for verts\n        self.vertices = {}\n    # add vertex\n    def add_vertex(self, vertex_id):\n        # at vertex_id create an empty set\n        self.vertices[vertex_id] = set()",
        "detail": "CSEU2-Graphs-gp.src.dft",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.graph",
        "description": "CSEU2-Graphs-gp.src.graph",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.graph",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.graph",
        "description": "CSEU2-Graphs-gp.src.graph",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.graph",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.graph",
        "description": "CSEU2-Graphs-gp.src.graph",
        "peekOfCode": "class Graph:\n    \"\"\"Represent a graph as a dictionary of vertices mapping labels to edges.\"\"\"\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex_id):\n        self.vertices[vertex_id] = set()\n    def add_edge(self, v1, v2):\n        if v1 in self.vertices and v2 in self.vertices:\n            self.vertices[v1].add(v2)\n            self.vertices[v2].add(v1)",
        "detail": "CSEU2-Graphs-gp.src.graph",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.user_friendship",
        "description": "CSEU2-Graphs-gp.src.user_friendship",
        "peekOfCode": "class User:\n    def __init__(self, name):\n        self.name = name\nclass SocialGraph:\n    def __init__(self):\n        self.lastID = 0\n        self.users = {}\n        self.friendships = {}\n    def addFriendship(self, userID, friendID):\n        \"\"\"",
        "detail": "CSEU2-Graphs-gp.src.user_friendship",
        "documentation": {}
    },
    {
        "label": "SocialGraph",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.user_friendship",
        "description": "CSEU2-Graphs-gp.src.user_friendship",
        "peekOfCode": "class SocialGraph:\n    def __init__(self):\n        self.lastID = 0\n        self.users = {}\n        self.friendships = {}\n    def addFriendship(self, userID, friendID):\n        \"\"\"\n        Creates a bi-directional friendship\n        \"\"\"\n        if userID == friendID:",
        "detail": "CSEU2-Graphs-gp.src.user_friendship",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.util",
        "description": "CSEU2-Graphs-gp.src.util",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU2-Graphs-gp.src.util",
        "description": "CSEU2-Graphs-gp.src.util",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU2-Graphs-gp.src.util",
        "documentation": {}
    },
    {
        "label": "longest_linked_list_chain",
        "kind": 2,
        "importPath": "CSEU2-HashTables-gp.src.chaining",
        "description": "CSEU2-HashTables-gp.src.chaining",
        "peekOfCode": "def longest_linked_list_chain(keys, buckets, loops=10, useSHA=False):\n    '''\n    Rolls `keys` number of random keys into `buckets` buckets\n    and counts the collisions.\n    Run `loops` number of times.\n    '''\n    # loop over the range of loops\n    for _ in range(loops):\n        # set key counts\n        key_counts = {}",
        "detail": "CSEU2-HashTables-gp.src.chaining",
        "documentation": {}
    },
    {
        "label": "how_many_before_collision",
        "kind": 2,
        "importPath": "CSEU2-HashTables-gp.src.collisions",
        "description": "CSEU2-HashTables-gp.src.collisions",
        "peekOfCode": "def how_many_before_collision(buckets, loops=1):\n    '''\n    Roll random hash indexes into `buckets` and print\n    how many rolls before a hash collision.\n    Run `loops` number of times.\n    '''\n    # loop over loops range\n    for _ in range(loops):\n        # track the tries count\n        tries = 0",
        "detail": "CSEU2-HashTables-gp.src.collisions",
        "documentation": {}
    },
    {
        "label": "DynamicArray",
        "kind": 6,
        "importPath": "CSEU2-HashTables-gp.src.dynamic_array",
        "description": "CSEU2-HashTables-gp.src.dynamic_array",
        "peekOfCode": "class DynamicArray:\n    def __init__(self, capacity=8):\n        self.count = 0\n        self.capacity = capacity\n        self.storage = [None] * self.capacity\n    def insert(self, index, value):\n        # check that count is not bigger than capacity\n        if self.count >= self.capacity:\n            # resize the array\n            self.double_size()",
        "detail": "CSEU2-HashTables-gp.src.dynamic_array",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.dynamic_array",
        "description": "CSEU2-HashTables-gp.src.dynamic_array",
        "peekOfCode": "a = DynamicArray(2)\na.insert(0,10)\na.append(9)\na.append(8)\na.insert(3,7)\na.insert(4,6)\na.append(34)\na.append(12)\na.append(9)\na.append(90)",
        "detail": "CSEU2-HashTables-gp.src.dynamic_array",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.hash_test",
        "description": "CSEU2-HashTables-gp.src.hash_test",
        "peekOfCode": "n = 1000000\nkey = b\"STR\"\nprint(f\"Hashing {n}x\")\nstart_time = time.time()\nfor i in range(n):\n    hash(key)\nend_time = time.time()\nprint (f\"  Python hash runtime: {end_time - start_time} seconds\")\nstart_time = time.time()\nfor i in range(n):",
        "detail": "CSEU2-HashTables-gp.src.hash_test",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.hash_test",
        "description": "CSEU2-HashTables-gp.src.hash_test",
        "peekOfCode": "key = b\"STR\"\nprint(f\"Hashing {n}x\")\nstart_time = time.time()\nfor i in range(n):\n    hash(key)\nend_time = time.time()\nprint (f\"  Python hash runtime: {end_time - start_time} seconds\")\nstart_time = time.time()\nfor i in range(n):\n    hashlib.sha256(key)",
        "detail": "CSEU2-HashTables-gp.src.hash_test",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.hash_test",
        "description": "CSEU2-HashTables-gp.src.hash_test",
        "peekOfCode": "start_time = time.time()\nfor i in range(n):\n    hash(key)\nend_time = time.time()\nprint (f\"  Python hash runtime: {end_time - start_time} seconds\")\nstart_time = time.time()\nfor i in range(n):\n    hashlib.sha256(key)\nend_time = time.time()\nprint (f\"  SHA256 hash runtime: {end_time - start_time} seconds\")",
        "detail": "CSEU2-HashTables-gp.src.hash_test",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.hash_test",
        "description": "CSEU2-HashTables-gp.src.hash_test",
        "peekOfCode": "end_time = time.time()\nprint (f\"  Python hash runtime: {end_time - start_time} seconds\")\nstart_time = time.time()\nfor i in range(n):\n    hashlib.sha256(key)\nend_time = time.time()\nprint (f\"  SHA256 hash runtime: {end_time - start_time} seconds\")\nn=10\nprint(f\"\\nHashing {n}x\")\nsalt = bcrypt.gensalt()",
        "detail": "CSEU2-HashTables-gp.src.hash_test",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.hash_test",
        "description": "CSEU2-HashTables-gp.src.hash_test",
        "peekOfCode": "start_time = time.time()\nfor i in range(n):\n    hashlib.sha256(key)\nend_time = time.time()\nprint (f\"  SHA256 hash runtime: {end_time - start_time} seconds\")\nn=10\nprint(f\"\\nHashing {n}x\")\nsalt = bcrypt.gensalt()\nstart_time = time.time()\nfor i in range(n):",
        "detail": "CSEU2-HashTables-gp.src.hash_test",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.hash_test",
        "description": "CSEU2-HashTables-gp.src.hash_test",
        "peekOfCode": "end_time = time.time()\nprint (f\"  SHA256 hash runtime: {end_time - start_time} seconds\")\nn=10\nprint(f\"\\nHashing {n}x\")\nsalt = bcrypt.gensalt()\nstart_time = time.time()\nfor i in range(n):\n    bcrypt.hashpw(b\"KEY\",salt)\nend_time = time.time()\nprint (f\"  bcrypt hash runtime: {end_time - start_time} seconds\")",
        "detail": "CSEU2-HashTables-gp.src.hash_test",
        "documentation": {}
    },
    {
        "label": "salt",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.hash_test",
        "description": "CSEU2-HashTables-gp.src.hash_test",
        "peekOfCode": "salt = bcrypt.gensalt()\nstart_time = time.time()\nfor i in range(n):\n    bcrypt.hashpw(b\"KEY\",salt)\nend_time = time.time()\nprint (f\"  bcrypt hash runtime: {end_time - start_time} seconds\")",
        "detail": "CSEU2-HashTables-gp.src.hash_test",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.hash_test",
        "description": "CSEU2-HashTables-gp.src.hash_test",
        "peekOfCode": "start_time = time.time()\nfor i in range(n):\n    bcrypt.hashpw(b\"KEY\",salt)\nend_time = time.time()\nprint (f\"  bcrypt hash runtime: {end_time - start_time} seconds\")",
        "detail": "CSEU2-HashTables-gp.src.hash_test",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.hash_test",
        "description": "CSEU2-HashTables-gp.src.hash_test",
        "peekOfCode": "end_time = time.time()\nprint (f\"  bcrypt hash runtime: {end_time - start_time} seconds\")",
        "detail": "CSEU2-HashTables-gp.src.hash_test",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEU2-HashTables-gp.src.linked_list",
        "description": "CSEU2-HashTables-gp.src.linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, value=None, next_node=None):\n        self.value = value\n        self.next = next_node\n# linked list class\nclass LinkedList:\n    # constructor\n    def __init__(self):\n        self.head = None\n    # add to head",
        "detail": "CSEU2-HashTables-gp.src.linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "CSEU2-HashTables-gp.src.linked_list",
        "description": "CSEU2-HashTables-gp.src.linked_list",
        "peekOfCode": "class LinkedList:\n    # constructor\n    def __init__(self):\n        self.head = None\n    # add to head\n    def add_to_head(self, value):\n        # create a new node with value\n        new_node = Node(value, None)\n        # check if there is a head\n        if self.head:",
        "detail": "CSEU2-HashTables-gp.src.linked_list",
        "documentation": {}
    },
    {
        "label": "ll",
        "kind": 5,
        "importPath": "CSEU2-HashTables-gp.src.linked_list",
        "description": "CSEU2-HashTables-gp.src.linked_list",
        "peekOfCode": "ll = LinkedList()\nll.print()\nll.add_to_head(1)\nll.add_to_head(2)\nll.add_to_head(3)\nll.print()\nll.remove(2)\nll.print()",
        "detail": "CSEU2-HashTables-gp.src.linked_list",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "CSEU2-Sorting-gp.src.library.book",
        "description": "CSEU2-Sorting-gp.src.library.book",
        "peekOfCode": "class Book:\n    \"\"\"Simple Book class\"\"\"\n    title = \"title\"\n    author = \"last, first\"\n    genre = \"fiction\"\n    def __init__(self, title, author, genre):\n        self.title = title\n        self.author = author\n        self.genre = genre\n    def __str__(self):",
        "detail": "CSEU2-Sorting-gp.src.library.book",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "def insertion_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        temp = books[i]\n        j = i\n        while j > 0 and temp < books[j - 1]:\n            # shift left until correct genre is found\n            books[j] = books[j - 1]\n            j -= 1\n        books[j] = temp",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "l = [random.randint(0, 1000) for i in range(0, 100)]\ninput_sizes = [i * 100 for i in range(1, 50)]\ntimes = []\ndef insertion_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        temp = books[i]\n        j = i\n        while j > 0 and temp < books[j - 1]:\n            # shift left until correct genre is found",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "input_sizes",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "input_sizes = [i * 100 for i in range(1, 50)]\ntimes = []\ndef insertion_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        temp = books[i]\n        j = i\n        while j > 0 and temp < books[j - 1]:\n            # shift left until correct genre is found\n            books[j] = books[j - 1]",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "times",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "times = []\ndef insertion_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        temp = books[i]\n        j = i\n        while j > 0 and temp < books[j - 1]:\n            # shift left until correct genre is found\n            books[j] = books[j - 1]\n            j -= 1",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "b1 = Book(\"f\", \"f\", \"f\")\nb2 = Book(\"e\", \"e\", \"e\")\nb3 = Book(\"d\", \"d\", \"d\")\nb4 = Book(\"c\", \"c\", \"c\")\nb5 = Book(\"b\", \"b\", \"b\")\nb6 = Book(\"a\", \"a\", \"a\")\nbooks = [b1, b2, b3, b5, b4, b6]\nprint(books)\nfor input_size in input_sizes:\n    print(f\"Running: {input_size}\")",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "b2 = Book(\"e\", \"e\", \"e\")\nb3 = Book(\"d\", \"d\", \"d\")\nb4 = Book(\"c\", \"c\", \"c\")\nb5 = Book(\"b\", \"b\", \"b\")\nb6 = Book(\"a\", \"a\", \"a\")\nbooks = [b1, b2, b3, b5, b4, b6]\nprint(books)\nfor input_size in input_sizes:\n    print(f\"Running: {input_size}\")\n    l = [random.randint(0, 1000) for i in range(0, input_size)]",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "b3",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "b3 = Book(\"d\", \"d\", \"d\")\nb4 = Book(\"c\", \"c\", \"c\")\nb5 = Book(\"b\", \"b\", \"b\")\nb6 = Book(\"a\", \"a\", \"a\")\nbooks = [b1, b2, b3, b5, b4, b6]\nprint(books)\nfor input_size in input_sizes:\n    print(f\"Running: {input_size}\")\n    l = [random.randint(0, 1000) for i in range(0, input_size)]\n    # Store start time",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "b4",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "b4 = Book(\"c\", \"c\", \"c\")\nb5 = Book(\"b\", \"b\", \"b\")\nb6 = Book(\"a\", \"a\", \"a\")\nbooks = [b1, b2, b3, b5, b4, b6]\nprint(books)\nfor input_size in input_sizes:\n    print(f\"Running: {input_size}\")\n    l = [random.randint(0, 1000) for i in range(0, input_size)]\n    # Store start time\n    start_time = time()",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "b5",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "b5 = Book(\"b\", \"b\", \"b\")\nb6 = Book(\"a\", \"a\", \"a\")\nbooks = [b1, b2, b3, b5, b4, b6]\nprint(books)\nfor input_size in input_sizes:\n    print(f\"Running: {input_size}\")\n    l = [random.randint(0, 1000) for i in range(0, input_size)]\n    # Store start time\n    start_time = time()\n    # Run some code",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "b6",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "b6 = Book(\"a\", \"a\", \"a\")\nbooks = [b1, b2, b3, b5, b4, b6]\nprint(books)\nfor input_size in input_sizes:\n    print(f\"Running: {input_size}\")\n    l = [random.randint(0, 1000) for i in range(0, input_size)]\n    # Store start time\n    start_time = time()\n    # Run some code\n    sorted_books = insertion_sort(l)",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.library.sort",
        "description": "CSEU2-Sorting-gp.src.library.sort",
        "peekOfCode": "books = [b1, b2, b3, b5, b4, b6]\nprint(books)\nfor input_size in input_sizes:\n    print(f\"Running: {input_size}\")\n    l = [random.randint(0, 1000) for i in range(0, input_size)]\n    # Store start time\n    start_time = time()\n    # Run some code\n    sorted_books = insertion_sort(l)\n    # Store end time",
        "detail": "CSEU2-Sorting-gp.src.library.sort",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.plotting.constant",
        "description": "CSEU2-Sorting-gp.src.plotting.constant",
        "peekOfCode": "x = [2, 4, 6, 8, 10, 12]\ny = [2, 2, 2, 2, 2, 2]\nplt.plot(x, y, 'b')\nplt.xlabel('Inputs')\nplt.ylabel('Steps')\nplt.title('Constant Complexity')\nplt.show()",
        "detail": "CSEU2-Sorting-gp.src.plotting.constant",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.plotting.constant",
        "description": "CSEU2-Sorting-gp.src.plotting.constant",
        "peekOfCode": "y = [2, 2, 2, 2, 2, 2]\nplt.plot(x, y, 'b')\nplt.xlabel('Inputs')\nplt.ylabel('Steps')\nplt.title('Constant Complexity')\nplt.show()",
        "detail": "CSEU2-Sorting-gp.src.plotting.constant",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.plotting.linear",
        "description": "CSEU2-Sorting-gp.src.plotting.linear",
        "peekOfCode": "x = [2, 4, 6, 8, 10, 12]\ny = [2, 4, 6, 8, 10, 12]\nplt.plot(x, y, 'b')\nplt.xlabel('Inputs')\nplt.ylabel('Steps')\nplt.title('Linear Complexity')\nplt.show()",
        "detail": "CSEU2-Sorting-gp.src.plotting.linear",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.plotting.linear",
        "description": "CSEU2-Sorting-gp.src.plotting.linear",
        "peekOfCode": "y = [2, 4, 6, 8, 10, 12]\nplt.plot(x, y, 'b')\nplt.xlabel('Inputs')\nplt.ylabel('Steps')\nplt.title('Linear Complexity')\nplt.show()",
        "detail": "CSEU2-Sorting-gp.src.plotting.linear",
        "documentation": {}
    },
    {
        "label": "constant_algo",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.bigo",
        "description": "CSEU2-Sorting-gp.src.bigo",
        "peekOfCode": "def constant_algo(items):\n    result = items[0] * items[0] # O(1)\n    print (result) # O(1)\n    # O(2)\n    # O(1)\nconstant_algo([4, 5, 6, 8])\n# O(n)\ndef linear_algo(items):\n    for item in items:\n        print(item)",
        "detail": "CSEU2-Sorting-gp.src.bigo",
        "documentation": {}
    },
    {
        "label": "linear_algo",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.bigo",
        "description": "CSEU2-Sorting-gp.src.bigo",
        "peekOfCode": "def linear_algo(items):\n    for item in items:\n        print(item)\nlinear_algo([4, 5, 6, 8])\n# What is the big O of this ??\n# O(n) --> linear\ndef linear_algo_2(items):\n    for item in items:\n        print(item)\n    for item in items:",
        "detail": "CSEU2-Sorting-gp.src.bigo",
        "documentation": {}
    },
    {
        "label": "linear_algo_2",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.bigo",
        "description": "CSEU2-Sorting-gp.src.bigo",
        "peekOfCode": "def linear_algo_2(items):\n    for item in items:\n        print(item)\n    for item in items:\n        print(item)\nlinear_algo_2([4, 5, 6, 8])\n# O(n^2)\ndef quadratic_algo(items):\n    for item in items:\n        for item2 in items:",
        "detail": "CSEU2-Sorting-gp.src.bigo",
        "documentation": {}
    },
    {
        "label": "quadratic_algo",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.bigo",
        "description": "CSEU2-Sorting-gp.src.bigo",
        "peekOfCode": "def quadratic_algo(items):\n    for item in items:\n        for item2 in items:\n            print(item, ' ' ,item2)\nquadratic_algo([4, 5, 6, 8])\n# chalenge. What is the complexity of this algorithm?\ndef complex_algo(items):\n    for _ in range(5):\n        print (\"Python is awesome\")\n    for item in items:",
        "detail": "CSEU2-Sorting-gp.src.bigo",
        "documentation": {}
    },
    {
        "label": "complex_algo",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.bigo",
        "description": "CSEU2-Sorting-gp.src.bigo",
        "peekOfCode": "def complex_algo(items):\n    for _ in range(5):\n        print (\"Python is awesome\")\n    for item in items:\n        print(item)\n    for item in items:\n        print(item)\n    print(\"Big O\")\n    print(\"Big O\")\n    print(\"Big O\")",
        "detail": "CSEU2-Sorting-gp.src.bigo",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.bigo",
        "description": "CSEU2-Sorting-gp.src.bigo",
        "peekOfCode": "def fact(n):\n    product = 1\n    for i in range(n): # O(n)\n        product = product * (i + 1)\n    return product\n# recursive solution\ndef fact_r(n):\n    if n == 0:\n        return 1\n    return n * fact_r(n - 1) # o(n)",
        "detail": "CSEU2-Sorting-gp.src.bigo",
        "documentation": {}
    },
    {
        "label": "fact_r",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.bigo",
        "description": "CSEU2-Sorting-gp.src.bigo",
        "peekOfCode": "def fact_r(n):\n    if n == 0:\n        return 1\n    return n * fact_r(n - 1) # o(n)",
        "detail": "CSEU2-Sorting-gp.src.bigo",
        "documentation": {}
    },
    {
        "label": "complex_algo",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.challenge",
        "description": "CSEU2-Sorting-gp.src.challenge",
        "peekOfCode": "def complex_algo(items):\n    for _ in range(5):\n        print (\"Python is awesome\")\n    for item in items:\n        print(item)\n    for item in items:\n        print(item)\n    print(\"Big O\")\n    print(\"Big O\")\n    print(\"Big O\")",
        "detail": "CSEU2-Sorting-gp.src.challenge",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.quicksort",
        "description": "CSEU2-Sorting-gp.src.quicksort",
        "peekOfCode": "def partition(data):\n    left = []\n    pivot = data[0]\n    right = []\n    for v in data[1:]:\n        if v <= pivot:\n            left.append(v)\n        else:\n            right.append(v)\n    return left, pivot, right",
        "detail": "CSEU2-Sorting-gp.src.quicksort",
        "documentation": {}
    },
    {
        "label": "quick_sort",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.quicksort",
        "description": "CSEU2-Sorting-gp.src.quicksort",
        "peekOfCode": "def quick_sort(data):\n    # base case\n    if data == []:\n        return data\n    left, pivot, right = partition(data)\n    return quick_sort(left) + [pivot] + quick_sort(right)\ndef quick_sort_A(data, low, high):\n    if low >= high:\n        return data\n    else:",
        "detail": "CSEU2-Sorting-gp.src.quicksort",
        "documentation": {}
    },
    {
        "label": "quick_sort_A",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.quicksort",
        "description": "CSEU2-Sorting-gp.src.quicksort",
        "peekOfCode": "def quick_sort_A(data, low, high):\n    if low >= high:\n        return data\n    else:\n        # divide\n        pivot_index = low\n        # for each element in sublist\n        for i in range(low, high):\n            if data[i] < data[pivot_index]:\n                # double swap to move smaller elements to correct index",
        "detail": "CSEU2-Sorting-gp.src.quicksort",
        "documentation": {}
    },
    {
        "label": "quick_sort_B",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.quicksort",
        "description": "CSEU2-Sorting-gp.src.quicksort",
        "peekOfCode": "def quick_sort_B(data):\n    stack = []\n    left = []\n    right = []\n    # put the original data on the stack at index 0\n    stack.insert(0, data)\n    data = []\n    # while there are still sublists on the stack to be sorted\n    while len(stack) > 0:\n        # pop the next sublist off the stack to sort",
        "detail": "CSEU2-Sorting-gp.src.quicksort",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.quicksort",
        "description": "CSEU2-Sorting-gp.src.quicksort",
        "peekOfCode": "l = [random.randint(0, 1000) for i in range(0, 100)]\ninput_sizes = [i * 100 for i in range(1, 50)]\ntimes = []\nfor input_size in input_sizes:\n    l = [random.randint(0, 1000) for i in range(0, input_size)]\n    # Store start time\n    start_time = time()\n    # Run some code\n    # quick_sort_A(l, 0, input_size)\n    # Store end time",
        "detail": "CSEU2-Sorting-gp.src.quicksort",
        "documentation": {}
    },
    {
        "label": "input_sizes",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.quicksort",
        "description": "CSEU2-Sorting-gp.src.quicksort",
        "peekOfCode": "input_sizes = [i * 100 for i in range(1, 50)]\ntimes = []\nfor input_size in input_sizes:\n    l = [random.randint(0, 1000) for i in range(0, input_size)]\n    # Store start time\n    start_time = time()\n    # Run some code\n    # quick_sort_A(l, 0, input_size)\n    # Store end time\n    end_time = time()",
        "detail": "CSEU2-Sorting-gp.src.quicksort",
        "documentation": {}
    },
    {
        "label": "times",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.quicksort",
        "description": "CSEU2-Sorting-gp.src.quicksort",
        "peekOfCode": "times = []\nfor input_size in input_sizes:\n    l = [random.randint(0, 1000) for i in range(0, input_size)]\n    # Store start time\n    start_time = time()\n    # Run some code\n    # quick_sort_A(l, 0, input_size)\n    # Store end time\n    end_time = time()\n    # print out end time - start time",
        "detail": "CSEU2-Sorting-gp.src.quicksort",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.recursion",
        "description": "CSEU2-Sorting-gp.src.recursion",
        "peekOfCode": "def foo(n):\n    if n == 0:\n        return\n    print(n)\n    foo(n - 1)\n# O(2^n)\ndef foo2(n):\n    if n == 0:\n        return\n    print(n)",
        "detail": "CSEU2-Sorting-gp.src.recursion",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.recursion",
        "description": "CSEU2-Sorting-gp.src.recursion",
        "peekOfCode": "def foo2(n):\n    if n == 0:\n        return\n    print(n)\n    foo(n - 1)\n    foo(n - 2)\n# 1, 2, 4, 8, 16, 32, 64, 128, 258\nn = 1000000\nwhile n > 0:\n    print(n)",
        "detail": "CSEU2-Sorting-gp.src.recursion",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CSEU2-Sorting-gp.src.recursion",
        "description": "CSEU2-Sorting-gp.src.recursion",
        "peekOfCode": "n = 1000000\nwhile n > 0:\n    print(n)\n    n -= 1\n# foo(1000000)",
        "detail": "CSEU2-Sorting-gp.src.recursion",
        "documentation": {}
    },
    {
        "label": "name_in_phonebook",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.search",
        "description": "CSEU2-Sorting-gp.src.search",
        "peekOfCode": "def name_in_phonebook(to_find, phonebook):\n    for name in phonebook:\n        if name == to_find:\n            return True\n    return False\n# binary search O(log n)\ndef name_in_phonebook_2(to_find, name):\n    # sentinal , edge case\n    if len(to_find) == 0:\n        return False",
        "detail": "CSEU2-Sorting-gp.src.search",
        "documentation": {}
    },
    {
        "label": "name_in_phonebook_2",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.search",
        "description": "CSEU2-Sorting-gp.src.search",
        "peekOfCode": "def name_in_phonebook_2(to_find, name):\n    # sentinal , edge case\n    if len(to_find) == 0:\n        return False\n    # set first element to zero\n    first = 0\n    # set the last items to size - 1\n    last = (len(to_find) - 1)\n    # set a found flag to false\n    found = False",
        "detail": "CSEU2-Sorting-gp.src.search",
        "documentation": {}
    },
    {
        "label": "o_1_space",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.space_complexity",
        "description": "CSEU2-Sorting-gp.src.space_complexity",
        "peekOfCode": "def o_1_space(n):\n    total = 0\n    for i in range(n):\n        total += i\n    return total\n# O(n) space complexity\ndef o_n_space(n):\n    sums = []\n    for i in range(n):\n        sums.append(i + i)",
        "detail": "CSEU2-Sorting-gp.src.space_complexity",
        "documentation": {}
    },
    {
        "label": "o_n_space",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.space_complexity",
        "description": "CSEU2-Sorting-gp.src.space_complexity",
        "peekOfCode": "def o_n_space(n):\n    sums = []\n    for i in range(n):\n        sums.append(i + i)\n    return sums\n# O(n^2)\ndef o_n2_space(n):\n    times_table = [] # empty list\n    for i in range(n):\n        row = []",
        "detail": "CSEU2-Sorting-gp.src.space_complexity",
        "documentation": {}
    },
    {
        "label": "o_n2_space",
        "kind": 2,
        "importPath": "CSEU2-Sorting-gp.src.space_complexity",
        "description": "CSEU2-Sorting-gp.src.space_complexity",
        "peekOfCode": "def o_n2_space(n):\n    times_table = [] # empty list\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(j * i)\n        times_table.append(row)\n    return times_table",
        "detail": "CSEU2-Sorting-gp.src.space_complexity",
        "documentation": {}
    },
    {
        "label": "first_pass_anagrams",
        "kind": 2,
        "importPath": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "description": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "peekOfCode": "def first_pass_anagrams(words): \n    import random\n    import operator\n    # generate random values for each char a-z\n    chars = [0] * 26\n    for i in range(26):\n        chars[i] = random.randint(0,1000000)\n    # create new dictionary\n    anagrams = {}\n    signature = 0",
        "detail": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "second_anagrams",
        "kind": 2,
        "importPath": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "description": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "peekOfCode": "def second_anagrams(words):\n    # create a dictionary\n    anagrams = {}\n    # generate all sets of anagrams\n    # iterate over word in words\n    for word in words:\n        # convert list to a string\n        # and set that to the signature\n        signature = \"\".join(sorted(word.lower()))\n        #check if the signature is not in anagrams",
        "detail": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "wordz",
        "kind": 5,
        "importPath": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "description": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "peekOfCode": "wordz = ['dave', 'steve', 'apple', 'bob', 'joe', 'azzzzzzz']\nimport random\nimport operator\ndef first_pass_anagrams(words): \n    import random\n    import operator\n    # generate random values for each char a-z\n    chars = [0] * 26\n    for i in range(26):\n        chars[i] = random.randint(0,1000000)",
        "detail": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "description": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "peekOfCode": "f = open('words.txt', 'r')\nwords = f.read().split('\\n')\nf.close()\n# test the algorithms\nimport time\nstart = time.time()\nprint(first_pass_anagrams(words))\nend = time. time()\nprint(f'1st pass solution time: {end - start} seconds\\n')\nstart = time.time()",
        "detail": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "description": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "peekOfCode": "words = f.read().split('\\n')\nf.close()\n# test the algorithms\nimport time\nstart = time.time()\nprint(first_pass_anagrams(words))\nend = time. time()\nprint(f'1st pass solution time: {end - start} seconds\\n')\nstart = time.time()\nprint(second_anagrams(words))",
        "detail": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "description": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "peekOfCode": "start = time.time()\nprint(first_pass_anagrams(words))\nend = time. time()\nprint(f'1st pass solution time: {end - start} seconds\\n')\nstart = time.time()\nprint(second_anagrams(words))\nend = time. time()\nprint(f'2st pass solution time: {end - start} seconds\\n')",
        "detail": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "description": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "peekOfCode": "end = time. time()\nprint(f'1st pass solution time: {end - start} seconds\\n')\nstart = time.time()\nprint(second_anagrams(words))\nend = time. time()\nprint(f'2st pass solution time: {end - start} seconds\\n')",
        "detail": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "description": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "peekOfCode": "start = time.time()\nprint(second_anagrams(words))\nend = time. time()\nprint(f'2st pass solution time: {end - start} seconds\\n')",
        "detail": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "description": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "peekOfCode": "end = time. time()\nprint(f'2st pass solution time: {end - start} seconds\\n')",
        "detail": "CSEU3-ALGORITHMS-GP.anagrams.anagrams",
        "documentation": {}
    },
    {
        "label": "power_r",
        "kind": 2,
        "importPath": "CSEU3-ALGORITHMS-GP.challenge",
        "description": "CSEU3-ALGORITHMS-GP.challenge",
        "peekOfCode": "def power_r(a, b):\n    # Error checking\n    # try to cast our exponent to an int\n    try:\n        _ = int(b)\n    # exception on fail with error message\n    except ValueError:\n        print(\"Exponent (b) must be and integer\")\n        # and return\n        return",
        "detail": "CSEU3-ALGORITHMS-GP.challenge",
        "documentation": {}
    },
    {
        "label": "timeof",
        "kind": 2,
        "importPath": "CSEU3-ALGORITHMS-GP.complexity",
        "description": "CSEU3-ALGORITHMS-GP.complexity",
        "peekOfCode": "def timeof(n):\n    if n == 1:\n        return\n    i = 0\n    while i <= n: # O(n) * O(1) + 1\n        # inner loop will break out after first itteration O(1)\n        for _ in range(n):\n            print('*')\n            break\n        i += 1",
        "detail": "CSEU3-ALGORITHMS-GP.complexity",
        "documentation": {}
    },
    {
        "label": "first_pass_eating_cookies",
        "kind": 2,
        "importPath": "CSEU3-ALGORITHMS-GP.eating_cookies",
        "description": "CSEU3-ALGORITHMS-GP.eating_cookies",
        "peekOfCode": "def first_pass_eating_cookies(n):\n    # if the n is less than zero\n    if n < 0:\n        # return zero\n        return 0\n    # otherwise if n is equal zero\n    elif n == 0:\n        # return one\n        return 1\n    # otherwise",
        "detail": "CSEU3-ALGORITHMS-GP.eating_cookies",
        "documentation": {}
    },
    {
        "label": "eating_cookies",
        "kind": 2,
        "importPath": "CSEU3-ALGORITHMS-GP.eating_cookies",
        "description": "CSEU3-ALGORITHMS-GP.eating_cookies",
        "peekOfCode": "def eating_cookies(n, cache=None):\n    # if the n is less than zero\n    if n < 0:\n        # return zero\n        return 0\n    # otherwise if n is equal zero\n    elif n == 0:\n        # return one\n        return 1\n    # the case of the cache at index of n contains the answer",
        "detail": "CSEU3-ALGORITHMS-GP.eating_cookies",
        "documentation": {}
    },
    {
        "label": "power",
        "kind": 2,
        "importPath": "CSEU3-ALGORITHMS-GP.power",
        "description": "CSEU3-ALGORITHMS-GP.power",
        "peekOfCode": "def power(a, b):\n    # store a result\n    result = 1\n    # iterate while exponent (b) is greater than 0\n    while b > 0:\n        # multiply the result by the value (a)\n        result *= a\n        # decrement the exponent (b)\n        b -= 1\n    # return the result to the caller",
        "detail": "CSEU3-ALGORITHMS-GP.power",
        "documentation": {}
    },
    {
        "label": "power_r",
        "kind": 2,
        "importPath": "CSEU3-ALGORITHMS-GP.power",
        "description": "CSEU3-ALGORITHMS-GP.power",
        "peekOfCode": "def power_r(a, b):\n    # Error checking\n    # try to cast our exponent to an int\n    try:\n        _ = int(b)\n    # exception on fail with error message\n    except ValueError:\n        print(\"Exponent (b) must be and integer\")\n        # and return\n        return",
        "detail": "CSEU3-ALGORITHMS-GP.power",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEU3-AMA-Algorithms.datastructures",
        "description": "CSEU3-AMA-Algorithms.datastructures",
        "peekOfCode": "l = [12, 23, 34] # heap (block of mem)\na = 12 # stack LIFO\n# - push() \n# pop()\n# [g]\n# pop -> 3\n# push 7\n# pop -> 7\n# pop -> 2\n# push 23",
        "detail": "CSEU3-AMA-Algorithms.datastructures",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CSEU3-AMA-Algorithms.datastructures",
        "description": "CSEU3-AMA-Algorithms.datastructures",
        "peekOfCode": "a = 12 # stack LIFO\n# - push() \n# pop()\n# [g]\n# pop -> 3\n# push 7\n# pop -> 7\n# pop -> 2\n# push 23\n# a = pop -> 23",
        "detail": "CSEU3-AMA-Algorithms.datastructures",
        "documentation": {}
    },
    {
        "label": "smallest_missing",
        "kind": 2,
        "importPath": "CSEU3-DataStructures-GP.problem_day2.problem1",
        "description": "CSEU3-DataStructures-GP.problem_day2.problem1",
        "peekOfCode": "def smallest_missing(arr, left, right):\n    # base case\n    if left > right:\n        return left\n    middle = left + (right - left) // 2\n    if arr[middle] == middle:\n        return smallest_missing(arr, middle + 1, right)\n    else:\n        return smallest_missing(arr, left, middle - 1)\nif __name__ == '__main__':",
        "detail": "CSEU3-DataStructures-GP.problem_day2.problem1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.benchmark_sll",
        "description": "CSEU3-DataStructures-GP.benchmark_sll",
        "peekOfCode": "n = 10000\nl = [i for i in range(0, n)]\nll = LinkedList()\nfor i in range(0, n):\n    ll.add_to_tail(i)\nstart = time()\nfor i in range(0, n):\n    ll.remove_head()\nend = time()\nprint(f'Linked List remove from head runtime: {end - start} seconds')",
        "detail": "CSEU3-DataStructures-GP.benchmark_sll",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.benchmark_sll",
        "description": "CSEU3-DataStructures-GP.benchmark_sll",
        "peekOfCode": "l = [i for i in range(0, n)]\nll = LinkedList()\nfor i in range(0, n):\n    ll.add_to_tail(i)\nstart = time()\nfor i in range(0, n):\n    ll.remove_head()\nend = time()\nprint(f'Linked List remove from head runtime: {end - start} seconds')\nstart = time()",
        "detail": "CSEU3-DataStructures-GP.benchmark_sll",
        "documentation": {}
    },
    {
        "label": "ll",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.benchmark_sll",
        "description": "CSEU3-DataStructures-GP.benchmark_sll",
        "peekOfCode": "ll = LinkedList()\nfor i in range(0, n):\n    ll.add_to_tail(i)\nstart = time()\nfor i in range(0, n):\n    ll.remove_head()\nend = time()\nprint(f'Linked List remove from head runtime: {end - start} seconds')\nstart = time()\nfor i in range(0, n):",
        "detail": "CSEU3-DataStructures-GP.benchmark_sll",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.benchmark_sll",
        "description": "CSEU3-DataStructures-GP.benchmark_sll",
        "peekOfCode": "start = time()\nfor i in range(0, n):\n    ll.remove_head()\nend = time()\nprint(f'Linked List remove from head runtime: {end - start} seconds')\nstart = time()\nfor i in range(0, n):\n    l.pop(0)\nend = time()\nprint(f'List pop from front runtime: {end - start} seconds')",
        "detail": "CSEU3-DataStructures-GP.benchmark_sll",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.benchmark_sll",
        "description": "CSEU3-DataStructures-GP.benchmark_sll",
        "peekOfCode": "end = time()\nprint(f'Linked List remove from head runtime: {end - start} seconds')\nstart = time()\nfor i in range(0, n):\n    l.pop(0)\nend = time()\nprint(f'List pop from front runtime: {end - start} seconds')",
        "detail": "CSEU3-DataStructures-GP.benchmark_sll",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.benchmark_sll",
        "description": "CSEU3-DataStructures-GP.benchmark_sll",
        "peekOfCode": "start = time()\nfor i in range(0, n):\n    l.pop(0)\nend = time()\nprint(f'List pop from front runtime: {end - start} seconds')",
        "detail": "CSEU3-DataStructures-GP.benchmark_sll",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.benchmark_sll",
        "description": "CSEU3-DataStructures-GP.benchmark_sll",
        "peekOfCode": "end = time()\nprint(f'List pop from front runtime: {end - start} seconds')",
        "detail": "CSEU3-DataStructures-GP.benchmark_sll",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.binary_search_tree",
        "description": "CSEU3-DataStructures-GP.binary_search_tree",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    # Insert the given value into the tree\n    def insert(self, value):\n        # LEFT CASE\n        # check if our new nodes value is less than the current nodes value\n        if value < self.value:",
        "detail": "CSEU3-DataStructures-GP.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.dll_queue",
        "description": "CSEU3-DataStructures-GP.dll_queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.size = 0\n        self.storage = DoublyLinkedList()\n    # enqueue\n    def enqueue(self, value):\n        self.size += 1\n        self.storage.add_to_tail(value)\n    # dequeue\n    def dequeue(self):",
        "detail": "CSEU3-DataStructures-GP.dll_queue",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.dll_stack",
        "description": "CSEU3-DataStructures-GP.dll_stack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.size = 0\n        self.storage = DoublyLinkedList()\n    # push\n    def push(self, value):\n        self.size += 1\n        self.storage.add_to_head(value)\n    # pop\n    def pop(self):",
        "detail": "CSEU3-DataStructures-GP.dll_stack",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.doubly_linked_list",
        "description": "CSEU3-DataStructures-GP.doubly_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, value, prev=None, next=None):\n        self.value = value\n        self.prev = prev\n        self.next = next\n    \"\"\"Wrap the given value in a ListNode and insert it\n    after this node. Note that this node could already\n    have a next node it is point to.\"\"\"\n    def insert_after(self, value):\n        current_next = self.next",
        "detail": "CSEU3-DataStructures-GP.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.doubly_linked_list",
        "description": "CSEU3-DataStructures-GP.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self, node=None):\n        self.head = node\n        self.tail = node\n        self.length = 1 if node is not None else 0\n    def __len__(self):\n        return self.length\n    \"\"\"Wraps the given value in a ListNode and inserts it \n    as the new head of the list. Don't forget to handle \n    the old head node's previous pointer accordingly.\"\"\"",
        "detail": "CSEU3-DataStructures-GP.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "LRUCache",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.lru_cache",
        "description": "CSEU3-DataStructures-GP.lru_cache",
        "peekOfCode": "class LRUCache:\n    \"\"\"\n    Our LRUCache class keeps track of the max number of nodes it\n    can hold, the current number of nodes it is holding, a doubly-\n    linked list that holds the key-value entries in the correct\n    order, as well as a storage dict that provides fast access\n    to every node stored in the cache.\n    \"\"\"\n    def __init__(self, limit=10):\n        self.limit = limit",
        "detail": "CSEU3-DataStructures-GP.lru_cache",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.queue",
        "description": "CSEU3-DataStructures-GP.queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.size = 0\n        self.storage = DoublyLinkedList()\n    # enqueue\n    def enqueue(self, value):\n        self.size += 1\n        self.storage.add_to_head(value)\n    # dequeue\n    def dequeue(self):",
        "detail": "CSEU3-DataStructures-GP.queue",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.singly_linked_list",
        "description": "CSEU3-DataStructures-GP.singly_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, value=None, next_node=None):\n        # set the initial value of our node\n        self.value = value\n        # set a ref to the next node\n        self.next_node = next_node\n    def get_value(self):\n        return self.value\n    def get_next(self):\n        return self.next_node",
        "detail": "CSEU3-DataStructures-GP.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.singly_linked_list",
        "description": "CSEU3-DataStructures-GP.singly_linked_list",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        # ref to head of list\n        self.head = None\n        #ref to tail of list\n        self.tail = None\n    def add_to_tail(self, value):\n        # wrap the input value in a new node\n        new_node = Node(value, None)\n        # check if there is no head (is the list empty)",
        "detail": "CSEU3-DataStructures-GP.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "BinarySearchTreeTests",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.test_binary_search_tree",
        "description": "CSEU3-DataStructures-GP.test_binary_search_tree",
        "peekOfCode": "class BinarySearchTreeTests(unittest.TestCase):\n    def setUp(self):\n        self.bst = BinarySearchTree(5)\n    def test_insert(self):\n        self.bst.insert(2)\n        self.bst.insert(3)\n        self.bst.insert(7)\n        self.bst.insert(6)\n        self.assertEqual(self.bst.left.right.value, 3)\n        self.assertEqual(self.bst.right.left.value, 6)",
        "detail": "CSEU3-DataStructures-GP.test_binary_search_tree",
        "documentation": {}
    },
    {
        "label": "QueueTests",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.test_dll_queue",
        "description": "CSEU3-DataStructures-GP.test_dll_queue",
        "peekOfCode": "class QueueTests(unittest.TestCase):\n    def setUp(self):\n        self.q = Queue()\n    def test_len_returns_0_for_empty_queue(self):\n        self.assertEqual(self.q.len(), 0)\n    def test_len_returns_correct_length_after_enqueue(self):\n        self.assertEqual(self.q.len(), 0)\n        self.q.enqueue(2)\n        self.assertEqual(self.q.len(), 1)\n        self.q.enqueue(4)",
        "detail": "CSEU3-DataStructures-GP.test_dll_queue",
        "documentation": {}
    },
    {
        "label": "StackTests",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.test_dll_stack",
        "description": "CSEU3-DataStructures-GP.test_dll_stack",
        "peekOfCode": "class StackTests(unittest.TestCase):\n    def setUp(self):\n        self.s = Stack()\n    def test_len_returns_0_for_empty_stack(self):\n        self.assertEqual(self.s.len(), 0)\n    def test_len_returns_correct_length_after_push(self):\n        self.assertEqual(self.s.len(), 0)\n        self.s.push(2)\n        self.assertEqual(self.s.len(), 1)\n        self.s.push(4)",
        "detail": "CSEU3-DataStructures-GP.test_dll_stack",
        "documentation": {}
    },
    {
        "label": "CacheTests",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.test_lru_cache",
        "description": "CSEU3-DataStructures-GP.test_lru_cache",
        "peekOfCode": "class CacheTests(unittest.TestCase):\n    def setUp(self):\n        self.cache = LRUCache(3)\n    def test_cache_overwrite_appropriately(self):\n        self.cache.set('item1', 'a')\n        self.cache.set('item2', 'b')\n        self.cache.set('item3', 'c')\n        self.cache.set('item2', 'z')\n        self.assertEqual(self.cache.get('item1'), 'a')\n        self.assertEqual(self.cache.get('item2'), 'z')",
        "detail": "CSEU3-DataStructures-GP.test_lru_cache",
        "documentation": {}
    },
    {
        "label": "TextBuffer",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.text_buffer",
        "description": "CSEU3-DataStructures-GP.text_buffer",
        "peekOfCode": "class TextBuffer:\n    def __init__(self):\n        self.storage = DoublyLinkedList()\n    # return a string to the print function\n    def __str__(self):\n        # build a string\n        s = \"\"\n        current_node = self.storage.head\n        while current_node:\n            s += current_node.value",
        "detail": "CSEU3-DataStructures-GP.text_buffer",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.text_buffer",
        "description": "CSEU3-DataStructures-GP.text_buffer",
        "peekOfCode": "t = TextBuffer()\nt.append(\"ook\")\nt.prepend(\"B\")\nt.append(\"'s are readable\")\nprint(t)\nt.delete_back(2)\nprint(t)\nt.delete_front(6)\nt.delete_front()\nprint(t)",
        "detail": "CSEU3-DataStructures-GP.text_buffer",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.text_buffer",
        "description": "CSEU3-DataStructures-GP.text_buffer",
        "peekOfCode": "t2 = TextBuffer()\nt2.append(\" Hello\")\nprint(t)\nt.join(t2)\nprint(t)",
        "detail": "CSEU3-DataStructures-GP.text_buffer",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.traversals",
        "description": "CSEU3-DataStructures-GP.traversals",
        "peekOfCode": "class Room:\n    def __init__(self, id, name, description, n_to = None, s_to = None, e_to = None, w_to = None):\n        self.id = id\n        self.name = name\n        self.description = description\n        self.n_to = n_to\n        self.s_to = s_to\n        self.e_to = e_to\n        self.w_to = w_to\n    # def __repr__(self):",
        "detail": "CSEU3-DataStructures-GP.traversals",
        "documentation": {}
    },
    {
        "label": "World",
        "kind": 6,
        "importPath": "CSEU3-DataStructures-GP.traversals",
        "description": "CSEU3-DataStructures-GP.traversals",
        "peekOfCode": "class World:\n    def __init__(self, rooms = None):\n        self.rooms = rooms\n        pass\n    def move(self, direction):\n        pass\nentrance = Room(0, \"The Entrance\", \"You are presented with the front door to an old rickety house to the north which looks like it could fall down at any time. A low lit street beacons you to the east, and a deafening sound is comming from the west!\")\nw_rooms = [entrance]\nw = World(w_rooms)\nprint(entrance)",
        "detail": "CSEU3-DataStructures-GP.traversals",
        "documentation": {}
    },
    {
        "label": "entrance",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.traversals",
        "description": "CSEU3-DataStructures-GP.traversals",
        "peekOfCode": "entrance = Room(0, \"The Entrance\", \"You are presented with the front door to an old rickety house to the north which looks like it could fall down at any time. A low lit street beacons you to the east, and a deafening sound is comming from the west!\")\nw_rooms = [entrance]\nw = World(w_rooms)\nprint(entrance)",
        "detail": "CSEU3-DataStructures-GP.traversals",
        "documentation": {}
    },
    {
        "label": "w_rooms",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.traversals",
        "description": "CSEU3-DataStructures-GP.traversals",
        "peekOfCode": "w_rooms = [entrance]\nw = World(w_rooms)\nprint(entrance)",
        "detail": "CSEU3-DataStructures-GP.traversals",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "CSEU3-DataStructures-GP.traversals",
        "description": "CSEU3-DataStructures-GP.traversals",
        "peekOfCode": "w = World(w_rooms)\nprint(entrance)",
        "detail": "CSEU3-DataStructures-GP.traversals",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.asgi",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '2asidhqxtkf4w-6db$9r0_^9%h=yd3j@+-&ulrwz5#p4x2bk@x'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "SECRET_KEY = '2asidhqxtkf4w-6db$9r0_^9%h=yd3j@+-&ulrwz5#p4x2bk@x'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'cseu3.urls'",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "ROOT_URLCONF = 'cseu3.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "WSGI_APPLICATION = 'cseu3.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "peekOfCode": "STATIC_URL = '/static/'",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.urls",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n]",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.wsgi",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.cseu3.wsgi",
        "documentation": {}
    },
    {
        "label": "WebsiteConfig",
        "kind": 6,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.website.apps",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.website.apps",
        "peekOfCode": "class WebsiteConfig(AppConfig):\n    name = 'website'",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.website.apps",
        "documentation": {}
    },
    {
        "label": "homePageView",
        "kind": 2,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.website.views",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.website.views",
        "peekOfCode": "def homePageView():\n    pass",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.website.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.cseu3.manage",
        "description": "CSEU3-OpenOfficeHours-Wednesday.cseu3.manage",
        "peekOfCode": "def main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cseu3.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.cseu3.manage",
        "documentation": {}
    },
    {
        "label": "Vector2f",
        "kind": 6,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "class Vector2f:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n    def __add__(self, other):\n        v = Vector2f()\n        v.x = self.x + other.x\n        v.y = self.y + other.y\n        return v\n    def __mul__(self, other):",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "Vector3f",
        "kind": 6,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "class Vector3f:\n    pass\nclass Vector4f:\n    pass\nclass Stats:\n    def __init__(self, health, attack, defence, stamina, strength, mana, speed):\n        self.health = health\n        self.attack = attack\n        self.defence = defence\n        self.stamina = stamina",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "Vector4f",
        "kind": 6,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "class Vector4f:\n    pass\nclass Stats:\n    def __init__(self, health, attack, defence, stamina, strength, mana, speed):\n        self.health = health\n        self.attack = attack\n        self.defence = defence\n        self.stamina = stamina\n        self.strength = strength\n        self.mana = mana",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "Stats",
        "kind": 6,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "class Stats:\n    def __init__(self, health, attack, defence, stamina, strength, mana, speed):\n        self.health = health\n        self.attack = attack\n        self.defence = defence\n        self.stamina = stamina\n        self.strength = strength\n        self.mana = mana\n        self.speed = speed\nbarbarian_stats = Stats(100, 70, 200, 20, 100, 1, 3)",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "Enitity",
        "kind": 6,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "class Enitity:\n    def __init__(self, id, position, stats):\n        self.id = id\n        self.position = position\nclass Mob(Entity):\n    def __init__(self, position, stats):\n        super().__init__(id, position)\n        self.stats = stats\n    def move(self, x, y):\n        self.position.x += x",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "Mob",
        "kind": 6,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "class Mob(Entity):\n    def __init__(self, position, stats):\n        super().__init__(id, position)\n        self.stats = stats\n    def move(self, x, y):\n        self.position.x += x\n        self.position.y += y\nclass Player(Mob):\n    def __init__(self, position, stats):\n        super().__init__(position, stats)",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "class Player(Mob):\n    def __init__(self, position, stats):\n        super().__init__(position, stats)\nv1 = Vector2f(12.0, 10.0)\nv2 = Vector2f(10.2, 3.9)\nv3 = v1 + v2\nprint(v1)\nprint(v2)\nprint(v3)\nprint(repr(v3))",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "barbarian_stats",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "barbarian_stats = Stats(100, 70, 200, 20, 100, 1, 3)\nclass Enitity:\n    def __init__(self, id, position, stats):\n        self.id = id\n        self.position = position\nclass Mob(Entity):\n    def __init__(self, position, stats):\n        super().__init__(id, position)\n        self.stats = stats\n    def move(self, x, y):",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "v1 = Vector2f(12.0, 10.0)\nv2 = Vector2f(10.2, 3.9)\nv3 = v1 + v2\nprint(v1)\nprint(v2)\nprint(v3)\nprint(repr(v3))",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "v2 = Vector2f(10.2, 3.9)\nv3 = v1 + v2\nprint(v1)\nprint(v2)\nprint(v3)\nprint(repr(v3))",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "description": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "peekOfCode": "v3 = v1 + v2\nprint(v1)\nprint(v2)\nprint(v3)\nprint(repr(v3))",
        "detail": "CSEU3-OpenOfficeHours-Wednesday.python.vectors",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "CSEU3-PY2.category",
        "description": "CSEU3-PY2.category",
        "peekOfCode": "class Category:\n    def __init__(self, name, products = None):\n        self.name = name\n        self.products = products\n    def __str__(self):\n        if self.products == None:\n            return f'No products available in {self.name}'\n        else:\n            output = ''\n            output += self.name + '\\n'",
        "detail": "CSEU3-PY2.category",
        "documentation": {}
    },
    {
        "label": "Clothing",
        "kind": 6,
        "importPath": "CSEU3-PY2.clothing",
        "description": "CSEU3-PY2.clothing",
        "peekOfCode": "class Clothing(Product):\n    def __init__(self, name, price, colour, size):\n        super().__init__(name, price)\n        # call 56343 + offset(4)\n        self.colour = colour\n        self.size = size\n    def __str__(self):\n        return f'{super().__str__()} Comes in {self.colour}, {str(self.size)}'\n# p = Product(...) ==> p -> 34321\n# c = Clothing(...) ==> c -> 12345 super() -> 56343",
        "detail": "CSEU3-PY2.clothing",
        "documentation": {}
    },
    {
        "label": "Equipment",
        "kind": 6,
        "importPath": "CSEU3-PY2.equipment",
        "description": "CSEU3-PY2.equipment",
        "peekOfCode": "class Equipment(Product):\n    # constructor\n    def __init__(self, name, price, style, weight):\n        super().__init__(name, price)\n        self.style = style\n        self.weight = weight\n    def __str__(self):\n        f'{super().__str__()} Style: {self.style}, Weight: {str(self.weight)}'",
        "detail": "CSEU3-PY2.equipment",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "CSEU3-PY2.product",
        "description": "CSEU3-PY2.product",
        "peekOfCode": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    def __str__(self):\n        return f'{self.name}  £{self.price}'",
        "detail": "CSEU3-PY2.product",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "CSEU3-PY2.store",
        "description": "CSEU3-PY2.store",
        "peekOfCode": "class Store:\n    # constructor\n    def __init__(self, name, categories):\n        # attributes (name, categories)\n        self.name = name\n        self.categories = categories\n    def __str__(self):\n        output = ''\n        output += self.name + '\\n'\n        category_number = 1",
        "detail": "CSEU3-PY2.store",
        "documentation": {}
    },
    {
        "label": "hats",
        "kind": 5,
        "importPath": "CSEU3-PY2.store",
        "description": "CSEU3-PY2.store",
        "peekOfCode": "hats = Category('Hats')\ngloves = Category('Gloves')\npets = Category('Pets')\nbats = Category('Bats')\ncarrots = Category('Carrots')\ncategories1 = [hats, gloves, pets]\nsnowman_categories = [hats, gloves, carrots]\ns = Store(\"Harry's Emporium\", snowman_categories)\nprint(s)\n# set selection to zero",
        "detail": "CSEU3-PY2.store",
        "documentation": {}
    },
    {
        "label": "gloves",
        "kind": 5,
        "importPath": "CSEU3-PY2.store",
        "description": "CSEU3-PY2.store",
        "peekOfCode": "gloves = Category('Gloves')\npets = Category('Pets')\nbats = Category('Bats')\ncarrots = Category('Carrots')\ncategories1 = [hats, gloves, pets]\nsnowman_categories = [hats, gloves, carrots]\ns = Store(\"Harry's Emporium\", snowman_categories)\nprint(s)\n# set selection to zero\nselection = 0",
        "detail": "CSEU3-PY2.store",
        "documentation": {}
    },
    {
        "label": "pets",
        "kind": 5,
        "importPath": "CSEU3-PY2.store",
        "description": "CSEU3-PY2.store",
        "peekOfCode": "pets = Category('Pets')\nbats = Category('Bats')\ncarrots = Category('Carrots')\ncategories1 = [hats, gloves, pets]\nsnowman_categories = [hats, gloves, carrots]\ns = Store(\"Harry's Emporium\", snowman_categories)\nprint(s)\n# set selection to zero\nselection = 0\n# REPL",
        "detail": "CSEU3-PY2.store",
        "documentation": {}
    },
    {
        "label": "bats",
        "kind": 5,
        "importPath": "CSEU3-PY2.store",
        "description": "CSEU3-PY2.store",
        "peekOfCode": "bats = Category('Bats')\ncarrots = Category('Carrots')\ncategories1 = [hats, gloves, pets]\nsnowman_categories = [hats, gloves, carrots]\ns = Store(\"Harry's Emporium\", snowman_categories)\nprint(s)\n# set selection to zero\nselection = 0\n# REPL\nwhile selection != len(s.categories) + 1:",
        "detail": "CSEU3-PY2.store",
        "documentation": {}
    },
    {
        "label": "carrots",
        "kind": 5,
        "importPath": "CSEU3-PY2.store",
        "description": "CSEU3-PY2.store",
        "peekOfCode": "carrots = Category('Carrots')\ncategories1 = [hats, gloves, pets]\nsnowman_categories = [hats, gloves, carrots]\ns = Store(\"Harry's Emporium\", snowman_categories)\nprint(s)\n# set selection to zero\nselection = 0\n# REPL\nwhile selection != len(s.categories) + 1:\n    # get input from user",
        "detail": "CSEU3-PY2.store",
        "documentation": {}
    },
    {
        "label": "categories1",
        "kind": 5,
        "importPath": "CSEU3-PY2.store",
        "description": "CSEU3-PY2.store",
        "peekOfCode": "categories1 = [hats, gloves, pets]\nsnowman_categories = [hats, gloves, carrots]\ns = Store(\"Harry's Emporium\", snowman_categories)\nprint(s)\n# set selection to zero\nselection = 0\n# REPL\nwhile selection != len(s.categories) + 1:\n    # get input from user\n    selection = input('Select the number of the department ')",
        "detail": "CSEU3-PY2.store",
        "documentation": {}
    },
    {
        "label": "snowman_categories",
        "kind": 5,
        "importPath": "CSEU3-PY2.store",
        "description": "CSEU3-PY2.store",
        "peekOfCode": "snowman_categories = [hats, gloves, carrots]\ns = Store(\"Harry's Emporium\", snowman_categories)\nprint(s)\n# set selection to zero\nselection = 0\n# REPL\nwhile selection != len(s.categories) + 1:\n    # get input from user\n    selection = input('Select the number of the department ')\n    # print the selection",
        "detail": "CSEU3-PY2.store",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "CSEU3-PY2.store",
        "description": "CSEU3-PY2.store",
        "peekOfCode": "s = Store(\"Harry's Emporium\", snowman_categories)\nprint(s)\n# set selection to zero\nselection = 0\n# REPL\nwhile selection != len(s.categories) + 1:\n    # get input from user\n    selection = input('Select the number of the department ')\n    # print the selection\n    # print(f'The user selected {selection}')",
        "detail": "CSEU3-PY2.store",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 5,
        "importPath": "CSEU3-PY2.store",
        "description": "CSEU3-PY2.store",
        "peekOfCode": "selection = 0\n# REPL\nwhile selection != len(s.categories) + 1:\n    # get input from user\n    selection = input('Select the number of the department ')\n    # print the selection\n    # print(f'The user selected {selection}')\n    try:\n        selection = int(selection)\n        # exit clause",
        "detail": "CSEU3-PY2.store",
        "documentation": {}
    },
    {
        "label": "constant_time",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.bigo",
        "description": "CSEU3-SORTING-GP.bigo",
        "peekOfCode": "def constant_time(items):\n    result = items[0] * items[4] #O(1)\n    print(result) # O(1)\n    # O(4) Constant time operation O(1)\nconstant_time(it)\n# O(n)\ndef linear_time(items):\n    for item in items: # O(n) * O(1)\n        print(item) # O(1)\n    for item in items: # O(n) * O(1)",
        "detail": "CSEU3-SORTING-GP.bigo",
        "documentation": {}
    },
    {
        "label": "linear_time",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.bigo",
        "description": "CSEU3-SORTING-GP.bigo",
        "peekOfCode": "def linear_time(items):\n    for item in items: # O(n) * O(1)\n        print(item) # O(1)\n    for item in items: # O(n) * O(1)\n        print(item) # O(1)\nlinear_time(it)\n# O(n^2)\ndef quadratic_time(items):\n    for item in items: # O(n) * O(n) = O(n^2)\n        for item2 in items: # O(n) * O(1)",
        "detail": "CSEU3-SORTING-GP.bigo",
        "documentation": {}
    },
    {
        "label": "quadratic_time",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.bigo",
        "description": "CSEU3-SORTING-GP.bigo",
        "peekOfCode": "def quadratic_time(items):\n    for item in items: # O(n) * O(n) = O(n^2)\n        for item2 in items: # O(n) * O(1)\n            print(item, ' ', item2) # O(1)\n# chalenge. What is the complexity of this algorithm? = O(n)\ndef complex_algo(items):\n    for _ in range(5):\n        print (\"Python is awesome\")\n    for item in items:\n        print(item)",
        "detail": "CSEU3-SORTING-GP.bigo",
        "documentation": {}
    },
    {
        "label": "complex_algo",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.bigo",
        "description": "CSEU3-SORTING-GP.bigo",
        "peekOfCode": "def complex_algo(items):\n    for _ in range(5):\n        print (\"Python is awesome\")\n    for item in items:\n        print(item)\n    for item in items:\n        print(item)\n    print(\"Big O\")\n    print(\"Big O\")\n    print(\"Big O\")",
        "detail": "CSEU3-SORTING-GP.bigo",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.bigo",
        "description": "CSEU3-SORTING-GP.bigo",
        "peekOfCode": "def fact(n):\n    product = 1 # O(1)\n    # loop over a range \n    for i in range(n): # O(n) * O(1)\n        # multiply the range by the product and assign the result to the product\n        product = product * (i + 1) # O(1)\n    # return the product\n    return product # O(1)\n# O(n)\ndef fact_r(n):",
        "detail": "CSEU3-SORTING-GP.bigo",
        "documentation": {}
    },
    {
        "label": "fact_r",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.bigo",
        "description": "CSEU3-SORTING-GP.bigo",
        "peekOfCode": "def fact_r(n):\n    # base case\n    if n == 0: # O(1)\n        return 1 # O(1)\n    # recursive call\n    return n * fact_r(n - 1) # O(n)\ndef times_table(n):\n    table = []\n    for i in range(n):\n        row = []",
        "detail": "CSEU3-SORTING-GP.bigo",
        "documentation": {}
    },
    {
        "label": "times_table",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.bigo",
        "description": "CSEU3-SORTING-GP.bigo",
        "peekOfCode": "def times_table(n):\n    table = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(j * i)\n        table.append(row)\n    return table",
        "detail": "CSEU3-SORTING-GP.bigo",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.bigo",
        "description": "CSEU3-SORTING-GP.bigo",
        "peekOfCode": "it = [2,3,5,6,7]\n# O(1)\ndef constant_time(items):\n    result = items[0] * items[4] #O(1)\n    print(result) # O(1)\n    # O(4) Constant time operation O(1)\nconstant_time(it)\n# O(n)\ndef linear_time(items):\n    for item in items: # O(n) * O(1)",
        "detail": "CSEU3-SORTING-GP.bigo",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "CSEU3-SORTING-GP.book",
        "description": "CSEU3-SORTING-GP.book",
        "peekOfCode": "class Book:\n    def __init__(self, title, author, genre):\n        self.title = title\n        self.author = author\n        self.genre = genre\n    def __str__(self):\n        return f'{self.genre}: {self.title} by {self.author}'",
        "detail": "CSEU3-SORTING-GP.book",
        "documentation": {}
    },
    {
        "label": "selection_sort",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.iterative_sorting",
        "description": "CSEU3-SORTING-GP.iterative_sorting",
        "peekOfCode": "def selection_sort( arr ):\n    # loop through n-1 elements\n    for i in range(0, len(arr) - 1):\n        # set sorted item index to i\n        cur_index = i\n        # give smallest a sentinal value\n        smallest_index = cur_index\n        # TO-DO: find next smallest element\n        # loop over elements at right hand side of current index (current index + 1)\n        # our ranege is the current index to the len of array - 1",
        "detail": "CSEU3-SORTING-GP.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.iterative_sorting",
        "description": "CSEU3-SORTING-GP.iterative_sorting",
        "peekOfCode": "def bubble_sort( arr ):\n    # set a variable to hosd swaps occured\n    swaps_have_occured = True\n    # loop while swaps have occured\n    while swaps_have_occured:\n        # set the swaps occured to false\n        swaps_have_occured = False\n        # inner loop to iterate over the list (loop through you array)\n        for i in range(0, len(arr) - 1):\n            # check if element is in wrong position",
        "detail": "CSEU3-SORTING-GP.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "count_sort",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.iterative_sorting",
        "description": "CSEU3-SORTING-GP.iterative_sorting",
        "peekOfCode": "def count_sort( arr, maximum=-1 ):\n    return arr",
        "detail": "CSEU3-SORTING-GP.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.iterative_sorting",
        "description": "CSEU3-SORTING-GP.iterative_sorting",
        "peekOfCode": "lst = [8, 4, 6, 3, 2, 1, 5, 7, 9]\nprint(lst)\nprint('--------------------------')\nbubble_sort(lst)\nprint(lst)\n# STRETCH: implement the Count Sort function below\ndef count_sort( arr, maximum=-1 ):\n    return arr",
        "detail": "CSEU3-SORTING-GP.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "def partition(data):\n    # make a new empty list for LHS\n    lhs = []\n    # make a pivot\n    pivot = data[0]\n    # make a new empty list for RHS\n    rhs = []\n    # loop over the data \n    for v in data[1:]:\n        # if lower than or equal to pivot",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "def quicksort(data):\n    # base case\n    # if the data is empty we just return the empty list\n    if data == []:\n        return data\n    # do something with the data\n    # partition the data and set it to a tuple of left right and pivot\n    left, pivot, right = partition(data)\n    # do a recursive call\n    # return the quicksort of left + the [pivot] + quick sort of right",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "pivot",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "pivot = [8] \n[3, 6, 4, 7, 9, 5, 2, 1]\nlhs = [3, 6, 4, 7, 5, 2, 1]\nrhs = [9]\n[lhs call]\npivot [3] \n[6, 4, 7, 5, 2, 1]\nlhs = [2, 1]\nrhs = [6, 4, 7, 5]\n[lhs2 call]",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "lhs",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "lhs = [3, 6, 4, 7, 5, 2, 1]\nrhs = [9]\n[lhs call]\npivot [3] \n[6, 4, 7, 5, 2, 1]\nlhs = [2, 1]\nrhs = [6, 4, 7, 5]\n[lhs2 call]\n[2] [1]\nlhs = [1]",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "rhs",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "rhs = [9]\n[lhs call]\npivot [3] \n[6, 4, 7, 5, 2, 1]\nlhs = [2, 1]\nrhs = [6, 4, 7, 5]\n[lhs2 call]\n[2] [1]\nlhs = [1]\nrhs = []",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "lhs",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "lhs = [2, 1]\nrhs = [6, 4, 7, 5]\n[lhs2 call]\n[2] [1]\nlhs = [1]\nrhs = []\n[rhs2 call]\npivot = [6] \n[4, 7, 5]\nlhs = [4,5]",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "rhs",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "rhs = [6, 4, 7, 5]\n[lhs2 call]\n[2] [1]\nlhs = [1]\nrhs = []\n[rhs2 call]\npivot = [6] \n[4, 7, 5]\nlhs = [4,5]\nrhs = [7]",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "lhs",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "lhs = [1]\nrhs = []\n[rhs2 call]\npivot = [6] \n[4, 7, 5]\nlhs = [4,5]\nrhs = [7]\n[pivot call]\n[8]\n[rhs call]",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "rhs",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "rhs = []\n[rhs2 call]\npivot = [6] \n[4, 7, 5]\nlhs = [4,5]\nrhs = [7]\n[pivot call]\n[8]\n[rhs call]\n[9]",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "pivot",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "pivot = [6] \n[4, 7, 5]\nlhs = [4,5]\nrhs = [7]\n[pivot call]\n[8]\n[rhs call]\n[9]\n\"\"\"",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "lhs",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "lhs = [4,5]\nrhs = [7]\n[pivot call]\n[8]\n[rhs call]\n[9]\n\"\"\"\ndef partition(data):",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "rhs",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "rhs = [7]\n[pivot call]\n[8]\n[rhs call]\n[9]\n\"\"\"\ndef partition(data):\n    # make a new empty list for LHS",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "lst = [8, 3, 5, 6, 4, 7, 9, 5, 2, 1]\nslst = quicksort(lst)\nprint(lst)\nprint('-------------------------')\nprint(slst)",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "slst",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort",
        "description": "CSEU3-SORTING-GP.quick_sort",
        "peekOfCode": "slst = quicksort(lst)\nprint(lst)\nprint('-------------------------')\nprint(slst)",
        "detail": "CSEU3-SORTING-GP.quick_sort",
        "documentation": {}
    },
    {
        "label": "quick_sort",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.quick_sort_books",
        "description": "CSEU3-SORTING-GP.quick_sort_books",
        "peekOfCode": "def quick_sort(data, low, high):\n    # check base case\n    # if low is greater than or equal to high\n    if low >= high:\n        # return the data\n        return data\n    # otherwise\n    else:\n        # divide\n        pivot_index = low",
        "detail": "CSEU3-SORTING-GP.quick_sort_books",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort_books",
        "description": "CSEU3-SORTING-GP.quick_sort_books",
        "peekOfCode": "b1 = Book('Food for thought', 'jon jones', 'food')\nb2 = Book('My life in reality', 'don davis', 'life')\nb3 = Book('Apples, how you like them?', 'stan simpson', 'food')\nb4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\nfor b in books:\n    print(b)\nquick_sort(books, 0, 5)\nprint('----------------------------------------------------------')",
        "detail": "CSEU3-SORTING-GP.quick_sort_books",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort_books",
        "description": "CSEU3-SORTING-GP.quick_sort_books",
        "peekOfCode": "b2 = Book('My life in reality', 'don davis', 'life')\nb3 = Book('Apples, how you like them?', 'stan simpson', 'food')\nb4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\nfor b in books:\n    print(b)\nquick_sort(books, 0, 5)\nprint('----------------------------------------------------------')\nfor b in books:",
        "detail": "CSEU3-SORTING-GP.quick_sort_books",
        "documentation": {}
    },
    {
        "label": "b3",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort_books",
        "description": "CSEU3-SORTING-GP.quick_sort_books",
        "peekOfCode": "b3 = Book('Apples, how you like them?', 'stan simpson', 'food')\nb4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\nfor b in books:\n    print(b)\nquick_sort(books, 0, 5)\nprint('----------------------------------------------------------')\nfor b in books:\n    print(b)",
        "detail": "CSEU3-SORTING-GP.quick_sort_books",
        "documentation": {}
    },
    {
        "label": "b4",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort_books",
        "description": "CSEU3-SORTING-GP.quick_sort_books",
        "peekOfCode": "b4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\nfor b in books:\n    print(b)\nquick_sort(books, 0, 5)\nprint('----------------------------------------------------------')\nfor b in books:\n    print(b)",
        "detail": "CSEU3-SORTING-GP.quick_sort_books",
        "documentation": {}
    },
    {
        "label": "b5",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort_books",
        "description": "CSEU3-SORTING-GP.quick_sort_books",
        "peekOfCode": "b5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\nfor b in books:\n    print(b)\nquick_sort(books, 0, 5)\nprint('----------------------------------------------------------')\nfor b in books:\n    print(b)",
        "detail": "CSEU3-SORTING-GP.quick_sort_books",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort_books",
        "description": "CSEU3-SORTING-GP.quick_sort_books",
        "peekOfCode": "books = [b1, b2, b3, b4, b5]\nfor b in books:\n    print(b)\nquick_sort(books, 0, 5)\nprint('----------------------------------------------------------')\nfor b in books:\n    print(b)",
        "detail": "CSEU3-SORTING-GP.quick_sort_books",
        "documentation": {}
    },
    {
        "label": "quick_sort",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.quick_sort_in_place",
        "description": "CSEU3-SORTING-GP.quick_sort_in_place",
        "peekOfCode": "def quick_sort(data, low, high):\n    # check base case\n    # if low is greater than or equal to high\n    if low >= high:\n        # return the data\n        return data\n    # otherwise\n    else:\n        # divide\n        pivot_index = low",
        "detail": "CSEU3-SORTING-GP.quick_sort_in_place",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.quick_sort_in_place",
        "description": "CSEU3-SORTING-GP.quick_sort_in_place",
        "peekOfCode": "lst = [8, 5, 6, 4, 3, 7, 9, 2, 1]\nprint(lst)\nquick_sort(lst, 0, 9)\nprint('--------------------------')\nprint(lst)",
        "detail": "CSEU3-SORTING-GP.quick_sort_in_place",
        "documentation": {}
    },
    {
        "label": "rec_while",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.recursion",
        "description": "CSEU3-SORTING-GP.recursion",
        "peekOfCode": "def rec_while(n): # O(n)\n    # base case\n    if n == 0:\n        return\n    # logic that we want to do\n    print(n)\n    rec_while(n - 1)",
        "detail": "CSEU3-SORTING-GP.recursion",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.recursion",
        "description": "CSEU3-SORTING-GP.recursion",
        "peekOfCode": "n = 100\nwhile n > 0:\n    print(n)\n    n -= 1\ndef rec_while(n): # O(n)\n    # base case\n    if n == 0:\n        return\n    # logic that we want to do\n    print(n)",
        "detail": "CSEU3-SORTING-GP.recursion",
        "documentation": {}
    },
    {
        "label": "name_in_phonebook",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.searching",
        "description": "CSEU3-SORTING-GP.searching",
        "peekOfCode": "def name_in_phonebook(to_find, phonebook):\n    for name in phonebook:\n        if name == to_find:\n            return True\n    return False\n# binary search O(log n)\ndef name_in_phonebook_2(to_find, name):\n    # sentinal , edge case\n    if len(to_find) == 0:\n        return False",
        "detail": "CSEU3-SORTING-GP.searching",
        "documentation": {}
    },
    {
        "label": "name_in_phonebook_2",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.searching",
        "description": "CSEU3-SORTING-GP.searching",
        "peekOfCode": "def name_in_phonebook_2(to_find, name):\n    # sentinal , edge case\n    if len(to_find) == 0:\n        return False\n    # set first element to zero\n    first = 0\n    # set the last items to size - 1\n    last = (len(to_find) - 1)\n    # set a found flag to false\n    found = False",
        "detail": "CSEU3-SORTING-GP.searching",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "class Book:\n    def __init__(self, title, author, genre):\n        self.title = title\n        self.author = author\n        self.genre = genre\n    def __str__(self):\n        return f'{self.genre}: {self.title} by {self.author}'\nb1 = Book('Food for thought', 'jon jones', 'food')\nb2 = Book('My life in reality', 'don davis', 'life')\nb3 = Book('Apples, how you like them?', 'stan simpson', 'food')",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "in_sort",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "def in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var\n        temp = books[i]\n        j = i\n        while j > 0 and temp.title < books[j - 1].title:\n            # shift left until correct tile is found\n            books[j] = books[j - 1]",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "in_sort2",
        "kind": 2,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "def in_sort2(lst):\n    # loop over n - 1 elements\n    for i in range(1, len(lst)):\n        # save initial element to temp variable\n        temp = lst[i]\n        # set inner loop index to current index\n        j = i\n        # inner loop\n        while j > 0 and temp < lst[j - 1]:\n            # shift left until correct position found",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "my_book",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "my_book = {'title': 'Food for thought', 'author': 'jon jones', 'genre': 'food'}\nclass Book:\n    def __init__(self, title, author, genre):\n        self.title = title\n        self.author = author\n        self.genre = genre\n    def __str__(self):\n        return f'{self.genre}: {self.title} by {self.author}'\nb1 = Book('Food for thought', 'jon jones', 'food')\nb2 = Book('My life in reality', 'don davis', 'life')",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "b1 = Book('Food for thought', 'jon jones', 'food')\nb2 = Book('My life in reality', 'don davis', 'life')\nb3 = Book('Apples, how you like them?', 'stan simpson', 'food')\nb4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "b2 = Book('My life in reality', 'don davis', 'life')\nb3 = Book('Apples, how you like them?', 'stan simpson', 'food')\nb4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "b3",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "b3 = Book('Apples, how you like them?', 'stan simpson', 'food')\nb4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var\n        temp = books[i]",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "b4",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "b4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var\n        temp = books[i]\n        j = i",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "b5",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "b5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var\n        temp = books[i]\n        j = i\n        while j > 0 and temp.title < books[j - 1].title:",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "books = [b1, b2, b3, b4, b5]\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var\n        temp = books[i]\n        j = i\n        while j > 0 and temp.title < books[j - 1].title:\n            # shift left until correct tile is found",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "my_nums",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "my_nums = [23, 34, 60, 1, 4, 5, 2]\nmy_names = ['Dave', 'Steve', 'Bob']\nprint(my_nums)\nin_sort2(my_nums)\nprint(my_nums)\nprint(my_names)\nin_sort2(my_names)\nprint(my_names)",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "my_names",
        "kind": 5,
        "importPath": "CSEU3-SORTING-GP.sorting",
        "description": "CSEU3-SORTING-GP.sorting",
        "peekOfCode": "my_names = ['Dave', 'Steve', 'Bob']\nprint(my_nums)\nin_sort2(my_nums)\nprint(my_nums)\nprint(my_names)\nin_sort2(my_names)\nprint(my_names)",
        "detail": "CSEU3-SORTING-GP.sorting",
        "documentation": {}
    },
    {
        "label": "CPU",
        "kind": 6,
        "importPath": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "peekOfCode": "class CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.halted = False\n    def load(self, filename):\n        \"\"\"Load a program into memory.\"\"\"",
        "detail": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "HLT",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "peekOfCode": "HLT = 0b00000001\nPRN = 0b01000111\nLDI = 0b10000010\nADD = 0b10100000\nMUL = 0b10100010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256",
        "detail": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "peekOfCode": "PRN = 0b01000111\nLDI = 0b10000010\nADD = 0b10100000\nMUL = 0b10100010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8",
        "detail": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "peekOfCode": "LDI = 0b10000010\nADD = 0b10100000\nMUL = 0b10100010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0",
        "detail": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "peekOfCode": "ADD = 0b10100000\nMUL = 0b10100010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.halted = False",
        "detail": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "MUL",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "peekOfCode": "MUL = 0b10100010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.halted = False\n    def load(self, filename):",
        "detail": "CSEU3_Architecture_GP.src.day1.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "cpu",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.ls8.ls8",
        "description": "CSEU3_Architecture_GP.src.day1.ls8.ls8",
        "peekOfCode": "cpu = CPU()\ncpu.load(sys.argv[1])\ncpu.run()",
        "detail": "CSEU3_Architecture_GP.src.day1.ls8.ls8",
        "documentation": {}
    },
    {
        "label": "to_decimal",
        "kind": 2,
        "importPath": "CSEU3_Architecture_GP.src.day1.conv",
        "description": "CSEU3_Architecture_GP.src.day1.conv",
        "peekOfCode": "def to_decimal(num_string, base):\n    # convert the string to a list\n    digit_list = list(num_string)\n    # reverse the list of digits\n    digit_list.reverse()\n    # set a starting value at zero\n    value = 0\n    # loop over the list...\n    for i in range(len(digit_list)):\n        # print the conversion for debug",
        "detail": "CSEU3_Architecture_GP.src.day1.conv",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.conv",
        "description": "CSEU3_Architecture_GP.src.day1.conv",
        "peekOfCode": "string1 = \"10101010\"\n# [1, 0, 1, 0, 1, 0, 1, 0]\n# [0, 1, 0, 1, 0, 1, 0, 1]\n# digit_list[i] == 0\n# + 0 * 1\n# 0\n# + 1 * 2\n# 2\n# 128 + 32 + 8 + 2\ndef to_decimal(num_string, base):",
        "detail": "CSEU3_Architecture_GP.src.day1.conv",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.simple1",
        "description": "CSEU3_Architecture_GP.src.day1.simple1",
        "peekOfCode": "HALT = 1\nPRINT_BOB = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets make a model of memory to hold our program\nmemory = [\n    SAVE,",
        "detail": "CSEU3_Architecture_GP.src.day1.simple1",
        "documentation": {}
    },
    {
        "label": "PRINT_BOB",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.simple1",
        "description": "CSEU3_Architecture_GP.src.day1.simple1",
        "peekOfCode": "PRINT_BOB = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets make a model of memory to hold our program\nmemory = [\n    SAVE,\n    65,",
        "detail": "CSEU3_Architecture_GP.src.day1.simple1",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.simple1",
        "description": "CSEU3_Architecture_GP.src.day1.simple1",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets make a model of memory to hold our program\nmemory = [\n    SAVE,\n    65,\n    2,",
        "detail": "CSEU3_Architecture_GP.src.day1.simple1",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.simple1",
        "description": "CSEU3_Architecture_GP.src.day1.simple1",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets make a model of memory to hold our program\nmemory = [\n    SAVE,\n    65,\n    2,\n    PRINT_REG,",
        "detail": "CSEU3_Architecture_GP.src.day1.simple1",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.simple1",
        "description": "CSEU3_Architecture_GP.src.day1.simple1",
        "peekOfCode": "PRINT_REG = 5\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets make a model of memory to hold our program\nmemory = [\n    SAVE,\n    65,\n    2,\n    PRINT_REG,\n    2,",
        "detail": "CSEU3_Architecture_GP.src.day1.simple1",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.simple1",
        "description": "CSEU3_Architecture_GP.src.day1.simple1",
        "peekOfCode": "memory = [\n    SAVE,\n    65,\n    2,\n    PRINT_REG,\n    2,\n    HALT,\n    PRINT_BOB\n]\nregister = [0] * 8",
        "detail": "CSEU3_Architecture_GP.src.day1.simple1",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.simple1",
        "description": "CSEU3_Architecture_GP.src.day1.simple1",
        "peekOfCode": "register = [0] * 8\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# lets make a running loop...\nwhile running:\n    # extract a command maybe?\n    # FETCH",
        "detail": "CSEU3_Architecture_GP.src.day1.simple1",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.simple1",
        "description": "CSEU3_Architecture_GP.src.day1.simple1",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# lets make a running loop...\nwhile running:\n    # extract a command maybe?\n    # FETCH\n    cmd = memory[pc]\n    # lets check what command has been fetched",
        "detail": "CSEU3_Architecture_GP.src.day1.simple1",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.simple1",
        "description": "CSEU3_Architecture_GP.src.day1.simple1",
        "peekOfCode": "running = True\ninc_size = 0\n# lets make a running loop...\nwhile running:\n    # extract a command maybe?\n    # FETCH\n    cmd = memory[pc]\n    # lets check what command has been fetched\n    # DECODE\n    if cmd == HALT:",
        "detail": "CSEU3_Architecture_GP.src.day1.simple1",
        "documentation": {}
    },
    {
        "label": "inc_size",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day1.simple1",
        "description": "CSEU3_Architecture_GP.src.day1.simple1",
        "peekOfCode": "inc_size = 0\n# lets make a running loop...\nwhile running:\n    # extract a command maybe?\n    # FETCH\n    cmd = memory[pc]\n    # lets check what command has been fetched\n    # DECODE\n    if cmd == HALT:\n        # EXECUTE",
        "detail": "CSEU3_Architecture_GP.src.day1.simple1",
        "documentation": {}
    },
    {
        "label": "CPU",
        "kind": 6,
        "importPath": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "peekOfCode": "class CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.halted = False\n    def load(self, filename):\n        \"\"\"Load a program into memory.\"\"\"",
        "detail": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "HLT",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "peekOfCode": "HLT = 0b00000001\nPRN = 0b01000111\nLDI = 0b10000010\nADD = 0b10100000\nMUL = 0b10100010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256",
        "detail": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "peekOfCode": "PRN = 0b01000111\nLDI = 0b10000010\nADD = 0b10100000\nMUL = 0b10100010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8",
        "detail": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "peekOfCode": "LDI = 0b10000010\nADD = 0b10100000\nMUL = 0b10100010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0",
        "detail": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "peekOfCode": "ADD = 0b10100000\nMUL = 0b10100010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.halted = False",
        "detail": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "MUL",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "peekOfCode": "MUL = 0b10100010\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.halted = False\n    def load(self, filename):",
        "detail": "CSEU3_Architecture_GP.src.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "cpu",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.ls8.ls8",
        "description": "CSEU3_Architecture_GP.src.day2.ls8.ls8",
        "peekOfCode": "cpu = CPU()\ncpu.load(sys.argv[1])\ncpu.run()",
        "detail": "CSEU3_Architecture_GP.src.day2.ls8.ls8",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.00-masking",
        "description": "CSEU3_Architecture_GP.src.day2.00-masking",
        "peekOfCode": "LDI = 0b10000010\nbob = LDI >> 6\nbob == 0b00000010\nadd_to_pc = bob + 1\nFETCH\nIR = 0b10000010\nDECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing",
        "detail": "CSEU3_Architecture_GP.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "bob",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.00-masking",
        "description": "CSEU3_Architecture_GP.src.day2.00-masking",
        "peekOfCode": "bob = LDI >> 6\nbob == 0b00000010\nadd_to_pc = bob + 1\nFETCH\nIR = 0b10000010\nDECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\nelif IR == ADD:",
        "detail": "CSEU3_Architecture_GP.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "add_to_pc",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.00-masking",
        "description": "CSEU3_Architecture_GP.src.day2.00-masking",
        "peekOfCode": "add_to_pc = bob + 1\nFETCH\nIR = 0b10000010\nDECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\nelif IR == ADD:\n    #do the add thing\ncpu.pc += add_to_pc",
        "detail": "CSEU3_Architecture_GP.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "IR",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.00-masking",
        "description": "CSEU3_Architecture_GP.src.day2.00-masking",
        "peekOfCode": "IR = 0b10000010\nDECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\nelif IR == ADD:\n    #do the add thing\ncpu.pc += add_to_pc",
        "detail": "CSEU3_Architecture_GP.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "add_to_pc",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.00-masking",
        "description": "CSEU3_Architecture_GP.src.day2.00-masking",
        "peekOfCode": "add_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\nelif IR == ADD:\n    #do the add thing\ncpu.pc += add_to_pc",
        "detail": "CSEU3_Architecture_GP.src.day2.00-masking",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "def load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # split line before and after comment symbol\n                comment_split = line.split(\"#\")\n                # extract our number\n                num = comment_split[0].strip() # trim whitespace\n                if num == '':",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):\n    try:",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "ADD = 6\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # split line before and after comment symbol",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "memory = [0] * 128\nregister = [0] * 8\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# Main entrypoint\n# TODO: grap any args\nif len(sys.argv) != 2:",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "register = [0] * 8\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# Main entrypoint\n# TODO: grap any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# Main entrypoint\n# TODO: grap any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\n# TODO: load the memory",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "running = True\ninc_size = 0\n# Main entrypoint\n# TODO: grap any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\n# TODO: load the memory\nload_memory(sys.argv[1])\n# REPL",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "inc_size",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day2.simple2",
        "description": "CSEU3_Architecture_GP.src.day2.simple2",
        "peekOfCode": "inc_size = 0\n# Main entrypoint\n# TODO: grap any args\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\n# TODO: load the memory\nload_memory(sys.argv[1])\n# REPL\n# lets make a running loop...",
        "detail": "CSEU3_Architecture_GP.src.day2.simple2",
        "documentation": {}
    },
    {
        "label": "CPU",
        "kind": 6,
        "importPath": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "peekOfCode": "class CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self, bt):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.halted = False\n        self.reg[SP] = 0XF4\n    def load(self, filename):",
        "detail": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "peekOfCode": "SP = 7\n# opcodes\nHLT = 0b00000001\nPRN = 0b01000111\nLDI = 0b10000010\nADD = 0b10100000\nMUL = 0b10100010\nPUSH = 0b01000101\nPOP = 0b01000110\nclass CPU:",
        "detail": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "HLT",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "peekOfCode": "HLT = 0b00000001\nPRN = 0b01000111\nLDI = 0b10000010\nADD = 0b10100000\nMUL = 0b10100010\nPUSH = 0b01000101\nPOP = 0b01000110\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self, bt):",
        "detail": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "peekOfCode": "PRN = 0b01000111\nLDI = 0b10000010\nADD = 0b10100000\nMUL = 0b10100010\nPUSH = 0b01000101\nPOP = 0b01000110\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self, bt):\n        \"\"\"Construct a new CPU.\"\"\"",
        "detail": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "peekOfCode": "LDI = 0b10000010\nADD = 0b10100000\nMUL = 0b10100010\nPUSH = 0b01000101\nPOP = 0b01000110\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self, bt):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256",
        "detail": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "peekOfCode": "ADD = 0b10100000\nMUL = 0b10100010\nPUSH = 0b01000101\nPOP = 0b01000110\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self, bt):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8",
        "detail": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "MUL",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "peekOfCode": "MUL = 0b10100010\nPUSH = 0b01000101\nPOP = 0b01000110\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self, bt):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0",
        "detail": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "peekOfCode": "PUSH = 0b01000101\nPOP = 0b01000110\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self, bt):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.halted = False",
        "detail": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "description": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "peekOfCode": "POP = 0b01000110\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self, bt):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.ram = [0] * 256\n        self.reg = [0] * 8\n        self.pc = 0\n        self.halted = False\n        self.reg[SP] = 0XF4",
        "detail": "CSEU3_Architecture_GP.src.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "cpu",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.ls8.ls8",
        "description": "CSEU3_Architecture_GP.src.day3.ls8.ls8",
        "peekOfCode": "cpu = CPU()\ncpu.load(sys.argv[1])\ncpu.run()",
        "detail": "CSEU3_Architecture_GP.src.day3.ls8.ls8",
        "documentation": {}
    },
    {
        "label": "rec_func",
        "kind": 2,
        "importPath": "CSEU3_Architecture_GP.src.day3.fib",
        "description": "CSEU3_Architecture_GP.src.day3.fib",
        "peekOfCode": "def rec_func(n):\n    if n == 0:\n        return\n    print(n)\n    rec_func(n - 1)\n    rec_func(n - 2)\n    rec_func(n - 3)\nz = 12\nrec_func(1000)",
        "detail": "CSEU3_Architecture_GP.src.day3.fib",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.fib",
        "description": "CSEU3_Architecture_GP.src.day3.fib",
        "peekOfCode": "z = 12\nrec_func(1000)",
        "detail": "CSEU3_Architecture_GP.src.day3.fib",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "def load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # split line before and after comment symbol\n                comment_split = line.split(\"#\")\n                # extract our number\n                num = comment_split[0].strip() # trim whitespace\n                if num == '':",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):\n    try:",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "ADD = 6\nPUSH = 7\nPOP = 8\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "PUSH = 7\nPOP = 8\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "POP = 8\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # split line before and after comment symbol",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "memory = [0] * 128\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nsp = 7\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# Main entrypoint",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "register = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nsp = 7\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# Main entrypoint\nif len(sys.argv) != 2:",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "sp",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "sp = 7\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\nload_memory(sys.argv[1])\n# REPL",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "running = True\ninc_size = 0\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\nload_memory(sys.argv[1])\n# REPL\n# lets make a running loop...\nwhile running:",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "inc_size",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day3.simple3",
        "description": "CSEU3_Architecture_GP.src.day3.simple3",
        "peekOfCode": "inc_size = 0\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\nload_memory(sys.argv[1])\n# REPL\n# lets make a running loop...\nwhile running:\n    # extract a command maybe?",
        "detail": "CSEU3_Architecture_GP.src.day3.simple3",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "def load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # split line before and after comment symbol\n                comment_split = line.split(\"#\")\n                # extract our number\n                num = comment_split[0].strip() # trim whitespace\n                if num == '':",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9 # New for day 4\nRET = 10 # New for day 4",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# think of some operations that we might want to perform such as print something, load  or store something etc",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# def op_halt(op1, op2):",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# def op_halt(op1, op2):\n#     print(\"Halted!\")",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "ADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# def op_halt(op1, op2):\n#     print(\"Halted!\")\n#     sys.exit(-1)",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "PUSH = 7\nPOP = 8\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# def op_halt(op1, op2):\n#     print(\"Halted!\")\n#     sys.exit(-1)\n# def op_print_tom(op1, op2):",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "POP = 8\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# def op_halt(op1, op2):\n#     print(\"Halted!\")\n#     sys.exit(-1)\n# def op_print_tom(op1, op2):\n#     print(\"tom\")",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "CALL",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "CALL = 9 # New for day 4\nRET = 10 # New for day 4\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# def op_halt(op1, op2):\n#     print(\"Halted!\")\n#     sys.exit(-1)\n# def op_print_tom(op1, op2):\n#     print(\"tom\")\n#     return 1",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "RET",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "RET = 10 # New for day 4\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\n# def op_halt(op1, op2):\n#     print(\"Halted!\")\n#     sys.exit(-1)\n# def op_print_tom(op1, op2):\n#     print(\"tom\")\n#     return 1\n# def op_print_num():",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "memory = [0] * 128\nregister = [0] * 8\nsp = 7\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "register = [0] * 8\nsp = 7\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False\n# Main entrypoint",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "sp",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "sp = 7\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False\n# Main entrypoint\nif len(sys.argv) != 2:",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "running = True\ninc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\nload_memory(sys.argv[1])\n# REPL",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "inc_size",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "inc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\nload_memory(sys.argv[1])\n# REPL\n# # lets make a running loop...",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "op_pc",
        "kind": 5,
        "importPath": "CSEU3_Architecture_GP.src.day4.simple.3",
        "description": "CSEU3_Architecture_GP.src.day4.simple.3",
        "peekOfCode": "op_pc = False\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\nload_memory(sys.argv[1])\n# REPL\n# # lets make a running loop...\nwhile running:\n    # extract a command maybe?",
        "detail": "CSEU3_Architecture_GP.src.day4.simple.3",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "description": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "peekOfCode": "class Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        # Create the genesis block\n        self.new_block(previous_hash=1, proof=100)\n    def new_block(self, proof, previous_hash=None):\n        \"\"\"\n        Create a new Block in the Blockchain\n        A block should have:",
        "detail": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "documentation": {}
    },
    {
        "label": "mine",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "description": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "peekOfCode": "def mine():\n    # Run the proof of work algorithm to get the next proof\n    proof = blockchain.proof_of_work()\n    # Forge the new Block by adding it to the chain with the proof\n    previous_hash = blockchain.hash(blockchain.last_block)\n    block = blockchain.new_block(proof, previous_hash)\n    response = { \"block\": block }\n    return jsonify(response), 200\n@app.route('/chain', methods=['GET'])\ndef full_chain():",
        "detail": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "documentation": {}
    },
    {
        "label": "full_chain",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "description": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "peekOfCode": "def full_chain():\n    response = {\n        \"length\": len(blockchain.chain),\n        \"chain\": blockchain.chain\n    }\n    return jsonify(response), 200\n# Run the program on port 5000\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "description": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "peekOfCode": "app = Flask(__name__)\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # Run the proof of work algorithm to get the next proof\n    proof = blockchain.proof_of_work()\n    # Forge the new Block by adding it to the chain with the proof",
        "detail": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "documentation": {}
    },
    {
        "label": "node_identifier",
        "kind": 5,
        "importPath": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "description": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "peekOfCode": "node_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # Run the proof of work algorithm to get the next proof\n    proof = blockchain.proof_of_work()\n    # Forge the new Block by adding it to the chain with the proof\n    previous_hash = blockchain.hash(blockchain.last_block)\n    block = blockchain.new_block(proof, previous_hash)",
        "detail": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "documentation": {}
    },
    {
        "label": "blockchain",
        "kind": 5,
        "importPath": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "description": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "peekOfCode": "blockchain = Blockchain()\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # Run the proof of work algorithm to get the next proof\n    proof = blockchain.proof_of_work()\n    # Forge the new Block by adding it to the chain with the proof\n    previous_hash = blockchain.hash(blockchain.last_block)\n    block = blockchain.new_block(proof, previous_hash)\n    response = { \"block\": block }\n    return jsonify(response), 200",
        "detail": "CSEU3_BC_GP.basic_blockchain.blockchain",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "CSEU3_BC_GP.client_miner.blockchain",
        "description": "CSEU3_BC_GP.client_miner.blockchain",
        "peekOfCode": "class Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        # Create the genesis block\n        self.new_block(previous_hash=1, proof=100)\n    def new_block(self, proof, previous_hash=None):\n        \"\"\"\n        Create a new Block in the Blockchain\n        A block should have:",
        "detail": "CSEU3_BC_GP.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "mine",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.client_miner.blockchain",
        "description": "CSEU3_BC_GP.client_miner.blockchain",
        "peekOfCode": "def mine():\n    # handle non json response\n    data = request.get_json()\n    # require the proof and id to be present\n    required = ['proof', 'id']\n    # if the values from data are not in required\n    if not all(k in data for k in required):\n        # then send a json message of missing values\n        response = {'message': \"Missing Values\"}\n        # return a 400 error",
        "detail": "CSEU3_BC_GP.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "full_chain",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.client_miner.blockchain",
        "description": "CSEU3_BC_GP.client_miner.blockchain",
        "peekOfCode": "def full_chain():\n    response = {\n        \"length\": len(blockchain.chain),\n        \"chain\": blockchain.chain\n    }\n    return jsonify(response), 200\n@app.route('/last_block', methods=['GET'])\ndef last_block():\n    response = { 'last_block': blockchain.last_block }\n    return jsonify(response), 200",
        "detail": "CSEU3_BC_GP.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "last_block",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.client_miner.blockchain",
        "description": "CSEU3_BC_GP.client_miner.blockchain",
        "peekOfCode": "def last_block():\n    response = { 'last_block': blockchain.last_block }\n    return jsonify(response), 200\n# Run the program on port 5000\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "CSEU3_BC_GP.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "CSEU3_BC_GP.client_miner.blockchain",
        "description": "CSEU3_BC_GP.client_miner.blockchain",
        "peekOfCode": "app = Flask(__name__)\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json response\n    data = request.get_json()\n    # require the proof and id to be present",
        "detail": "CSEU3_BC_GP.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "node_identifier",
        "kind": 5,
        "importPath": "CSEU3_BC_GP.client_miner.blockchain",
        "description": "CSEU3_BC_GP.client_miner.blockchain",
        "peekOfCode": "node_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json response\n    data = request.get_json()\n    # require the proof and id to be present\n    required = ['proof', 'id']\n    # if the values from data are not in required",
        "detail": "CSEU3_BC_GP.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "blockchain",
        "kind": 5,
        "importPath": "CSEU3_BC_GP.client_miner.blockchain",
        "description": "CSEU3_BC_GP.client_miner.blockchain",
        "peekOfCode": "blockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json response\n    data = request.get_json()\n    # require the proof and id to be present\n    required = ['proof', 'id']\n    # if the values from data are not in required\n    if not all(k in data for k in required):\n        # then send a json message of missing values",
        "detail": "CSEU3_BC_GP.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "proof_of_work",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.client_miner.miner",
        "description": "CSEU3_BC_GP.client_miner.miner",
        "peekOfCode": "def proof_of_work(block):\n    \"\"\"\n    Simple Proof of Work Algorithm\n    Stringify the block and look for a proof.\n    Loop through possibilities, checking each one against `valid_proof`\n    in an effort to find a number that is a valid proof\n    :return: A valid proof for the provided block\n    \"\"\"\n    block_string = json.dumps(block, sort_keys=True)\n    proof = 0",
        "detail": "CSEU3_BC_GP.client_miner.miner",
        "documentation": {}
    },
    {
        "label": "valid_proof",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.client_miner.miner",
        "description": "CSEU3_BC_GP.client_miner.miner",
        "peekOfCode": "def valid_proof(block_string, proof):\n    \"\"\"\n    Validates the Proof:  Does hash(block_string, proof) contain 6\n    leading zeroes?  Return true if the proof is valid\n    :param block_string: <string> The stringified block to use to\n    check in combination with `proof`\n    :param proof: <int?> The value that when combined with the\n    stringified previous block results in a hash that has the\n    correct number of leading zeroes.\n    :return: True if the resulting hash is a valid proof, False otherwise",
        "detail": "CSEU3_BC_GP.client_miner.miner",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "description": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "peekOfCode": "class Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        self.nodes = set()\n        # Create the genesis block\n        self.new_block(previous_hash=1, proof=100)\n    def new_block(self, proof, previous_hash=None):\n        \"\"\"\n        Create a new Block in the Blockchain",
        "detail": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "mine",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "description": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "peekOfCode": "def mine():\n    # handle non json response\n    data = request.get_json()\n    # require the proof and id to be present\n    required = ['proof', 'id']\n    # if the values from data are not in required\n    if not all(k in data for k in required):\n        # then send a json message of missing values\n        response = {'message': \"Missing Values\"}\n        # return a 400 error",
        "detail": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "full_chain",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "description": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "peekOfCode": "def full_chain():\n    response = {\n        \"length\": len(blockchain.chain),\n        \"chain\": blockchain.chain\n    }\n    return jsonify(response), 200\n@app.route('/last_block', methods=['GET'])\ndef last_block():\n    response = { 'last_block': blockchain.last_block }\n    return jsonify(response), 200",
        "detail": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "last_block",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "description": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "peekOfCode": "def last_block():\n    response = { 'last_block': blockchain.last_block }\n    return jsonify(response), 200\n@app.route('/transactions/new', methods=['POST'])\ndef new_transaction():\n    data = request.get_json()\n    required = ['sender', 'recipient', 'amount']\n    if not all(k in data for k in required):\n        return 'Missing Values', 400\n    # create a new transaction",
        "detail": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "new_transaction",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "description": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "peekOfCode": "def new_transaction():\n    data = request.get_json()\n    required = ['sender', 'recipient', 'amount']\n    if not all(k in data for k in required):\n        return 'Missing Values', 400\n    # create a new transaction\n    index = blockchain.new_transaction(data.get('sender'), data.get('recipient'), data.get('amount'))\n    response = {'message': f'Transaction will be added to Block {index}'}\n    return jsonify(response), 201\n# Run the program on port 5000",
        "detail": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "description": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "peekOfCode": "app = Flask(__name__)\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json response\n    data = request.get_json()\n    # require the proof and id to be present",
        "detail": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "node_identifier",
        "kind": 5,
        "importPath": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "description": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "peekOfCode": "node_identifier = str(uuid4()).replace('-', '')\n# Instantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json response\n    data = request.get_json()\n    # require the proof and id to be present\n    required = ['proof', 'id']\n    # if the values from data are not in required",
        "detail": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "blockchain",
        "kind": 5,
        "importPath": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "description": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "peekOfCode": "blockchain = Blockchain()\n@app.route('/mine', methods=['POST'])\ndef mine():\n    # handle non json response\n    data = request.get_json()\n    # require the proof and id to be present\n    required = ['proof', 'id']\n    # if the values from data are not in required\n    if not all(k in data for k in required):\n        # then send a json message of missing values",
        "detail": "CSEU3_BC_GP.transactions.client_miner.blockchain",
        "documentation": {}
    },
    {
        "label": "proof_of_work",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.transactions.client_miner.miner",
        "description": "CSEU3_BC_GP.transactions.client_miner.miner",
        "peekOfCode": "def proof_of_work(block):\n    \"\"\"\n    Simple Proof of Work Algorithm\n    Stringify the block and look for a proof.\n    Loop through possibilities, checking each one against `valid_proof`\n    in an effort to find a number that is a valid proof\n    :return: A valid proof for the provided block\n    \"\"\"\n    block_string = json.dumps(block, sort_keys=True)\n    proof = 0",
        "detail": "CSEU3_BC_GP.transactions.client_miner.miner",
        "documentation": {}
    },
    {
        "label": "valid_proof",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.transactions.client_miner.miner",
        "description": "CSEU3_BC_GP.transactions.client_miner.miner",
        "peekOfCode": "def valid_proof(block_string, proof):\n    \"\"\"\n    Validates the Proof:  Does hash(block_string, proof) contain 6\n    leading zeroes?  Return true if the proof is valid\n    :param block_string: <string> The stringified block to use to\n    check in combination with `proof`\n    :param proof: <int?> The value that when combined with the\n    stringified previous block results in a hash that has the\n    correct number of leading zeroes.\n    :return: True if the resulting hash is a valid proof, False otherwise",
        "detail": "CSEU3_BC_GP.transactions.client_miner.miner",
        "documentation": {}
    },
    {
        "label": "my_hello_function",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.hello_flask",
        "description": "CSEU3_BC_GP.hello_flask",
        "peekOfCode": "def my_hello_function():\n    my_list = [{\"id\": 0, \"data\": \"Hello Everyone\"}, {\"id\": 1, \"data\": \"Hello Everyone\"}, {\"id\": 2, \"data\": \"Hello Everyone\"}, {\"id\": 3, \"data\": \"Hello Everyone\"}]\n    response = {\"data\": my_list}\n    return jsonify(response)\n@app.route(\"/bob\")\ndef my_bob_function():\n    return \"Hello Bob\"\n# main entry point\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "CSEU3_BC_GP.hello_flask",
        "documentation": {}
    },
    {
        "label": "my_bob_function",
        "kind": 2,
        "importPath": "CSEU3_BC_GP.hello_flask",
        "description": "CSEU3_BC_GP.hello_flask",
        "peekOfCode": "def my_bob_function():\n    return \"Hello Bob\"\n# main entry point\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "CSEU3_BC_GP.hello_flask",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "CSEU3_BC_GP.hello_flask",
        "description": "CSEU3_BC_GP.hello_flask",
        "peekOfCode": "app = Flask(__name__)\n# create a route\n@app.route(\"/\")\ndef my_hello_function():\n    my_list = [{\"id\": 0, \"data\": \"Hello Everyone\"}, {\"id\": 1, \"data\": \"Hello Everyone\"}, {\"id\": 2, \"data\": \"Hello Everyone\"}, {\"id\": 3, \"data\": \"Hello Everyone\"}]\n    response = {\"data\": my_list}\n    return jsonify(response)\n@app.route(\"/bob\")\ndef my_bob_function():\n    return \"Hello Bob\"",
        "detail": "CSEU3_BC_GP.hello_flask",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.challenge.util",
        "description": "CSEU3_Graphs_GP.src.challenge.util",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU3_Graphs_GP.src.challenge.util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.challenge.util",
        "description": "CSEU3_Graphs_GP.src.challenge.util",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU3_Graphs_GP.src.challenge.util",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "description": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "peekOfCode": "def get_neighbors(word):\n    # create an empty list to hold neighbors\n    neighbors = []\n    # turn our word in to a letter list\n    string_word = list(word)\n    # loop over each index of the string word\n    for i in range(len(string_word)):\n        # for each letter...\n        # swap letter with each letter in alphabet (for loop)\n        for letter in letters:",
        "detail": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "find_ladders",
        "kind": 2,
        "importPath": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "description": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "peekOfCode": "def find_ladders(begin_word, end_word):\n            # create a queue\n        q = Queue()\n        # enqueue a list holding the starting vertex id\n        q.enqueue([begin_word])\n        # created an empty visited set\n        visited = set()\n        # while the queue is not empty\n        while q.size() > 0:\n            # dequeue to the path",
        "detail": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "description": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "peekOfCode": "f = open('words.txt', 'r')\nwords = f.read().split('\\n')\nf.close()\n# remember to plan it out before you code\n# think about decomposing the solution in to a helper function as it would help breakdown the problem set *HINT*\n# make a set to hold the words\nword_set = set()\n# set all words to lower case\nfor word in words:\n    word_set.add(word.lower())",
        "detail": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "description": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "peekOfCode": "words = f.read().split('\\n')\nf.close()\n# remember to plan it out before you code\n# think about decomposing the solution in to a helper function as it would help breakdown the problem set *HINT*\n# make a set to hold the words\nword_set = set()\n# set all words to lower case\nfor word in words:\n    word_set.add(word.lower())\n# hold a list of lower case letters",
        "detail": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "word_set",
        "kind": 5,
        "importPath": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "description": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "peekOfCode": "word_set = set()\n# set all words to lower case\nfor word in words:\n    word_set.add(word.lower())\n# hold a list of lower case letters\nletters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# helper function get neighbors\ndef get_neighbors(word):\n    # create an empty list to hold neighbors\n    neighbors = []",
        "detail": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "description": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "peekOfCode": "letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# helper function get neighbors\ndef get_neighbors(word):\n    # create an empty list to hold neighbors\n    neighbors = []\n    # turn our word in to a letter list\n    string_word = list(word)\n    # loop over each index of the string word\n    for i in range(len(string_word)):\n        # for each letter...",
        "detail": "CSEU3_Graphs_GP.src.challenge.word_ladder",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.challenge2.island",
        "description": "CSEU3_Graphs_GP.src.challenge2.island",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU3_Graphs_GP.src.challenge2.island",
        "documentation": {}
    },
    {
        "label": "island_counter",
        "kind": 2,
        "importPath": "CSEU3_Graphs_GP.src.challenge2.island",
        "description": "CSEU3_Graphs_GP.src.challenge2.island",
        "peekOfCode": "def island_counter(matrix):\n    # Create a visited matrix of the same dimensions as the given matrix\n    visited = []\n    for i in range(len(matrix)):\n        visited.append([False] * len(matrix[0]))\n    island_count = 0\n    # Walk through each cel of the matrix\n    for col in range(len(matrix[0])):\n        for row in range(len(matrix)):\n          # if it has not been visited",
        "detail": "CSEU3_Graphs_GP.src.challenge2.island",
        "documentation": {}
    },
    {
        "label": "dft",
        "kind": 2,
        "importPath": "CSEU3_Graphs_GP.src.challenge2.island",
        "description": "CSEU3_Graphs_GP.src.challenge2.island",
        "peekOfCode": "def dft(row, col, matrix, visited):\n    '''\n    This will mark each connect component as visited\n    Return visited matrix\n    '''\n    # Create an empty stack\n    s = Stack()\n    # Push starting vertex onto the stack\n    s.push( (row, col) )\n    # While the Stack is not empty...",
        "detail": "CSEU3_Graphs_GP.src.challenge2.island",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "CSEU3_Graphs_GP.src.challenge2.island",
        "description": "CSEU3_Graphs_GP.src.challenge2.island",
        "peekOfCode": "def get_neighbors(row, col, graph_matrix):\n    neighbors = []\n    # Check north\n    if row > 0 and graph_matrix[row-1][col] == 1:\n        neighbors.append((row-1, col))\n    # Check south\n    if row < len(graph_matrix) - 1 and graph_matrix[row+1][col] == 1:\n        neighbors.append((row+1, col))\n    # Check east\n    if col < len(graph_matrix[0]) - 1 and graph_matrix[row][col+1] == 1:",
        "detail": "CSEU3_Graphs_GP.src.challenge2.island",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "CSEU3_Graphs_GP.src.challenge2.island",
        "description": "CSEU3_Graphs_GP.src.challenge2.island",
        "peekOfCode": "islands = [[0, 1, 0, 1, 0],\n           [1, 1, 0, 1, 1],\n           [0, 0, 1, 0, 0],\n           [1, 0, 1, 0, 0],\n           [1, 1, 0, 0, 0]]\nisland_counter(islands)  # 4\nislands = [[1, 0, 0, 1, 1, 0, 1, 1, 0, 1],\n           [0, 0, 1, 1, 0, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 1, 0, 1],\n           [0, 0, 1, 0, 0, 1, 0, 0, 1, 1],",
        "detail": "CSEU3_Graphs_GP.src.challenge2.island",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "CSEU3_Graphs_GP.src.challenge2.island",
        "description": "CSEU3_Graphs_GP.src.challenge2.island",
        "peekOfCode": "islands = [[1, 0, 0, 1, 1, 0, 1, 1, 0, 1],\n           [0, 0, 1, 1, 0, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 1, 0, 1],\n           [0, 0, 1, 0, 0, 1, 0, 0, 1, 1],\n           [0, 0, 1, 1, 0, 1, 0, 1, 1, 0],\n           [0, 1, 0, 1, 1, 1, 0, 1, 0, 0],\n           [0, 0, 1, 0, 0, 1, 1, 0, 0, 0],\n           [1, 0, 1, 1, 0, 0, 0, 1, 1, 0],\n           [0, 1, 1, 0, 0, 0, 1, 1, 0, 0],\n           [0, 0, 1, 1, 0, 1, 0, 0, 1, 0]]",
        "detail": "CSEU3_Graphs_GP.src.challenge2.island",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.earliest_ancestor.ans",
        "description": "CSEU3_Graphs_GP.src.earliest_ancestor.ans",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, value):\n        self.storage.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.storage.pop(0)\n        else:\n            return None",
        "detail": "CSEU3_Graphs_GP.src.earliest_ancestor.ans",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.earliest_ancestor.ans",
        "description": "CSEU3_Graphs_GP.src.earliest_ancestor.ans",
        "peekOfCode": "class Graph:\n    \"\"\" \n        Represent a graph as a dictionary of verts \n        mapping labels to edges \n    \"\"\"\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex_id):\n        if vertex_id not in self.vertices:\n            self.vertices[vertex_id] = set()",
        "detail": "CSEU3_Graphs_GP.src.earliest_ancestor.ans",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "kind": 2,
        "importPath": "CSEU3_Graphs_GP.src.earliest_ancestor.ans",
        "description": "CSEU3_Graphs_GP.src.earliest_ancestor.ans",
        "peekOfCode": "def earliest_ancestor(ancestors, starting_node):\n    # 1. Build the graph\n    # instantiate a new graph object\n    graph = Graph()\n    # loop over all pairs in ancestors\n    for pair in ancestors:\n        # add pair[0] and pair[1] to the graph\n        graph.add_vertex(pair[0])\n        graph.add_vertex(pair[1])\n        # build the edges in reverse",
        "detail": "CSEU3_Graphs_GP.src.earliest_ancestor.ans",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.earliest_ancestor.test_ans",
        "description": "CSEU3_Graphs_GP.src.earliest_ancestor.test_ans",
        "peekOfCode": "class Test(unittest.TestCase):\n    '''\n       10\n     /\n    1   2   4  11\n     \\ /   / \\ /\n      3   5   8\n       \\ / \\   \\\n        6   7   9\n    '''",
        "detail": "CSEU3_Graphs_GP.src.earliest_ancestor.test_ans",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.socail_graphs.social",
        "description": "CSEU3_Graphs_GP.src.socail_graphs.social",
        "peekOfCode": "class User:\n    def __init__(self, name):\n        self.name = name\nclass SocialGraph:\n    def __init__(self):\n        self.last_id = 0\n        self.users = {}\n        self.friendships = {}\n    def add_friendship(self, user_id, friend_id):\n        \"\"\"",
        "detail": "CSEU3_Graphs_GP.src.socail_graphs.social",
        "documentation": {}
    },
    {
        "label": "SocialGraph",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.socail_graphs.social",
        "description": "CSEU3_Graphs_GP.src.socail_graphs.social",
        "peekOfCode": "class SocialGraph:\n    def __init__(self):\n        self.last_id = 0\n        self.users = {}\n        self.friendships = {}\n    def add_friendship(self, user_id, friend_id):\n        \"\"\"\n        Creates a bi-directional friendship\n        \"\"\"\n        if user_id == friend_id:",
        "detail": "CSEU3_Graphs_GP.src.socail_graphs.social",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.socail_graphs.util",
        "description": "CSEU3_Graphs_GP.src.socail_graphs.util",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU3_Graphs_GP.src.socail_graphs.util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.socail_graphs.util",
        "description": "CSEU3_Graphs_GP.src.socail_graphs.util",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU3_Graphs_GP.src.socail_graphs.util",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.adjacency_list",
        "description": "CSEU3_Graphs_GP.src.adjacency_list",
        "peekOfCode": "class Graph:\n    \"\"\" Represent a Graph as dictionary of vertices map the labels to edges.\"\"\"\n    # constructor\n    def __init__(self):\n        self.vertices = {} # adjacency list (dictionary)\n        # self.vertices = [[],[],[]] # adjacency matrix (2d list or array)\n    # add vertex\n    def add_vertex(self, vertex_id):\n        self.vertices[vertex_id] = set()\n    # add edges",
        "detail": "CSEU3_Graphs_GP.src.adjacency_list",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.bft",
        "description": "CSEU3_Graphs_GP.src.bft",
        "peekOfCode": "class Graph:\n    \"\"\" Represent a Graph as dictionary of vertices map the labels to edges.\"\"\"\n    # constructor\n    def __init__(self):\n        self.vertices = {} # adjacency list (dictionary)\n        # self.vertices = [[],[],[]] # adjacency matrix (2d list or array)\n    # add vertex\n    def add_vertex(self, vertex_id):\n        self.vertices[vertex_id] = set()\n    # add edges",
        "detail": "CSEU3_Graphs_GP.src.bft",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.dft",
        "description": "CSEU3_Graphs_GP.src.dft",
        "peekOfCode": "class Graph:\n    \"\"\" Represent a Graph as dictionary of vertices map the labels to edges.\"\"\"\n    # constructor\n    def __init__(self):\n        self.vertices = {} # adjacency list (dictionary)\n        # self.vertices = [[],[],[]] # adjacency matrix (2d list or array)\n    # add vertex\n    def add_vertex(self, vertex_id):\n        self.vertices[vertex_id] = set()\n    # add edges",
        "detail": "CSEU3_Graphs_GP.src.dft",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.graph",
        "description": "CSEU3_Graphs_GP.src.graph",
        "peekOfCode": "class Graph:\n    \"\"\" Represent a Graph as dictionary of vertices map the labels to edges.\"\"\"\n    # constructor\n    def __init__(self):\n        self.vertices = {} # adjacency list (dictionary)\n        # self.vertices = [[],[],[]] # adjacency matrix (2d list or array)\n    # add vertex\n    def add_vertex(self, vertex_id):\n        self.vertices[vertex_id] = set()\n    # add edges",
        "detail": "CSEU3_Graphs_GP.src.graph",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.util",
        "description": "CSEU3_Graphs_GP.src.util",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU3_Graphs_GP.src.util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU3_Graphs_GP.src.util",
        "description": "CSEU3_Graphs_GP.src.util",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU3_Graphs_GP.src.util",
        "documentation": {}
    },
    {
        "label": "longest_ll_chain",
        "kind": 2,
        "importPath": "CSEU3_hashtables_bc.chaining",
        "description": "CSEU3_hashtables_bc.chaining",
        "peekOfCode": "def longest_ll_chain(keys, buckets, loop=10, useSHA=False):\n    # create a dictionary to hold the counts\n    key_counts = {}\n    # set all counts to zero\n    for i in range(buckets):\n        key_counts[i] = 0\n    # generate some hashed keys and make some possible collisions\n    for i in range(keys):\n        random_key = str(random.random())\n        hash_index = hash(random_key) % buckets",
        "detail": "CSEU3_hashtables_bc.chaining",
        "documentation": {}
    },
    {
        "label": "DynamicArray",
        "kind": 6,
        "importPath": "CSEU3_hashtables_bc.dynamic_array",
        "description": "CSEU3_hashtables_bc.dynamic_array",
        "peekOfCode": "class DynamicArray:\n    def __init__(self, capacity=8):\n        self.count = 0\n        self.capacity = capacity\n        self.storage = [None] * self.capacity\n    # insert\n    def insert(self, index, value):\n        # check count exceeding capacity\n        if self.count >= self.capacity:\n            # TODO: Make array dynamic with resizing",
        "detail": "CSEU3_hashtables_bc.dynamic_array",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "CSEU3_hashtables_bc.hashing",
        "description": "CSEU3_hashtables_bc.hashing",
        "peekOfCode": "def djb2(key):\n    # start from an arbitrary large prime such as (5381)\n    # set the ahs value to 5381\n    hash_value = 5381\n    # iterate over each char in the key\n    for char in key:\n        # set the hash value to the bit shift left by 5 of the hash value and sum of the hash value  then add the value for the char \n        hash_value = ((hash_value << 5) + hash_value) + char\n    # return the hash value\n    return hash_value",
        "detail": "CSEU3_hashtables_bc.hashing",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CSEU3_hashtables_bc.hashing",
        "description": "CSEU3_hashtables_bc.hashing",
        "peekOfCode": "n = 1000000\nkey = b\"STR\"\n# hash\nprint(\"Hash\")\nstart = time.time()\nfor i in range(n):\n    hash(key)\nend = time.time()\nprint(end - start,\"Seconds\")\n# hashlib",
        "detail": "CSEU3_hashtables_bc.hashing",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "CSEU3_hashtables_bc.hashing",
        "description": "CSEU3_hashtables_bc.hashing",
        "peekOfCode": "key = b\"STR\"\n# hash\nprint(\"Hash\")\nstart = time.time()\nfor i in range(n):\n    hash(key)\nend = time.time()\nprint(end - start,\"Seconds\")\n# hashlib\nprint(\"Hash Lib SHA256\")",
        "detail": "CSEU3_hashtables_bc.hashing",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEU3_hashtables_bc.hashing",
        "description": "CSEU3_hashtables_bc.hashing",
        "peekOfCode": "start = time.time()\nfor i in range(n):\n    hash(key)\nend = time.time()\nprint(end - start,\"Seconds\")\n# hashlib\nprint(\"Hash Lib SHA256\")\nstart = time.time()\nfor i in range(n):\n    hashlib.sha256(key)",
        "detail": "CSEU3_hashtables_bc.hashing",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEU3_hashtables_bc.hashing",
        "description": "CSEU3_hashtables_bc.hashing",
        "peekOfCode": "end = time.time()\nprint(end - start,\"Seconds\")\n# hashlib\nprint(\"Hash Lib SHA256\")\nstart = time.time()\nfor i in range(n):\n    hashlib.sha256(key)\nend = time.time()\nprint(end - start,\"Seconds\")\n# TODO: implement djb2",
        "detail": "CSEU3_hashtables_bc.hashing",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEU3_hashtables_bc.hashing",
        "description": "CSEU3_hashtables_bc.hashing",
        "peekOfCode": "start = time.time()\nfor i in range(n):\n    hashlib.sha256(key)\nend = time.time()\nprint(end - start,\"Seconds\")\n# TODO: implement djb2\ndef djb2(key):\n    # start from an arbitrary large prime such as (5381)\n    # set the ahs value to 5381\n    hash_value = 5381",
        "detail": "CSEU3_hashtables_bc.hashing",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEU3_hashtables_bc.hashing",
        "description": "CSEU3_hashtables_bc.hashing",
        "peekOfCode": "end = time.time()\nprint(end - start,\"Seconds\")\n# TODO: implement djb2\ndef djb2(key):\n    # start from an arbitrary large prime such as (5381)\n    # set the ahs value to 5381\n    hash_value = 5381\n    # iterate over each char in the key\n    for char in key:\n        # set the hash value to the bit shift left by 5 of the hash value and sum of the hash value  then add the value for the char ",
        "detail": "CSEU3_hashtables_bc.hashing",
        "documentation": {}
    },
    {
        "label": "LinkedPair",
        "kind": 6,
        "importPath": "CSEU3_hashtables_bc.hash_table",
        "description": "CSEU3_hashtables_bc.hash_table",
        "peekOfCode": "class LinkedPair:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass HashTable:\n    '''\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    '''",
        "detail": "CSEU3_hashtables_bc.hash_table",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "CSEU3_hashtables_bc.hash_table",
        "description": "CSEU3_hashtables_bc.hash_table",
        "peekOfCode": "class HashTable:\n    '''\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    '''\n    def __init__(self, capacity):\n        self.capacity = capacity  # Number of buckets in the hash table\n        self.count = 0\n        self.storage = [None] * capacity\n    def _hash(self, key):",
        "detail": "CSEU3_hashtables_bc.hash_table",
        "documentation": {}
    },
    {
        "label": "TestHashTable",
        "kind": 6,
        "importPath": "CSEU3_hashtables_bc.test_hash_table",
        "description": "CSEU3_hashtables_bc.test_hash_table",
        "peekOfCode": "class TestHashTable(unittest.TestCase):\n    def test_hash_table_insertion_and_retrieval(self):\n        ht = HashTable(8)\n        ht.insert(\"key-0\", \"val-0\")\n        ht.insert(\"key-1\", \"val-1\")\n        ht.insert(\"key-2\", \"val-2\")\n        ht.insert(\"key-3\", \"val-3\")\n        ht.insert(\"key-4\", \"val-4\")\n        ht.insert(\"key-5\", \"val-5\")\n        ht.insert(\"key-6\", \"val-6\")",
        "detail": "CSEU3_hashtables_bc.test_hash_table",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEU4-Algorithms-GP.anagrams.an",
        "description": "CSEU4-Algorithms-GP.anagrams.an",
        "peekOfCode": "l = ['angor', 'argon', 'goran', 'grano', 'groan', 'nagor', 'Orang', 'orang', 'organ', 'rogan', 'Ronga']\nfor w in l:\n    sw = \"\".join(sorted(w.lower()))\n    print(sw)",
        "detail": "CSEU4-Algorithms-GP.anagrams.an",
        "documentation": {}
    },
    {
        "label": "add_one",
        "kind": 2,
        "importPath": "CSEU4-Algorithms-GP.algorithm",
        "description": "CSEU4-Algorithms-GP.algorithm",
        "peekOfCode": "def add_one(num):\n    try:\n        output = int(num) + 1\n        return output\n    except:\n        # print(\"Value Error input int\")\n        return f\"ERROR: {num} is not an integer: Please input an integer\"\n# test\nprint(add_one(4)) # => 5\nprint(add_one(15)) # => 16",
        "detail": "CSEU4-Algorithms-GP.algorithm",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "CSEU4-Algorithms-GP.algorithm",
        "description": "CSEU4-Algorithms-GP.algorithm",
        "peekOfCode": "name = add_one(\"65\") # => 65 + 1\nprint(name) # => 66",
        "detail": "CSEU4-Algorithms-GP.algorithm",
        "documentation": {}
    },
    {
        "label": "some_func",
        "kind": 2,
        "importPath": "CSEU4-Algorithms-GP.complexity",
        "description": "CSEU4-Algorithms-GP.complexity",
        "peekOfCode": "def some_func(n): # O(n)\n    if n == 1:\n        return\n    i = 0\n    while i <= n: # O(n) * O(1) + 1 (O(1) * O(n)) => O(n) + 1 => O(n)\n        # O(1)\n        for _ in range(n):\n            print(\"*\")\n            break\n        i += 1",
        "detail": "CSEU4-Algorithms-GP.complexity",
        "documentation": {}
    },
    {
        "label": "rec_factorial",
        "kind": 2,
        "importPath": "CSEU4-Algorithms-GP.factorial",
        "description": "CSEU4-Algorithms-GP.factorial",
        "peekOfCode": "def rec_factorial(n): # O(n)\n    # base case\n    if n <= 1:\n        return 1\n    else:\n        # return n * call function of n - 1\n        return n * rec_factorial(n - 1) # O(n)\ndef iter_factorial(n):\n    # challenge\n    pass",
        "detail": "CSEU4-Algorithms-GP.factorial",
        "documentation": {}
    },
    {
        "label": "iter_factorial",
        "kind": 2,
        "importPath": "CSEU4-Algorithms-GP.factorial",
        "description": "CSEU4-Algorithms-GP.factorial",
        "peekOfCode": "def iter_factorial(n):\n    # challenge\n    pass\n# Tests\nprint(\"Recursive\")\nprint(rec_factorial(4))# => 24\nprint(rec_factorial(7))# => 5040\nprint(rec_factorial(1))# => 1\nprint(rec_factorial(2010))\nprint(\"Iterative\")",
        "detail": "CSEU4-Algorithms-GP.factorial",
        "documentation": {}
    },
    {
        "label": "power",
        "kind": 2,
        "importPath": "CSEU4-Algorithms-GP.power",
        "description": "CSEU4-Algorithms-GP.power",
        "peekOfCode": "def power(a, b):\n    # set a initial result ( base case => 1 )\n    result = 1\n    while b > 0:\n        result = result * a\n        b -= 1\n    return result\ndef power_r(a, b):\n    # check for errors\n    try:",
        "detail": "CSEU4-Algorithms-GP.power",
        "documentation": {}
    },
    {
        "label": "power_r",
        "kind": 2,
        "importPath": "CSEU4-Algorithms-GP.power",
        "description": "CSEU4-Algorithms-GP.power",
        "peekOfCode": "def power_r(a, b):\n    # check for errors\n    try:\n        _ = int(b)\n    except ValueError:\n        print(\"Exponent (b) must be an integer\")\n        return\n    if b == 0:\n        return 1\n    elif b > 0:",
        "detail": "CSEU4-Algorithms-GP.power",
        "documentation": {}
    },
    {
        "label": "to_decimal",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day1.conv",
        "description": "CSEU4_Architecture_gp.day1.conv",
        "peekOfCode": "def to_decimal(num_string, base):\n    # convert our string to a list\n    digit_string = list(num_string)\n    # reverse the list\n    digit_string.reverse()\n    # set starting value to 0\n    value = 0\n    # iterate over the list\n    for i in range(len(digit_string)):\n        # for debugging",
        "detail": "CSEU4_Architecture_gp.day1.conv",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.conv",
        "description": "CSEU4_Architecture_gp.day1.conv",
        "peekOfCode": "string1 = \"10101010\"\n# 1 * 128\n# 0 * 64\n# 1 * 32\n# 0 * 16\n# 1 * 8\n# 0 * 4\n# 1 * 2\n# 0 * 1\n# reverse_string1 = \"01010101\"",
        "detail": "CSEU4_Architecture_gp.day1.conv",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "PRINT_TOM = 1\nHALT = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    SAVE,",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "HALT = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    SAVE,\n    23,",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    SAVE,\n    23,\n    2,",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    SAVE,\n    23,\n    2,\n    SAVE,",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    SAVE,\n    23,\n    2,\n    SAVE,\n    10,",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "ADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    SAVE,\n    23,\n    2,\n    SAVE,\n    10,\n    3,",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "memory = [\n    PRINT_TOM,\n    SAVE,\n    23,\n    2,\n    SAVE,\n    10,\n    3,\n    ADD, # R2 += R3\n    2,",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "pc = 0\nregisters = [0] * 8 # r0 - r7\nrunning = True\n# a REPL\nop_size = 1\nwhile running:\n    # fetch\n    command = memory[pc]\n    # decode\n    if command == PRINT_TOM:",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "registers",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "registers = [0] * 8 # r0 - r7\nrunning = True\n# a REPL\nop_size = 1\nwhile running:\n    # fetch\n    command = memory[pc]\n    # decode\n    if command == PRINT_TOM:\n        # execute",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "running = True\n# a REPL\nop_size = 1\nwhile running:\n    # fetch\n    command = memory[pc]\n    # decode\n    if command == PRINT_TOM:\n        # execute\n        print(\"Tom\")",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day1.simple",
        "description": "CSEU4_Architecture_gp.day1.simple",
        "peekOfCode": "op_size = 1\nwhile running:\n    # fetch\n    command = memory[pc]\n    # decode\n    if command == PRINT_TOM:\n        # execute\n        print(\"Tom\")\n        op_size = 1\n    # decode",
        "detail": "CSEU4_Architecture_gp.day1.simple",
        "documentation": {}
    },
    {
        "label": "CPU",
        "kind": 6,
        "importPath": "CSEU4_Architecture_gp.day2.ls8.cpu",
        "description": "CSEU4_Architecture_gp.day2.ls8.cpu",
        "peekOfCode": "class CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        pass\n    def load(self):\n        \"\"\"Load a program into memory.\"\"\"\n        address = 0\n        # For now, we've just hardcoded a program:\n        program = [",
        "detail": "CSEU4_Architecture_gp.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "cpu",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.ls8.ls8",
        "description": "CSEU4_Architecture_gp.day2.ls8.ls8",
        "peekOfCode": "cpu = CPU()\ncpu.load()\ncpu.run()",
        "detail": "CSEU4_Architecture_gp.day2.ls8.ls8",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.00_masking",
        "description": "CSEU4_Architecture_gp.day2.00_masking",
        "peekOfCode": "LDI = 0b10000010\nADD = 0b00000000\n# 000000AA\nbob = LDI >> 6\nbob == 0b00000010 => 2\nadd_to_pc = bob + 1\n# FETCH\nIR = 0b10000010\n# DECODE\nadd_to_pc = (IR >> 6) + 1",
        "detail": "CSEU4_Architecture_gp.day2.00_masking",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.00_masking",
        "description": "CSEU4_Architecture_gp.day2.00_masking",
        "peekOfCode": "ADD = 0b00000000\n# 000000AA\nbob = LDI >> 6\nbob == 0b00000010 => 2\nadd_to_pc = bob + 1\n# FETCH\nIR = 0b10000010\n# DECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:",
        "detail": "CSEU4_Architecture_gp.day2.00_masking",
        "documentation": {}
    },
    {
        "label": "bob",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.00_masking",
        "description": "CSEU4_Architecture_gp.day2.00_masking",
        "peekOfCode": "bob = LDI >> 6\nbob == 0b00000010 => 2\nadd_to_pc = bob + 1\n# FETCH\nIR = 0b10000010\n# DECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\n    pass",
        "detail": "CSEU4_Architecture_gp.day2.00_masking",
        "documentation": {}
    },
    {
        "label": "add_to_pc",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.00_masking",
        "description": "CSEU4_Architecture_gp.day2.00_masking",
        "peekOfCode": "add_to_pc = bob + 1\n# FETCH\nIR = 0b10000010\n# DECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\n    pass\nelif IR == ADD:\n    #do the add thing",
        "detail": "CSEU4_Architecture_gp.day2.00_masking",
        "documentation": {}
    },
    {
        "label": "IR",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.00_masking",
        "description": "CSEU4_Architecture_gp.day2.00_masking",
        "peekOfCode": "IR = 0b10000010\n# DECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\n    pass\nelif IR == ADD:\n    #do the add thing\n    pass\ncpu.pc += add_to_pc",
        "detail": "CSEU4_Architecture_gp.day2.00_masking",
        "documentation": {}
    },
    {
        "label": "add_to_pc",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.00_masking",
        "description": "CSEU4_Architecture_gp.day2.00_masking",
        "peekOfCode": "add_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\n    pass\nelif IR == ADD:\n    #do the add thing\n    pass\ncpu.pc += add_to_pc",
        "detail": "CSEU4_Architecture_gp.day2.00_masking",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "def load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')\n                num = comment_split[0].strip()\n                if num == '':\n                    continue",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "ADD = 6\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "memory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "register = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')\n                num = comment_split[0].strip()",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "running = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day2.simple01",
        "description": "CSEU4_Architecture_gp.day2.simple01",
        "peekOfCode": "op_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL\n# lets make a running loop...",
        "detail": "CSEU4_Architecture_gp.day2.simple01",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.binsimple",
        "description": "CSEU4_Architecture_gp.day3.binsimple",
        "peekOfCode": "data = []\nfor i in range(255, len(num)):\n    # print(f\"{num[i]:02X}\")\n    data.append(num[i])\nprint(data[2])\nf.close()",
        "detail": "CSEU4_Architecture_gp.day3.binsimple",
        "documentation": {}
    },
    {
        "label": "rec_func",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day3.rec",
        "description": "CSEU4_Architecture_gp.day3.rec",
        "peekOfCode": "def rec_func(n):\n    if n == 0:\n        return\n    print(n)\n    rec_func(n - 1)\n    rec_func(n - 2)\n    rec_func(n - 3)\nz = 12\nrec_func(1000)",
        "detail": "CSEU4_Architecture_gp.day3.rec",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.rec",
        "description": "CSEU4_Architecture_gp.day3.rec",
        "peekOfCode": "z = 12\nrec_func(1000)",
        "detail": "CSEU4_Architecture_gp.day3.rec",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "def load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')\n                num = comment_split[0].strip()\n                if num == '':\n                    continue",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nPRINT_TOM\nPRINT_NUM 1243",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nPRINT_TOM\nPRINT_NUM 1243\n# lets make a model of memory to hold our program",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nPRINT_TOM\nPRINT_NUM 1243\n# lets make a model of memory to hold our program\nmemory = [0] * 256",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nPRINT_TOM\nPRINT_NUM 1243\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nPRINT_TOM\nPRINT_NUM 1243\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "ADD = 6\nPUSH = 7\nPOP = 8\nPRINT_TOM\nPRINT_NUM 1243\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list ",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "PUSH = 7\nPOP = 8\nPRINT_TOM\nPRINT_NUM 1243\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "POP = 8\nPRINT_TOM\nPRINT_NUM 1243\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "memory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "register = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "SP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "register[SP]",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "register[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')\n                num = comment_split[0].strip()",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "running = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day3.simple",
        "description": "CSEU4_Architecture_gp.day3.simple",
        "peekOfCode": "op_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL\n# lets make a running loop...",
        "detail": "CSEU4_Architecture_gp.day3.simple",
        "documentation": {}
    },
    {
        "label": "op_halt",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_halt(op1, op2):\n    print(\"Halted!\")\n    sys.exit(-1)\ndef op_print_tom(op1, op2):\n    print(\"tom\")\n    return 1\ndef op_print_dave(op1, op2):\n    print(\"dave\")\n    return 1\ndef op_print_num(op1, op2):",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_print_tom",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_print_tom(op1, op2):\n    print(\"tom\")\n    return 1\ndef op_print_dave(op1, op2):\n    print(\"dave\")\n    return 1\ndef op_print_num(op1, op2):\n    print(\"PRINT_NUM\")\n    return 2\ndef op_save(op1, op2):",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_print_dave",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_print_dave(op1, op2):\n    print(\"dave\")\n    return 1\ndef op_print_num(op1, op2):\n    print(\"PRINT_NUM\")\n    return 2\ndef op_save(op1, op2):\n    print(\"SAVE\")\n    return 3\ndef op_print_reg(op1,op2):",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_print_num",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_print_num(op1, op2):\n    print(\"PRINT_NUM\")\n    return 2\ndef op_save(op1, op2):\n    print(\"SAVE\")\n    return 3\ndef op_print_reg(op1,op2):\n    print(\"PRINT_REG\")\n    return 2\ndef op_add(op1, op2):",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_save",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_save(op1, op2):\n    print(\"SAVE\")\n    return 3\ndef op_print_reg(op1,op2):\n    print(\"PRINT_REG\")\n    return 2\ndef op_add(op1, op2):\n    print(\"ADD\")\n    return 3\ndef op_push(op1, op2):",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_print_reg",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_print_reg(op1,op2):\n    print(\"PRINT_REG\")\n    return 2\ndef op_add(op1, op2):\n    print(\"ADD\")\n    return 3\ndef op_push(op1, op2):\n    print(\"PUSH\")\n    return 2\ndef op_pop(op1, op2):",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_add",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_add(op1, op2):\n    print(\"ADD\")\n    return 3\ndef op_push(op1, op2):\n    print(\"PUSH\")\n    return 2\ndef op_pop(op1, op2):\n    print(\"POP\")\n    return 2\ndef op_call(op1, op2):",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_push",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_push(op1, op2):\n    print(\"PUSH\")\n    return 2\ndef op_pop(op1, op2):\n    print(\"POP\")\n    return 2\ndef op_call(op1, op2):\n    print(\"CALL\")\n    return 3\ndef op_ret(op1, op2):",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_pop",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_pop(op1, op2):\n    print(\"POP\")\n    return 2\ndef op_call(op1, op2):\n    print(\"CALL\")\n    return 3\ndef op_ret(op1, op2):\n    print(\"RET\")\n    return 3\n# TODO: demo the idea of a branch table ",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_call",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_call(op1, op2):\n    print(\"CALL\")\n    return 3\ndef op_ret(op1, op2):\n    print(\"RET\")\n    return 3\n# TODO: demo the idea of a branch table \n## branch table\nbt = {\n    HALT: op_halt,",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_ret",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def op_ret(op1, op2):\n    print(\"RET\")\n    return 3\n# TODO: demo the idea of a branch table \n## branch table\nbt = {\n    HALT: op_halt,\n    PRINT_TOM: op_print_tom,\n    PRINT_DAVE: op_print_dave,\n    PRINT_NUM: op_print_num,",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "def load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # split line before and after comment symbol\n                comment_split = line.split(\"#\")\n                # extract our number\n                num = comment_split[0].strip() # trim whitespace\n                if num == '':",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nPRINT_DAVE = 90\nCALL = 9 # New for day 4",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nPRINT_DAVE = 90\nCALL = 9 # New for day 4\nRET = 10 # New for day 4",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nPRINT_DAVE = 90\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# class OpCode:",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nPRINT_DAVE = 90\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# class OpCode:\n#     def __init__(self, code, size, op1=None, op2=None):",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nPRINT_DAVE = 90\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# class OpCode:\n#     def __init__(self, code, size, op1=None, op2=None):\n#         self.code",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "ADD = 6\nPUSH = 7\nPOP = 8\nPRINT_DAVE = 90\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# class OpCode:\n#     def __init__(self, code, size, op1=None, op2=None):\n#         self.code\n#         self.size",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "PUSH = 7\nPOP = 8\nPRINT_DAVE = 90\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# class OpCode:\n#     def __init__(self, code, size, op1=None, op2=None):\n#         self.code\n#         self.size\n#         self.op1",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "POP = 8\nPRINT_DAVE = 90\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# class OpCode:\n#     def __init__(self, code, size, op1=None, op2=None):\n#         self.code\n#         self.size\n#         self.op1\n#         self.op2",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "PRINT_DAVE",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "PRINT_DAVE = 90\nCALL = 9 # New for day 4\nRET = 10 # New for day 4\n# class OpCode:\n#     def __init__(self, code, size, op1=None, op2=None):\n#         self.code\n#         self.size\n#         self.op1\n#         self.op2\n# think of some operations that we might want to perform such as print something, load  or store something etc",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "CALL",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "CALL = 9 # New for day 4\nRET = 10 # New for day 4\n# class OpCode:\n#     def __init__(self, code, size, op1=None, op2=None):\n#         self.code\n#         self.size\n#         self.op1\n#         self.op2\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "RET",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "RET = 10 # New for day 4\n# class OpCode:\n#     def __init__(self, code, size, op1=None, op2=None):\n#         self.code\n#         self.size\n#         self.op1\n#         self.op2\n# think of some operations that we might want to perform such as print something, load  or store something etc\n# maybe some way to stop execution and some arithmetic operations\ndef op_halt(op1, op2):",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "bt",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "bt = {\n    HALT: op_halt,\n    PRINT_TOM: op_print_tom,\n    PRINT_DAVE: op_print_dave,\n    PRINT_NUM: op_print_num,\n    SAVE: op_save,\n    PRINT_REG: op_print_reg,\n    ADD: op_add,\n    PUSH: op_push,\n    POP: op_pop,",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "memory = [0] * 128\nregister = [0] * 8\nsp = 7\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "register = [0] * 8\nsp = 7\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False\n# Main entrypoint",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "sp",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "sp = 7\n# think about keeping track where we are currently in mem to fetch the next instruction\npc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False\n# Main entrypoint\nif len(sys.argv) != 2:",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\ninc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "running = True\ninc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\nload_memory(sys.argv[1])\n# REPL",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "inc_size",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "inc_size = 0\n# TODO op_pc boolean to use for pc condition (add to each instruction case)\nop_pc = False\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\nload_memory(sys.argv[1])\n# REPL\n# # # lets make a running loop...",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_pc",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.branchtable",
        "description": "CSEU4_Architecture_gp.day4.branchtable",
        "peekOfCode": "op_pc = False\n# Main entrypoint\nif len(sys.argv) != 2:\n    print(\"usage: simple.py filename\", file=sys.stderr)\n    sys.exit(1)\nload_memory(sys.argv[1])\n# REPL\n# # # lets make a running loop...\n# while running:\n#     # extract a command maybe?",
        "detail": "CSEU4_Architecture_gp.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.functions",
        "description": "CSEU4_Architecture_gp.day4.functions",
        "peekOfCode": "def add(a, b): \n    # ADD R0 R1\n    return a + b # RET\n# CALL reg\n# RET\n# store our variables on the stack\n# store our variables in registers R0 R1\n# return value can be stored in a register R0",
        "detail": "CSEU4_Architecture_gp.day4.functions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.functions",
        "description": "CSEU4_Architecture_gp.day4.functions",
        "peekOfCode": "x = 2 # SAVE 2 R0\ny = 4 # SAVE 4 R1\nadd(x, y) # CALL 11\nprint(\"R0\") # PRINT_REG R0\n# halt\ndef add(a, b): \n    # ADD R0 R1\n    return a + b # RET\n# CALL reg\n# RET",
        "detail": "CSEU4_Architecture_gp.day4.functions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.functions",
        "description": "CSEU4_Architecture_gp.day4.functions",
        "peekOfCode": "y = 4 # SAVE 4 R1\nadd(x, y) # CALL 11\nprint(\"R0\") # PRINT_REG R0\n# halt\ndef add(a, b): \n    # ADD R0 R1\n    return a + b # RET\n# CALL reg\n# RET\n# store our variables on the stack",
        "detail": "CSEU4_Architecture_gp.day4.functions",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "def load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')\n                num = comment_split[0].strip()\n                if num == '':\n                    continue",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "ADD = 6\nPUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list ",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "PUSH = 7\nPOP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "POP = 8\nCALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "CALL",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "CALL = 9\nRET  = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "memory = [0] * 256\nregister = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "register = [0] * 8\n# TODO: Stack Pointer (R7) as per specs\nSP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "SP = 7 # index of the registers list \n# to use to store where the top of the stack is\nregister[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "register[SP]",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "register[SP] = 0xf4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')\n                num = comment_split[0].strip()",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "running = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CSEU4_Architecture_gp.day4.simple",
        "description": "CSEU4_Architecture_gp.day4.simple",
        "peekOfCode": "op_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL\n# lets make a running loop...",
        "detail": "CSEU4_Architecture_gp.day4.simple",
        "documentation": {}
    },
    {
        "label": "addTwoNumbers",
        "kind": 2,
        "importPath": "CSEU4_BW2_Challenges_Day1.add_two_numbers.add_two_numbers",
        "description": "CSEU4_BW2_Challenges_Day1.add_two_numbers.add_two_numbers",
        "peekOfCode": "def addTwoNumbers(l1, l2):\n    pass",
        "detail": "CSEU4_BW2_Challenges_Day1.add_two_numbers.add_two_numbers",
        "documentation": {}
    },
    {
        "label": "containsDuplicate",
        "kind": 2,
        "importPath": "CSEU4_BW2_Challenges_Day1.contains-dupes.contains_dupe",
        "description": "CSEU4_BW2_Challenges_Day1.contains-dupes.contains_dupe",
        "peekOfCode": "def containsDuplicate(num):\n    pass",
        "detail": "CSEU4_BW2_Challenges_Day1.contains-dupes.contains_dupe",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "kind": 6,
        "importPath": "CSEU4_BW2_Challenges_Day2.queue_with_stacks.my_queue",
        "description": "CSEU4_BW2_Challenges_Day2.queue_with_stacks.my_queue",
        "peekOfCode": "class MyQueue(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n    def push(self, x):\n        \"\"\"\n        Push element x to the back of queue.\n        :type x: int\n        :rtype: None",
        "detail": "CSEU4_BW2_Challenges_Day2.queue_with_stacks.my_queue",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "CSEU4_BW2_Challenges_Day2.two_sum.two_sum",
        "description": "CSEU4_BW2_Challenges_Day2.two_sum.two_sum",
        "peekOfCode": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"",
        "detail": "CSEU4_BW2_Challenges_Day2.two_sum.two_sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "CSEU4_BW2_Challenges_Day3.decode_string.decode_string",
        "description": "CSEU4_BW2_Challenges_Day3.decode_string.decode_string",
        "peekOfCode": "class Solution:\n    def decodeString(self, s: str) -> str:\n        pass",
        "detail": "CSEU4_BW2_Challenges_Day3.decode_string.decode_string",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "CSEU4_BW2_Challenges_Day3.merge_two_sorted_lists.merge_lists",
        "description": "CSEU4_BW2_Challenges_Day3.merge_two_sorted_lists.merge_lists",
        "peekOfCode": "class Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        pass",
        "detail": "CSEU4_BW2_Challenges_Day3.merge_two_sorted_lists.merge_lists",
        "documentation": {}
    },
    {
        "label": "find_duplicate",
        "kind": 2,
        "importPath": "CSEU4_BW2_Challenges_Day4.find_duplicate_number.find_duplicate",
        "description": "CSEU4_BW2_Challenges_Day4.find_duplicate_number.find_duplicate",
        "peekOfCode": "def find_duplicate(nums):\n    pass",
        "detail": "CSEU4_BW2_Challenges_Day4.find_duplicate_number.find_duplicate",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "CSEU4_BW2_Challenges_Day4.find_duplicate_number.test_find_duplicate",
        "description": "CSEU4_BW2_Challenges_Day4.find_duplicate_number.test_find_duplicate",
        "peekOfCode": "class Test(unittest.TestCase):\n  def test_find_duplicate(self):\n    self.assertEqual(find_duplicate([1,3,4,2,2]), 2)\n    self.assertEqual(find_duplicate([3,1,3,4,2]), 3)\n    self.assertEqual(find_duplicate([10, 7, 5, 8, 11, 9, 11]), 11)\n    self.assertEqual(find_duplicate([100, 90, 80, 50, 20, 10, 101, 100]), 100)\n    self.assertEqual(find_duplicate([1050, 270, 1540, 3800, 2, 3000, 1540]), 1540)\n    self.assertEqual(find_duplicate([100, 55, 4, 98, 10, 18, 90, 95, 43, 11, 47, 67, 89, 42, 49, 79, 100]), 100)\nif __name__ == '__main__':\n  unittest.main()",
        "detail": "CSEU4_BW2_Challenges_Day4.find_duplicate_number.test_find_duplicate",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "CSEU4_BW2_Challenges_Day4.search_in_rotated_sorted_array.search_array",
        "description": "CSEU4_BW2_Challenges_Day4.search_in_rotated_sorted_array.search_array",
        "peekOfCode": "def search(nums, target):\n    pass",
        "detail": "CSEU4_BW2_Challenges_Day4.search_in_rotated_sorted_array.search_array",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "CSEU4_BW2_Challenges_Day4.search_in_rotated_sorted_array.test_search_array",
        "description": "CSEU4_BW2_Challenges_Day4.search_in_rotated_sorted_array.test_search_array",
        "peekOfCode": "class Test(unittest.TestCase):\n  def test_search_array(self):\n    self.assertEqual(search([4,5,6,7,0,1,2], 0), 4)\n    self.assertEqual(search([4,5,6,7,0,1,2], 3), -1)\n    self.assertEqual(search([7, 8, 9, 0, 1, 2, 3, 4, 6], 5), -1)\n    self.assertEqual(search([7, 8, 9, 0, 1, 2, 3, 4, 6], 7), 0)\n    self.assertEqual(search([7, 8, 9, 0, 1, 2, 3, 4, 6], 6), 8)  \nif __name__ == '__main__':\n  unittest.main()",
        "detail": "CSEU4_BW2_Challenges_Day4.search_in_rotated_sorted_array.test_search_array",
        "documentation": {}
    },
    {
        "label": "smallest_missing",
        "kind": 2,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem1",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem1",
        "peekOfCode": "def smallest_missing(arr, left, right):\n    #base case\n    if left > right:\n        return left    \n    middle = left + (right - left) // 2\n    if arr[middle] == middle:\n        return smallest_missing(arr, middle + 1, right)\n    else:\n        return smallest_missing(arr, left, middle - 1)\nif __name__ == '__main__':",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem1",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n    def add(self, value):\n        self.next = Node(value)\n    def find_middle(self):\n        middle = self\n        end = self\n        while end != None:",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "peekOfCode": "root = Node([1, 2, 4, 3, 23])\ncur = root\ncur.add({\"name\": \"Tom\"})\ncur = cur.next\ncur.add(9)\ncur = cur.next\ncur.add(\"bob\")\ncur = cur.next\ncur.add(12)\ncur = cur.next",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "peekOfCode": "cur = root\ncur.add({\"name\": \"Tom\"})\ncur = cur.next\ncur.add(9)\ncur = cur.next\ncur.add(\"bob\")\ncur = cur.next\ncur.add(12)\ncur = cur.next\ncur.add(\"Bob\")",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "peekOfCode": "cur = cur.next\ncur.add(9)\ncur = cur.next\ncur.add(\"bob\")\ncur = cur.next\ncur.add(12)\ncur = cur.next\ncur.add(\"Bob\")\ncur = cur.next\ncur.add(None)",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "peekOfCode": "cur = cur.next\ncur.add(\"bob\")\ncur = cur.next\ncur.add(12)\ncur = cur.next\ncur.add(\"Bob\")\ncur = cur.next\ncur.add(None)\ncur = cur.next\ncur.add(34)",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "peekOfCode": "cur = cur.next\ncur.add(12)\ncur = cur.next\ncur.add(\"Bob\")\ncur = cur.next\ncur.add(None)\ncur = cur.next\ncur.add(34)\ncur = cur.next\nroot.find_middle()",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "peekOfCode": "cur = cur.next\ncur.add(\"Bob\")\ncur = cur.next\ncur.add(None)\ncur = cur.next\ncur.add(34)\ncur = cur.next\nroot.find_middle()",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "peekOfCode": "cur = cur.next\ncur.add(None)\ncur = cur.next\ncur.add(34)\ncur = cur.next\nroot.find_middle()",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "peekOfCode": "cur = cur.next\ncur.add(34)\ncur = cur.next\nroot.find_middle()",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "peekOfCode": "cur = cur.next\nroot.find_middle()",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem2",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n    def add(self, value):\n        self.next = Node(value)\n    def reverse(self):\n        cur = self\n        new = cur.next\n        cur.next = None # new tail?",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "peekOfCode": "root = Node(3)\ncur = root\ncur.add(4)\ncur = cur.next\ncur.add(5)\ncur = cur.next\ncur.add(6)\ncur = cur.next\ncur = root\nwhile cur:",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "peekOfCode": "cur = root\ncur.add(4)\ncur = cur.next\ncur.add(5)\ncur = cur.next\ncur.add(6)\ncur = cur.next\ncur = root\nwhile cur:\n    print(cur.value)",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "peekOfCode": "cur = cur.next\ncur.add(5)\ncur = cur.next\ncur.add(6)\ncur = cur.next\ncur = root\nwhile cur:\n    print(cur.value)\n    cur = cur.next\n    print(\"-----\")",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "peekOfCode": "cur = cur.next\ncur.add(6)\ncur = cur.next\ncur = root\nwhile cur:\n    print(cur.value)\n    cur = cur.next\n    print(\"-----\")\ncur = root.reverse()\nwhile cur:",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "peekOfCode": "cur = cur.next\ncur = root\nwhile cur:\n    print(cur.value)\n    cur = cur.next\n    print(\"-----\")\ncur = root.reverse()\nwhile cur:\n    print(cur.value)\n    cur = cur.next",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "peekOfCode": "cur = root\nwhile cur:\n    print(cur.value)\n    cur = cur.next\n    print(\"-----\")\ncur = root.reverse()\nwhile cur:\n    print(cur.value)\n    cur = cur.next",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "description": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "peekOfCode": "cur = root.reverse()\nwhile cur:\n    print(cur.value)\n    cur = cur.next",
        "detail": "CSEU4_DataStructures_GP.interview_questions.problem3",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.LRUCache.doubly_linked_list",
        "description": "CSEU4_DataStructures_GP.LRUCache.doubly_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, value, prev=None, next=None):\n        self.prev = prev\n        self.value = value\n        self.next = next\n    \"\"\"Wrap the given value in a ListNode and insert it\n    after this node. Note that this Node could already\n    have a next node it is pointing to.\"\"\"\n    def insert_after(self, value):\n        current_next = self.next",
        "detail": "CSEU4_DataStructures_GP.LRUCache.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.LRUCache.doubly_linked_list",
        "description": "CSEU4_DataStructures_GP.LRUCache.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self, node=None):\n        self.head = node\n        self.tail = node\n        self.length = 1 if node is not None else 0\n    def __len__(self):\n        return self.length\n    \"\"\"Wraps the given value in a ListNode and inserts it \n    as the new head of the list. Don't forget to handle \n    the old head node's previous pointer accordingly.\"\"\"",
        "detail": "CSEU4_DataStructures_GP.LRUCache.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "LRUCache",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.LRUCache.lru_cache",
        "description": "CSEU4_DataStructures_GP.LRUCache.lru_cache",
        "peekOfCode": "class LRUCache:\n    \"\"\"\n    Our LRUCache class keeps track of the max number of nodes it\n    can hold, the current number of nodes it is holding, a doubly-\n    linked list that holds the key-value entries in the correct\n    order, as well as a storage dict that provides fast access\n    to every node stored in the cache.\n    \"\"\"\n    def __init__(self, limit=10):\n        self.limit = limit",
        "detail": "CSEU4_DataStructures_GP.LRUCache.lru_cache",
        "documentation": {}
    },
    {
        "label": "CacheTests",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.LRUCache.test_lru_cache",
        "description": "CSEU4_DataStructures_GP.LRUCache.test_lru_cache",
        "peekOfCode": "class CacheTests(unittest.TestCase):\n    def setUp(self):\n        self.cache = LRUCache(3)\n    def test_cache_overwrite_appropriately(self):\n        self.cache.set('item1', 'a')\n        self.cache.set('item2', 'b')\n        self.cache.set('item3', 'c')\n        self.cache.set('item2', 'z')\n        self.assertEqual(self.cache.get('item1'), 'a')\n        self.assertEqual(self.cache.get('item2'), 'z')",
        "detail": "CSEU4_DataStructures_GP.LRUCache.test_lru_cache",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.binary_search_tree",
        "description": "CSEU4_DataStructures_GP.binary_search_tree",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    # Insert the given value into the tree\n    def insert(self, value):\n        # check if new nodes value is less than our current nodes value\n        if value < self.value:\n            # if there is no left child already here",
        "detail": "CSEU4_DataStructures_GP.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.dll_queue",
        "description": "CSEU4_DataStructures_GP.dll_queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        # counter to keep track of the number of elements in our queue\n        self.size = 0\n        # we'll use our LinkedList implementation to build the queue\n        self.storage = DoublyLinkedList()\n    def enqueue(self, item):\n        # add the item to the linked list\n        self.storage.add_to_tail(item)\n        # increment our size counter",
        "detail": "CSEU4_DataStructures_GP.dll_queue",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.dll_stack",
        "description": "CSEU4_DataStructures_GP.dll_stack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.size = 0\n        self.storage = DoublyLinkedList()\n    def push(self, value):\n        self.size += 1\n        self.storage.add_to_head(value)\n    def pop(self):\n        if self.len() > 0:\n            self.size -= 1",
        "detail": "CSEU4_DataStructures_GP.dll_stack",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.doubly_linked_list",
        "description": "CSEU4_DataStructures_GP.doubly_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, value, prev=None, next=None):\n        self.prev = prev\n        self.value = value\n        self.next = next\n    \"\"\"Wrap the given value in a ListNode and insert it\n    after this node. Note that this Node could already\n    have a next node it is pointing to.\"\"\"\n    def insert_after(self, value):\n        current_next = self.next",
        "detail": "CSEU4_DataStructures_GP.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.doubly_linked_list",
        "description": "CSEU4_DataStructures_GP.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self, node=None):\n        self.head = node\n        self.tail = node\n        self.length = 1 if node is not None else 0\n    def __len__(self):\n        return self.length\n    \"\"\"Wraps the given value in a ListNode and inserts it \n    as the new head of the list. Don't forget to handle \n    the old head node's previous pointer accordingly.\"\"\"",
        "detail": "CSEU4_DataStructures_GP.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.singly_linked_list",
        "description": "CSEU4_DataStructures_GP.singly_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, value=None, next_node=None):\n        # set the initial value of our node\n        self.value = value\n        # set a ref to the next node\n        self.next_node = next_node\n    def get_value(self):\n        return self.value\n    def get_next(self):\n        return self.next_node",
        "detail": "CSEU4_DataStructures_GP.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.singly_linked_list",
        "description": "CSEU4_DataStructures_GP.singly_linked_list",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        # ref to head of list\n        self.head = None\n        #ref to tail of list\n        self.tail = None\n    def add_to_tail(self, value):\n        # wrap the input value in a new node\n        new_node = Node(value, None)\n        # check if there is no head (is the list empty)",
        "detail": "CSEU4_DataStructures_GP.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "BinarySearchTreeTests",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.test_bst",
        "description": "CSEU4_DataStructures_GP.test_bst",
        "peekOfCode": "class BinarySearchTreeTests(unittest.TestCase):\n    def setUp(self):\n        self.bst = BinarySearchTree(5)\n    def test_insert(self):\n        self.bst.insert(2)\n        self.bst.insert(3)\n        self.bst.insert(7)\n        self.bst.insert(6)\n        self.assertEqual(self.bst.left.right.value, 3)\n        self.assertEqual(self.bst.right.left.value, 6)",
        "detail": "CSEU4_DataStructures_GP.test_bst",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedListTests",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.test_dll",
        "description": "CSEU4_DataStructures_GP.test_dll",
        "peekOfCode": "class DoublyLinkedListTests(unittest.TestCase):\n    def setUp(self):\n        self.node = ListNode(1)\n        self.dll = DoublyLinkedList(self.node)\n    def test_list_remove_from_tail(self):\n        self.dll.remove_from_tail()\n        self.assertIsNone(self.dll.head)\n        self.assertIsNone(self.dll.tail)\n        self.assertEqual(len(self.dll), 0)\n        self.dll.add_to_tail(33)",
        "detail": "CSEU4_DataStructures_GP.test_dll",
        "documentation": {}
    },
    {
        "label": "QueueTests",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.test_queue",
        "description": "CSEU4_DataStructures_GP.test_queue",
        "peekOfCode": "class QueueTests(unittest.TestCase):\n    def setUp(self):\n        self.q = Queue()\n    def test_len_returns_0_for_empty_queue(self):\n        self.assertEqual(self.q.len(), 0)\n    def test_len_returns_correct_length_after_enqueue(self):\n        self.assertEqual(self.q.len(), 0)\n        self.q.enqueue(2)\n        self.assertEqual(self.q.len(), 1)\n        self.q.enqueue(4)",
        "detail": "CSEU4_DataStructures_GP.test_queue",
        "documentation": {}
    },
    {
        "label": "QueueTests",
        "kind": 6,
        "importPath": "CSEU4_DataStructures_GP.test_stack",
        "description": "CSEU4_DataStructures_GP.test_stack",
        "peekOfCode": "class QueueTests(unittest.TestCase):\n    def setUp(self):\n        self.s = Stack()\n    def test_len_returns_0_for_empty_stack(self):\n        self.assertEqual(self.s.len(), 0)\n    def test_len_returns_correct_length_after_push(self):\n        self.assertEqual(self.s.len(), 0)\n        self.s.push(2)\n        self.assertEqual(self.s.len(), 1)\n        self.s.push(4)",
        "detail": "CSEU4_DataStructures_GP.test_stack",
        "documentation": {}
    },
    {
        "label": "world",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.adv.adv",
        "description": "CSEU4_Graphs_gp.adv.adv",
        "peekOfCode": "world = World()\n# You may uncomment the smaller graphs for development and testing purposes.\n# map_file = \"maps/test_line.txt\"\n# map_file = \"maps/test_cross.txt\"\n# map_file = \"maps/test_loop.txt\"\n# map_file = \"maps/test_loop_fork.txt\"\nmap_file = \"maps/main_maze.txt\"\n# Loads the map into a dictionary\nroom_graph=literal_eval(open(map_file, \"r\").read())\nworld.load_graph(room_graph)",
        "detail": "CSEU4_Graphs_gp.adv.adv",
        "documentation": {}
    },
    {
        "label": "map_file",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.adv.adv",
        "description": "CSEU4_Graphs_gp.adv.adv",
        "peekOfCode": "map_file = \"maps/main_maze.txt\"\n# Loads the map into a dictionary\nroom_graph=literal_eval(open(map_file, \"r\").read())\nworld.load_graph(room_graph)\n# Print an ASCII map\nworld.print_rooms()\nplayer = Player(world.starting_room)\n# Fill this out with directions to walk\n# traversal_path = ['n', 'n']\ntraversal_path = []",
        "detail": "CSEU4_Graphs_gp.adv.adv",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.adv.adv",
        "description": "CSEU4_Graphs_gp.adv.adv",
        "peekOfCode": "player = Player(world.starting_room)\n# Fill this out with directions to walk\n# traversal_path = ['n', 'n']\ntraversal_path = []\n# TRAVERSAL TEST\nvisited_rooms = set()\nplayer.current_room = world.starting_room\nvisited_rooms.add(player.current_room)\nfor move in traversal_path:\n    player.travel(move)",
        "detail": "CSEU4_Graphs_gp.adv.adv",
        "documentation": {}
    },
    {
        "label": "traversal_path",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.adv.adv",
        "description": "CSEU4_Graphs_gp.adv.adv",
        "peekOfCode": "traversal_path = []\n# TRAVERSAL TEST\nvisited_rooms = set()\nplayer.current_room = world.starting_room\nvisited_rooms.add(player.current_room)\nfor move in traversal_path:\n    player.travel(move)\n    visited_rooms.add(player.current_room)\nif len(visited_rooms) == len(room_graph):\n    print(f\"TESTS PASSED: {len(traversal_path)} moves, {len(visited_rooms)} rooms visited\")",
        "detail": "CSEU4_Graphs_gp.adv.adv",
        "documentation": {}
    },
    {
        "label": "visited_rooms",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.adv.adv",
        "description": "CSEU4_Graphs_gp.adv.adv",
        "peekOfCode": "visited_rooms = set()\nplayer.current_room = world.starting_room\nvisited_rooms.add(player.current_room)\nfor move in traversal_path:\n    player.travel(move)\n    visited_rooms.add(player.current_room)\nif len(visited_rooms) == len(room_graph):\n    print(f\"TESTS PASSED: {len(traversal_path)} moves, {len(visited_rooms)} rooms visited\")\nelse:\n    print(\"TESTS FAILED: INCOMPLETE TRAVERSAL\")",
        "detail": "CSEU4_Graphs_gp.adv.adv",
        "documentation": {}
    },
    {
        "label": "player.current_room",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.adv.adv",
        "description": "CSEU4_Graphs_gp.adv.adv",
        "peekOfCode": "player.current_room = world.starting_room\nvisited_rooms.add(player.current_room)\nfor move in traversal_path:\n    player.travel(move)\n    visited_rooms.add(player.current_room)\nif len(visited_rooms) == len(room_graph):\n    print(f\"TESTS PASSED: {len(traversal_path)} moves, {len(visited_rooms)} rooms visited\")\nelse:\n    print(\"TESTS FAILED: INCOMPLETE TRAVERSAL\")\n    print(f\"{len(room_graph) - len(visited_rooms)} unvisited rooms\")",
        "detail": "CSEU4_Graphs_gp.adv.adv",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.adv.player",
        "description": "CSEU4_Graphs_gp.adv.player",
        "peekOfCode": "class Player:\n    def __init__(self, starting_room):\n        self.current_room = starting_room\n    def travel(self, direction, show_rooms = False):\n        next_room = self.current_room.get_room_in_direction(direction)\n        if next_room is not None:\n            self.current_room = next_room\n            if (show_rooms):\n                next_room.print_room_description(self)\n        else:",
        "detail": "CSEU4_Graphs_gp.adv.player",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.adv.room",
        "description": "CSEU4_Graphs_gp.adv.room",
        "peekOfCode": "class Room:\n    def __init__(self, name, description, id=0, x=None, y=None):\n        self.id = id\n        self.name = name\n        self.description = description\n        self.n_to = None\n        self.s_to = None\n        self.e_to = None\n        self.w_to = None\n        self.x = x",
        "detail": "CSEU4_Graphs_gp.adv.room",
        "documentation": {}
    },
    {
        "label": "World",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.adv.world",
        "description": "CSEU4_Graphs_gp.adv.world",
        "peekOfCode": "class World:\n    def __init__(self):\n        self.starting_room = None\n        self.rooms = {}\n        self.room_grid = []\n        self.grid_size = 0\n    def load_graph(self, room_graph):\n        num_rooms = len(room_graph)\n        rooms = [None] * num_rooms\n        grid_size = 1",
        "detail": "CSEU4_Graphs_gp.adv.world",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.ancestor.ancestor",
        "description": "CSEU4_Graphs_gp.ancestor.ancestor",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU4_Graphs_gp.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.ancestor.ancestor",
        "description": "CSEU4_Graphs_gp.ancestor.ancestor",
        "peekOfCode": "class Graph:\n    \"\"\"Represent a graph as a dictionary of vertices mapping labels to edges.\"\"\"\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex_id):\n        if vertex_id not in self.vertices:\n            self.vertices[vertex_id] = set()\n    def add_edge(self, v1, v2):\n        if v1 in self.vertices and v2 in self.vertices:\n            self.vertices[v1].add(v2)",
        "detail": "CSEU4_Graphs_gp.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "kind": 2,
        "importPath": "CSEU4_Graphs_gp.ancestor.ancestor",
        "description": "CSEU4_Graphs_gp.ancestor.ancestor",
        "peekOfCode": "def earliest_ancestor(ancestors, starting_node):\n    # Build the graph\n    graph = Graph()\n    for pair in ancestors:\n        graph.add_vertex(pair[0])\n        graph.add_vertex(pair[1])\n        # Build edges in reverse\n        graph.add_edge(pair[1], pair[0])\n    # Do a BFS (storing the path)\n    q = Queue()",
        "detail": "CSEU4_Graphs_gp.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.ancestor.test_ancestor",
        "description": "CSEU4_Graphs_gp.ancestor.test_ancestor",
        "peekOfCode": "class Test(unittest.TestCase):\n    '''\n       10\n     /\n    1   2   4  11\n     \\ /   / \\ /\n      3   5   8\n       \\ / \\   \\\n        6   7   9\n    '''",
        "detail": "CSEU4_Graphs_gp.ancestor.test_ancestor",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.challenge.island_count",
        "description": "CSEU4_Graphs_gp.challenge.island_count",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU4_Graphs_gp.challenge.island_count",
        "documentation": {}
    },
    {
        "label": "dft",
        "kind": 2,
        "importPath": "CSEU4_Graphs_gp.challenge.island_count",
        "description": "CSEU4_Graphs_gp.challenge.island_count",
        "peekOfCode": "def dft(row, col, matrix, visited):\n    # make a stack\n    s = Stack()\n    # push starting vertex\n    s.push((row, col))\n    while s.size() > 0:\n        # pop first vertex\n        v = s.pop()\n        row = v[0]\n        col = v[1]",
        "detail": "CSEU4_Graphs_gp.challenge.island_count",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "CSEU4_Graphs_gp.challenge.island_count",
        "description": "CSEU4_Graphs_gp.challenge.island_count",
        "peekOfCode": "def get_neighbors(col, row, graph_matrix):\n    neighbors = []\n    # check north\n    if row > 0 and graph_matrix[row - 1][col] == 1:\n        neighbors.append((row - 1, col))\n    # check south\n    if row < len(graph_matrix) - 1 and graph_matrix[row + 1][col] == 1:\n        neighbors.append((row + 1, col))\n    # check east\n    if col < len(graph_matrix[0]) - 1 and graph_matrix[row][col + 1] == 1:",
        "detail": "CSEU4_Graphs_gp.challenge.island_count",
        "documentation": {}
    },
    {
        "label": "island_counter",
        "kind": 2,
        "importPath": "CSEU4_Graphs_gp.challenge.island_count",
        "description": "CSEU4_Graphs_gp.challenge.island_count",
        "peekOfCode": "def island_counter(matrix):\n    # create visited matrix of the same dimensions as the given matrix\n    visited = []\n    # creat a counter variable\n    island_count = 0\n    # fill out visited with False\n    for _ in range(len(matrix)):\n        visited.append([False] * len(matrix[0]))\n    # walk through each cell in the matrix\n    for col in range(len(matrix[0])):",
        "detail": "CSEU4_Graphs_gp.challenge.island_count",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.challenge.island_count",
        "description": "CSEU4_Graphs_gp.challenge.island_count",
        "peekOfCode": "islands = [[0, 1, 0, 1, 0],\n           [1, 1, 0, 1, 1],\n           [0, 0, 1, 0, 0],\n           [1, 0, 1, 0, 0],\n           [1, 1, 0, 0, 0]]\nisland_counter(islands) # returns 4\nremember to talk through a possible approach to the problem with your group\ntraversal (define a function) => dft(row, col, matrix, visited) => returns visited\nget neighbors (define function) => get_nieghbors(col, row, matrix) => check north south east and west for connections / x, y / col / row\neach island is a vertex",
        "detail": "CSEU4_Graphs_gp.challenge.island_count",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.graph.graph",
        "description": "CSEU4_Graphs_gp.graph.graph",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU4_Graphs_gp.graph.graph",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.graph.graph",
        "description": "CSEU4_Graphs_gp.graph.graph",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU4_Graphs_gp.graph.graph",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.graph.graph",
        "description": "CSEU4_Graphs_gp.graph.graph",
        "peekOfCode": "class Graph:\n    \"\"\"Represent a graph as a dictionary of vertices mapping labels to edges.\"\"\"\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex_id):\n        \"\"\"\n        Add a vertex to the graph.\n        \"\"\"\n        self.vertices[vertex_id] = set()\n    def add_edge(self, v1, v2):",
        "detail": "CSEU4_Graphs_gp.graph.graph",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.adj_list",
        "description": "CSEU4_Graphs_gp.adj_list",
        "peekOfCode": "class Graph:\n    \"\"\"Represent a graph as a dictionary of vertices mapping labels to edges.\"\"\"\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex_id):\n        self.vertices[vertex_id] = set()\n    def add_edge(self, v1, v2):\n        if v1 in self.vertices and v2 in self.vertices:\n            self.vertices[v1].add(v2)\n        else:",
        "detail": "CSEU4_Graphs_gp.adj_list",
        "documentation": {}
    },
    {
        "label": "squash_my_list",
        "kind": 2,
        "importPath": "CSEU4_Graphs_gp.flattening",
        "description": "CSEU4_Graphs_gp.flattening",
        "peekOfCode": "def squash_my_list(l):\n    # l is a list, possibly nested\n    result_l = [] # empty, result list\n    for i in l:\n        if type(i) is list:\n            # if we have a list, then extend\n            result_l.extend(i)\n        else: # otherwise append to the result, one item\n            result_l.append(i)\n    return result_l",
        "detail": "CSEU4_Graphs_gp.flattening",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.flattening",
        "description": "CSEU4_Graphs_gp.flattening",
        "peekOfCode": "arr = [\n    [1, 2, 3, 4], 23,\n    [5, 6, 7, 8], 19,\n    [9, 10, 11, 12],\n    [13, 14, 15, 16]\n]\narr2 = []\nfor i in range(1, 17):\n    arr2.append(i)\nprint(arr)",
        "detail": "CSEU4_Graphs_gp.flattening",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.flattening",
        "description": "CSEU4_Graphs_gp.flattening",
        "peekOfCode": "arr2 = []\nfor i in range(1, 17):\n    arr2.append(i)\nprint(arr)\n# print(arr2)\n# print(arr[0][1])\n# # x + y * width\n# print(arr2[1 + 0 * 4])\ndef squash_my_list(l):\n    # l is a list, possibly nested",
        "detail": "CSEU4_Graphs_gp.flattening",
        "documentation": {}
    },
    {
        "label": "arr3",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.flattening",
        "description": "CSEU4_Graphs_gp.flattening",
        "peekOfCode": "arr3 = squash_my_list(arr)\nprint(arr3)",
        "detail": "CSEU4_Graphs_gp.flattening",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.queue",
        "description": "CSEU4_Graphs_gp.queue",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU4_Graphs_gp.queue",
        "documentation": {}
    },
    {
        "label": "random_counts",
        "kind": 2,
        "importPath": "CSEU4_Graphs_gp.random_nums",
        "description": "CSEU4_Graphs_gp.random_nums",
        "peekOfCode": "def random_counts(n):\n    \"\"\"\n    Generates n random numbers between 1-10 and counts how many of each there are.\n    \"\"\"\n    counts = {1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0}\n    nums = [random.randint(1,10) for i in range(1,n)]\n    for i in nums:\n        counts[i] += 1\n    return counts\nprint(random_counts(40))",
        "detail": "CSEU4_Graphs_gp.random_nums",
        "documentation": {}
    },
    {
        "label": "populate_graph",
        "kind": 2,
        "importPath": "CSEU4_Graphs_gp.social",
        "description": "CSEU4_Graphs_gp.social",
        "peekOfCode": "def populate_graph(self, num_users, avg_friendships):\n        \"\"\"\n        Takes a number of users and an average number of friendships\n        as arguments\n        Creates that number of users and a randomly distributed friendships\n        between those users.\n        The number of users must be greater than the average number of friendships.\n        \"\"\"\n        # Reset graph\n        self.last_id = 0",
        "detail": "CSEU4_Graphs_gp.social",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.social_graph",
        "description": "CSEU4_Graphs_gp.social_graph",
        "peekOfCode": "class User:\n    def __init__(self, name):\n        self.name = name\nclass SocialGraph:\n    def __init__(self):\n        self.last_id = 0\n        self.users = {}\n        self.friendships = {}\n    def add_friendship(self, user_id, friend_id):\n        \"\"\"",
        "detail": "CSEU4_Graphs_gp.social_graph",
        "documentation": {}
    },
    {
        "label": "SocialGraph",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.social_graph",
        "description": "CSEU4_Graphs_gp.social_graph",
        "peekOfCode": "class SocialGraph:\n    def __init__(self):\n        self.last_id = 0\n        self.users = {}\n        self.friendships = {}\n    def add_friendship(self, user_id, friend_id):\n        \"\"\"\n        Creates a bi-directional friendship\n        \"\"\"\n        if user_id == friend_id:",
        "detail": "CSEU4_Graphs_gp.social_graph",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.stack",
        "description": "CSEU4_Graphs_gp.stack",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "CSEU4_Graphs_gp.stack",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEU4_Graphs_gp.word_ladder",
        "description": "CSEU4_Graphs_gp.word_ladder",
        "peekOfCode": "class Queue():\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "CSEU4_Graphs_gp.word_ladder",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "CSEU4_Graphs_gp.word_ladder",
        "description": "CSEU4_Graphs_gp.word_ladder",
        "peekOfCode": "def get_neighbors(word):\n    neighbors = []\n    string_word = list(word)\n    for i in range(len(string_word)):\n        for letter in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            temp_word = list(string_word)\n            temp_word[i] = letter\n            w = \"\".join(temp_word)\n            if w != word and w in word_set:\n                neighbors.append(w)",
        "detail": "CSEU4_Graphs_gp.word_ladder",
        "documentation": {}
    },
    {
        "label": "find_word_ladder",
        "kind": 2,
        "importPath": "CSEU4_Graphs_gp.word_ladder",
        "description": "CSEU4_Graphs_gp.word_ladder",
        "peekOfCode": "def find_word_ladder(begin_word, end_word):\n    visited = set()\n    q = Queue()\n    q.enqueue( [begin_word] )\n    while q.size() > 0:\n        path = q.dequeue()\n        v = path[-1]\n        if v not in visited:\n            visited.add(v)\n            if v == end_word:",
        "detail": "CSEU4_Graphs_gp.word_ladder",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.word_ladder",
        "description": "CSEU4_Graphs_gp.word_ladder",
        "peekOfCode": "f = open('words.txt', 'r')\nwords = f.read().split(\"\\n\")\nf.close()\nword_set = set()\nfor word in words:\n      word_set.add(word.lower())\ndef get_neighbors(word):\n    neighbors = []\n    string_word = list(word)\n    for i in range(len(string_word)):",
        "detail": "CSEU4_Graphs_gp.word_ladder",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.word_ladder",
        "description": "CSEU4_Graphs_gp.word_ladder",
        "peekOfCode": "words = f.read().split(\"\\n\")\nf.close()\nword_set = set()\nfor word in words:\n      word_set.add(word.lower())\ndef get_neighbors(word):\n    neighbors = []\n    string_word = list(word)\n    for i in range(len(string_word)):\n        for letter in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']:",
        "detail": "CSEU4_Graphs_gp.word_ladder",
        "documentation": {}
    },
    {
        "label": "word_set",
        "kind": 5,
        "importPath": "CSEU4_Graphs_gp.word_ladder",
        "description": "CSEU4_Graphs_gp.word_ladder",
        "peekOfCode": "word_set = set()\nfor word in words:\n      word_set.add(word.lower())\ndef get_neighbors(word):\n    neighbors = []\n    string_word = list(word)\n    for i in range(len(string_word)):\n        for letter in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            temp_word = list(string_word)\n            temp_word[i] = letter",
        "detail": "CSEU4_Graphs_gp.word_ladder",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.caesar",
        "description": "CSEU4_HashTables_GP.caesar",
        "peekOfCode": "def encode(s):\n    pass\ndef decode(s):\n    pass\n# # test code\n# plaintext = \"HELLOWORLD\"\n# ciphertext = encode(plaintext)\n# print(f\"Ciphertext: {ciphertext}\")\n# plaintext2 = decode(ciphertext)\n# print(f\"Plaintext:  {plaintext}\")",
        "detail": "CSEU4_HashTables_GP.caesar",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.caesar",
        "description": "CSEU4_HashTables_GP.caesar",
        "peekOfCode": "def decode(s):\n    pass\n# # test code\n# plaintext = \"HELLOWORLD\"\n# ciphertext = encode(plaintext)\n# print(f\"Ciphertext: {ciphertext}\")\n# plaintext2 = decode(ciphertext)\n# print(f\"Plaintext:  {plaintext}\")",
        "detail": "CSEU4_HashTables_GP.caesar",
        "documentation": {}
    },
    {
        "label": "encode_table",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.caesar",
        "description": "CSEU4_HashTables_GP.caesar",
        "peekOfCode": "encode_table = {\n    'A': 'H',\n    'B': 'Z',\n    'C': 'Y',\n    'D': 'W',\n    'E': 'O',\n    'F': 'R',\n    'G': 'J',\n    'H': 'D',\n    'I': 'P',",
        "detail": "CSEU4_HashTables_GP.caesar",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.fib",
        "description": "CSEU4_HashTables_GP.fib",
        "peekOfCode": "def fib(n):\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n# http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibtable.html\nprint(fib(213)) # => 146178119651438213260386312206974243796773058",
        "detail": "CSEU4_HashTables_GP.fib",
        "documentation": {}
    },
    {
        "label": "build_index",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.index",
        "description": "CSEU4_HashTables_GP.index",
        "peekOfCode": "def build_index(rec):\n    pass\n# # Test Code\n# idx = build_index(records)\n# # print all the departments\n# for i in idx:\n#     print(i)\n# # print everyone in Engineering:\n# print(idx[\"Engineering\"])",
        "detail": "CSEU4_HashTables_GP.index",
        "documentation": {}
    },
    {
        "label": "records",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.index",
        "description": "CSEU4_HashTables_GP.index",
        "peekOfCode": "records = [\n    (\"Alice\", \"Engineering\"),\n    (\"Bob\", \"Sales\"),\n    (\"Carol\", \"Sales\"),\n    (\"Dave\", \"Engineering\"),\n    (\"Erin\", \"Engineering\"),\n    (\"Frank\", \"Engineering\"),\n    (\"Grace\", \"Marketing\")\n]\ndef build_index(rec):",
        "detail": "CSEU4_HashTables_GP.index",
        "documentation": {}
    },
    {
        "label": "letter_count",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.letter_count",
        "description": "CSEU4_HashTables_GP.letter_count",
        "peekOfCode": "def letter_count(s):\n    pass\ndef print_sorted_letter_count(s):\n    pass\nprint_sorted_letter_count(\"aaabbc\")\n#print_sorted_letter_count(\"Hello!\")\n#print_sorted_letter_count(\"The quick brown fox jumps over the lazy dogs\")",
        "detail": "CSEU4_HashTables_GP.letter_count",
        "documentation": {}
    },
    {
        "label": "print_sorted_letter_count",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.letter_count",
        "description": "CSEU4_HashTables_GP.letter_count",
        "peekOfCode": "def print_sorted_letter_count(s):\n    pass\nprint_sorted_letter_count(\"aaabbc\")\n#print_sorted_letter_count(\"Hello!\")\n#print_sorted_letter_count(\"The quick brown fox jumps over the lazy dogs\")",
        "detail": "CSEU4_HashTables_GP.letter_count",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEU4_HashTables_GP.list",
        "description": "CSEU4_HashTables_GP.list",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n    def __repr__(self):\n        return f'Node({repr(self.value)})'\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def __str__(self):",
        "detail": "CSEU4_HashTables_GP.list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "CSEU4_HashTables_GP.list",
        "description": "CSEU4_HashTables_GP.list",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def __str__(self):\n        \"\"\"Print entire linked list.\"\"\"\n        if self.head is None:\n            return \"[Empty List]\"\n        cur = self.head\n        s = \"\"\n        while cur != None:",
        "detail": "CSEU4_HashTables_GP.list",
        "documentation": {}
    },
    {
        "label": "build_table",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.lookup",
        "description": "CSEU4_HashTables_GP.lookup",
        "peekOfCode": "def build_table(n):\n    for i in range(1, n):\n        global inv_sqrt\n        inv_sqrt[i] = 1 / math.sqrt(i)\nprint(\"Building Table\")\nbuild_table(1000000)\nprint(\"Done Building\")\nprint(inv_sqrt[30000])\nprint(inv_sqrt[30010])\nprint(inv_sqrt[32000])",
        "detail": "CSEU4_HashTables_GP.lookup",
        "documentation": {}
    },
    {
        "label": "inv_sqrt",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.lookup",
        "description": "CSEU4_HashTables_GP.lookup",
        "peekOfCode": "inv_sqrt = {}\ndef build_table(n):\n    for i in range(1, n):\n        global inv_sqrt\n        inv_sqrt[i] = 1 / math.sqrt(i)\nprint(\"Building Table\")\nbuild_table(1000000)\nprint(\"Done Building\")\nprint(inv_sqrt[30000])\nprint(inv_sqrt[30010])",
        "detail": "CSEU4_HashTables_GP.lookup",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "def my_hash(s):\n    # turn the string in to some numbers\n    nums = s.encode()\n    sum = 0\n    for b in nums:\n        sum += b\n    return sum\nhash_table = [None] * 8 # lets start with size 8 as our clamping size\n# take the hash and turn it in to an index clamped to the size of a list\nh = my_hash(\"Hello\")",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "hash_table = [None] * 8 # lets start with size 8 as our clamping size\n# take the hash and turn it in to an index clamped to the size of a list\nh = my_hash(\"Hello\")\ni = h % len(hash_table)\nhash_table[i] = \"Some hello value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some World value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "h = my_hash(\"Hello\")\ni = h % len(hash_table)\nhash_table[i] = \"Some hello value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some World value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some other World value\"\n# # get value from the hash table at the key",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "i = h % len(hash_table)\nhash_table[i] = \"Some hello value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some World value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some other World value\"\n# # get value from the hash table at the key\n# # O(1)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "hash_table[i]",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "hash_table[i] = \"Some hello value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some World value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some other World value\"\n# # get value from the hash table at the key\n# # O(1)\n# h = my_hash(\"World\")",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "h = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some World value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some other World value\"\n# # get value from the hash table at the key\n# # O(1)\n# h = my_hash(\"World\")\n# i = h % len(hash_table)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "i = h % len(hash_table)\nhash_table[i] = \"Some World value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some other World value\"\n# # get value from the hash table at the key\n# # O(1)\n# h = my_hash(\"World\")\n# i = h % len(hash_table)\n# v = hash_table[i]",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "hash_table[i]",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "hash_table[i] = \"Some World value\"\nh = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some other World value\"\n# # get value from the hash table at the key\n# # O(1)\n# h = my_hash(\"World\")\n# i = h % len(hash_table)\n# v = hash_table[i]\n# print(v)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "h = my_hash(\"World\")\ni = h % len(hash_table)\nhash_table[i] = \"Some other World value\"\n# # get value from the hash table at the key\n# # O(1)\n# h = my_hash(\"World\")\n# i = h % len(hash_table)\n# v = hash_table[i]\n# print(v)\n# # get value from the hash table at the key",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "i = h % len(hash_table)\nhash_table[i] = \"Some other World value\"\n# # get value from the hash table at the key\n# # O(1)\n# h = my_hash(\"World\")\n# i = h % len(hash_table)\n# v = hash_table[i]\n# print(v)\n# # get value from the hash table at the key\n# # O(1)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "hash_table[i]",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "hash_table[i] = \"Some other World value\"\n# # get value from the hash table at the key\n# # O(1)\n# h = my_hash(\"World\")\n# i = h % len(hash_table)\n# v = hash_table[i]\n# print(v)\n# # get value from the hash table at the key\n# # O(1)\n# h = my_hash(\"Frogs\")",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "h = my_hash(\"Hello\")\ni = h % len(hash_table)\nhash_table[i] = None\n# get value from the hash table at the key\n# O(1)\nh = my_hash(\"Hello\")\ni = h % len(hash_table)\nv = hash_table[i]\nprint(v)\n# print(hash_table)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "i = h % len(hash_table)\nhash_table[i] = None\n# get value from the hash table at the key\n# O(1)\nh = my_hash(\"Hello\")\ni = h % len(hash_table)\nv = hash_table[i]\nprint(v)\n# print(hash_table)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "hash_table[i]",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "hash_table[i] = None\n# get value from the hash table at the key\n# O(1)\nh = my_hash(\"Hello\")\ni = h % len(hash_table)\nv = hash_table[i]\nprint(v)\n# print(hash_table)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "h = my_hash(\"Hello\")\ni = h % len(hash_table)\nv = hash_table[i]\nprint(v)\n# print(hash_table)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "i = h % len(hash_table)\nv = hash_table[i]\nprint(v)\n# print(hash_table)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.mapping",
        "description": "CSEU4_HashTables_GP.mapping",
        "peekOfCode": "v = hash_table[i]\nprint(v)\n# print(hash_table)",
        "detail": "CSEU4_HashTables_GP.mapping",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.myhash1",
        "description": "CSEU4_HashTables_GP.myhash1",
        "peekOfCode": "def my_hash(s):\n    sb = s.encode()  # Get the UTF-8 bytes for the string\n    sum = 0\n    for b in sb:\n        sum += b\n        sum &= 0xffffffff  # clamp to 32 bits\n    return sum\n# hash the index\ndef hash_index(key):\n    h = my_hash(key)",
        "detail": "CSEU4_HashTables_GP.myhash1",
        "documentation": {}
    },
    {
        "label": "hash_index",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.myhash1",
        "description": "CSEU4_HashTables_GP.myhash1",
        "peekOfCode": "def hash_index(key):\n    h = my_hash(key)\n    return h % len(hash_table)\n# put\ndef put(key, val):\n    i = hash_index(key)\n    if hash_table[i] != None:\n        print(f\"Collision! Overwriting {repr(hash_table[i])}\")\n    hash_table[i] = val\n# get",
        "detail": "CSEU4_HashTables_GP.myhash1",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.myhash1",
        "description": "CSEU4_HashTables_GP.myhash1",
        "peekOfCode": "def put(key, val):\n    i = hash_index(key)\n    if hash_table[i] != None:\n        print(f\"Collision! Overwriting {repr(hash_table[i])}\")\n    hash_table[i] = val\n# get\ndef get(key):\n    i = hash_index(key)\n    return hash_table[i]\n# delete",
        "detail": "CSEU4_HashTables_GP.myhash1",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.myhash1",
        "description": "CSEU4_HashTables_GP.myhash1",
        "peekOfCode": "def get(key):\n    i = hash_index(key)\n    return hash_table[i]\n# delete\ndef delete(key):\n    i = hash_index(key)\n    hash_table[i] = None\nif __name__ == \"__main__\":\n    put(\"Hello\", \"Hello Value\")\n    put(\"World\", \"World Value\")",
        "detail": "CSEU4_HashTables_GP.myhash1",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.myhash1",
        "description": "CSEU4_HashTables_GP.myhash1",
        "peekOfCode": "def delete(key):\n    i = hash_index(key)\n    hash_table[i] = None\nif __name__ == \"__main__\":\n    put(\"Hello\", \"Hello Value\")\n    put(\"World\", \"World Value\")\n    put(\"foo\", \"foo value\")   # \"foo\" hashes to same index as \"Hello\"\n                            # AKA \"foo collides with Hello\"\n    print(hash_table)\n    v = get(\"Hello\")",
        "detail": "CSEU4_HashTables_GP.myhash1",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.myhash1",
        "description": "CSEU4_HashTables_GP.myhash1",
        "peekOfCode": "hash_table = [None] * 8   # 8 slots, all initiailized to None\ndef my_hash(s):\n    sb = s.encode()  # Get the UTF-8 bytes for the string\n    sum = 0\n    for b in sb:\n        sum += b\n        sum &= 0xffffffff  # clamp to 32 bits\n    return sum\n# hash the index\ndef hash_index(key):",
        "detail": "CSEU4_HashTables_GP.myhash1",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "CSEU4_HashTables_GP.myhash2",
        "description": "CSEU4_HashTables_GP.myhash2",
        "peekOfCode": "class HashTableEntry:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n    def __repr__(self):\n        return f'HashTableEntry({repr(self.key)},{repr(self.value)})'\n# lets refactor some code\nhash_table = [None] * 8   # 8 slots, all initiailized to None\ndef my_hash(s):\n    sb = s.encode()  # Get the UTF-8 bytes for the string",
        "detail": "CSEU4_HashTables_GP.myhash2",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.myhash2",
        "description": "CSEU4_HashTables_GP.myhash2",
        "peekOfCode": "def my_hash(s):\n    sb = s.encode()  # Get the UTF-8 bytes for the string\n    sum = 0\n    for b in sb:\n        sum += b\n        sum &= 0xffffffff  # clamp to 32 bits\n    return sum\n# hash the index\ndef hash_index(key):\n    h = my_hash(key)",
        "detail": "CSEU4_HashTables_GP.myhash2",
        "documentation": {}
    },
    {
        "label": "hash_index",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.myhash2",
        "description": "CSEU4_HashTables_GP.myhash2",
        "peekOfCode": "def hash_index(key):\n    h = my_hash(key)\n    return h % len(hash_table)\n# put\ndef put(key, val):\n    i = hash_index(key)\n        # while the hash_table[i] != None\n            # then increment index and try again\n    if hash_table[i] != None:\n        print(f\"Collision! Overwriting {repr(hash_table[i])}\")",
        "detail": "CSEU4_HashTables_GP.myhash2",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.myhash2",
        "description": "CSEU4_HashTables_GP.myhash2",
        "peekOfCode": "def put(key, val):\n    i = hash_index(key)\n        # while the hash_table[i] != None\n            # then increment index and try again\n    if hash_table[i] != None:\n        print(f\"Collision! Overwriting {repr(hash_table[i])}\")\n    hash_table[i] = HashTableEntry(key, val)\n# get\ndef get(key):\n    i = hash_index(key)",
        "detail": "CSEU4_HashTables_GP.myhash2",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.myhash2",
        "description": "CSEU4_HashTables_GP.myhash2",
        "peekOfCode": "def get(key):\n    i = hash_index(key)\n    entry = hash_table[i]\n    if entry == None:\n        return None\n    # while the entry.key != key\n        # then increment index and try again\n    return entry.value\n# delete\ndef delete(key):",
        "detail": "CSEU4_HashTables_GP.myhash2",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.myhash2",
        "description": "CSEU4_HashTables_GP.myhash2",
        "peekOfCode": "def delete(key):\n    i = hash_index(key)\n    hash_table[i] = None\nif __name__ == \"__main__\":\n    # put(\"Hello\", \"Hello Value\")\n    # put(\"World\", \"World Value\")\n    # print(f\"{hash_table}\\n\")\n    # put(\"foo\", \"foo value\")   # \"foo\" hashes to same index as \"Hello\"\n    #                         # AKA \"foo collides with Hello\"",
        "detail": "CSEU4_HashTables_GP.myhash2",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.myhash2",
        "description": "CSEU4_HashTables_GP.myhash2",
        "peekOfCode": "hash_table = [None] * 8   # 8 slots, all initiailized to None\ndef my_hash(s):\n    sb = s.encode()  # Get the UTF-8 bytes for the string\n    sum = 0\n    for b in sb:\n        sum += b\n        sum &= 0xffffffff  # clamp to 32 bits\n    return sum\n# hash the index\ndef hash_index(key):",
        "detail": "CSEU4_HashTables_GP.myhash2",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.naieve1",
        "description": "CSEU4_HashTables_GP.naieve1",
        "peekOfCode": "def my_hash(s):\n    for c in s:\n        print(c)\n# so how can we turn each char in to a number?\n# let's make a plan and explore this\ndef my_hash2(s):\n    nums = s.encode()\n    for b in nums:\n        print(b)\n# now one ster further lets thing of a deterministic way to make a number to represent the entire string",
        "detail": "CSEU4_HashTables_GP.naieve1",
        "documentation": {}
    },
    {
        "label": "my_hash2",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.naieve1",
        "description": "CSEU4_HashTables_GP.naieve1",
        "peekOfCode": "def my_hash2(s):\n    nums = s.encode()\n    for b in nums:\n        print(b)\n# now one ster further lets thing of a deterministic way to make a number to represent the entire string\ndef my_hash3(s):\n    nums = s.encode()\n    sum = 0\n    for b in nums:\n        sum += b",
        "detail": "CSEU4_HashTables_GP.naieve1",
        "documentation": {}
    },
    {
        "label": "my_hash3",
        "kind": 2,
        "importPath": "CSEU4_HashTables_GP.naieve1",
        "description": "CSEU4_HashTables_GP.naieve1",
        "peekOfCode": "def my_hash3(s):\n    nums = s.encode()\n    sum = 0\n    for b in nums:\n        sum += b\n        sum &= 0xffffffff # clamp to 32 bits\n    return sum\n# my_hash(\"Hello\")\n# my_hash2(\"Hello\")\n# print(my_hash2(\"Hello\")) ",
        "detail": "CSEU4_HashTables_GP.naieve1",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.sorter",
        "description": "CSEU4_HashTables_GP.sorter",
        "peekOfCode": "d = {\n    \"foo\": 12,\n    \"bar\": 17,\n    \"qux\": 2\n}\n# cast our dict to a list of pairs\nitems = list(d.items())\nprint(items)\n# Sort ascending by key\nitems.sort()",
        "detail": "CSEU4_HashTables_GP.sorter",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.sorter",
        "description": "CSEU4_HashTables_GP.sorter",
        "peekOfCode": "items = list(d.items())\nprint(items)\n# Sort ascending by key\nitems.sort()\nprint(items)\n# Sort descending by key\nitems.sort(reverse=True)\nprint(items)\n# Sort ascending by value\n# we can use lambdas, an anonymous function use an arg to to represent an element (key / Val table)",
        "detail": "CSEU4_HashTables_GP.sorter",
        "documentation": {}
    },
    {
        "label": "CacheEntry",
        "kind": 6,
        "importPath": "CSEU4_HashTables_GP.webcache",
        "description": "CSEU4_HashTables_GP.webcache",
        "peekOfCode": "class CacheEntry:\n    \"\"\"\n    hold info about the cache entry\n    - url\n    - data\n    \"\"\"\n    def __init__(self, url, data):\n        self.url = url\n        self.data = data\n        self.timestamp = datetime.datetime.now().timestamp()",
        "detail": "CSEU4_HashTables_GP.webcache",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.webcache",
        "description": "CSEU4_HashTables_GP.webcache",
        "peekOfCode": "cache = {}\n# how long will we keep each item in the cache?\nCACHE_EXPIRY_SECONDS = 30\n# make a REPL\nwhile True:\n    # take input from user\n    url = input(\"Enter a URL in the format (http://www.example.com/): \")\n    # set some data to None\n    data = None\n    # check if a key is in the cache",
        "detail": "CSEU4_HashTables_GP.webcache",
        "documentation": {}
    },
    {
        "label": "CACHE_EXPIRY_SECONDS",
        "kind": 5,
        "importPath": "CSEU4_HashTables_GP.webcache",
        "description": "CSEU4_HashTables_GP.webcache",
        "peekOfCode": "CACHE_EXPIRY_SECONDS = 30\n# make a REPL\nwhile True:\n    # take input from user\n    url = input(\"Enter a URL in the format (http://www.example.com/): \")\n    # set some data to None\n    data = None\n    # check if a key is in the cache\n    if url in cache:\n        # set our entry to the cache at key",
        "detail": "CSEU4_HashTables_GP.webcache",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.category",
        "description": "CSEU4_Intro_Python_GP.category",
        "peekOfCode": "class Category:\n    def __init__(self, name): #, products)\n        self.name = name\n    def __str__(self):\n        return \"No products available in \" + self.name",
        "detail": "CSEU4_Intro_Python_GP.category",
        "documentation": {}
    },
    {
        "label": "Clothing",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.clothing",
        "description": "CSEU4_Intro_Python_GP.clothing",
        "peekOfCode": "class Clothing(Product):\n    def __init__(self, name, price, colour, size):\n        super().__init__(name, price)\n        self.colour = colour\n        self.size = size\n    def __str__(self):\n        return f\"{super().__str__()} comes in {self.colour}, {self.size}\"\n# # OOP\n# noun.verb()\n# # Procedural / imperative",
        "detail": "CSEU4_Intro_Python_GP.clothing",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.comp",
        "description": "CSEU4_Intro_Python_GP.comp",
        "peekOfCode": "lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ndoubles_if_even = []\nfor num in lst:\n    if num % 2 == 0:\n        doubles_if_even.append(num * 2)\ndub = [num * 2 for num in lst if num % 2 == 0]\n# num = 1\n# print(1 % 2)\n# num = 2\nprint(lst)",
        "detail": "CSEU4_Intro_Python_GP.comp",
        "documentation": {}
    },
    {
        "label": "doubles_if_even",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.comp",
        "description": "CSEU4_Intro_Python_GP.comp",
        "peekOfCode": "doubles_if_even = []\nfor num in lst:\n    if num % 2 == 0:\n        doubles_if_even.append(num * 2)\ndub = [num * 2 for num in lst if num % 2 == 0]\n# num = 1\n# print(1 % 2)\n# num = 2\nprint(lst)\nprint(doubles_if_even)",
        "detail": "CSEU4_Intro_Python_GP.comp",
        "documentation": {}
    },
    {
        "label": "dub",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.comp",
        "description": "CSEU4_Intro_Python_GP.comp",
        "peekOfCode": "dub = [num * 2 for num in lst if num % 2 == 0]\n# num = 1\n# print(1 % 2)\n# num = 2\nprint(lst)\nprint(doubles_if_even)",
        "detail": "CSEU4_Intro_Python_GP.comp",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "first_name = \"Tom\"\nlast_name = \"Tarpey\"\nmy_num = 34 * 5\n# print(\"Hello CSEU4 and \" + first_name)\nprint(\"Hello CSEU4 and\", first_name, \"some more text\", my_num)\n# f strings\nprint(f\"Hello {first_name} how are you today? so a number is {my_num}\")\n# collections\n# create an empty list? Array\nlst1 = []",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "last_name",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "last_name = \"Tarpey\"\nmy_num = 34 * 5\n# print(\"Hello CSEU4 and \" + first_name)\nprint(\"Hello CSEU4 and\", first_name, \"some more text\", my_num)\n# f strings\nprint(f\"Hello {first_name} how are you today? so a number is {my_num}\")\n# collections\n# create an empty list? Array\nlst1 = []\nlst1 = list()",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "my_num",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "my_num = 34 * 5\n# print(\"Hello CSEU4 and \" + first_name)\nprint(\"Hello CSEU4 and\", first_name, \"some more text\", my_num)\n# f strings\nprint(f\"Hello {first_name} how are you today? so a number is {my_num}\")\n# collections\n# create an empty list? Array\nlst1 = []\nlst1 = list()\n# create a list with numbers 1, 2, 3, 4, 5",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "lst1",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "lst1 = []\nlst1 = list()\n# create a list with numbers 1, 2, 3, 4, 5\nlst2 = [1, 2, 3, 4, 5]\nlst2 = list([1, 2, 3, 4, 5])\n# add an element 24 to lst1\nlst1.append(24)\nlst1.append(\"Tom\")\nlst1.append(24)\nprint(lst1)",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "lst1",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "lst1 = list()\n# create a list with numbers 1, 2, 3, 4, 5\nlst2 = [1, 2, 3, 4, 5]\nlst2 = list([1, 2, 3, 4, 5])\n# add an element 24 to lst1\nlst1.append(24)\nlst1.append(\"Tom\")\nlst1.append(24)\nprint(lst1)\n# print all values in lst2",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "lst2",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "lst2 = [1, 2, 3, 4, 5]\nlst2 = list([1, 2, 3, 4, 5])\n# add an element 24 to lst1\nlst1.append(24)\nlst1.append(\"Tom\")\nlst1.append(24)\nprint(lst1)\n# print all values in lst2\nprint(lst2)\nfor e in lst2:",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "lst2",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "lst2 = list([1, 2, 3, 4, 5])\n# add an element 24 to lst1\nlst1.append(24)\nlst1.append(\"Tom\")\nlst1.append(24)\nprint(lst1)\n# print all values in lst2\nprint(lst2)\nfor e in lst2:\n    print(e)",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "i = 0\nwhile i < len(lst2):\n    print(lst2[i])\n    i += 1\n# List Comprehensions\n# Create a new list containing the squares of all values in 'numbers'\nnumbers = [1, 2, 3, 4, 5]\nprint(numbers)\n# squares = []\n# for num in numbers:",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "numbers = [1, 2, 3, 4, 5]\nprint(numbers)\n# squares = []\n# for num in numbers:\n#     squares.append(num * num)\nsquares = [num * num for num in numbers]\nprint(squares)\n# Filtering with a list comprehension\n# evens = []\n# for num in numbers:",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "squares = [num * num for num in numbers]\nprint(squares)\n# Filtering with a list comprehension\n# evens = []\n# for num in numbers:\n#     if num % 2 == 0:\n#         evens.append(num)\n# create a new list of even numbers using the values of the numbers list as inputs\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens = [num for num in numbers if num % 2 == 0]",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens = [num for num in numbers if num % 2 == 0]\nprint(evens)\n# create a new list containing only the names that start with 's' make sure they are capitalized (regardless of their original case)\nnames = ['Patrick', 'Melquisedeque', 'Bob', 'steve', 'Sam', 'frank', 'shawn', \"slido\"]\nnew_names = [name.capitalize() for name in names if name[0].lower() == 's']\nprint(new_names)\n# Dictionaries\n# Create a new dictionary\nd = {} # empty",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "evens",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "evens = [num for num in numbers if num % 2 == 0]\nprint(evens)\n# create a new list containing only the names that start with 's' make sure they are capitalized (regardless of their original case)\nnames = ['Patrick', 'Melquisedeque', 'Bob', 'steve', 'Sam', 'frank', 'shawn', \"slido\"]\nnew_names = [name.capitalize() for name in names if name[0].lower() == 's']\nprint(new_names)\n# Dictionaries\n# Create a new dictionary\nd = {} # empty\nd2 = {\"name\": \"Tom\", \"age\": 40} # key value pairs",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "names = ['Patrick', 'Melquisedeque', 'Bob', 'steve', 'Sam', 'frank', 'shawn', \"slido\"]\nnew_names = [name.capitalize() for name in names if name[0].lower() == 's']\nprint(new_names)\n# Dictionaries\n# Create a new dictionary\nd = {} # empty\nd2 = {\"name\": \"Tom\", \"age\": 40} # key value pairs\n# access an element via its key\nprint(f'Name: {d2[\"name\"]} \\nAge: {d2[\"age\"]}')\n# iterate over dict",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "new_names",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "new_names = [name.capitalize() for name in names if name[0].lower() == 's']\nprint(new_names)\n# Dictionaries\n# Create a new dictionary\nd = {} # empty\nd2 = {\"name\": \"Tom\", \"age\": 40} # key value pairs\n# access an element via its key\nprint(f'Name: {d2[\"name\"]} \\nAge: {d2[\"age\"]}')\n# iterate over dict\nfor k in d2:",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "d = {} # empty\nd2 = {\"name\": \"Tom\", \"age\": 40} # key value pairs\n# access an element via its key\nprint(f'Name: {d2[\"name\"]} \\nAge: {d2[\"age\"]}')\n# iterate over dict\nfor k in d2:\n    print(f\"{k.capitalize()}: {d2[k]}\")",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day1",
        "description": "CSEU4_Intro_Python_GP.day1",
        "peekOfCode": "d2 = {\"name\": \"Tom\", \"age\": 40} # key value pairs\n# access an element via its key\nprint(f'Name: {d2[\"name\"]} \\nAge: {d2[\"age\"]}')\n# iterate over dict\nfor k in d2:\n    print(f\"{k.capitalize()}: {d2[k]}\")",
        "detail": "CSEU4_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "mult2",
        "kind": 2,
        "importPath": "CSEU4_Intro_Python_GP.day2",
        "description": "CSEU4_Intro_Python_GP.day2",
        "peekOfCode": "def mult2(x):\n    return x * 2\n# define a doubling function that passes args by reference\ndef mult2_list(l):\n    for i in range(len(l)):\n        l[i] *= 2\n# # try out the functions\n# a = 12\n# new_number = mult2(a)\n# print(new_number)",
        "detail": "CSEU4_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "mult2_list",
        "kind": 2,
        "importPath": "CSEU4_Intro_Python_GP.day2",
        "description": "CSEU4_Intro_Python_GP.day2",
        "peekOfCode": "def mult2_list(l):\n    for i in range(len(l)):\n        l[i] *= 2\n# # try out the functions\n# a = 12\n# new_number = mult2(a)\n# print(new_number)\n# lst = [2, 4, 6, 8] # mutable\n# mult2_list(lst)\n# for num in lst:",
        "detail": "CSEU4_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "centered_avg1",
        "kind": 2,
        "importPath": "CSEU4_Intro_Python_GP.day2",
        "description": "CSEU4_Intro_Python_GP.day2",
        "peekOfCode": "def centered_avg1(ints):\n    # gather smallest and largest values for later\n    # grab smallest in to a var using the min function\n    smallest = min(ints)\n    # grab largest in to a var using the max function\n    largest = max(ints)\n    # sum up the totals of the values in the list\n    # set a sum var to zero\n    sum = 0\n    # iterate over the numbers",
        "detail": "CSEU4_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "centered_avg2",
        "kind": 2,
        "importPath": "CSEU4_Intro_Python_GP.day2",
        "description": "CSEU4_Intro_Python_GP.day2",
        "peekOfCode": "def centered_avg2(ints):\n    ints.sort()\n    return statistics.mean(ints[1:-1])\n# tests\nnumbers = [1, 41, 34, 29, 50, 50]\nimport time\nstart = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()",
        "detail": "CSEU4_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day2",
        "description": "CSEU4_Intro_Python_GP.day2",
        "peekOfCode": "numbers = [1, 41, 34, 29, 50, 50]\nimport time\nstart = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):",
        "detail": "CSEU4_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day2",
        "description": "CSEU4_Intro_Python_GP.day2",
        "peekOfCode": "start = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()",
        "detail": "CSEU4_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day2",
        "description": "CSEU4_Intro_Python_GP.day2",
        "peekOfCode": "end = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()\nprint(end - start)\n# a = 41 + 34 + 29 + 50\n# print(a)",
        "detail": "CSEU4_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day2",
        "description": "CSEU4_Intro_Python_GP.day2",
        "peekOfCode": "start = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()\nprint(end - start)\n# a = 41 + 34 + 29 + 50\n# print(a)\n# b = a // 4\n# print(b)",
        "detail": "CSEU4_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day2",
        "description": "CSEU4_Intro_Python_GP.day2",
        "peekOfCode": "end = time.time()\nprint(end - start)\n# a = 41 + 34 + 29 + 50\n# print(a)\n# b = a // 4\n# print(b)",
        "detail": "CSEU4_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.day3",
        "description": "CSEU4_Intro_Python_GP.day3",
        "peekOfCode": "class Foo:\n    # init\n    def __init__(self):\n        print(\"Hello\")\n# f = Foo()\nclass Vec2:\n    # init\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y",
        "detail": "CSEU4_Intro_Python_GP.day3",
        "documentation": {}
    },
    {
        "label": "Vec2",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.day3",
        "description": "CSEU4_Intro_Python_GP.day3",
        "peekOfCode": "class Vec2:\n    # init\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return f\"Vec2({self.x}, {self.y})\"\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n    def __add__(self, other):",
        "detail": "CSEU4_Intro_Python_GP.day3",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day3",
        "description": "CSEU4_Intro_Python_GP.day3",
        "peekOfCode": "v = Vec2(12, 34)\nv2 = Vec2(12, 34)\nprint(v)\nv3 = v + v2\nprint(v3)\nprint(v)",
        "detail": "CSEU4_Intro_Python_GP.day3",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day3",
        "description": "CSEU4_Intro_Python_GP.day3",
        "peekOfCode": "v2 = Vec2(12, 34)\nprint(v)\nv3 = v + v2\nprint(v3)\nprint(v)",
        "detail": "CSEU4_Intro_Python_GP.day3",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day3",
        "description": "CSEU4_Intro_Python_GP.day3",
        "peekOfCode": "v3 = v + v2\nprint(v3)\nprint(v)",
        "detail": "CSEU4_Intro_Python_GP.day3",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "class Bar:\n    def __init__(self, name=\"bar\"):\n        self.name = name\na = 12\nb = 23\nc = 19\nclass Foo:\n    def __init__(self):\n        self.bars = [Bar()] * 10 # has_a relationship\n        self.numbers = [a, b, c] # has_a",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "class Foo:\n    def __init__(self):\n        self.bars = [Bar()] * 10 # has_a relationship\n        self.numbers = [a, b, c] # has_a\n    def __str__(self):\n        return f\"{self.bar}\"\nclass Entity():\n    def __init__(self, id, x, y):\n        self.id = id\n        self.x = x",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "class Entity():\n    def __init__(self, id, x, y):\n        self.id = id\n        self.x = x\n        self.y = y\n    def get_id(self):\n        return self.id\nmy_super = Entity()\nclass Mob(Entity): # is_a relationship\n    def __init__(self, id, x, y):",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Mob",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "class Mob(Entity): # is_a relationship\n    def __init__(self, id, x, y):\n        super().__init__(id, x, y)\n        # self.bob = super().get_id()\n# foo = Foo()\n# print(foo)\nclass Item:\n    def __init__(self, name, description=\"\"):\n        self.name = name\n        self.description = description",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "class Item:\n    def __init__(self, name, description=\"\"):\n        self.name = name\n        self.description = description\nclass Weapon(Item):\n    def __init__(self, name, power, description=''):\n        super().__init__(name, description=description)\n        self.power = power\nclass Room:\n    def __init__(self, name, description):",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Weapon",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "class Weapon(Item):\n    def __init__(self, name, power, description=''):\n        super().__init__(name, description=description)\n        self.power = power\nclass Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n        self.items = [Weapon(\"Knife\", 10), Item(\"Hammer\")]\nclass Player:",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "class Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n        self.items = [Weapon(\"Knife\", 10), Item(\"Hammer\")]\nclass Player:\n    def __init__(self, starting_room):\n        self.current_room = starting_room\n        self.inventory = [Item(\"Shield\")] # has_a item\n        self.gold = 0",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "class Player:\n    def __init__(self, starting_room):\n        self.current_room = starting_room\n        self.inventory = [Item(\"Shield\")] # has_a item\n        self.gold = 0\n    def move(self, direction):\n        # check if current room has direction_to\n            # return current rooms direction_to\n        # otherwise\n            # tell user they can not go that way",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "a = 12\nb = 23\nc = 19\nclass Foo:\n    def __init__(self):\n        self.bars = [Bar()] * 10 # has_a relationship\n        self.numbers = [a, b, c] # has_a\n    def __str__(self):\n        return f\"{self.bar}\"\nclass Entity():",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "b = 23\nc = 19\nclass Foo:\n    def __init__(self):\n        self.bars = [Bar()] * 10 # has_a relationship\n        self.numbers = [a, b, c] # has_a\n    def __str__(self):\n        return f\"{self.bar}\"\nclass Entity():\n    def __init__(self, id, x, y):",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "c = 19\nclass Foo:\n    def __init__(self):\n        self.bars = [Bar()] * 10 # has_a relationship\n        self.numbers = [a, b, c] # has_a\n    def __str__(self):\n        return f\"{self.bar}\"\nclass Entity():\n    def __init__(self, id, x, y):\n        self.id = id",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "my_super",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.day4",
        "description": "CSEU4_Intro_Python_GP.day4",
        "peekOfCode": "my_super = Entity()\nclass Mob(Entity): # is_a relationship\n    def __init__(self, id, x, y):\n        super().__init__(id, x, y)\n        # self.bob = super().get_id()\n# foo = Foo()\n# print(foo)\nclass Item:\n    def __init__(self, name, description=\"\"):\n        self.name = name",
        "detail": "CSEU4_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Equipment",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.equipment",
        "description": "CSEU4_Intro_Python_GP.equipment",
        "peekOfCode": "class Equipment(Product):\n    def __init__(self, name, price, style, weight):\n        super().__init__(name, price)\n        self.style = style\n        self.weight = weight",
        "detail": "CSEU4_Intro_Python_GP.equipment",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "CSEU4_Intro_Python_GP.game",
        "description": "CSEU4_Intro_Python_GP.game",
        "peekOfCode": "def move(player, direction):\n    player.move(direction)\n# REPL === Parser\nwhile running:\n    cmd = input(\">>> \")\n    # split the cmd in to commands\n    # if commands length is 1\n    if cmd in [\"n\", \"s\", \"e\", \"w\"]:\n        move(player, cmd)\n    # if commands length is 2",
        "detail": "CSEU4_Intro_Python_GP.game",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.game",
        "description": "CSEU4_Intro_Python_GP.game",
        "peekOfCode": "running = True\nplayer = Player()\ndef move(player, direction):\n    player.move(direction)\n# REPL === Parser\nwhile running:\n    cmd = input(\">>> \")\n    # split the cmd in to commands\n    # if commands length is 1\n    if cmd in [\"n\", \"s\", \"e\", \"w\"]:",
        "detail": "CSEU4_Intro_Python_GP.game",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.game",
        "description": "CSEU4_Intro_Python_GP.game",
        "peekOfCode": "player = Player()\ndef move(player, direction):\n    player.move(direction)\n# REPL === Parser\nwhile running:\n    cmd = input(\">>> \")\n    # split the cmd in to commands\n    # if commands length is 1\n    if cmd in [\"n\", \"s\", \"e\", \"w\"]:\n        move(player, cmd)",
        "detail": "CSEU4_Intro_Python_GP.game",
        "documentation": {}
    },
    {
        "label": "mult",
        "kind": 2,
        "importPath": "CSEU4_Intro_Python_GP.passby",
        "description": "CSEU4_Intro_Python_GP.passby",
        "peekOfCode": "def mult(n):\n    n = 12 # @7956\n    return n * 2 # @7956\nprint(n)\nprint(mult(n))\nprint(n)\n## by ref\n## list is mutable\nl = [1, 2, 3, 4] # @9923 => @9923\n# t = (1, 2, 3, 4) # @9960 => @9960",
        "detail": "CSEU4_Intro_Python_GP.passby",
        "documentation": {}
    },
    {
        "label": "mult_lst",
        "kind": 2,
        "importPath": "CSEU4_Intro_Python_GP.passby",
        "description": "CSEU4_Intro_Python_GP.passby",
        "peekOfCode": "def mult_lst(l):\n    for i in range(len(l)):\n        l[i] += 2 # @9923 + (1 * size of data type) => @9927 = 2 * 2\nprint(l)\nprint(mult_lst(l))\nprint(l)\n# print(t)\n# print(mult_lst(t))\n# print(t)",
        "detail": "CSEU4_Intro_Python_GP.passby",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.passby",
        "description": "CSEU4_Intro_Python_GP.passby",
        "peekOfCode": "n = 7 # @4567 => 7\ndef mult(n):\n    n = 12 # @7956\n    return n * 2 # @7956\nprint(n)\nprint(mult(n))\nprint(n)\n## by ref\n## list is mutable\nl = [1, 2, 3, 4] # @9923 => @9923",
        "detail": "CSEU4_Intro_Python_GP.passby",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.passby",
        "description": "CSEU4_Intro_Python_GP.passby",
        "peekOfCode": "l = [1, 2, 3, 4] # @9923 => @9923\n# t = (1, 2, 3, 4) # @9960 => @9960\ndef mult_lst(l):\n    for i in range(len(l)):\n        l[i] += 2 # @9923 + (1 * size of data type) => @9927 = 2 * 2\nprint(l)\nprint(mult_lst(l))\nprint(l)\n# print(t)\n# print(mult_lst(t))",
        "detail": "CSEU4_Intro_Python_GP.passby",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.product",
        "description": "CSEU4_Intro_Python_GP.product",
        "peekOfCode": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    def __str__(self):\n        return f\"{self.name}:\\t£{self.price}\"",
        "detail": "CSEU4_Intro_Python_GP.product",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.rps",
        "description": "CSEU4_Intro_Python_GP.rps",
        "peekOfCode": "wins = 0\nlosses = 0\nties = 0\nchoices = ['r', 'p', 's']\nwhile True:\n    print(f\"Score: {wins} - {losses} - {ties}\")\n    cmd = input(\"\\nChoose r/p/s: \")\n    # AI picks a random choice from r/p/s\n    ai_choice = choices[random.randrange(3)]\n    print (f\"Computer chose {ai_choice}\")",
        "detail": "CSEU4_Intro_Python_GP.rps",
        "documentation": {}
    },
    {
        "label": "losses",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.rps",
        "description": "CSEU4_Intro_Python_GP.rps",
        "peekOfCode": "losses = 0\nties = 0\nchoices = ['r', 'p', 's']\nwhile True:\n    print(f\"Score: {wins} - {losses} - {ties}\")\n    cmd = input(\"\\nChoose r/p/s: \")\n    # AI picks a random choice from r/p/s\n    ai_choice = choices[random.randrange(3)]\n    print (f\"Computer chose {ai_choice}\")\n    if cmd == \"r\":",
        "detail": "CSEU4_Intro_Python_GP.rps",
        "documentation": {}
    },
    {
        "label": "ties",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.rps",
        "description": "CSEU4_Intro_Python_GP.rps",
        "peekOfCode": "ties = 0\nchoices = ['r', 'p', 's']\nwhile True:\n    print(f\"Score: {wins} - {losses} - {ties}\")\n    cmd = input(\"\\nChoose r/p/s: \")\n    # AI picks a random choice from r/p/s\n    ai_choice = choices[random.randrange(3)]\n    print (f\"Computer chose {ai_choice}\")\n    if cmd == \"r\":\n        if ai_choice == 'p':",
        "detail": "CSEU4_Intro_Python_GP.rps",
        "documentation": {}
    },
    {
        "label": "choices",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.rps",
        "description": "CSEU4_Intro_Python_GP.rps",
        "peekOfCode": "choices = ['r', 'p', 's']\nwhile True:\n    print(f\"Score: {wins} - {losses} - {ties}\")\n    cmd = input(\"\\nChoose r/p/s: \")\n    # AI picks a random choice from r/p/s\n    ai_choice = choices[random.randrange(3)]\n    print (f\"Computer chose {ai_choice}\")\n    if cmd == \"r\":\n        if ai_choice == 'p':\n            losses += 1",
        "detail": "CSEU4_Intro_Python_GP.rps",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "CSEU4_Intro_Python_GP.store",
        "description": "CSEU4_Intro_Python_GP.store",
        "peekOfCode": "class Store:\n    def __init__(self, name, categories):\n        self.name = name\n        self.categories = categories\n    def __str__(self):\n        output = \"\"\n        output += self.name + \"\\n\\n\"\n        cat_index = 1\n        for c in self.categories:\n            output += \"  \" + str(cat_index) + \". \" + c.name + \"\\n\"",
        "detail": "CSEU4_Intro_Python_GP.store",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.store",
        "description": "CSEU4_Intro_Python_GP.store",
        "peekOfCode": "s = Store(\"Bobs Store\", [Category(\"Books\"), Category(\"Weapons\"), Category(\"Food\"), Category(\"Bob\")])\nprint(s)\n# l = [12, 23, 34, 56, 78]\n# for i,j in enumerate(l):\n#     print(i, j)\nselection = 0\nwhile selection != len(s.categories) + 1:\n    selection = input(\"Select the dept number: \")\n    try:\n        selection = int(selection)",
        "detail": "CSEU4_Intro_Python_GP.store",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 5,
        "importPath": "CSEU4_Intro_Python_GP.store",
        "description": "CSEU4_Intro_Python_GP.store",
        "peekOfCode": "selection = 0\nwhile selection != len(s.categories) + 1:\n    selection = input(\"Select the dept number: \")\n    try:\n        selection = int(selection)\n        if selection == len(s.categories) + 1:\n            print(\"Thanks for shopping with us!!!\")\n        elif selection > 0 and selection <= len(s.categories):\n            print(s.categories[selection - 1])\n        else:",
        "detail": "CSEU4_Intro_Python_GP.store",
        "documentation": {}
    },
    {
        "label": "constant_time",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.00_day1",
        "description": "CSEU4_Sorting_gp.00_day1",
        "peekOfCode": "def constant_time(items):\n    result = items[0] * items[4] #O(1)\n    print(result) # O(1)\n    # O(4 * 1) Constant time operation O(1)\nconstant_time(it)\n# O(n)\ndef linear_time(items):\n    # O(1) * O(n)\n    for item in items: # O(1) * O(n)\n        print(item) # O(1)",
        "detail": "CSEU4_Sorting_gp.00_day1",
        "documentation": {}
    },
    {
        "label": "linear_time",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.00_day1",
        "description": "CSEU4_Sorting_gp.00_day1",
        "peekOfCode": "def linear_time(items):\n    # O(1) * O(n)\n    for item in items: # O(1) * O(n)\n        print(item) # O(1)\n    # O(1) * O(n)\n    for item in items: # O(n) * O(n)\n        print(item) # O(1)\n    # 2 * (O(1) * O(n))\n    # O(1) * O(n)\n    # O(n) <--",
        "detail": "CSEU4_Sorting_gp.00_day1",
        "documentation": {}
    },
    {
        "label": "quadratic_time",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.00_day1",
        "description": "CSEU4_Sorting_gp.00_day1",
        "peekOfCode": "def quadratic_time(items):\n    for item in items: # O(n) * O(n) = O(n^2)\n        for item2 in items: # O(n) * O(1)\n            print(item, ' ', item2) # O(1)\nquadratic_time(it)\n# challenge. What is the complexity of this algorithm?\ndef complex_algo(items): # O(n)\n    for _ in range(5): # O(5) -> O(1)\n        print (\"Python is awesome\")\n    # O(2n) -> O(n)",
        "detail": "CSEU4_Sorting_gp.00_day1",
        "documentation": {}
    },
    {
        "label": "complex_algo",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.00_day1",
        "description": "CSEU4_Sorting_gp.00_day1",
        "peekOfCode": "def complex_algo(items): # O(n)\n    for _ in range(5): # O(5) -> O(1)\n        print (\"Python is awesome\")\n    # O(2n) -> O(n)\n    for item in items: # O(n)\n        print(item)\n    for item in items: # O(n)\n        print(item)\n    # O(3) -> O(1)\n    print(\"Big O\") ",
        "detail": "CSEU4_Sorting_gp.00_day1",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.00_day1",
        "description": "CSEU4_Sorting_gp.00_day1",
        "peekOfCode": "it = [2,3,5,6,7]\n# O(1)\n# O(1)\ndef constant_time(items):\n    result = items[0] * items[4] #O(1)\n    print(result) # O(1)\n    # O(4 * 1) Constant time operation O(1)\nconstant_time(it)\n# O(n)\ndef linear_time(items):",
        "detail": "CSEU4_Sorting_gp.00_day1",
        "documentation": {}
    },
    {
        "label": "name_in_phonebook",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.01_searching",
        "description": "CSEU4_Sorting_gp.01_searching",
        "peekOfCode": "def name_in_phonebook(to_find, phonebook):\n    for name in phonebook:\n        if name == to_find:\n            return True\n    return False\n# binary search\ndef name_in_phonebook_2(to_find, name):\n    # sentinal , edge case\n    if len(to_find) == 0:\n        return False",
        "detail": "CSEU4_Sorting_gp.01_searching",
        "documentation": {}
    },
    {
        "label": "name_in_phonebook_2",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.01_searching",
        "description": "CSEU4_Sorting_gp.01_searching",
        "peekOfCode": "def name_in_phonebook_2(to_find, name):\n    # sentinal , edge case\n    if len(to_find) == 0:\n        return False\n    # set first element to zero\n    first = 0\n    # set the last items to size - 1\n    last = (len(to_find) - 1)\n    # set a found flag to false\n    found = False",
        "detail": "CSEU4_Sorting_gp.01_searching",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "class Book:\n    def __init__(self, title, author, genre):\n        self.title = title\n        self.author = author\n        self.genre = genre\n    def __str__(self):\n        return f'{self.genre}: {self.title} by {self.author}'\nb1 = Book('Food for thought', 'jon jones', 'food')\nb2 = Book('My life in reality', 'don davis', 'life')\nb3 = Book('Apples, how you like them?', 'stan simpson', 'food')",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "in_sort",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "def in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var\n        temp = books[i]\n        j = i\n        pass\n        # iterate over books looking for title\n        while j > 0 and temp.title < books[j - 1].title:",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "in_sort2",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "def in_sort2(lst):\n    # loop over n - 1 elements\n    for i in range(1, len(lst)):\n        # save initial element to temp variable\n        temp = lst[i]\n        # set inner loop index to current index\n        j = i\n        # inner loop\n        while j > 0 and temp < lst[j - 1]:\n            # shift left until correct position found",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "my_book",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "my_book = {'title': 'Food for thought', 'author': 'jon jones', 'genre': 'food'}\nclass Book:\n    def __init__(self, title, author, genre):\n        self.title = title\n        self.author = author\n        self.genre = genre\n    def __str__(self):\n        return f'{self.genre}: {self.title} by {self.author}'\nb1 = Book('Food for thought', 'jon jones', 'food')\nb2 = Book('My life in reality', 'don davis', 'life')",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "b1 = Book('Food for thought', 'jon jones', 'food')\nb2 = Book('My life in reality', 'don davis', 'life')\nb3 = Book('Apples, how you like them?', 'stan simpson', 'food')\nb4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\n# lets get sorting some books\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "b2 = Book('My life in reality', 'don davis', 'life')\nb3 = Book('Apples, how you like them?', 'stan simpson', 'food')\nb4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\n# lets get sorting some books\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "b3",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "b3 = Book('Apples, how you like them?', 'stan simpson', 'food')\nb4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\n# lets get sorting some books\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "b4",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "b4 = Book('Just Do It', 'shia le boeuf', 'inspirational')\nb5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\n# lets get sorting some books\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var\n        temp = books[i]",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "b5",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "b5 = Book('What is this code anyway', 'tom jones', 'programming')\nbooks = [b1, b2, b3, b4, b5]\n# lets get sorting some books\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var\n        temp = books[i]\n        j = i",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "books = [b1, b2, b3, b4, b5]\n# lets get sorting some books\ndef in_sort(books):\n    # loop through len - 1 elements\n    for i in range(1, len(books)):\n        # code up some logic\n        # save current i to a temp var\n        temp = books[i]\n        j = i\n        pass",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "my_nums",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "my_nums = [23, 34, 60, 1, 4, 5, 2]\nmy_names = ['Dave', 'Steve', 'Bob']\nprint(my_nums)\nin_sort2(my_nums)\nprint(my_nums)\nprint(my_names)\nin_sort2(my_names)\nprint(my_names)",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "my_names",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.02_book",
        "description": "CSEU4_Sorting_gp.02_book",
        "peekOfCode": "my_names = ['Dave', 'Steve', 'Bob']\nprint(my_nums)\nin_sort2(my_nums)\nprint(my_nums)\nprint(my_names)\nin_sort2(my_names)\nprint(my_names)",
        "detail": "CSEU4_Sorting_gp.02_book",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.10_recursion",
        "description": "CSEU4_Sorting_gp.10_recursion",
        "peekOfCode": "def fib(n):\n    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\nprint(fib(n))",
        "detail": "CSEU4_Sorting_gp.10_recursion",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.10_recursion",
        "description": "CSEU4_Sorting_gp.10_recursion",
        "peekOfCode": "n = 40\n# use space in a linear format\n# while n != 0: # O(n)\n#     print(n)\n#     n -= 1\n# def rec_while(n): # O(n)\n#     # base case\n#     if n == 0:\n#         return\n#     # logic that we want to do",
        "detail": "CSEU4_Sorting_gp.10_recursion",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "def partition(data):\n    # make a new empty list for LHS\n    lhs = []\n    # make a pivot\n    pivot = data[0]\n    # make a new empty list for RHS\n    rhs = []\n    # loop over the data \n    for v in data[1:]:\n        # if lower than or equal to pivot",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "def quicksort(data):\n    # base case\n    # if the data is empty we just return the empty list\n    if data == []:\n        return data\n    # do something with the data\n    # partition the data and set it to a tuple of left right and pivot\n    left, pivot, right = partition(data)\n    # do a recursive call\n    # return the quicksort of left + the [pivot] + quick sort of right",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "pivot",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "pivot = [8] \n[3, 6, 4, 7, 9, 5, 2, 1]\nlhs = [3, 6, 4, 7, 5, 2, 1]\nrhs = [9]\n[lhs call]\npivot [3] \n[6, 4, 7, 5, 2, 1]\nlhs = [2, 1]\nrhs = [6, 4, 7, 5]\n[lhs2 call]",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "lhs",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "lhs = [3, 6, 4, 7, 5, 2, 1]\nrhs = [9]\n[lhs call]\npivot [3] \n[6, 4, 7, 5, 2, 1]\nlhs = [2, 1]\nrhs = [6, 4, 7, 5]\n[lhs2 call]\n[2] [1]\nlhs = [1]",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "rhs",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "rhs = [9]\n[lhs call]\npivot [3] \n[6, 4, 7, 5, 2, 1]\nlhs = [2, 1]\nrhs = [6, 4, 7, 5]\n[lhs2 call]\n[2] [1]\nlhs = [1]\nrhs = []",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "lhs",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "lhs = [2, 1]\nrhs = [6, 4, 7, 5]\n[lhs2 call]\n[2] [1]\nlhs = [1]\nrhs = []\n[rhs2 call]\npivot = [6] \n[4, 7, 5]\nlhs = [4,5]",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "rhs",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "rhs = [6, 4, 7, 5]\n[lhs2 call]\n[2] [1]\nlhs = [1]\nrhs = []\n[rhs2 call]\npivot = [6] \n[4, 7, 5]\nlhs = [4,5]\nrhs = [7]",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "lhs",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "lhs = [1]\nrhs = []\n[rhs2 call]\npivot = [6] \n[4, 7, 5]\nlhs = [4,5]\nrhs = [7]\n[pivot call]\n[8]\n[rhs call]",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "rhs",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "rhs = []\n[rhs2 call]\npivot = [6] \n[4, 7, 5]\nlhs = [4,5]\nrhs = [7]\n[pivot call]\n[8]\n[rhs call]\n[9]",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "pivot",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "pivot = [6] \n[4, 7, 5]\nlhs = [4,5]\nrhs = [7]\n[pivot call]\n[8]\n[rhs call]\n[9]\n\"\"\"\ndef partition(data):",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "lhs",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "lhs = [4,5]\nrhs = [7]\n[pivot call]\n[8]\n[rhs call]\n[9]\n\"\"\"\ndef partition(data):\n    # make a new empty list for LHS\n    lhs = []",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "rhs",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "rhs = [7]\n[pivot call]\n[8]\n[rhs call]\n[9]\n\"\"\"\ndef partition(data):\n    # make a new empty list for LHS\n    lhs = []\n    # make a pivot",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "lst = [8, 3, 5, 6, 4, 7, 9, 5, 2, 1]\nslst = quicksort(lst)\nprint(lst)\nprint('-------------------------')\nprint(slst)",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "slst",
        "kind": 5,
        "importPath": "CSEU4_Sorting_gp.11_quicksort",
        "description": "CSEU4_Sorting_gp.11_quicksort",
        "peekOfCode": "slst = quicksort(lst)\nprint(lst)\nprint('-------------------------')\nprint(slst)",
        "detail": "CSEU4_Sorting_gp.11_quicksort",
        "documentation": {}
    },
    {
        "label": "selection_sort",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.iterative_sorting",
        "description": "CSEU4_Sorting_gp.iterative_sorting",
        "peekOfCode": "def selection_sort( arr ):\n    # loop through n-1 elements\n    for i in range(0, len(arr) - 1):\n        # set sorted item index to i\n        cur_index = i\n        # give smallest a sentinal value\n        smallest_index = cur_index\n        # TO-DO: find next smallest element\n        # loop over elements at right hand side of current index (current index + 1)\n        # our ranege is the current index to the len of array - 1",
        "detail": "CSEU4_Sorting_gp.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.iterative_sorting",
        "description": "CSEU4_Sorting_gp.iterative_sorting",
        "peekOfCode": "def insertion_sort( arr ):\n  # loop through n-1 elements\n  for i in range(1, len(arr)):\n    temp = arr[i]\n    j = i\n    while j > 0 and temp < arr[j - 1]:\n      # shift left until correct position found\n      arr[j] = arr[j - 1]\n      j -= 1\n    # insert at correct position",
        "detail": "CSEU4_Sorting_gp.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.iterative_sorting",
        "description": "CSEU4_Sorting_gp.iterative_sorting",
        "peekOfCode": "def bubble_sort( arr ):\n    return arr\n# STRETCH: implement the Count Sort function below\ndef count_sort( arr, maximum=-1 ):\n    return arr",
        "detail": "CSEU4_Sorting_gp.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "count_sort",
        "kind": 2,
        "importPath": "CSEU4_Sorting_gp.iterative_sorting",
        "description": "CSEU4_Sorting_gp.iterative_sorting",
        "peekOfCode": "def count_sort( arr, maximum=-1 ):\n    return arr",
        "detail": "CSEU4_Sorting_gp.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "IterativeSortingTest",
        "kind": 6,
        "importPath": "CSEU4_Sorting_gp.test_iterative",
        "description": "CSEU4_Sorting_gp.test_iterative",
        "peekOfCode": "class IterativeSortingTest(unittest.TestCase):\n    def test_selection_sort(self):\n        arr1 = [1, 5, 8, 4, 2, 9, 6, 0, 3, 7]\n        arr2 = []\n        arr3 = [0, 1, 2, 3, 4, 5]\n        arr4 = random.sample(range(200), 50)\n        self.assertEqual(selection_sort(arr1), [0,1,2,3,4,5,6,7,8,9])\n        self.assertEqual(selection_sort(arr2), [])\n        self.assertEqual(selection_sort(arr3), [0,1,2,3,4,5])\n        self.assertEqual(selection_sort(arr4), sorted(arr4))",
        "detail": "CSEU4_Sorting_gp.test_iterative",
        "documentation": {}
    },
    {
        "label": "to_decimal",
        "kind": 2,
        "importPath": "CSEUFLEX_Architecture_GP.day1.conv",
        "description": "CSEUFLEX_Architecture_GP.day1.conv",
        "peekOfCode": "def to_decimal(num_string, base):\n    # set a starting value\n    value = 0\n    # convert string in to a list\n    digit_string = list(num_string)\n    # reverse the list\n    digit_string.reverse()\n    # iterate over the list\n    for i in range(len(digit_string)):\n        multiplyer = (base ** i)",
        "detail": "CSEUFLEX_Architecture_GP.day1.conv",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "PRINT_TOM = 1\nHALT = 2\nPRINT_NUM = 3\nPRINT_REG = 4\nSAVE = 5\nLDI = 0b10000010\nPRN = 0b01000111\nADD = 6\n# memory\nmemory = [",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "HALT = 2\nPRINT_NUM = 3\nPRINT_REG = 4\nSAVE = 5\nLDI = 0b10000010\nPRN = 0b01000111\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "PRINT_NUM = 3\nPRINT_REG = 4\nSAVE = 5\nLDI = 0b10000010\nPRN = 0b01000111\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    PRINT_TOM,",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "PRINT_REG = 4\nSAVE = 5\nLDI = 0b10000010\nPRN = 0b01000111\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    PRINT_TOM,\n    PRINT_NUM,",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "SAVE = 5\nLDI = 0b10000010\nPRN = 0b01000111\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    PRINT_TOM,\n    PRINT_NUM,\n    90,",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "LDI = 0b10000010\nPRN = 0b01000111\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    PRINT_TOM,\n    PRINT_NUM,\n    90,\n    LDI,",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "PRN = 0b01000111\nADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    PRINT_TOM,\n    PRINT_NUM,\n    90,\n    LDI,\n    127,",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "ADD = 6\n# memory\nmemory = [\n    PRINT_TOM,\n    PRINT_TOM,\n    PRINT_NUM,\n    90,\n    LDI,\n    127,\n    2,",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "memory = [\n    PRINT_TOM,\n    PRINT_TOM,\n    PRINT_NUM,\n    90,\n    LDI,\n    127,\n    2,\n    PRINT_REG,\n    2,",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "register = [0] * 8  # r0 - r7\n# mem = [0] * 256 => self.ram = [0] * 256\n# self.pc = 0\n# self.reg = [0] * 8\n# program counter\npc = 0\n# running?\nrunning = True\n# REPL\n# FETCH, DECODE, EXECUTE",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "pc = 0\n# running?\nrunning = True\n# REPL\n# FETCH, DECODE, EXECUTE\ninc_size = 1\nwhile running:\n    # FETCH\n    cmd = memory[pc]\n    #DECODE",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "running = True\n# REPL\n# FETCH, DECODE, EXECUTE\ninc_size = 1\nwhile running:\n    # FETCH\n    cmd = memory[pc]\n    #DECODE\n    if cmd == PRINT_TOM:\n        # EXECUTE",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "inc_size",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day1.simple",
        "description": "CSEUFLEX_Architecture_GP.day1.simple",
        "peekOfCode": "inc_size = 1\nwhile running:\n    # FETCH\n    cmd = memory[pc]\n    #DECODE\n    if cmd == PRINT_TOM:\n        # EXECUTE\n        print(\"Tom\")\n        inc_size = 1\n    elif cmd == HALT:",
        "detail": "CSEUFLEX_Architecture_GP.day1.simple",
        "documentation": {}
    },
    {
        "label": "CPU",
        "kind": 6,
        "importPath": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "description": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "peekOfCode": "class CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256\n        self.pc = 0\n        self.halted = False\n    def ram_write(self, mdr, mar):\n        self.ram[mar] = mdr",
        "detail": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "HLT",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "description": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "peekOfCode": "HLT = 0b00000001\nLDI = 0b10000010\nPRN = 0b01000111\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256",
        "detail": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "description": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "peekOfCode": "LDI = 0b10000010\nPRN = 0b01000111\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256\n        self.pc = 0",
        "detail": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "description": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "peekOfCode": "PRN = 0b01000111\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256\n        self.pc = 0\n        self.halted = False",
        "detail": "CSEUFLEX_Architecture_GP.day2.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "cpu",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.ls8.ls8",
        "description": "CSEUFLEX_Architecture_GP.day2.ls8.ls8",
        "peekOfCode": "cpu = CPU()\ncpu.load()\ncpu.run()",
        "detail": "CSEUFLEX_Architecture_GP.day2.ls8.ls8",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.01_fileio1",
        "description": "CSEUFLEX_Architecture_GP.day2.01_fileio1",
        "peekOfCode": "l = []\ntry:\n    with open(sys.argv[1]) as f:\n        for line in f:\n            l.append(line)\n    print(l)\nexcept FileNotFoundError:\n    print(f\"{sys.argv[0]}: {sys.argv[1]} not found!\")\n    sys.exit(2)",
        "detail": "CSEUFLEX_Architecture_GP.day2.01_fileio1",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.03_fileio3",
        "description": "CSEUFLEX_Architecture_GP.day2.03_fileio3",
        "peekOfCode": "memory = []\ntry:\n    with open(sys.argv[1]) as f:\n        for line in f:\n            comment_split = line.split('#')\n            num = comment_split[0]\n            if num == '':\n                continue\n            x = int(num, 2)\n            print(f\"{x:08b}\")",
        "detail": "CSEUFLEX_Architecture_GP.day2.03_fileio3",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "def load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # split before comment\n                comment_split = line.split('#')\n                # convert to a number splitting and stripping\n                num = comment_split[0].strip()\n                if num == '':",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nMUL = 7\nSUB = 8\nDIV = 9\nIDIV = 10",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nMUL = 7\nSUB = 8\nDIV = 9\nIDIV = 10\n# lets make a model of memory to hold our program",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nMUL = 7\nSUB = 8\nDIV = 9\nIDIV = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 128",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nMUL = 7\nSUB = 8\nDIV = 9\nIDIV = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nMUL = 7\nSUB = 8\nDIV = 9\nIDIV = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "ADD = 6\nMUL = 7\nSUB = 8\nDIV = 9\nIDIV = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "MUL",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "MUL = 7\nSUB = 8\nDIV = 9\nIDIV = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "SUB",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "SUB = 8\nDIV = 9\nIDIV = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "DIV",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "DIV = 9\nIDIV = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "IDIV",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "IDIV = 10\n# lets make a model of memory to hold our program\nmemory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "memory = [0] * 128\nregister = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # split before comment\n                comment_split = line.split('#')",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "register = [0] * 8\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        address = 0\n        with open(filename) as f:\n            for line in f:\n                # split before comment\n                comment_split = line.split('#')\n                # convert to a number splitting and stripping",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple1.py <filename>\")\n    sys.exit(1)\n# load the memory",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "running = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple1.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day2.simple1",
        "description": "CSEUFLEX_Architecture_GP.day2.simple1",
        "peekOfCode": "op_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: simple1.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL\n# lets make a running loop...",
        "detail": "CSEUFLEX_Architecture_GP.day2.simple1",
        "documentation": {}
    },
    {
        "label": "CPU",
        "kind": 6,
        "importPath": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "description": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "peekOfCode": "class CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256\n        self.pc = 0\n        self.halted = False\n    def ram_write(self, mdr, mar):\n        self.ram[mar] = mdr",
        "detail": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "HLT",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "description": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "peekOfCode": "HLT = 0b00000001\nLDI = 0b10000010\nPRN = 0b01000111\nMUL = 0b10100010\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8",
        "detail": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "description": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "peekOfCode": "LDI = 0b10000010\nPRN = 0b01000111\nMUL = 0b10100010\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256",
        "detail": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "PRN",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "description": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "peekOfCode": "PRN = 0b01000111\nMUL = 0b10100010\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256\n        self.pc = 0",
        "detail": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "MUL",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "description": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "peekOfCode": "MUL = 0b10100010\nimport sys\nclass CPU:\n    \"\"\"Main CPU class.\"\"\"\n    def __init__(self):\n        \"\"\"Construct a new CPU.\"\"\"\n        self.reg = [0] * 8\n        self.ram = [0] * 256\n        self.pc = 0\n        self.halted = False",
        "detail": "CSEUFLEX_Architecture_GP.day3.ls8.cpu",
        "documentation": {}
    },
    {
        "label": "cpu",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.ls8.ls8",
        "description": "CSEUFLEX_Architecture_GP.day3.ls8.ls8",
        "peekOfCode": "cpu = CPU()\ncpu.load(sys.argv[1])\ncpu.run()",
        "detail": "CSEUFLEX_Architecture_GP.day3.ls8.ls8",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.binsimple",
        "description": "CSEUFLEX_Architecture_GP.day3.binsimple",
        "peekOfCode": "data = []\nfor i in range(255, len(num)):\n    # print(f\"{num[i]:02X}\")\n    data.append(num[i])\nprint(data[2])\nf.close()",
        "detail": "CSEUFLEX_Architecture_GP.day3.binsimple",
        "documentation": {}
    },
    {
        "label": "rec_func",
        "kind": 2,
        "importPath": "CSEUFLEX_Architecture_GP.day3.rec",
        "description": "CSEUFLEX_Architecture_GP.day3.rec",
        "peekOfCode": "def rec_func(n):\n    if n == 0:\n        return\n    print(n)\n    rec_func(n - 1)\n    rec_func(n - 2)\n    rec_func(n - 3)\nz = 12\nrec_func(1000)",
        "detail": "CSEUFLEX_Architecture_GP.day3.rec",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.rec",
        "description": "CSEUFLEX_Architecture_GP.day3.rec",
        "peekOfCode": "z = 12\nrec_func(1000)",
        "detail": "CSEUFLEX_Architecture_GP.day3.rec",
        "documentation": {}
    },
    {
        "label": "load_memory",
        "kind": 2,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "def load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')\n                num = comment_split[0].strip()\n                if num == '':\n                    continue",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "HALT",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "HALT = 1\nPRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# lets make a model of memory to hold our program\nmemory = [0] * 256",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "PRINT_TOM",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "PRINT_TOM = 2\nPRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8 # self.reg[poodle]",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "PRINT_NUM",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "PRINT_NUM = 3\nSAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8 # self.reg[poodle]\n# TODO: Stack Pointer (R7) as per specs",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "SAVE = 4\nPRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8 # self.reg[poodle]\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list ",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "PRINT_REG",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "PRINT_REG = 5\nADD = 6\nPUSH = 7\nPOP = 8\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8 # self.reg[poodle]\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list \nSP = 7",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "ADD = 6\nPUSH = 7\nPOP = 8\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8 # self.reg[poodle]\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list \nSP = 7\n# to use to store where the top of the stack is",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "PUSH",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "PUSH = 7\nPOP = 8\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8 # self.reg[poodle]\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list \nSP = 7\n# to use to store where the top of the stack is\nregister[SP] = 244 # F4",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "POP",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "POP = 8\n# lets make a model of memory to hold our program\nmemory = [0] * 256\nregister = [0] * 8 # self.reg[poodle]\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list \nSP = 7\n# to use to store where the top of the stack is\nregister[SP] = 244 # F4\n# lets load a program in to memory",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "memory = [0] * 256\nregister = [0] * 8 # self.reg[poodle]\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list \nSP = 7\n# to use to store where the top of the stack is\nregister[SP] = 244 # F4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "register = [0] * 8 # self.reg[poodle]\n# TODO: Stack Pointer (R7) as per specs\n# index of the registers list \nSP = 7\n# to use to store where the top of the stack is\nregister[SP] = 244 # F4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "SP",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "SP = 7\n# to use to store where the top of the stack is\nregister[SP] = 244 # F4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "register[SP]",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "register[SP] = 244 # F4\n# lets load a program in to memory\ndef load_memory(filename):\n    try:\n        addr = 0\n        with open(filename) as f:\n            for line in f:\n                # split the comment out\n                comment_split = line.split('#')\n                num = comment_split[0].strip()",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "pc = 0\n# are we actually running\nrunning = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "running = True\nop_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "op_size",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day3.simple2",
        "description": "CSEUFLEX_Architecture_GP.day3.simple2",
        "peekOfCode": "op_size = 0\n# Main entrypoint\n# grab any args\nif len(sys.argv) != 2:\n    print(\"usage: 02-fileio.2.py <filename>\")\n    sys.exit(1)\n# load the memory\nload_memory(sys.argv[1])\n# REPL\n# lets make a running loop...",
        "detail": "CSEUFLEX_Architecture_GP.day3.simple2",
        "documentation": {}
    },
    {
        "label": "op_add",
        "kind": 2,
        "importPath": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "description": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "peekOfCode": "def op_add(op1, op2):\n    op1 += op2\n    return 2\ndef op_sub(op1, op2):\n    op1 -= op2\n    return 2\ndef op_print_some_stuff(op1, op2):\n    print(\"Some Stuff...\")\n    return 1\nbt = {",
        "detail": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_sub",
        "kind": 2,
        "importPath": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "description": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "peekOfCode": "def op_sub(op1, op2):\n    op1 -= op2\n    return 2\ndef op_print_some_stuff(op1, op2):\n    print(\"Some Stuff...\")\n    return 1\nbt = {\n    ADD: op_add,\n    SUB: op_sub,\n    PRINT_SOME_STUFF: op_print_some_stuff",
        "detail": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "op_print_some_stuff",
        "kind": 2,
        "importPath": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "description": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "peekOfCode": "def op_print_some_stuff(op1, op2):\n    print(\"Some Stuff...\")\n    return 1\nbt = {\n    ADD: op_add,\n    SUB: op_sub,\n    PRINT_SOME_STUFF: op_print_some_stuff\n}\n\"\"\"\nADD",
        "detail": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "description": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "peekOfCode": "ADD = 23\nSUB = 34\nPRINT_SOME_STUFF = 50\ndef op_add(op1, op2):\n    op1 += op2\n    return 2\ndef op_sub(op1, op2):\n    op1 -= op2\n    return 2\ndef op_print_some_stuff(op1, op2):",
        "detail": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "SUB",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "description": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "peekOfCode": "SUB = 34\nPRINT_SOME_STUFF = 50\ndef op_add(op1, op2):\n    op1 += op2\n    return 2\ndef op_sub(op1, op2):\n    op1 -= op2\n    return 2\ndef op_print_some_stuff(op1, op2):\n    print(\"Some Stuff...\")",
        "detail": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "PRINT_SOME_STUFF",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "description": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "peekOfCode": "PRINT_SOME_STUFF = 50\ndef op_add(op1, op2):\n    op1 += op2\n    return 2\ndef op_sub(op1, op2):\n    op1 -= op2\n    return 2\ndef op_print_some_stuff(op1, op2):\n    print(\"Some Stuff...\")\n    return 1",
        "detail": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "bt",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "description": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "peekOfCode": "bt = {\n    ADD: op_add,\n    SUB: op_sub,\n    PRINT_SOME_STUFF: op_print_some_stuff\n}\n\"\"\"\nADD\n0\n1\n\"\"\"",
        "detail": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "description": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "peekOfCode": "memory = [0] * 128\npc = 0\nrunning = True\nwhile running:\n    ir = memory[pc]\n    op1 = memory[pc + 1]\n    op2 = memory[pc + 2]\n    if ir in bt: # is ADD in the branch table?\n        pc += bt[ir](op1, op2) # bt[ADD](op1, op2) => op_add(op1, op2)\n    else:",
        "detail": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "description": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "peekOfCode": "pc = 0\nrunning = True\nwhile running:\n    ir = memory[pc]\n    op1 = memory[pc + 1]\n    op2 = memory[pc + 2]\n    if ir in bt: # is ADD in the branch table?\n        pc += bt[ir](op1, op2) # bt[ADD](op1, op2) => op_add(op1, op2)\n    else:\n        print(\"not valid\")",
        "detail": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "description": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "peekOfCode": "running = True\nwhile running:\n    ir = memory[pc]\n    op1 = memory[pc + 1]\n    op2 = memory[pc + 2]\n    if ir in bt: # is ADD in the branch table?\n        pc += bt[ir](op1, op2) # bt[ADD](op1, op2) => op_add(op1, op2)\n    else:\n        print(\"not valid\")",
        "detail": "CSEUFLEX_Architecture_GP.day4.branchtable",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "CSEUFLEX_Architecture_GP.day4.functions",
        "description": "CSEUFLEX_Architecture_GP.day4.functions",
        "peekOfCode": "def add(a, b): # ADD 0, 1\n    # ADD R0 R1\n    return a + b # RET\n# CALL reg\n# store our variables on the stack\nr0 = add(x, y)\n# RET\n# store our variables in registers R0 R1\n# return value can be stored in a register R0\nprint(r0)",
        "detail": "CSEUFLEX_Architecture_GP.day4.functions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day4.functions",
        "description": "CSEUFLEX_Architecture_GP.day4.functions",
        "peekOfCode": "x = 2\n# SAVE 4 R1\ny = 4\n# CALL 11\n# PRINT_REG R0\n# halt\ndef add(a, b): # ADD 0, 1\n    # ADD R0 R1\n    return a + b # RET\n# CALL reg",
        "detail": "CSEUFLEX_Architecture_GP.day4.functions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day4.functions",
        "description": "CSEUFLEX_Architecture_GP.day4.functions",
        "peekOfCode": "y = 4\n# CALL 11\n# PRINT_REG R0\n# halt\ndef add(a, b): # ADD 0, 1\n    # ADD R0 R1\n    return a + b # RET\n# CALL reg\n# store our variables on the stack\nr0 = add(x, y)",
        "detail": "CSEUFLEX_Architecture_GP.day4.functions",
        "documentation": {}
    },
    {
        "label": "r0",
        "kind": 5,
        "importPath": "CSEUFLEX_Architecture_GP.day4.functions",
        "description": "CSEUFLEX_Architecture_GP.day4.functions",
        "peekOfCode": "r0 = add(x, y)\n# RET\n# store our variables in registers R0 R1\n# return value can be stored in a register R0\nprint(r0)\n\"\"\"\nSAVE\n2\n0\nSAVE",
        "detail": "CSEUFLEX_Architecture_GP.day4.functions",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "description": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n    def add(self, value):\n        self.next = Node(value)\n    def find_middle(self):\n        middle = self\n        end = self\n        while end != None:",
        "detail": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "description": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "peekOfCode": "root = Node(4)\ncur = root\ncur.add(9)\ncur = cur.next\ncur.add(4)\ncur = cur.next\n# root = Node([1, 2, 4, 3, 23])\n# cur = root\n# cur.add({\"name\": \"Tom\"})\n# cur = cur.next",
        "detail": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "description": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "peekOfCode": "cur = root\ncur.add(9)\ncur = cur.next\ncur.add(4)\ncur = cur.next\n# root = Node([1, 2, 4, 3, 23])\n# cur = root\n# cur.add({\"name\": \"Tom\"})\n# cur = cur.next\n# cur.add(9)",
        "detail": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "description": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "peekOfCode": "cur = cur.next\ncur.add(4)\ncur = cur.next\n# root = Node([1, 2, 4, 3, 23])\n# cur = root\n# cur.add({\"name\": \"Tom\"})\n# cur = cur.next\n# cur.add(9)\n# cur = cur.next\n# cur.add(\"bob\")",
        "detail": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "description": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "peekOfCode": "cur = cur.next\n# root = Node([1, 2, 4, 3, 23])\n# cur = root\n# cur.add({\"name\": \"Tom\"})\n# cur = cur.next\n# cur.add(9)\n# cur = cur.next\n# cur.add(\"bob\")\n# cur = cur.next\n# cur.add(12)",
        "detail": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "description": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "peekOfCode": "root = Node(3)\ncur = root\ncur.add(4)\ncur = cur.next\ncur.add(5)\ncur = cur.next\ncur.add(6)\ncur = cur.next\nroot.find_middle()",
        "detail": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "description": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "peekOfCode": "cur = root\ncur.add(4)\ncur = cur.next\ncur.add(5)\ncur = cur.next\ncur.add(6)\ncur = cur.next\nroot.find_middle()",
        "detail": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "description": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "peekOfCode": "cur = cur.next\ncur.add(5)\ncur = cur.next\ncur.add(6)\ncur = cur.next\nroot.find_middle()",
        "detail": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "description": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "peekOfCode": "cur = cur.next\ncur.add(6)\ncur = cur.next\nroot.find_middle()",
        "detail": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "description": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "peekOfCode": "cur = cur.next\nroot.find_middle()",
        "detail": "CSEUFLEX_Data_Structures_GP.problem_sets.problem2",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.bst",
        "description": "CSEUFLEX_Data_Structures_GP.bst",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    # Insert the given value into the tree\n    def insert(self, value):\n        # insert\n        # left case\n        # check if our value is less than root value",
        "detail": "CSEUFLEX_Data_Structures_GP.bst",
        "documentation": {}
    },
    {
        "label": "Vec2",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.design_classes",
        "description": "CSEUFLEX_Data_Structures_GP.design_classes",
        "peekOfCode": "class Vec2:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n    def add(self, other):\n        self.x += other.x\n        self.y += other.y\n    def sub(self, other):",
        "detail": "CSEUFLEX_Data_Structures_GP.design_classes",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.design_classes",
        "description": "CSEUFLEX_Data_Structures_GP.design_classes",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.left = None\n        self.right = None\n        self.value = value\n    def __add_left__(self, value):\n        self.left = Node(value)\n    def __add_right__(self, value):\n        self.right = Node(value)\n# BST",
        "detail": "CSEUFLEX_Data_Structures_GP.design_classes",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.design_classes",
        "description": "CSEUFLEX_Data_Structures_GP.design_classes",
        "peekOfCode": "v = Vec2(23, 45)\nv2 = Vec2(10, 10)\nprint(v)\nv.add(v2)\nprint(v)\n# Linked Lists to trees\nclass Node:\n    def __init__(self, value):\n        self.left = None\n        self.right = None",
        "detail": "CSEUFLEX_Data_Structures_GP.design_classes",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.design_classes",
        "description": "CSEUFLEX_Data_Structures_GP.design_classes",
        "peekOfCode": "v2 = Vec2(10, 10)\nprint(v)\nv.add(v2)\nprint(v)\n# Linked Lists to trees\nclass Node:\n    def __init__(self, value):\n        self.left = None\n        self.right = None\n        self.value = value",
        "detail": "CSEUFLEX_Data_Structures_GP.design_classes",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.dll_queue",
        "description": "CSEUFLEX_Data_Structures_GP.dll_queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        # counter to keep track of the number of elements in our queue\n        self.size = 0\n        # we'll use our LinkedList implementation to build the queue\n        self.storage = DoublyLinkedList()\n    def enqueue(self, item):\n        pass\n    def dequeue(self):\n        pass",
        "detail": "CSEUFLEX_Data_Structures_GP.dll_queue",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.dll_stack",
        "description": "CSEUFLEX_Data_Structures_GP.dll_stack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.size = 0\n        self.storage = DoublyLinkedList()\n    def push(self, value):\n        pass\n    def pop(self):\n        pass\n    def len(self):\n        pass",
        "detail": "CSEUFLEX_Data_Structures_GP.dll_stack",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.doubly_linked_list",
        "description": "CSEUFLEX_Data_Structures_GP.doubly_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, value, prev=None, next=None):\n        self.value = value\n        self.prev = prev\n        self.next = next\n    \"\"\"Wrap the given value in a ListNode and insert it\n    after this node. Note that this node could already\n    have a next node it is point to.\"\"\"\n    def insert_after(self, value):\n        current_next = self.next",
        "detail": "CSEUFLEX_Data_Structures_GP.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.doubly_linked_list",
        "description": "CSEUFLEX_Data_Structures_GP.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self, node=None):\n        self.head = node\n        self.tail = node\n        self.length = 1 if node is not None else 0\n    def __len__(self):\n        return self.length\n    \"\"\"Wraps the given value in a ListNode and inserts it \n    as the new head of the list. Don't forget to handle \n    the old head node's previous pointer accordingly.\"\"\"",
        "detail": "CSEUFLEX_Data_Structures_GP.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l = []  # 5\n# real len = 10\n# logical len = 5\nl = [None] * 5\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l = [None] * 5\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[0]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[1]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[2]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[3]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[3] = 234234\nl[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[4]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[5]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[0]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[1]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[2]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[3]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[4]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[5]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[6]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[7]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[8]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[9]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[10]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[0]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[1]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[2]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[3]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[4]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[5]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[6]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[7]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[8]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[9]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[9] = 3434\nl[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "l[10]",
        "kind": 5,
        "importPath": "CSEUFLEX_Data_Structures_GP.lists",
        "description": "CSEUFLEX_Data_Structures_GP.lists",
        "peekOfCode": "l[10] = 234234",
        "detail": "CSEUFLEX_Data_Structures_GP.lists",
        "documentation": {}
    },
    {
        "label": "LRUCache",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.lru_cache",
        "description": "CSEUFLEX_Data_Structures_GP.lru_cache",
        "peekOfCode": "class LRUCache:\n    \"\"\"\n    Our LRUCache class keeps track of the max number of nodes it\n    can hold, the current number of nodes it is holding, a doubly-\n    linked list that holds the key-value entries in the correct\n    order, as well as a storage dict that provides fast access\n    to every node stored in the cache.\n    \"\"\"\n    def __init__(self, limit=10):\n        pass",
        "detail": "CSEUFLEX_Data_Structures_GP.lru_cache",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.queue",
        "description": "CSEUFLEX_Data_Structures_GP.queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.size = 0\n        self.storage = LinkedList()\n    def __len__(self):\n        return self.size\n        # other option return len(self.storage)\n    def enqueue(self, value):\n        self.storage.add_to_tail(value)\n        self.size += 1",
        "detail": "CSEUFLEX_Data_Structures_GP.queue",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.singly_linked_list",
        "description": "CSEUFLEX_Data_Structures_GP.singly_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, value=None, next_node=None):\n        # the value at this linked list node\n        self.value = value\n        # reference to the next node in the list\n        self.next_node = next_node\n    def get_value(self):\n        return self.value\n    def get_next(self):\n        return self.next_node",
        "detail": "CSEUFLEX_Data_Structures_GP.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.singly_linked_list",
        "description": "CSEUFLEX_Data_Structures_GP.singly_linked_list",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        # reference to the head of the list\n        self.head = None\n        # reference to the tail of the list\n        self.tail = None\n    def add_to_tail(self, value):\n        # wrap the input value in a node\n        new_node = Node(value, None)\n        # check if there is no head (i.e., the list is empty)",
        "detail": "CSEUFLEX_Data_Structures_GP.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.stack",
        "description": "CSEUFLEX_Data_Structures_GP.stack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.size = 0\n        self.storage = LinkedList()\n    def __len__(self):\n        return self.size\n        # other option return len(self.storage)\n    def push(self, value):\n        self.storage.add_to_tail(value)\n        self.size += 1",
        "detail": "CSEUFLEX_Data_Structures_GP.stack",
        "documentation": {}
    },
    {
        "label": "BinarySearchTreeTests",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.test_bst",
        "description": "CSEUFLEX_Data_Structures_GP.test_bst",
        "peekOfCode": "class BinarySearchTreeTests(unittest.TestCase):\n    def setUp(self):\n        self.bst = BSTNode(5)\n    def test_insert(self):\n        self.bst.insert(2)\n        self.bst.insert(3)\n        self.bst.insert(7)\n        self.bst.insert(6)\n        self.assertEqual(self.bst.left.right.value, 3)\n        self.assertEqual(self.bst.right.left.value, 6)",
        "detail": "CSEUFLEX_Data_Structures_GP.test_bst",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedListTests",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.test_doubly_linked_list",
        "description": "CSEUFLEX_Data_Structures_GP.test_doubly_linked_list",
        "peekOfCode": "class DoublyLinkedListTests(unittest.TestCase):\n    def setUp(self):\n        self.node = ListNode(1)\n        self.dll = DoublyLinkedList(self.node)\n    def test_list_remove_from_tail(self):\n        self.dll.remove_from_tail()\n        self.assertIsNone(self.dll.head)\n        self.assertIsNone(self.dll.tail)\n        self.assertEqual(len(self.dll), 0)\n        self.dll.add_to_tail(33)",
        "detail": "CSEUFLEX_Data_Structures_GP.test_doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "CacheTests",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.test_lru_cache",
        "description": "CSEUFLEX_Data_Structures_GP.test_lru_cache",
        "peekOfCode": "class CacheTests(unittest.TestCase):\n    def setUp(self):\n        self.cache = LRUCache(3)\n    def test_cache_overwrite_appropriately(self):\n        self.cache.set('item1', 'a')\n        self.cache.set('item2', 'b')\n        self.cache.set('item3', 'c')\n        self.cache.set('item2', 'z')\n        self.assertEqual(self.cache.get('item1'), 'a')\n        self.assertEqual(self.cache.get('item2'), 'z')",
        "detail": "CSEUFLEX_Data_Structures_GP.test_lru_cache",
        "documentation": {}
    },
    {
        "label": "QueueTests",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.test_queue",
        "description": "CSEUFLEX_Data_Structures_GP.test_queue",
        "peekOfCode": "class QueueTests(unittest.TestCase):\n    def setUp(self):\n        self.q = Queue()\n    def test_len_returns_0_for_empty_queue(self):\n        self.assertEqual(len(self.q), 0)\n    def test_len_returns_correct_length_after_enqueue(self):\n        self.assertEqual(len(self.q), 0)\n        self.q.enqueue(2)\n        self.assertEqual(len(self.q), 1)\n        self.q.enqueue(4)",
        "detail": "CSEUFLEX_Data_Structures_GP.test_queue",
        "documentation": {}
    },
    {
        "label": "StackTests",
        "kind": 6,
        "importPath": "CSEUFLEX_Data_Structures_GP.test_stack",
        "description": "CSEUFLEX_Data_Structures_GP.test_stack",
        "peekOfCode": "class StackTests(unittest.TestCase):\n    def setUp(self):\n        self.stack = Stack()\n    def test_len_returns_0_for_empty_stack(self):\n        self.assertEqual(len(self.stack), 0)\n    def test_len_returns_correct_length_after_push(self):\n        self.assertEqual(len(self.stack), 0)\n        self.stack.push(2)\n        self.assertEqual(len(self.stack), 1)\n        self.stack.push(4)",
        "detail": "CSEUFLEX_Data_Structures_GP.test_stack",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "CSEUFLEX_Graphs_GP.adj_list",
        "description": "CSEUFLEX_Graphs_GP.adj_list",
        "peekOfCode": "class Graph:\n    \"\"\"Represent a graph as a dictionary of vertices mapping labels to edges.\"\"\"\n    def __init__(self):\n        pass\n    def add_vertex(self, vertex_id):\n        pass\n    def add_edge(self, v1, v2):\n        pass\n    def get_neighbors(self, vertex_id):\n        pass",
        "detail": "CSEUFLEX_Graphs_GP.adj_list",
        "documentation": {}
    },
    {
        "label": "build_lookup_table",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.1-lookup",
        "description": "CSEUFLEX_HashTables_GP.1-lookup",
        "peekOfCode": "def build_lookup_table():\n    # expensive to do the first build\n    global inv_sqrt\n    for i in range(1, 1000001):\n        inv_sqrt[i] = 1 / math.sqrt(i)\nprint(inv_sqrt)\nbuild_lookup_table()\nprint(inv_sqrt)\n# Fast to just look up the answer\nprint(inv_sqrt[3])",
        "detail": "CSEUFLEX_HashTables_GP.1-lookup",
        "documentation": {}
    },
    {
        "label": "inv_sqrt",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.1-lookup",
        "description": "CSEUFLEX_HashTables_GP.1-lookup",
        "peekOfCode": "inv_sqrt = {}\ndef build_lookup_table():\n    # expensive to do the first build\n    global inv_sqrt\n    for i in range(1, 1000001):\n        inv_sqrt[i] = 1 / math.sqrt(i)\nprint(inv_sqrt)\nbuild_lookup_table()\nprint(inv_sqrt)\n# Fast to just look up the answer",
        "detail": "CSEUFLEX_HashTables_GP.1-lookup",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.2-sorter",
        "description": "CSEUFLEX_HashTables_GP.2-sorter",
        "peekOfCode": "d = {\n    \"foo\": 120,\n    \"bar\": 17,\n    \"qux\": 2\n}\n# Sorting a dictionary doesn't make sense\n#\n# But you can sort a list based on the dictionary\n#\n# First get the list of items from the dict with .items()",
        "detail": "CSEUFLEX_HashTables_GP.2-sorter",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.2-sorter",
        "description": "CSEUFLEX_HashTables_GP.2-sorter",
        "peekOfCode": "items = list(d.items())\nprint(f\"unsorted: {items}\")\n# Sort ascending by key\nitems.sort()\nprint(f\"Sort ascending by key: {items}\")\n# Sort descending by key\nitems.sort(reverse=True)\nprint(f\"Sort descending by key: {items}\")\n# Sort ascending by value\n# lambda is an anonymous function. e is the argument representing the",
        "detail": "CSEUFLEX_HashTables_GP.2-sorter",
        "documentation": {}
    },
    {
        "label": "build_index",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.3-index",
        "description": "CSEUFLEX_HashTables_GP.3-index",
        "peekOfCode": "def build_index(rec):\n    # build the index from the list\n    idx = {}\n    for r in rec:\n        name, dept = r\n        if dept not in idx:\n            idx[dept] = []\n        idx[dept].append(name)\n    return idx\nidx = build_index(records)",
        "detail": "CSEUFLEX_HashTables_GP.3-index",
        "documentation": {}
    },
    {
        "label": "records",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.3-index",
        "description": "CSEUFLEX_HashTables_GP.3-index",
        "peekOfCode": "records = [\n    (\"Alice\", \"Engineering\"),\n    (\"Bob\", \"Sales\"),\n    (\"Carol\", \"Sales\"),\n    (\"Erin\", \"Engineering\"),\n    (\"Dave\", \"Engineering\"),\n    (\"Frank\", \"Engineering\"),\n    (\"Grace\", \"Marketing\")\n]\ndef build_index(rec):",
        "detail": "CSEUFLEX_HashTables_GP.3-index",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.3-index",
        "description": "CSEUFLEX_HashTables_GP.3-index",
        "peekOfCode": "idx = build_index(records)\nprint(idx)\n# print all the departments\nfor i in idx:\n    print(i)\n# print everyone in Engineering:\nidx['Engineering'].sort()\n# ['Alice', 'Erin', 'Dave', 'Frank'].sort()\nprint(f\"Engineering: {idx['Engineering']}\")",
        "detail": "CSEUFLEX_HashTables_GP.3-index",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.4-caesar",
        "description": "CSEUFLEX_HashTables_GP.4-caesar",
        "peekOfCode": "def encode(s):\n    ret_val = \"\"\n    for c in s:\n        # if c.isspace():\n        #     continue  \n        # c = c.upper()\n        ret_val += encode_table[c]\n    return ret_val\ndef decode(s):\n    ret_val = \"\"",
        "detail": "CSEUFLEX_HashTables_GP.4-caesar",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.4-caesar",
        "description": "CSEUFLEX_HashTables_GP.4-caesar",
        "peekOfCode": "def decode(s):\n    ret_val = \"\"\n    for c in s:\n        ret_val += decode_table[c]\n    return ret_val\n# DOGGEBEUGW\n# HELLOWORLD\n# Tests\nif __name__ == \"__main__\":\n    plaintext = \"This is a better charset for the cipher\"",
        "detail": "CSEUFLEX_HashTables_GP.4-caesar",
        "documentation": {}
    },
    {
        "label": "encode_table",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.4-caesar",
        "description": "CSEUFLEX_HashTables_GP.4-caesar",
        "peekOfCode": "encode_table = {\n    'A': 'H',\n    'B': 'Z',\n    'C': 'Y',\n    'D': 'W',\n    'E': 'O',\n    'F': 'R',\n    'G': 'J',\n    'H': 'D',\n    'I': 'P',",
        "detail": "CSEUFLEX_HashTables_GP.4-caesar",
        "documentation": {}
    },
    {
        "label": "decode_table",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.4-caesar",
        "description": "CSEUFLEX_HashTables_GP.4-caesar",
        "peekOfCode": "decode_table = {}\n# iterate over the encode table reversing the key and value\nfor k, v in encode_table.items():\n    decode_table[v] = k\n# O(1) + O(m)\ndef encode(s):\n    ret_val = \"\"\n    for c in s:\n        # if c.isspace():\n        #     continue  ",
        "detail": "CSEUFLEX_HashTables_GP.4-caesar",
        "documentation": {}
    },
    {
        "label": "CacheEntry",
        "kind": 6,
        "importPath": "CSEUFLEX_HashTables_GP.5-webcache",
        "description": "CSEUFLEX_HashTables_GP.5-webcache",
        "peekOfCode": "class CacheEntry:\n    def __init__(self, url, data):\n        self.url = url\n        self.data = data\n        self.timestamp = datetime.datetime.now().timestamp()\n# hold a cache\ncache = {}\n# let's plan out how we will approach this\n# loop\nwhile True:",
        "detail": "CSEUFLEX_HashTables_GP.5-webcache",
        "documentation": {}
    },
    {
        "label": "CACHE_EXPIRY_SECONDS",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.5-webcache",
        "description": "CSEUFLEX_HashTables_GP.5-webcache",
        "peekOfCode": "CACHE_EXPIRY_SECONDS = 10\nclass CacheEntry:\n    def __init__(self, url, data):\n        self.url = url\n        self.data = data\n        self.timestamp = datetime.datetime.now().timestamp()\n# hold a cache\ncache = {}\n# let's plan out how we will approach this\n# loop",
        "detail": "CSEUFLEX_HashTables_GP.5-webcache",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.5-webcache",
        "description": "CSEUFLEX_HashTables_GP.5-webcache",
        "peekOfCode": "cache = {}\n# let's plan out how we will approach this\n# loop\nwhile True:\n    # take input from user set it to url\n    url = input(\"Enter a URL: \")\n    # some data store\n    data = None\n    # check if the key is in the cache\n    if url in cache:",
        "detail": "CSEUFLEX_HashTables_GP.5-webcache",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.fib",
        "description": "CSEUFLEX_HashTables_GP.fib",
        "peekOfCode": "def fib(n):\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\nfib(30) => fib(29) + fib(28)\nfib(28) + fib(27)\nfib(30) => fib(29) + fib(28)",
        "detail": "CSEUFLEX_HashTables_GP.fib",
        "documentation": {}
    },
    {
        "label": "fibm",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.fib",
        "description": "CSEUFLEX_HashTables_GP.fib",
        "peekOfCode": "def fibm(n):\n    if n <= 1:\n        return n\n    if n not in cache:\n        cache[n] = fib(n-1) + fib(n-2)\n    return cache[n]\n# long operation (O(n))\nfor i in range(37):\n    print(f'{i:3}: {fibm(i)}')\n# quick operation (O(1))",
        "detail": "CSEUFLEX_HashTables_GP.fib",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.fib",
        "description": "CSEUFLEX_HashTables_GP.fib",
        "peekOfCode": "cache = {}\ndef fibm(n):\n    if n <= 1:\n        return n\n    if n not in cache:\n        cache[n] = fib(n-1) + fib(n-2)\n    return cache[n]\n# long operation (O(n))\nfor i in range(37):\n    print(f'{i:3}: {fibm(i)}')",
        "detail": "CSEUFLEX_HashTables_GP.fib",
        "documentation": {}
    },
    {
        "label": "SomeClass",
        "kind": 6,
        "importPath": "CSEUFLEX_HashTables_GP.hashing",
        "description": "CSEUFLEX_HashTables_GP.hashing",
        "peekOfCode": "class SomeClass:\n    def __init__(self, size):\n        self.storage = [None] * size\n    def my_hash(self, s):\n        \"\"\"\n            Input: String\n            Output: Integer\n            Operate on the individual bytes of the string (characters) -> number representation of the char\n            byte can hold 0 - 255\n            Algorithm:",
        "detail": "CSEUFLEX_HashTables_GP.hashing",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.hashing",
        "description": "CSEUFLEX_HashTables_GP.hashing",
        "peekOfCode": "def my_hash(s):\n    \"\"\"\n        Input: String\n        Output: Integer\n        Operate on the individual bytes of the string (characters) -> number representation of the char\n        byte can hold 0 - 255\n        Algorithm:\n            take each byte f the string\n            sum up the total of the values of those bytes\n            return the sum of the values",
        "detail": "CSEUFLEX_HashTables_GP.hashing",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.hashing",
        "description": "CSEUFLEX_HashTables_GP.hashing",
        "peekOfCode": "def put(ht, key, val):\n    h = my_hash(key)\n    i = h % len(ht)\n    ht[i] = val\nput(hash_table, \"DA\", \"DA Value\")\n# h = my_hash(\"DA\")\n# i = h % len(hash_table)\n# print(i)\n# hash_table[i] = \"DA Value\"\n# h = my_hash(\"BOB\")",
        "detail": "CSEUFLEX_HashTables_GP.hashing",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.hashing",
        "description": "CSEUFLEX_HashTables_GP.hashing",
        "peekOfCode": "def get(ht, key):\n    h = my_hash(key)\n    i = h % len(ht)\n    return ht[i]\n# Delete\ndef delete(ht, key):\n    h = my_hash(key)\n    i = h % len(ht)\n    ht[i] = None\n# get the valuye at the bob key -> Bob Value 2",
        "detail": "CSEUFLEX_HashTables_GP.hashing",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.hashing",
        "description": "CSEUFLEX_HashTables_GP.hashing",
        "peekOfCode": "def delete(ht, key):\n    h = my_hash(key)\n    i = h % len(ht)\n    ht[i] = None\n# get the valuye at the bob key -> Bob Value 2\n# h = my_hash(\"BOB\")\n# i = h % len(hash_table)\n# v = hash_table[i]\nv = get(hash_table, \"BOB\")\nprint(v)",
        "detail": "CSEUFLEX_HashTables_GP.hashing",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.hashing",
        "description": "CSEUFLEX_HashTables_GP.hashing",
        "peekOfCode": "my_string = \"DA\"\nmy_string2 = \"BOB\"\nclass SomeClass:\n    def __init__(self, size):\n        self.storage = [None] * size\n    def my_hash(self, s):\n        \"\"\"\n            Input: String\n            Output: Integer\n            Operate on the individual bytes of the string (characters) -> number representation of the char",
        "detail": "CSEUFLEX_HashTables_GP.hashing",
        "documentation": {}
    },
    {
        "label": "my_string2",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.hashing",
        "description": "CSEUFLEX_HashTables_GP.hashing",
        "peekOfCode": "my_string2 = \"BOB\"\nclass SomeClass:\n    def __init__(self, size):\n        self.storage = [None] * size\n    def my_hash(self, s):\n        \"\"\"\n            Input: String\n            Output: Integer\n            Operate on the individual bytes of the string (characters) -> number representation of the char\n            byte can hold 0 - 255",
        "detail": "CSEUFLEX_HashTables_GP.hashing",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.hashing",
        "description": "CSEUFLEX_HashTables_GP.hashing",
        "peekOfCode": "hash_table = [None] * 8 # 0, 1, 2, 3, 4, 5, 6, 7\n# put\n\"\"\"\n1: put the key string through a hashing function to get a hash value -> h\n2: Mod the hash value with the data structure size (arr) to get the index -> i\n3: Store the value at the index\n\"\"\"\ndef put(ht, key, val):\n    h = my_hash(key)\n    i = h % len(ht)",
        "detail": "CSEUFLEX_HashTables_GP.hashing",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.hashing",
        "description": "CSEUFLEX_HashTables_GP.hashing",
        "peekOfCode": "v = get(hash_table, \"BOB\")\nprint(v)\n# hash_table = [None] * 8 # 0, 1, 2, 3, 4, 5, 6, 7\n# h = my_hash(\"DA\")\n# i = h % len(hash_table)\n# print(i)\n# if hash_table[i] == None:\n#     hash_table[i] = \"DA Value\"\n# else:\n#     print(\"Collision!!!!!\")",
        "detail": "CSEUFLEX_HashTables_GP.hashing",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    # Insert (for putting a node)\n    def insert_at_head(self, node):\n        node.next = self.head",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    # Insert (for putting a node)\n    def insert_at_head(self, node):\n        node.next = self.head\n        self.head = node\n    # Find (for getting a node)\n    def find(self, value):\n        cur = self.head",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "class HashTableEntry:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        # self.bob = \"hello\"\n        self.next = None\n    def repr(self):\n        return f\"HashTableEntry({self.key}, {self.value})\"\nhash_table = [None] * 8   # 8 slots, all initiailized to None\ndef my_hash(s):",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "def my_hash(s):\n    sb = s.encode()  # Get the UTF-8 bytes for the string\n    total = 0\n    for b in sb:\n        total += b\n        total &= 0xffffffff  # clamp to 32 bits\n    return total\ndef hash_index(key):\n    h = my_hash(key)\n    return h % len(hash_table)",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "hash_index",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "def hash_index(key):\n    h = my_hash(key)\n    return h % len(hash_table)\ndef put(key, val):\n    i = hash_index(key)\n    if hash_table[i] != None:\n        print(f\"Collision! Overwriting {repr(hash_table[i])}\")\n    hash_table[i] = HashTableEntry(key, val)\ndef get(key):\n    i = hash_index(key)",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "def put(key, val):\n    i = hash_index(key)\n    if hash_table[i] != None:\n        print(f\"Collision! Overwriting {repr(hash_table[i])}\")\n    hash_table[i] = HashTableEntry(key, val)\ndef get(key):\n    i = hash_index(key)\n    entry = hash_table[i]\n    if entry == None:\n        return None",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "def get(key):\n    i = hash_index(key)\n    entry = hash_table[i]\n    if entry == None:\n        return None\n    return entry.value\ndef delete(key):\n    i = hash_index(key)\n    hash_table[i] = None\nput(\"Hello\", \"Hello Value\")",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "def delete(key):\n    i = hash_index(key)\n    hash_table[i] = None\nput(\"Hello\", \"Hello Value\")\nput(\"World\", \"World Value\")\nput(\"foo\", \"foo value\")   # \"foo\" hashes to same index as \"Hello\"\n                          # AKA \"foo collides with Hello\"\nprint(hash_table)\nv = get(\"Hello\")\nprint(f'Hello value is: {v}') # Should be \"Hello Value\", but gives \"foo value\"",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "hash_table = [None] * 8   # 8 slots, all initiailized to None\ndef my_hash(s):\n    sb = s.encode()  # Get the UTF-8 bytes for the string\n    total = 0\n    for b in sb:\n        total += b\n        total &= 0xffffffff  # clamp to 32 bits\n    return total\ndef hash_index(key):\n    h = my_hash(key)",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "v = get(\"Hello\")\nprint(f'Hello value is: {v}') # Should be \"Hello Value\", but gives \"foo value\"\n# Get \"Frogs\" from the table\n# Doesn't exist!\nv = get(\"Frogs\")\nprint(v)  # \"None\"\n\"\"\"\nPut\n---\n1: find index",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.hashing2",
        "description": "CSEUFLEX_HashTables_GP.hashing2",
        "peekOfCode": "v = get(\"Frogs\")\nprint(v)  # \"None\"\n\"\"\"\nPut\n---\n1: find index\n2: search the list at the index for the provided key\n3: if the key exists > overwrite the value\n4: otherwise key does not exist\n::: make a new HashTableEntry with the key and value",
        "detail": "CSEUFLEX_HashTables_GP.hashing2",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "CSEUFLEX_HashTables_GP.hashtables",
        "description": "CSEUFLEX_HashTables_GP.hashtables",
        "peekOfCode": "class HashTableEntry:\n    \"\"\"\n    Linked List hash table key/value pair\n    \"\"\"\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n# Hash table can't have fewer than this many slots\nMIN_CAPACITY = 8",
        "detail": "CSEUFLEX_HashTables_GP.hashtables",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "CSEUFLEX_HashTables_GP.hashtables",
        "description": "CSEUFLEX_HashTables_GP.hashtables",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    Implement this.\n    \"\"\"\n    def __init__(self, capacity):\n        # Your code here\n    def get_num_slots(self):\n        \"\"\"",
        "detail": "CSEUFLEX_HashTables_GP.hashtables",
        "documentation": {}
    },
    {
        "label": "MIN_CAPACITY",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.hashtables",
        "description": "CSEUFLEX_HashTables_GP.hashtables",
        "peekOfCode": "MIN_CAPACITY = 8\nclass HashTable:\n    \"\"\"\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    Implement this.\n    \"\"\"\n    def __init__(self, capacity):\n        # Your code here\n    def get_num_slots(self):",
        "detail": "CSEUFLEX_HashTables_GP.hashtables",
        "documentation": {}
    },
    {
        "label": "letter_count",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.letter_count",
        "description": "CSEUFLEX_HashTables_GP.letter_count",
        "peekOfCode": "def letter_count(s):\n    d = {}\n    for c in s:\n        if c.isspace():\n            continue\n        c = c.lower()\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1",
        "detail": "CSEUFLEX_HashTables_GP.letter_count",
        "documentation": {}
    },
    {
        "label": "print_sorted_count",
        "kind": 2,
        "importPath": "CSEUFLEX_HashTables_GP.letter_count",
        "description": "CSEUFLEX_HashTables_GP.letter_count",
        "peekOfCode": "def print_sorted_count(s):\n    count = letter_count(s)\n    items = list(count.items())\n    items.sort(key=lambda e: e[1], reverse=True)\n    for i in items:\n        print(f\"{i[0]}: {i[1]}\")\nmy_string = \"aabcDcc dd      ddd D\"\nprint(letter_count(my_string))\nprint_sorted_count(my_string)",
        "detail": "CSEUFLEX_HashTables_GP.letter_count",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "CSEUFLEX_HashTables_GP.letter_count",
        "description": "CSEUFLEX_HashTables_GP.letter_count",
        "peekOfCode": "my_string = \"aabcDcc dd      ddd D\"\nprint(letter_count(my_string))\nprint_sorted_count(my_string)",
        "detail": "CSEUFLEX_HashTables_GP.letter_count",
        "documentation": {}
    },
    {
        "label": "tryDirection",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "def tryDirection(d, curRoom):\n    \"\"\"\n    Try to move a direction, or print an error if the player can't go that way.\n    Returns the room the player has moved to (or the same room if the player\n    didn't move).\n    \"\"\"\n    attrib = d + '_to'\n    # See if the room has the destination attribute\n    if hasattr(curRoom, attrib):\n        # If so, return its value (the next room)",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "find_item",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "def find_item(name, curRoom):\n    \"\"\"\n    Search the current room to see if we can locate the treasure in question.\n    \"\"\"\n    for i in curRoom.contents:\n        if i.name == name:\n            return i\n    return None\n#\n# Main",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room = {\n    'outside':  Room(\"Outside Cave Entrance\",\n                     \"North of you, the cave mount beckons\"),\n    'foyer':    Room(\"Foyer\", \"\"\"Dim light filters in from the south. Dusty\npassages run north and east.\"\"\"),\n    'overlook': Room(\"Grand Overlook\", \"\"\"A steep cliff appears before you, falling\ninto the darkness. Ahead to the north, a light flickers in\nthe distance, but there is no way across the chasm.\"\"\"),\n    'narrow':   Room(\"Narrow Passage\", \"\"\"The narrow passage bends here from west\nto north. The smell of gold permeates the air.\"\"\"),",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['outside'].n_to",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room['outside'].n_to = room['foyer']\nroom['foyer'].s_to = room['outside']\nroom['foyer'].n_to = room['overlook']\nroom['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\nroom['outside'].is_light = True\nroom['foyer'].is_light = True",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['foyer'].s_to",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room['foyer'].s_to = room['outside']\nroom['foyer'].n_to = room['overlook']\nroom['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\nroom['outside'].is_light = True\nroom['foyer'].is_light = True\n# Add some items",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['foyer'].n_to",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room['foyer'].n_to = room['overlook']\nroom['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\nroom['outside'].is_light = True\nroom['foyer'].is_light = True\n# Add some items\nt = Treasure(\"coins\", \"Shiny coins\", 100)",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['foyer'].e_to",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room['foyer'].e_to = room['narrow']\nroom['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\nroom['outside'].is_light = True\nroom['foyer'].is_light = True\n# Add some items\nt = Treasure(\"coins\", \"Shiny coins\", 100)\nroom['overlook'].contents.append(t)",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['overlook'].s_to",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room['overlook'].s_to = room['foyer']\nroom['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\nroom['outside'].is_light = True\nroom['foyer'].is_light = True\n# Add some items\nt = Treasure(\"coins\", \"Shiny coins\", 100)\nroom['overlook'].contents.append(t)\nt = Treasure(\"silver\", \"Tarnished silver\", 200)",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['narrow'].w_to",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room['narrow'].w_to = room['foyer']\nroom['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\nroom['outside'].is_light = True\nroom['foyer'].is_light = True\n# Add some items\nt = Treasure(\"coins\", \"Shiny coins\", 100)\nroom['overlook'].contents.append(t)\nt = Treasure(\"silver\", \"Tarnished silver\", 200)\nroom['treasure'].contents.append(t)",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['narrow'].n_to",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room['narrow'].n_to = room['treasure']\nroom['treasure'].s_to = room['narrow']\nroom['outside'].is_light = True\nroom['foyer'].is_light = True\n# Add some items\nt = Treasure(\"coins\", \"Shiny coins\", 100)\nroom['overlook'].contents.append(t)\nt = Treasure(\"silver\", \"Tarnished silver\", 200)\nroom['treasure'].contents.append(t)\nl = LightSource(\"lamp\", \"Brass lamp\")",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['treasure'].s_to",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room['treasure'].s_to = room['narrow']\nroom['outside'].is_light = True\nroom['foyer'].is_light = True\n# Add some items\nt = Treasure(\"coins\", \"Shiny coins\", 100)\nroom['overlook'].contents.append(t)\nt = Treasure(\"silver\", \"Tarnished silver\", 200)\nroom['treasure'].contents.append(t)\nl = LightSource(\"lamp\", \"Brass lamp\")\nroom['foyer'].contents.append(l)",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['outside'].is_light",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room['outside'].is_light = True\nroom['foyer'].is_light = True\n# Add some items\nt = Treasure(\"coins\", \"Shiny coins\", 100)\nroom['overlook'].contents.append(t)\nt = Treasure(\"silver\", \"Tarnished silver\", 200)\nroom['treasure'].contents.append(t)\nl = LightSource(\"lamp\", \"Brass lamp\")\nroom['foyer'].contents.append(l)\ndef tryDirection(d, curRoom):",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "room['foyer'].is_light",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "room['foyer'].is_light = True\n# Add some items\nt = Treasure(\"coins\", \"Shiny coins\", 100)\nroom['overlook'].contents.append(t)\nt = Treasure(\"silver\", \"Tarnished silver\", 200)\nroom['treasure'].contents.append(t)\nl = LightSource(\"lamp\", \"Brass lamp\")\nroom['foyer'].contents.append(l)\ndef tryDirection(d, curRoom):\n    \"\"\"",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "t = Treasure(\"coins\", \"Shiny coins\", 100)\nroom['overlook'].contents.append(t)\nt = Treasure(\"silver\", \"Tarnished silver\", 200)\nroom['treasure'].contents.append(t)\nl = LightSource(\"lamp\", \"Brass lamp\")\nroom['foyer'].contents.append(l)\ndef tryDirection(d, curRoom):\n    \"\"\"\n    Try to move a direction, or print an error if the player can't go that way.\n    Returns the room the player has moved to (or the same room if the player",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "t = Treasure(\"silver\", \"Tarnished silver\", 200)\nroom['treasure'].contents.append(t)\nl = LightSource(\"lamp\", \"Brass lamp\")\nroom['foyer'].contents.append(l)\ndef tryDirection(d, curRoom):\n    \"\"\"\n    Try to move a direction, or print an error if the player can't go that way.\n    Returns the room the player has moved to (or the same room if the player\n    didn't move).\n    \"\"\"",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "l = LightSource(\"lamp\", \"Brass lamp\")\nroom['foyer'].contents.append(l)\ndef tryDirection(d, curRoom):\n    \"\"\"\n    Try to move a direction, or print an error if the player can't go that way.\n    Returns the room the player has moved to (or the same room if the player\n    didn't move).\n    \"\"\"\n    attrib = d + '_to'\n    # See if the room has the destination attribute",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "player = Player(room['outside'])\n# Write a loop that:\n#\n# * Prints the current room name\n# * Prints the current description (the textwrap module might be useful here).\n# * Waits for user input and decides what to do.\n#\n# If the user enters a cardinal direction, attempt to move to the room there.\n# Print an error message if the movement isn't allowed.\n#",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "done",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "description": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "peekOfCode": "done = False\nwhile not done:\n    # Make a list of all the items the player has (or are in the room) that are\n    # light sources:\n    light_sources = [item for item in player.contents + player.curRoom.contents\n                     if isinstance(item, LightSource) and item.lightsource]\n    is_light = player.curRoom.is_light or len(light_sources) > 0\n    if is_light:\n        # Print the room name\n        print(\"\\n{}\\n\".format(player.curRoom.name))",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.adv",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.items",
        "description": "CSEUFLEX_Intro_Python_GP.adv.items",
        "peekOfCode": "class Item:\n    \"\"\"Item base class.\"\"\"\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n    def on_take(self, player):\n        \"\"\"Called every time the player takes an item.\"\"\"\n        pass\n    def __str__(self):\n        \"\"\"Convert to string.\"\"\"",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.items",
        "documentation": {}
    },
    {
        "label": "Treasure",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.items",
        "description": "CSEUFLEX_Intro_Python_GP.adv.items",
        "peekOfCode": "class Treasure(Item):\n    \"\"\"A treasure that adds to your score the first time you pick it up.\"\"\"\n    def __init__(self, name, description, value):\n        self.value = value\n        self.picked_up = False\n        super().__init__(name, description)\n    def on_take(self, player):\n        super().on_take(player)\n        if not self.picked_up:\n            player.score += self.value",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.items",
        "documentation": {}
    },
    {
        "label": "LightSource",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.items",
        "description": "CSEUFLEX_Intro_Python_GP.adv.items",
        "peekOfCode": "class LightSource(Item):\n    \"\"\"An item that casts light.\"\"\"\n    def __init__(self, name, description):\n        super().__init__(name, description)\n        self.lightsource = True",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.items",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.player",
        "description": "CSEUFLEX_Intro_Python_GP.adv.player",
        "peekOfCode": "class Player:\n    \"\"\"Holds information about a player\"\"\"\n    def __init__(self, startRoom):\n        self.curRoom = startRoom\n        self.contents = []\n        self.score = 0",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.player",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.adv.room",
        "description": "CSEUFLEX_Intro_Python_GP.adv.room",
        "peekOfCode": "class Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n        self.is_light = False\n        self.contents = []",
        "detail": "CSEUFLEX_Intro_Python_GP.adv.room",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.02_datatypes",
        "description": "CSEUFLEX_Intro_Python_GP.intro.02_datatypes",
        "peekOfCode": "x = 5\ny = \"7\"\n# Write a print statement that combines x + y into the integer value 12\nprint(x + int(y))\n# Write a print statement that combines x + y into the string value 57\nprint(str(x) + y)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.02_datatypes",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.02_datatypes",
        "description": "CSEUFLEX_Intro_Python_GP.intro.02_datatypes",
        "peekOfCode": "y = \"7\"\n# Write a print statement that combines x + y into the integer value 12\nprint(x + int(y))\n# Write a print statement that combines x + y into the string value 57\nprint(str(x) + y)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.02_datatypes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.04_printing",
        "description": "CSEUFLEX_Intro_Python_GP.intro.04_printing",
        "peekOfCode": "x = 10\ny = 2.24552\nz = \"I like turtles!\"\n# Using the printf operator (%), print the following feeding in the values of x,\n# y, and z:\n# x is 10, y is 2.25, z is \"I like turtles!\"\nprint(\"x is %d, y is %.2f, z is \\\"%s\\\"\" % (x, y, z))\n# Use the 'format' string method to print the same thing\nprint(\"x is {}, y is {:.2f}, z is \\\"{}\\\"\".format(x, y, z))\n# Finally, print the same thing using an f-string",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.04_printing",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.04_printing",
        "description": "CSEUFLEX_Intro_Python_GP.intro.04_printing",
        "peekOfCode": "y = 2.24552\nz = \"I like turtles!\"\n# Using the printf operator (%), print the following feeding in the values of x,\n# y, and z:\n# x is 10, y is 2.25, z is \"I like turtles!\"\nprint(\"x is %d, y is %.2f, z is \\\"%s\\\"\" % (x, y, z))\n# Use the 'format' string method to print the same thing\nprint(\"x is {}, y is {:.2f}, z is \\\"{}\\\"\".format(x, y, z))\n# Finally, print the same thing using an f-string\nprint(f'x is {x}, y is {y:.2f}, z is {z}')",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.04_printing",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.04_printing",
        "description": "CSEUFLEX_Intro_Python_GP.intro.04_printing",
        "peekOfCode": "z = \"I like turtles!\"\n# Using the printf operator (%), print the following feeding in the values of x,\n# y, and z:\n# x is 10, y is 2.25, z is \"I like turtles!\"\nprint(\"x is %d, y is %.2f, z is \\\"%s\\\"\" % (x, y, z))\n# Use the 'format' string method to print the same thing\nprint(\"x is {}, y is {:.2f}, z is \\\"{}\\\"\".format(x, y, z))\n# Finally, print the same thing using an f-string\nprint(f'x is {x}, y is {y:.2f}, z is {z}')",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.04_printing",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.05_lists",
        "description": "CSEUFLEX_Intro_Python_GP.intro.05_lists",
        "peekOfCode": "x = [1, 2, 3]\ny = [8, 9, 10]\n# For the following, DO NOT USE AN ASSIGNMENT (=).\n# Change x so that it is [1, 2, 3, 4]\nx.append(4)\nprint(x)\n# Using y, change x so that it is [1, 2, 3, 4, 8, 9, 10]\nx.extend(y)\nprint(x)\n# Change x so that it is [1, 2, 3, 4, 9, 10]",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.05_lists",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.05_lists",
        "description": "CSEUFLEX_Intro_Python_GP.intro.05_lists",
        "peekOfCode": "y = [8, 9, 10]\n# For the following, DO NOT USE AN ASSIGNMENT (=).\n# Change x so that it is [1, 2, 3, 4]\nx.append(4)\nprint(x)\n# Using y, change x so that it is [1, 2, 3, 4, 8, 9, 10]\nx.extend(y)\nprint(x)\n# Change x so that it is [1, 2, 3, 4, 9, 10]\nx.remove(8)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.05_lists",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "description": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "peekOfCode": "def dist(a, b):\n    \"\"\"Compute the distance between two x,y points.\"\"\"\n    x0, y0 = a  # Destructuring assignment\n    x1, y1 = b\n    return math.sqrt((x1 - x0)**2 + (y1 - y0)**2)\na = (2, 7)   # <-- x,y coordinates stored in tuples\nb = (-14, 72)\n# Prints \"Distance is 66.94\"\nprint(\"Distance is: {:.2f}\".format(dist(a, b)))\n# Write a function `print_tuple` that prints all the values in a tuple",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "print_tuple",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "description": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "peekOfCode": "def print_tuple(t):\n  for i in t:\n    print(i)\nt = (1, 2, 5, 7, 99)\nprint_tuple(t)  # Prints 1 2 5 7 99, one per line\n# Declare a tuple of 1 element then print it\nu = (1,)  # What needs to be added to make this work?\nprint_tuple(u)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "description": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "peekOfCode": "a = (2, 7)   # <-- x,y coordinates stored in tuples\nb = (-14, 72)\n# Prints \"Distance is 66.94\"\nprint(\"Distance is: {:.2f}\".format(dist(a, b)))\n# Write a function `print_tuple` that prints all the values in a tuple\ndef print_tuple(t):\n  for i in t:\n    print(i)\nt = (1, 2, 5, 7, 99)\nprint_tuple(t)  # Prints 1 2 5 7 99, one per line",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "description": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "peekOfCode": "b = (-14, 72)\n# Prints \"Distance is 66.94\"\nprint(\"Distance is: {:.2f}\".format(dist(a, b)))\n# Write a function `print_tuple` that prints all the values in a tuple\ndef print_tuple(t):\n  for i in t:\n    print(i)\nt = (1, 2, 5, 7, 99)\nprint_tuple(t)  # Prints 1 2 5 7 99, one per line\n# Declare a tuple of 1 element then print it",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "description": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "peekOfCode": "t = (1, 2, 5, 7, 99)\nprint_tuple(t)  # Prints 1 2 5 7 99, one per line\n# Declare a tuple of 1 element then print it\nu = (1,)  # What needs to be added to make this work?\nprint_tuple(u)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "description": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "peekOfCode": "u = (1,)  # What needs to be added to make this work?\nprint_tuple(u)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.06_tuples",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.07_slices",
        "description": "CSEUFLEX_Intro_Python_GP.intro.07_slices",
        "peekOfCode": "a = [2, 4, 1, 7, 9, 6]\n# Output the second element: 4:\nprint(a[1])\n# Output the second-to-last element: 9\nprint(a[-2])\n# Output the last three elements in the array: [7, 9, 6]\nprint(a[-3:])\n# Output the two middle elements in the array: [1, 7]\nprint(a[2:4])\n# Output every element except the first one: [4, 1, 7, 9, 6]",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.07_slices",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.07_slices",
        "description": "CSEUFLEX_Intro_Python_GP.intro.07_slices",
        "peekOfCode": "s = \"Hello, world!\"\n# Output just the 8th-12th characters: \"world\"\nprint(s[7:12])",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.07_slices",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "description": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "peekOfCode": "y = [i for i in range(1, 6)]\nprint (y)\n# Write a list comprehension to produce the cubes of the numbers 0-9:\n# [0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\ny = [i**3 for i in range(10)]\nprint(y)\n# Write a list comprehension to produce the uppercase version of all the\n# elements in array a. Hint: \"foo\".upper() is \"FOO\".\na = [\"foo\", \"bar\", \"baz\"]\ny = [i.upper() for i in a]",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "description": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "peekOfCode": "y = [i**3 for i in range(10)]\nprint(y)\n# Write a list comprehension to produce the uppercase version of all the\n# elements in array a. Hint: \"foo\".upper() is \"FOO\".\na = [\"foo\", \"bar\", \"baz\"]\ny = [i.upper() for i in a]\nprint(y)\n# Use a list comprehension to create a list containing only the _even_ elements\n# the user entered into list x.\nx = input(\"Enter comma-separated numbers: \").split(',')",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "description": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "peekOfCode": "a = [\"foo\", \"bar\", \"baz\"]\ny = [i.upper() for i in a]\nprint(y)\n# Use a list comprehension to create a list containing only the _even_ elements\n# the user entered into list x.\nx = input(\"Enter comma-separated numbers: \").split(',')\n# What do you need between the square brackets to make it work?\ny = [i for i in x if int(i) % 2 == 0]\nprint(y)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "description": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "peekOfCode": "y = [i.upper() for i in a]\nprint(y)\n# Use a list comprehension to create a list containing only the _even_ elements\n# the user entered into list x.\nx = input(\"Enter comma-separated numbers: \").split(',')\n# What do you need between the square brackets to make it work?\ny = [i for i in x if int(i) % 2 == 0]\nprint(y)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "description": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "peekOfCode": "x = input(\"Enter comma-separated numbers: \").split(',')\n# What do you need between the square brackets to make it work?\ny = [i for i in x if int(i) % 2 == 0]\nprint(y)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "description": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "peekOfCode": "y = [i for i in x if int(i) % 2 == 0]\nprint(y)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.08_comprehensions",
        "documentation": {}
    },
    {
        "label": "waypoints",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.09_dictionaries",
        "description": "CSEUFLEX_Intro_Python_GP.intro.09_dictionaries",
        "peekOfCode": "waypoints = [\n    {\n        \"lat\": 43,\n        \"lon\": -121,\n        \"name\": \"a place\"\n    }, \n    {\n        \"lat\": 41,\n        \"lon\": -123,\n        \"name\": \"another place\"",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.09_dictionaries",
        "documentation": {}
    },
    {
        "label": "waypoints[0]['lon']",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.09_dictionaries",
        "description": "CSEUFLEX_Intro_Python_GP.intro.09_dictionaries",
        "peekOfCode": "waypoints[0]['lon'] = -130\nwaypoints[0]['name'] = 'not a real place'\n# Write a loop that prints out all the field values for all the waypoints\nfor w in waypoints:\n    print(w['name'], w['lat'], w['lon'])",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.09_dictionaries",
        "documentation": {}
    },
    {
        "label": "waypoints[0]['name']",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.09_dictionaries",
        "description": "CSEUFLEX_Intro_Python_GP.intro.09_dictionaries",
        "peekOfCode": "waypoints[0]['name'] = 'not a real place'\n# Write a loop that prints out all the field values for all the waypoints\nfor w in waypoints:\n    print(w['name'], w['lat'], w['lon'])",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.09_dictionaries",
        "documentation": {}
    },
    {
        "label": "is_even",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.10_functions",
        "description": "CSEUFLEX_Intro_Python_GP.intro.10_functions",
        "peekOfCode": "def is_even(n):\n  return n % 2 == 0\n# Read a number from the keyboard\nnum = input(\"Enter a number: \")\nnum = int(num)\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\nif is_even(num):\n  print(\"Even!\")\nelse:\n  print(\"Odd\")",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.10_functions",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.10_functions",
        "description": "CSEUFLEX_Intro_Python_GP.intro.10_functions",
        "peekOfCode": "num = input(\"Enter a number: \")\nnum = int(num)\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\nif is_even(num):\n  print(\"Even!\")\nelse:\n  print(\"Odd\")",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.10_functions",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.10_functions",
        "description": "CSEUFLEX_Intro_Python_GP.intro.10_functions",
        "peekOfCode": "num = int(num)\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\nif is_even(num):\n  print(\"Even!\")\nelse:\n  print(\"Odd\")",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.10_functions",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "description": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "peekOfCode": "def f1(a, b):\n  return a + b\nprint(f1(1, 2))\n# Write a function f2 that takes any number of integer arguments and prints the\n# sum. Google for \"python arbitrary arguments\" and look for \"*args\"\ndef f2(*args):\n  sum = 0\n  for i in args:\n    sum += i\n  return sum",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "description": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "peekOfCode": "def f2(*args):\n  sum = 0\n  for i in args:\n    sum += i\n  return sum\nprint(f2(1))                    # Should print 1\nprint(f2(1, 3))                 # Should print 4\nprint(f2(1, 4, -12))            # Should print -7\nprint(f2(7, 9, 1, 3, 4, 9, 0))  # Should print 33\na = [7, 6, 5, 4]",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "description": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "peekOfCode": "def f3(a, b=1):\n  return a + b\nprint(f3(1, 2))  # Should print 3\nprint(f3(8))     # Should print 9\n# Write a function f4 that accepts an arbitrary number of keyword arguments and\n# prints out the keys and values like so:\n#\n# key: foo, value: bar\n# key: baz, value: 12\n#",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "documentation": {}
    },
    {
        "label": "f4",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "description": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "peekOfCode": "def f4(**kwargs):\n  for k, v in kwargs.items():\n    print(f'key: {k}, value: {v}')\n  # Alternate:\n  # for k in kwargs:\n  #   print(f'key: {k}, value: {kwargs[k]}')\n# Should print\n# key: a, value: 12\n# key: b, value: 30\nf4(a=12, b=30)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "description": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "peekOfCode": "a = [7, 6, 5, 4]\n# What thing do you have to add to make this work?\nprint(f2(*a))    # Should print 22\n# Write a function f3 that accepts either one or two arguments. If one argument,\n# it returns that value plus 1. If two arguments, it returns the sum of the\n# arguments. Google \"python default arguments\" for a hint.\ndef f3(a, b=1):\n  return a + b\nprint(f3(1, 2))  # Should print 3\nprint(f3(8))     # Should print 9",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "description": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "peekOfCode": "d = {\n    \"monster\": \"goblin\",\n    \"hp\": 3\n}\n# What thing do you have to add to make this work?\nf4(**d)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.11_args",
        "documentation": {}
    },
    {
        "label": "changeX",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.12_scopes",
        "description": "CSEUFLEX_Intro_Python_GP.intro.12_scopes",
        "peekOfCode": "def changeX():\n    # tell Python to use x in the global scope\n    global x\n    x = 99\nchangeX()\n# This prints 12. What do we have to modify in changeX() to get it to print 99?\nprint(x)\n# This nested function has a similar problem.\ndef outer():\n    y = 120",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.12_scopes",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.12_scopes",
        "description": "CSEUFLEX_Intro_Python_GP.intro.12_scopes",
        "peekOfCode": "def outer():\n    y = 120\n    def inner():\n        # tell Python to use y from the containing scope\n        nonlocal y\n        y = 999\n    inner()\n    # This prints 120. What do we have to change in inner() to get it to print\n    # 999? Google \"python nested function scope\".\n    print(y)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.12_scopes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.12_scopes",
        "description": "CSEUFLEX_Intro_Python_GP.intro.12_scopes",
        "peekOfCode": "x = 12\ndef changeX():\n    # tell Python to use x in the global scope\n    global x\n    x = 99\nchangeX()\n# This prints 12. What do we have to modify in changeX() to get it to print 99?\nprint(x)\n# This nested function has a similar problem.\ndef outer():",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.12_scopes",
        "documentation": {}
    },
    {
        "label": "fp",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.13_file_io",
        "description": "CSEUFLEX_Intro_Python_GP.intro.13_file_io",
        "peekOfCode": "fp = open(\"bar.txt\", \"w\")\nfp.write(\"\"\"Line 1\n            Line 2\n            Line 3\"\"\")",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.13_file_io",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.14_cal",
        "description": "CSEUFLEX_Intro_Python_GP.intro.14_cal",
        "peekOfCode": "l = len(sys.argv)\nif l == 1:\n  # User didn't specify any input\n  month = datetime.now().month\n  year = datetime.now().year\nelif l == 2:\n  # User didn't specify year\n  month = int(sys.argv[1])\n  year = datetime.now().year \nelif l == 3:",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.14_cal",
        "documentation": {}
    },
    {
        "label": "cal",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.14_cal",
        "description": "CSEUFLEX_Intro_Python_GP.intro.14_cal",
        "peekOfCode": "cal = calendar.TextCalendar()\ncal.prmonth(year, month)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.14_cal",
        "documentation": {}
    },
    {
        "label": "LatLon",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "description": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "peekOfCode": "class LatLon:\n  def __init__(self, lat=0, lon=0):\n    self.lat = lat\n    self.lon = lon\n# Make a class Waypoint that can be passed parameters `name`, `lat`, and `lon` to the\n# constructor. It should inherit from LatLon.\nclass Waypoint(LatLon):\n  def __init__(self, name, lat=0, lon=0):\n    super().__init__(lat, lon)\n    self.name = name",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "documentation": {}
    },
    {
        "label": "Waypoint",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "description": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "peekOfCode": "class Waypoint(LatLon):\n  def __init__(self, name, lat=0, lon=0):\n    super().__init__(lat, lon)\n    self.name = name\n  def __str__(self):\n    return \"<Waypoint '{}' {:f},{}>\".format(self.name, self.lat, self.lon)\n# Make a class Geocache that can be passed parameters `name`, `difficulty`,\n# `size`, `lat`, and `lon` to the constructor. What should it inherit from?\nclass Geocache(Waypoint):\n  def __init__(self, name, difficulty, size, lat=0, lon=0):",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "documentation": {}
    },
    {
        "label": "Geocache",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "description": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "peekOfCode": "class Geocache(Waypoint):\n  def __init__(self, name, difficulty, size, lat=0, lon=0):\n    super().__init__(name, lat, lon)\n    self.difficulty = difficulty\n    self.size = size\n  def __str__(self):\n    return \"<Geocache '{}' {} {} {:f},{}>\".format(self.name, self.difficulty, self.size, self.lat, self.lon)\n# Make a new waypoint and print it out: \"Catacombs\", 41.70505, -121.51521\nwaypoint = Waypoint(\"Catacombs\", 41.70505, -121.51521)\n# Without changing the following line, how can you make it print into something",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "documentation": {}
    },
    {
        "label": "waypoint",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "description": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "peekOfCode": "waypoint = Waypoint(\"Catacombs\", 41.70505, -121.51521)\n# Without changing the following line, how can you make it print into something\n# more human-readable? Hint: Look up the `object.__str__` method\nprint(waypoint)\n# Make a new geocache \"Newberry Views\", diff 1.5, size 2, 44.052137, -121.41556\ngeocache = Geocache(\"Newberry Views\", 1.5, 2, 44.052137, -121.41556)\n# Print it--also make this print more nicely\nprint(geocache)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "documentation": {}
    },
    {
        "label": "geocache",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "description": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "peekOfCode": "geocache = Geocache(\"Newberry Views\", 1.5, 2, 44.052137, -121.41556)\n# Print it--also make this print more nicely\nprint(geocache)",
        "detail": "CSEUFLEX_Intro_Python_GP.intro.15_classes",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.category",
        "description": "CSEUFLEX_Intro_Python_GP.category",
        "peekOfCode": "class Category:\n    def __init__(self, name, products):\n        self.name = name\n        self.products = products\n    def __str__(self):\n        output = \"  \" + self.name + \"\\n\"\n        if len(self.products) < 1:\n            output = \"No products available in this category\"\n        for p in self.products:\n            output += \"    \" + str(p) + \"\\n\"",
        "detail": "CSEUFLEX_Intro_Python_GP.category",
        "documentation": {}
    },
    {
        "label": "centered_avg1",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "description": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "peekOfCode": "def centered_avg1(ints):\n    # max() min()\n    # get the smallest value\n    smallest = min(ints)\n    # get largest value\n    largest = max(ints)\n    # sum up everything except the smallest and largest values\n    sum = 0\n    # iterate over the data\n    for num in ints: ",
        "detail": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "documentation": {}
    },
    {
        "label": "centered_avg2",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "description": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "peekOfCode": "def centered_avg2(ints):\n    # sort the ints\n    ints.sort()\n    # use builtin mean function on a slice of the ints\n    return statistics.mean(ints[1:-1]) # [1, 2, 3, 4, 100] num1 inclusive : num2 exclusive\n# after testing\n# 1 is ~ 30x faster than 2\n# tests\nnumbers = [1, 2, 3, 4, 100]\n# print(centered_avg1(numbers))",
        "detail": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "description": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "peekOfCode": "numbers = [1, 2, 3, 4, 100]\n# print(centered_avg1(numbers))\nimport time\nstart = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()",
        "detail": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "description": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "peekOfCode": "start = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()",
        "detail": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "description": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "peekOfCode": "end = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()\nprint(end - start)",
        "detail": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "description": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "peekOfCode": "start = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()\nprint(end - start)",
        "detail": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "description": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "peekOfCode": "end = time.time()\nprint(end - start)",
        "detail": "CSEUFLEX_Intro_Python_GP.centered_avg",
        "documentation": {}
    },
    {
        "label": "Italker",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.clothing",
        "description": "CSEUFLEX_Intro_Python_GP.clothing",
        "peekOfCode": "class Italker:\n    def say(self, message):\n        pass\nclass Clothing(Product, Italker):\n    def __init__(self, name, price, colour, size):\n        super().__init__(name, price)\n        self.colour = colour\n        self.size = size\n    def say(self, message):\n        print(f\"{self.name} Says {message}\")",
        "detail": "CSEUFLEX_Intro_Python_GP.clothing",
        "documentation": {}
    },
    {
        "label": "Clothing",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.clothing",
        "description": "CSEUFLEX_Intro_Python_GP.clothing",
        "peekOfCode": "class Clothing(Product, Italker):\n    def __init__(self, name, price, colour, size):\n        super().__init__(name, price)\n        self.colour = colour\n        self.size = size\n    def say(self, message):\n        print(f\"{self.name} Says {message}\")\n    def __str__(self):\n        return super().__str__() + f\" comes in {self.colour}, {self.size}\"",
        "detail": "CSEUFLEX_Intro_Python_GP.clothing",
        "documentation": {}
    },
    {
        "label": "lst1",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day1",
        "description": "CSEUFLEX_Intro_Python_GP.day1",
        "peekOfCode": "lst1 = []\nlst_empty = list()\n# print(my_list)\n# create a list with numbers 1, 2, 3, 4, 5\nlst2 = [1, 2, 3, 4, 5]\n# add an element 24 to lst1\nlst1.append(24)\n# lst1.append(240)\n# lst1.append(32)\n# lst1.append(120)",
        "detail": "CSEUFLEX_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "lst_empty",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day1",
        "description": "CSEUFLEX_Intro_Python_GP.day1",
        "peekOfCode": "lst_empty = list()\n# print(my_list)\n# create a list with numbers 1, 2, 3, 4, 5\nlst2 = [1, 2, 3, 4, 5]\n# add an element 24 to lst1\nlst1.append(24)\n# lst1.append(240)\n# lst1.append(32)\n# lst1.append(120)\n# print(lst1)",
        "detail": "CSEUFLEX_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "lst2",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day1",
        "description": "CSEUFLEX_Intro_Python_GP.day1",
        "peekOfCode": "lst2 = [1, 2, 3, 4, 5]\n# add an element 24 to lst1\nlst1.append(24)\n# lst1.append(240)\n# lst1.append(32)\n# lst1.append(120)\n# print(lst1)\n# # print all values in lst2\n# print(lst2)\n# range(9, 10)",
        "detail": "CSEUFLEX_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day1",
        "description": "CSEUFLEX_Intro_Python_GP.day1",
        "peekOfCode": "numbers = [1, 2, 3, 4]\n# squares = []\n# for num in numbers:\n#     squares.append(num * num)\n# squares = [num * num for num in numbers]\n# print(numbers)\n# print(squares)\n# Filtering with a list comprehension\n# evens = []\n# for num in numbers:",
        "detail": "CSEUFLEX_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day1",
        "description": "CSEUFLEX_Intro_Python_GP.day1",
        "peekOfCode": "names = [\"Sarah\", \"jorge\", \"sam\", \"frank\", \"bob\", \"sandy\"]\ns_names = [name.capitalize() for name in names if name[0].lower() == 's']\n# print(s_names)\n# Dictionaries\n# Create a new dictionary\n# empty\nd = {}\nd2 = dict()\n# key value pairs\nstudent = {",
        "detail": "CSEUFLEX_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "s_names",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day1",
        "description": "CSEUFLEX_Intro_Python_GP.day1",
        "peekOfCode": "s_names = [name.capitalize() for name in names if name[0].lower() == 's']\n# print(s_names)\n# Dictionaries\n# Create a new dictionary\n# empty\nd = {}\nd2 = dict()\n# key value pairs\nstudent = {\n    \"name\": \"Amin\",",
        "detail": "CSEUFLEX_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day1",
        "description": "CSEUFLEX_Intro_Python_GP.day1",
        "peekOfCode": "d = {}\nd2 = dict()\n# key value pairs\nstudent = {\n    \"name\": \"Amin\",\n    \"cohort\": \"cseuflex\",\n    \"current_sprint\": \"Intro to Python\"\n} \n# access an element via its key\nstudent[\"friends\"] = [\"bob\", \"dave\", \"steve\"]",
        "detail": "CSEUFLEX_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day1",
        "description": "CSEUFLEX_Intro_Python_GP.day1",
        "peekOfCode": "d2 = dict()\n# key value pairs\nstudent = {\n    \"name\": \"Amin\",\n    \"cohort\": \"cseuflex\",\n    \"current_sprint\": \"Intro to Python\"\n} \n# access an element via its key\nstudent[\"friends\"] = [\"bob\", \"dave\", \"steve\"]\nprint(student[\"friends\"])",
        "detail": "CSEUFLEX_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day1",
        "description": "CSEUFLEX_Intro_Python_GP.day1",
        "peekOfCode": "student = {\n    \"name\": \"Amin\",\n    \"cohort\": \"cseuflex\",\n    \"current_sprint\": \"Intro to Python\"\n} \n# access an element via its key\nstudent[\"friends\"] = [\"bob\", \"dave\", \"steve\"]\nprint(student[\"friends\"])",
        "detail": "CSEUFLEX_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "student[\"friends\"]",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day1",
        "description": "CSEUFLEX_Intro_Python_GP.day1",
        "peekOfCode": "student[\"friends\"] = [\"bob\", \"dave\", \"steve\"]\nprint(student[\"friends\"])",
        "detail": "CSEUFLEX_Intro_Python_GP.day1",
        "documentation": {}
    },
    {
        "label": "mult2",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "def mult2(x):\n    return x * 2\n# define a doubling function that passes args by reference\ndef mult2_list(l):\n    for i in range(len(l)):\n        l[i] *= 2\n# # try out the functions\n# a = 12\n# new_number = mult2(a)\n# print(new_number)",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "mult2_list",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "def mult2_list(l):\n    for i in range(len(l)):\n        l[i] *= 2\n# # try out the functions\n# a = 12\n# new_number = mult2(a)\n# print(new_number)\n# lst = [2, 4, 6, 8] # mutable\n# mult2_list(lst)\n# for num in lst:",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "centered_avg1",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "def centered_avg1(ints):\n    pass\ndef centered_avg2(ints):\n    pass\n# tests\nnumbers = [1, 41, 34, 29, 50, 50]\nimport time\nstart = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "centered_avg2",
        "kind": 2,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "def centered_avg2(ints):\n    pass\n# tests\nnumbers = [1, 41, 34, 29, 50, 50]\nimport time\nstart = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()\nprint(end - start)",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "x = 5\ny = 7\na = \"5\"\nb = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 # \n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "y = 7\na = \"5\"\nb = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 # \n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]\n# b = 23423542",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "a = \"5\"\nb = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 # \n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]\n# b = 23423542\ndef mult2(x):",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "b = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 # \n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]\n# b = 23423542\ndef mult2(x):\n    return x * 2",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "numbers = [1, 41, 34, 29, 50, 50]\nimport time\nstart = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "start = time.time()\nfor i in range(1000):\n    centered_avg1(numbers)\nend = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "end = time.time()\nprint(end - start)\nprint(\"-----------------------\")\nstart = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()\nprint(end - start)\n# a = 41 + 34 + 29 + 50\n# print(a)",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "start = time.time()\nfor i in range(1000):\n    centered_avg2(numbers)\nend = time.time()\nprint(end - start)\n# a = 41 + 34 + 29 + 50\n# print(a)\n# b = a // 4\n# print(b)",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day2",
        "description": "CSEUFLEX_Intro_Python_GP.day2",
        "peekOfCode": "end = time.time()\nprint(end - start)\n# a = 41 + 34 + 29 + 50\n# print(a)\n# b = a // 4\n# print(b)",
        "detail": "CSEUFLEX_Intro_Python_GP.day2",
        "documentation": {}
    },
    {
        "label": "Vec2",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.day3",
        "description": "CSEUFLEX_Intro_Python_GP.day3",
        "peekOfCode": "class Vec2:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\nv1 = Vec2(12, 45) # constructor is called",
        "detail": "CSEUFLEX_Intro_Python_GP.day3",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day3",
        "description": "CSEUFLEX_Intro_Python_GP.day3",
        "peekOfCode": "v1 = Vec2(12, 45) # constructor is called",
        "detail": "CSEUFLEX_Intro_Python_GP.day3",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.day4",
        "description": "CSEUFLEX_Intro_Python_GP.day4",
        "peekOfCode": "class Entity:\n    def __init__(self, id, x, y):\n        self.id = id\n        self.x = x\n        self.y = y\n    def __str__(self):\n         return f\"{self.id}: x: {self.x}, y: {self.y}\"\nclass Mob(Entity):\n    def __init__(self, id, x, y, speed):\n        super().__init__(id, x, y)",
        "detail": "CSEUFLEX_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Mob",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.day4",
        "description": "CSEUFLEX_Intro_Python_GP.day4",
        "peekOfCode": "class Mob(Entity):\n    def __init__(self, id, x, y, speed):\n        super().__init__(id, x, y)\n        self.speed = speed\n    def move(self, dir):\n        if dir == \"n\":\n            self.y -= self.speed\n        elif dir == \"s\":\n            self.y += self.speed\n        elif dir == \"w\":",
        "detail": "CSEUFLEX_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.day4",
        "description": "CSEUFLEX_Intro_Python_GP.day4",
        "peekOfCode": "class Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n        self.contents = [Treasure(\"Gold Chest\", 10, \"A Small Shiny Chest\")]\n# Items\nclass Item:\n    def __init__(self, name, description=\"\"):\n        self.name = name\n        self.description = description",
        "detail": "CSEUFLEX_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.day4",
        "description": "CSEUFLEX_Intro_Python_GP.day4",
        "peekOfCode": "class Item:\n    def __init__(self, name, description=\"\"):\n        self.name = name\n        self.description = description\n## Weapon is_a Item\nclass Weapon(Item):\n    def __init__(self, name, power, description=\"\"):\n        super.__init__(name, description)\n        self.power = power\n# Treasure",
        "detail": "CSEUFLEX_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Weapon",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.day4",
        "description": "CSEUFLEX_Intro_Python_GP.day4",
        "peekOfCode": "class Weapon(Item):\n    def __init__(self, name, power, description=\"\"):\n        super.__init__(name, description)\n        self.power = power\n# Treasure\nclass Treasure(Item):\n    def __init__(self, name, value, description=\"\"):\n        super.__init__(name, description)\n        self.value = value\n# Player",
        "detail": "CSEUFLEX_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Treasure",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.day4",
        "description": "CSEUFLEX_Intro_Python_GP.day4",
        "peekOfCode": "class Treasure(Item):\n    def __init__(self, name, value, description=\"\"):\n        super.__init__(name, description)\n        self.value = value\n# Player\nclass Player:\n    def __init__(self, starting_room):\n        self.current_room = starting_room\n        self.inventory = [Weapon(\"Knife\", 20, \"A Rusty old knife\")]\n        self.gold = 0",
        "detail": "CSEUFLEX_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.day4",
        "description": "CSEUFLEX_Intro_Python_GP.day4",
        "peekOfCode": "class Player:\n    def __init__(self, starting_room):\n        self.current_room = starting_room\n        self.inventory = [Weapon(\"Knife\", 20, \"A Rusty old knife\")]\n        self.gold = 0\n    def move(self, direction):\n        # check if the current room has direction_to\n            # return current_rooms direction_to\n        # otherwise\n            # tell the player they can not go that way",
        "detail": "CSEUFLEX_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day4",
        "description": "CSEUFLEX_Intro_Python_GP.day4",
        "peekOfCode": "e = Entity(0, 10, 10)\nm = Mob(1, 10, 20, 2)\n# print(e)\n# print(m)\n# Room\nclass Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n        self.contents = [Treasure(\"Gold Chest\", 10, \"A Small Shiny Chest\")]",
        "detail": "CSEUFLEX_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.day4",
        "description": "CSEUFLEX_Intro_Python_GP.day4",
        "peekOfCode": "m = Mob(1, 10, 20, 2)\n# print(e)\n# print(m)\n# Room\nclass Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n        self.contents = [Treasure(\"Gold Chest\", 10, \"A Small Shiny Chest\")]\n# Items",
        "detail": "CSEUFLEX_Intro_Python_GP.day4",
        "documentation": {}
    },
    {
        "label": "Equipment",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.equipment",
        "description": "CSEUFLEX_Intro_Python_GP.equipment",
        "peekOfCode": "class Equipment(Product):\n    def __init__(self, name, price, style, weight):\n        super().__init__(name, price)\n        self.style = style\n        self.weight = weight\n    def __str__(self):\n        return super().__str__() + f\" comes in {self.style}, {self.weight}\"",
        "detail": "CSEUFLEX_Intro_Python_GP.equipment",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.game",
        "description": "CSEUFLEX_Intro_Python_GP.game",
        "peekOfCode": "running = True\nfoyer = Room(\"Foyer\", \"It is a large foyer with exit to the south\")\ncourtyard = Room(\"Courtyard\", \"The courtyard is broken but hs exit to the house north\")\nplayer = Player(foyer)\n# REPL === Parser\nwhile running:\n    cmd = input(\">>> \")\n    # split the cmd in to commands\n    commands = [1] # split the cmd up here?\n    # if commands length is 1",
        "detail": "CSEUFLEX_Intro_Python_GP.game",
        "documentation": {}
    },
    {
        "label": "foyer",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.game",
        "description": "CSEUFLEX_Intro_Python_GP.game",
        "peekOfCode": "foyer = Room(\"Foyer\", \"It is a large foyer with exit to the south\")\ncourtyard = Room(\"Courtyard\", \"The courtyard is broken but hs exit to the house north\")\nplayer = Player(foyer)\n# REPL === Parser\nwhile running:\n    cmd = input(\">>> \")\n    # split the cmd in to commands\n    commands = [1] # split the cmd up here?\n    # if commands length is 1\n    if len(commands) == 1:",
        "detail": "CSEUFLEX_Intro_Python_GP.game",
        "documentation": {}
    },
    {
        "label": "courtyard",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.game",
        "description": "CSEUFLEX_Intro_Python_GP.game",
        "peekOfCode": "courtyard = Room(\"Courtyard\", \"The courtyard is broken but hs exit to the house north\")\nplayer = Player(foyer)\n# REPL === Parser\nwhile running:\n    cmd = input(\">>> \")\n    # split the cmd in to commands\n    commands = [1] # split the cmd up here?\n    # if commands length is 1\n    if len(commands) == 1:\n        if cmd in [\"n\", \"s\", \"e\", \"w\"]:",
        "detail": "CSEUFLEX_Intro_Python_GP.game",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.game",
        "description": "CSEUFLEX_Intro_Python_GP.game",
        "peekOfCode": "player = Player(foyer)\n# REPL === Parser\nwhile running:\n    cmd = input(\">>> \")\n    # split the cmd in to commands\n    commands = [1] # split the cmd up here?\n    # if commands length is 1\n    if len(commands) == 1:\n        if cmd in [\"n\", \"s\", \"e\", \"w\"]:\n            player.move(cmd)",
        "detail": "CSEUFLEX_Intro_Python_GP.game",
        "documentation": {}
    },
    {
        "label": "playing",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.guessing",
        "description": "CSEUFLEX_Intro_Python_GP.guessing",
        "peekOfCode": "playing = True\nnumber = 45\nwhile playing: # LOOP\n    val = int(input(\" Guess the number i am thinking of >>> \")) # READ\n    if val == number: # EVAL\n        print(\"You win\") # PRINT\n        playing = False\n    else:\n        print(\"Not correct!!\")\n# possible improvements",
        "detail": "CSEUFLEX_Intro_Python_GP.guessing",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.guessing",
        "description": "CSEUFLEX_Intro_Python_GP.guessing",
        "peekOfCode": "number = 45\nwhile playing: # LOOP\n    val = int(input(\" Guess the number i am thinking of >>> \")) # READ\n    if val == number: # EVAL\n        print(\"You win\") # PRINT\n        playing = False\n    else:\n        print(\"Not correct!!\")\n# possible improvements\n# random number to start?",
        "detail": "CSEUFLEX_Intro_Python_GP.guessing",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.product",
        "description": "CSEUFLEX_Intro_Python_GP.product",
        "peekOfCode": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    def __str__(self):\n        return f\"{self.name}\\t£{self.price:.2f}\"",
        "detail": "CSEUFLEX_Intro_Python_GP.product",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.rps",
        "description": "CSEUFLEX_Intro_Python_GP.rps",
        "peekOfCode": "wins = 0\nlosses = 0\nties = 0\nchoices = ['r', 'p', 's']\n# write a REPL to run the game",
        "detail": "CSEUFLEX_Intro_Python_GP.rps",
        "documentation": {}
    },
    {
        "label": "losses",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.rps",
        "description": "CSEUFLEX_Intro_Python_GP.rps",
        "peekOfCode": "losses = 0\nties = 0\nchoices = ['r', 'p', 's']\n# write a REPL to run the game",
        "detail": "CSEUFLEX_Intro_Python_GP.rps",
        "documentation": {}
    },
    {
        "label": "ties",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.rps",
        "description": "CSEUFLEX_Intro_Python_GP.rps",
        "peekOfCode": "ties = 0\nchoices = ['r', 'p', 's']\n# write a REPL to run the game",
        "detail": "CSEUFLEX_Intro_Python_GP.rps",
        "documentation": {}
    },
    {
        "label": "choices",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.rps",
        "description": "CSEUFLEX_Intro_Python_GP.rps",
        "peekOfCode": "choices = ['r', 'p', 's']\n# write a REPL to run the game",
        "detail": "CSEUFLEX_Intro_Python_GP.rps",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "CSEUFLEX_Intro_Python_GP.store",
        "description": "CSEUFLEX_Intro_Python_GP.store",
        "peekOfCode": "class Store:\n    def __init__(self, name, categories):\n        self.name = name\n        self.categories = categories\n    def __str__(self):\n        output = f\"{self.name}\\n\"\n        for i, c in enumerate(self.categories):\n            output += \"   \" + str(i + 1) + \": \" + c.name + \"\\n\"\n        output += \"   \" + str(i + 2) + \": Exit\"\n        return output",
        "detail": "CSEUFLEX_Intro_Python_GP.store",
        "documentation": {}
    },
    {
        "label": "fiction",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.store",
        "description": "CSEUFLEX_Intro_Python_GP.store",
        "peekOfCode": "fiction = Category(\"Fiction\", [Clothing(\"Some Product\",30.78, \"red\", 20), Clothing(\"Other Product\", 40, \"Orange\", 25)])\nnon_fiction = Category(\"Non Fiction\", [])\ngolf_balls = Category(\"Golf Balls\", [])\nother = Category(\"Some other Cat\", [])\n# store class that has a name and a categories\nclass Store:\n    def __init__(self, name, categories):\n        self.name = name\n        self.categories = categories\n    def __str__(self):",
        "detail": "CSEUFLEX_Intro_Python_GP.store",
        "documentation": {}
    },
    {
        "label": "non_fiction",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.store",
        "description": "CSEUFLEX_Intro_Python_GP.store",
        "peekOfCode": "non_fiction = Category(\"Non Fiction\", [])\ngolf_balls = Category(\"Golf Balls\", [])\nother = Category(\"Some other Cat\", [])\n# store class that has a name and a categories\nclass Store:\n    def __init__(self, name, categories):\n        self.name = name\n        self.categories = categories\n    def __str__(self):\n        output = f\"{self.name}\\n\"",
        "detail": "CSEUFLEX_Intro_Python_GP.store",
        "documentation": {}
    },
    {
        "label": "golf_balls",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.store",
        "description": "CSEUFLEX_Intro_Python_GP.store",
        "peekOfCode": "golf_balls = Category(\"Golf Balls\", [])\nother = Category(\"Some other Cat\", [])\n# store class that has a name and a categories\nclass Store:\n    def __init__(self, name, categories):\n        self.name = name\n        self.categories = categories\n    def __str__(self):\n        output = f\"{self.name}\\n\"\n        for i, c in enumerate(self.categories):",
        "detail": "CSEUFLEX_Intro_Python_GP.store",
        "documentation": {}
    },
    {
        "label": "other",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.store",
        "description": "CSEUFLEX_Intro_Python_GP.store",
        "peekOfCode": "other = Category(\"Some other Cat\", [])\n# store class that has a name and a categories\nclass Store:\n    def __init__(self, name, categories):\n        self.name = name\n        self.categories = categories\n    def __str__(self):\n        output = f\"{self.name}\\n\"\n        for i, c in enumerate(self.categories):\n            output += \"   \" + str(i + 1) + \": \" + c.name + \"\\n\"",
        "detail": "CSEUFLEX_Intro_Python_GP.store",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.store",
        "description": "CSEUFLEX_Intro_Python_GP.store",
        "peekOfCode": "s = Store(\"Books n thingz\", [fiction, non_fiction, golf_balls, other])\n# shop_open = True\nselection = 0\nwhile selection != len(s.categories) + 1:\n    print(s) # self.__repr__() => self.__str__()\n    selection = int(input(\"Select a category. \"))\n    if selection == len(s.categories) + 1:\n        print(\"Thanks for shopping\")\n    else:\n        print(f\"{s.categories[selection - 1]}\")",
        "detail": "CSEUFLEX_Intro_Python_GP.store",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 5,
        "importPath": "CSEUFLEX_Intro_Python_GP.store",
        "description": "CSEUFLEX_Intro_Python_GP.store",
        "peekOfCode": "selection = 0\nwhile selection != len(s.categories) + 1:\n    print(s) # self.__repr__() => self.__str__()\n    selection = int(input(\"Select a category. \"))\n    if selection == len(s.categories) + 1:\n        print(\"Thanks for shopping\")\n    else:\n        print(f\"{s.categories[selection - 1]}\")",
        "detail": "CSEUFLEX_Intro_Python_GP.store",
        "documentation": {}
    },
    {
        "label": "print_animals",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "description": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "peekOfCode": "def print_animals(animal_list): # O(n)\n    for i in range(len(animal_list)): # O(n)\n        print(animal_list[i]) # O(1)\n\"\"\"\nGetting the time complexity of an iterative solution\n1. Compute the Big-O for each line in isolation.\n2. If something is in a loop, multiply it's Big-O by the loop for the total.\n3. If two things happen sequentially, add the Big-Os.\n4. Drop leading multiplicative constants from each Big-O.\n5. From all the Big-Os that are added, drop all but the biggest, dominating one.",
        "detail": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "documentation": {}
    },
    {
        "label": "print_animals_a",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "description": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "peekOfCode": "def print_animals_a(animal_list): # O(n) Linear\n    for i in range(len(animals)): # O(n)\n        print(animal_list[i]) # O(1) * n (1 * n)\n        my_number = 0  # O(1) (1 * n)\n        # O(2 * n)\n        for _ in range(100000): # O(100000) (100000 * n)\n            my_number += 1  # O(1) (1 * 100000) O(100000)\n    # O(100003 * n) => O(n)\n    # O(100000 * 1) => O(1)\n    # O(n)",
        "detail": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "documentation": {}
    },
    {
        "label": "print_animal_pairs",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "description": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "peekOfCode": "def print_animal_pairs(): # O(n ^ 2)\n    for animal_1 in animals: # O(n)\n        for animal_2 in animals: # O(n)\n            print(f\"{animal_1} - {animal_2}\") # O(1)\n# Print a list of all possible animal triples\ndef print_animal_triples():\n    for animal_1 in animals:\n        for animal_2 in animals:\n            for animal_3 in animals:\n                print(f\"{animal_1} - {animal_2} - {animal_3}\")",
        "detail": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "documentation": {}
    },
    {
        "label": "print_animal_triples",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "description": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "peekOfCode": "def print_animal_triples():\n    for animal_1 in animals:\n        for animal_2 in animals:\n            for animal_3 in animals:\n                print(f\"{animal_1} - {animal_2} - {animal_3}\")\n# Print a list of all possible animal triples\ndef print_animal_triples_a():\n        # O(n)\n        for animal in animals:\n            print(animal)",
        "detail": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "documentation": {}
    },
    {
        "label": "print_animal_triples_a",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "description": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "peekOfCode": "def print_animal_triples_a():\n        # O(n)\n        for animal in animals:\n            print(animal)\n        # O(n^3)\n        for animal_1 in animals:\n            for animal_2 in animals:\n                for animal_3 in animals:\n                    print(f\"{animal_1} - {animal_2} - {animal_3}\")\n# Exponential Time",
        "detail": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "documentation": {}
    },
    {
        "label": "get_animal_combos",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "description": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "peekOfCode": "def get_animal_combos(l):\n    list_length = len(l)\n    if list_length == 0:\n        return [[]]\n    else:\n        animal_combos = []\n        previous_combos = get_animal_combos(l[1:])\n        for combo in previous_combos:\n            animal_combos.append(combo)\n            animal_combos.append(combo + [l[0]])",
        "detail": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "documentation": {}
    },
    {
        "label": "get_all_arrangements",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "description": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "peekOfCode": "def get_all_arrangements(l):\n    list_length = len(l)\n    if list_length <= 1:\n        return [l]\n    else:\n        arrangements = []\n        previous_arrangements = get_all_arrangements( l[1:] )\n        for previous_arrangement in previous_arrangements:\n            for i in range(len(previous_arrangement) + 1):\n                arrangements.append( previous_arrangement[i:] + [l[0]] + previous_arrangement[:i] )",
        "detail": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "documentation": {}
    },
    {
        "label": "free_animals",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "description": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "peekOfCode": "def free_animals(animals):\n    while len(animals) > 0:\n        animals = animals[0:len(animals) // 2]",
        "detail": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "documentation": {}
    },
    {
        "label": "animals",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "description": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "peekOfCode": "animals = ['Duck', 'Jackal', 'Hippo', 'Aardvark', 'Cat', 'Flamingo', 'Iguana', 'Giraffe', 'Elephant', 'Bear']\n# Linear time\ndef print_animals(animal_list): # O(n)\n    for i in range(len(animal_list)): # O(n)\n        print(animal_list[i]) # O(1)\n\"\"\"\nGetting the time complexity of an iterative solution\n1. Compute the Big-O for each line in isolation.\n2. If something is in a loop, multiply it's Big-O by the loop for the total.\n3. If two things happen sequentially, add the Big-Os.",
        "detail": "CSEUFLEX_Sorting_gp.0_time_complexity",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True\n    return False\n# print(linear_search(my_random, searching_for))\n# Binary Search\n\"\"\"\nKey Points\n- Binary search requires sorted data",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "find_value_binary",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "def find_value_binary(arr, value):\n    first = 0\n    last = (len(arr) - 1)\n    found = False\n    while first <= last and not found:\n        # find middle using integer divsion\n        middle = (first + last) // 2\n        if arr[middle] == value:\n            found = True\n        else:",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "my_range",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "my_range = 100\nmy_size = 100\nmy_random = random.sample(range(my_range), my_size)\nprint(my_random)\nsearching_for = 7\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True\n    return False",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "my_size",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "my_size = 100\nmy_random = random.sample(range(my_range), my_size)\nprint(my_random)\nsearching_for = 7\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True\n    return False\n# print(linear_search(my_random, searching_for))",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "my_random",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "my_random = random.sample(range(my_range), my_size)\nprint(my_random)\nsearching_for = 7\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True\n    return False\n# print(linear_search(my_random, searching_for))\n# Binary Search",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "searching_for",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "searching_for = 7\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True\n    return False\n# print(linear_search(my_random, searching_for))\n# Binary Search\n\"\"\"\nKey Points",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "start = time.time()\nprint(linear_search(my_random, searching_for))\nend = time.time()\nprint(f\"Runtime: {end - start}\")\nprint(\"Linear Again\")\nstart = time.time()\nprint(linear_search(my_random, searching_for))\nend = time.time()\nprint(f\"Runtime: {end - start}\")\nprint(\"Binary\")",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "end = time.time()\nprint(f\"Runtime: {end - start}\")\nprint(\"Linear Again\")\nstart = time.time()\nprint(linear_search(my_random, searching_for))\nend = time.time()\nprint(f\"Runtime: {end - start}\")\nprint(\"Binary\")\nstart = time.time()\nmy_random.sort()",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "start = time.time()\nprint(linear_search(my_random, searching_for))\nend = time.time()\nprint(f\"Runtime: {end - start}\")\nprint(\"Binary\")\nstart = time.time()\nmy_random.sort()\nprint(find_value_binary(my_random, searching_for))\nend = time.time()\nprint(f\"Runtime: {end - start}\")",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "end = time.time()\nprint(f\"Runtime: {end - start}\")\nprint(\"Binary\")\nstart = time.time()\nmy_random.sort()\nprint(find_value_binary(my_random, searching_for))\nend = time.time()\nprint(f\"Runtime: {end - start}\")\nprint(\"Binary _after_ sort\")\nstart = time.time()",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "start = time.time()\nmy_random.sort()\nprint(find_value_binary(my_random, searching_for))\nend = time.time()\nprint(f\"Runtime: {end - start}\")\nprint(\"Binary _after_ sort\")\nstart = time.time()\nprint(find_value_binary(my_random, searching_for))\nend = time.time()\nprint(f\"Runtime: {end - start}\")",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "end = time.time()\nprint(f\"Runtime: {end - start}\")\nprint(\"Binary _after_ sort\")\nstart = time.time()\nprint(find_value_binary(my_random, searching_for))\nend = time.time()\nprint(f\"Runtime: {end - start}\")",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "start = time.time()\nprint(find_value_binary(my_random, searching_for))\nend = time.time()\nprint(f\"Runtime: {end - start}\")",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.1_linear_search",
        "description": "CSEUFLEX_Sorting_gp.1_linear_search",
        "peekOfCode": "end = time.time()\nprint(f\"Runtime: {end - start}\")",
        "detail": "CSEUFLEX_Sorting_gp.1_linear_search",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.3_insertion_sort",
        "description": "CSEUFLEX_Sorting_gp.3_insertion_sort",
        "peekOfCode": "def insertion_sort(list_to_sort):\n    # seperate the first element and think of it as sorted\n    # for all other items, starting at second index (1)\n    for i in range(1, len(list_to_sort)):\n        # put the current number in to a temp variable\n        temp = list_to_sort[i]\n        j = i\n        # keep looking left, until we find where it belongs\n        while j > 0 and temp < list_to_sort[j - 1]:\n            # as we look left shift the items to the right as we iterate",
        "detail": "CSEUFLEX_Sorting_gp.3_insertion_sort",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.3_insertion_sort",
        "description": "CSEUFLEX_Sorting_gp.3_insertion_sort",
        "peekOfCode": "l = [8, 2, 5, 4, 1, 3]\nprint(l)\n# Implement an insertion sort algorithm\ndef insertion_sort(list_to_sort):\n    # seperate the first element and think of it as sorted\n    # for all other items, starting at second index (1)\n    for i in range(1, len(list_to_sort)):\n        # put the current number in to a temp variable\n        temp = list_to_sort[i]\n        j = i",
        "detail": "CSEUFLEX_Sorting_gp.3_insertion_sort",
        "documentation": {}
    },
    {
        "label": "countdown",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.5_countdown",
        "description": "CSEUFLEX_Sorting_gp.5_countdown",
        "peekOfCode": "def countdown(n):  # label\n    if n == 0: # condition\n        return\n    print(n) # body\n    countdown(n - 1)  # decrement\n# n = 10\n# def countdown_i(n):\n#     while (n > 0): # condition and label\n#         print(n) # body\n#         n -= 1 # decrement",
        "detail": "CSEUFLEX_Sorting_gp.5_countdown",
        "documentation": {}
    },
    {
        "label": "recursive_fib",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.6_nth_fib",
        "description": "CSEUFLEX_Sorting_gp.6_nth_fib",
        "peekOfCode": "def recursive_fib(n):\n    # base case\n    # test for negatives (TODO)\n    # if n is 0\n    if n == 0:\n        return 0\n    # return 0\n    # if n is 1\n    if n == 1:\n        return 1",
        "detail": "CSEUFLEX_Sorting_gp.6_nth_fib",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 5,
        "importPath": "CSEUFLEX_Sorting_gp.6_nth_fib",
        "description": "CSEUFLEX_Sorting_gp.6_nth_fib",
        "peekOfCode": "fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nfib[9]",
        "detail": "CSEUFLEX_Sorting_gp.6_nth_fib",
        "documentation": {}
    },
    {
        "label": "quick_sort_A",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.8_quick_sort",
        "description": "CSEUFLEX_Sorting_gp.8_quick_sort",
        "peekOfCode": "def quick_sort_A( books, low, high ):\n    # base case\n    if low >= high:\n        return books\n    # recursive case\n    else:\n        # divide\n        pivot_index = low\n        # for each element in subarray\n        for i in range(low, high):",
        "detail": "CSEUFLEX_Sorting_gp.8_quick_sort",
        "documentation": {}
    },
    {
        "label": "quick_sort_b",
        "kind": 2,
        "importPath": "CSEUFLEX_Sorting_gp.8_quick_sort",
        "description": "CSEUFLEX_Sorting_gp.8_quick_sort",
        "peekOfCode": "def quick_sort_b( books ):\n    stack = []\n    left = []\n    right = []\n    # put the original arr of books on the stack at index 0\n    stack.insert(0, books)\n    books = []\n    # while there are still subarrays on the stack to be sorted\n    while len(stack) > 0:\n        # pop the next subarray off the stack to sort",
        "detail": "CSEUFLEX_Sorting_gp.8_quick_sort",
        "documentation": {}
    },
    {
        "label": "radius",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.00_demo",
        "description": "CSEUFLX_Algorithms_GP.00_demo",
        "peekOfCode": "radius = 3\narea = math.pi * radius * radius\nprint(f'The area of the circle is {area:.3f} ft\\u00b2')",
        "detail": "CSEUFLX_Algorithms_GP.00_demo",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.00_demo",
        "description": "CSEUFLX_Algorithms_GP.00_demo",
        "peekOfCode": "area = math.pi * radius * radius\nprint(f'The area of the circle is {area:.3f} ft\\u00b2')",
        "detail": "CSEUFLX_Algorithms_GP.00_demo",
        "documentation": {}
    },
    {
        "label": "divides_self",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.01_demo",
        "description": "CSEUFLX_Algorithms_GP.01_demo",
        "peekOfCode": "def divides_self(num):\n  # TODO\n  # PLAN\n  # Loop through digits in the number\n  #   - Use % to get the rightmost digit\n  #   - Use / to discard the rightmost digit\n  #   - Return false if dividing by a digit leads to a remainder \n  #   OR if we are trying to divide by 0\n  # Return true if the loop exits (all numbers divided evenly)\n  # set a temp value variable to the number",
        "detail": "CSEUFLX_Algorithms_GP.01_demo",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "class Item:\n    def __init__(self, name, weight, value):\n        self.name = name\n        self.weight = weight\n        self.value = value\n        self.efficiency = 0\n    def __str__(self):\n        return f'{self.name}, {self.weight} lbs, ${self.value}'\nsmall_cave = []\nmedium_cave = []",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "fill_cave_with_items",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "def fill_cave_with_items():\n    '''Randomly generates Item objects and \n    creates caves of different sizes for testing\n    '''\n    names = [\"painting\", \"jewel\", \"coin\", \"statue\", \"treasure chest\", \n              \"gold\", \"silver\", \"sword\", \"goblet\", \"hat\"]\n    for _ in range(5):\n        n = names[random.randint(0,4)]\n        w = random.randint(1, 25)\n        v = random.randint(1, 100)",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "print_results",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "def print_results(items, knapsack):\n    '''Print out contents of what the algorithm  \n    calculated should be added to the knapsack\n    '''\n    # print(f'\\nItems in the cave:')\n    # for i in items:\n    #     print(i)\n    print('\\nBest items to put in knapsack: ')\n    for item in knapsack:\n        print(f'-{item}')",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "naive_fill_knapsack",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "def naive_fill_knapsack(sack, items):\n    '''# Put highest value items in knapsack until full\n    (other basic, naive approaches exist)\n    '''\n    # TODO - sort items by value\n    # TODO - put most valuable items in knapsack until full\n    return sack\ndef brute_force_fill_knapsack(sack, items):\n    ''' Try every combination to find the best'''\n    # TODO - generate all possible combinations of items",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "brute_force_fill_knapsack",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "def brute_force_fill_knapsack(sack, items):\n    ''' Try every combination to find the best'''\n    # TODO - generate all possible combinations of items\n    # TODO - calculate the value of all combinations\n        # find the combo with the highest value\n    return sack\ndef greedy_fill_knapsack(sack, items):\n    '''Use ratio of [value] / [weight] \n    to choose items for knapsack\n    '''",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "greedy_fill_knapsack",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "def greedy_fill_knapsack(sack, items):\n    '''Use ratio of [value] / [weight] \n    to choose items for knapsack\n    '''\n    # TODO - calculate efficiencies\n    # TODO - sort items by efficiency\n    # TODO - put items in knapsack until full\n    return sack\n# TESTS -\n# Below are a series of tests that can be utilized to demonstrate",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "small_cave",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "small_cave = []\nmedium_cave = []\nlarge_cave = []\ndef fill_cave_with_items():\n    '''Randomly generates Item objects and \n    creates caves of different sizes for testing\n    '''\n    names = [\"painting\", \"jewel\", \"coin\", \"statue\", \"treasure chest\", \n              \"gold\", \"silver\", \"sword\", \"goblet\", \"hat\"]\n    for _ in range(5):",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "medium_cave",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "medium_cave = []\nlarge_cave = []\ndef fill_cave_with_items():\n    '''Randomly generates Item objects and \n    creates caves of different sizes for testing\n    '''\n    names = [\"painting\", \"jewel\", \"coin\", \"statue\", \"treasure chest\", \n              \"gold\", \"silver\", \"sword\", \"goblet\", \"hat\"]\n    for _ in range(5):\n        n = names[random.randint(0,4)]",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "large_cave",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "large_cave = []\ndef fill_cave_with_items():\n    '''Randomly generates Item objects and \n    creates caves of different sizes for testing\n    '''\n    names = [\"painting\", \"jewel\", \"coin\", \"statue\", \"treasure chest\", \n              \"gold\", \"silver\", \"sword\", \"goblet\", \"hat\"]\n    for _ in range(5):\n        n = names[random.randint(0,4)]\n        w = random.randint(1, 25)",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "knapsack",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "knapsack = []\n# Test 1 - Naive\nprint('\\nStarting test 1, naive approach...')\nitems = large_cave\nstart = time.time()\nknapsack = naive_fill_knapsack(knapsack, items)\nprint_results(items, knapsack)\n# # Test 2 - Brute Force\n# print('Starting test 2, brute force...')\n# items = medium_cave",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "items = large_cave\nstart = time.time()\nknapsack = naive_fill_knapsack(knapsack, items)\nprint_results(items, knapsack)\n# # Test 2 - Brute Force\n# print('Starting test 2, brute force...')\n# items = medium_cave\n# start = time.time()\n# knapsack = brute_force_fill_knapsack(knapsack, items)\n# print_results(items, knapsack)",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "start = time.time()\nknapsack = naive_fill_knapsack(knapsack, items)\nprint_results(items, knapsack)\n# # Test 2 - Brute Force\n# print('Starting test 2, brute force...')\n# items = medium_cave\n# start = time.time()\n# knapsack = brute_force_fill_knapsack(knapsack, items)\n# print_results(items, knapsack)\n# Test 3 - Brute Force",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "knapsack",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.02_demo",
        "description": "CSEUFLX_Algorithms_GP.02_demo",
        "peekOfCode": "knapsack = naive_fill_knapsack(knapsack, items)\nprint_results(items, knapsack)\n# # Test 2 - Brute Force\n# print('Starting test 2, brute force...')\n# items = medium_cave\n# start = time.time()\n# knapsack = brute_force_fill_knapsack(knapsack, items)\n# print_results(items, knapsack)\n# Test 3 - Brute Force\n# print('Starting test 3, brute force...')",
        "detail": "CSEUFLX_Algorithms_GP.02_demo",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "class Item:\n    def __init__(self, name, weight, value):\n        self.name = name\n        self.weight = weight\n        self.value = value\n        self.efficiency = 0\n    def __str__(self):\n        return f'{self.name}, {self.weight} lbs, ${self.value}'\nsmall_cave = []\nmedium_cave = []",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "fill_cave_with_items",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "def fill_cave_with_items():\n    '''Randomly generates Item objects and \n    creates caves of different sizes for testing\n    '''\n    names = [\"painting\", \"jewel\", \"coin\", \"statue\", \"treasure chest\", \n              \"gold\", \"silver\", \"sword\", \"goblet\", \"hat\"]\n    for _ in range(5):\n        n = names[random.randint(0,4)]\n        w = random.randint(1, 25)\n        v = random.randint(1, 100)",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "print_results",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "def print_results(items, knapsack):\n    '''Print out contents of what the algorithm  \n    calculated should be added to the knapsack\n    '''\n    # print(f'\\nItems in the cave:')\n    # for i in items:\n    #     print(i)\n    print('\\nBest items to put in knapsack: ')\n    for item in knapsack:\n        print(f'-{item}')",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "naive_fill_knapsack",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "def naive_fill_knapsack(sack, items):\n    '''# Put highest value items in knapsack until full\n    (other basic, naive approaches exist)\n    '''\n    # sort items by value\n    items.sort(key=lambda x: x.value, reverse=True)\n    sack = []\n    weight = 0\n    # put most valuable items in knapsack until full\n    for i in items:",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "brute_force_fill_knapsack",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "def brute_force_fill_knapsack(sack, items):\n    ''' Try every combination to find the best'''\n    # generate all possible combinations of items\n    combos = [] \n    sack = []\n    for i in range(1, len(items)+1):\n        list_of_combos = list(combinations(items, i))\n        for combo in list_of_combos:\n            combos.append(list(combo))\n    best_value = -1",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "greedy_fill_knapsack",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "def greedy_fill_knapsack(sack, items):\n    '''Use ratio of [value] / [weight] \n    to choose items for knapsack\n    '''\n    # calculate efficiencies\n    for i in items:\n        i.efficiency = i.value/i.weight\n    # sort items by efficiency\n    items.sort(key=lambda x: x.efficiency, reverse=True)\n    # put items in knapsack until full",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "small_cave",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "small_cave = []\nmedium_cave = []\nlarge_cave = []\ndef fill_cave_with_items():\n    '''Randomly generates Item objects and \n    creates caves of different sizes for testing\n    '''\n    names = [\"painting\", \"jewel\", \"coin\", \"statue\", \"treasure chest\", \n              \"gold\", \"silver\", \"sword\", \"goblet\", \"hat\"]\n    for _ in range(5):",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "medium_cave",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "medium_cave = []\nlarge_cave = []\ndef fill_cave_with_items():\n    '''Randomly generates Item objects and \n    creates caves of different sizes for testing\n    '''\n    names = [\"painting\", \"jewel\", \"coin\", \"statue\", \"treasure chest\", \n              \"gold\", \"silver\", \"sword\", \"goblet\", \"hat\"]\n    for _ in range(5):\n        n = names[random.randint(0,4)]",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "large_cave",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "large_cave = []\ndef fill_cave_with_items():\n    '''Randomly generates Item objects and \n    creates caves of different sizes for testing\n    '''\n    names = [\"painting\", \"jewel\", \"coin\", \"statue\", \"treasure chest\", \n              \"gold\", \"silver\", \"sword\", \"goblet\", \"hat\"]\n    for _ in range(5):\n        n = names[random.randint(0,4)]\n        w = random.randint(1, 25)",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "knapsack",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "knapsack = []\n# Test 1 - Naive\nprint('\\nStarting test 1, naive approach...')\nitems = large_cave\nstart = time.time()\nknapsack = naive_fill_knapsack(knapsack, items)\nprint_results(items, knapsack)\n# # Test 2 - Brute Force\n# print('Starting test 2, brute force...')\n# items = medium_cave",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "items = large_cave\nstart = time.time()\nknapsack = naive_fill_knapsack(knapsack, items)\nprint_results(items, knapsack)\n# # Test 2 - Brute Force\n# print('Starting test 2, brute force...')\n# items = medium_cave\n# start = time.time()\n# knapsack = brute_force_fill_knapsack(knapsack, items)\n# print_results(items, knapsack)",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "start = time.time()\nknapsack = naive_fill_knapsack(knapsack, items)\nprint_results(items, knapsack)\n# # Test 2 - Brute Force\n# print('Starting test 2, brute force...')\n# items = medium_cave\n# start = time.time()\n# knapsack = brute_force_fill_knapsack(knapsack, items)\n# print_results(items, knapsack)\n# # Test 3 - Brute Force",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "knapsack",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.03_other",
        "description": "CSEUFLX_Algorithms_GP.03_other",
        "peekOfCode": "knapsack = naive_fill_knapsack(knapsack, items)\nprint_results(items, knapsack)\n# # Test 2 - Brute Force\n# print('Starting test 2, brute force...')\n# items = medium_cave\n# start = time.time()\n# knapsack = brute_force_fill_knapsack(knapsack, items)\n# print_results(items, knapsack)\n# # Test 3 - Brute Force\n# print('Starting test 3, brute force...')",
        "detail": "CSEUFLX_Algorithms_GP.03_other",
        "documentation": {}
    },
    {
        "label": "naive_scavenging",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "def naive_scavenging(field):\n    '''This solution generates all possible sequences of directions we may \n    move. Then, it sums up the values, counts how many sequences produce the \n    target sum, and calculates the odds that someone rolling `n` dice will \n    end up with a sum equal to 3 times the number of dice.\n    '''\n    # generate all possible permutations of 'ne', 'e' or 'se' movements \n    # that get a person across the field\n    # TODO - which function in Python's `itertools` module can we use\n    # to generate all possible paths?",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "dp_scavenging",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "def dp_scavenging(field):\n    '''This function utilizes dynamic programming to reduce the number of \n    duplicate calculations that are performed (compared to the naive \n    approach). After a coordinate is visited, we save both i) the max\n    amount of gold that can be picked up from that coordinate and ii) the\n    path you'd have to travel to pick up maximum gold from that point.\n    Subpaths on the eastern side of the field that we visited multiple times\n    in the naive approach are only visited once using dynamic programming.\n    '''\n    gold_cache = [[0 for _ in range(len(field))] ",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "print_field",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "def print_field(field, label):\n    '''Helper function to display 2D fields  \n    with gold at different coordinates\n    '''\n    print(label)\n    for row in field:\n        output = ''\n        for r in row:\n            output += f' {r}'\n        print(f'{output}\\n')",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "Input",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "Input =    [[2, 4, 1],\n        W   [0, 3, 2],    E\n            [1, 2, 6] \n            ]\n                S\nOutput = '27.098 can be acquired by moving\n['se', 'se']'  \n(based on the Gold Mine Problem at \nhttps://www.geeksforgeeks.org/gold-mine-problem/?ref=lbp)\n'''",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "Output",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "Output = '27.098 can be acquired by moving\n['se', 'se']'  \n(based on the Gold Mine Problem at \nhttps://www.geeksforgeeks.org/gold-mine-problem/?ref=lbp)\n'''\nimport random\nimport time\nfrom itertools import product \ndef naive_scavenging(field):\n    '''This solution generates all possible sequences of directions we may ",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "small_field",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "small_field = []\nsize = 5\nfor _ in range(size):\n    row = []\n    for _ in range(size):\n        row.append(round(random.random()*random.randint(1, 9), 3))\n    small_field.append(row)\nprint_field(small_field, 'Small field')\nlarge_field = []\nsize = 16",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "size = 5\nfor _ in range(size):\n    row = []\n    for _ in range(size):\n        row.append(round(random.random()*random.randint(1, 9), 3))\n    small_field.append(row)\nprint_field(small_field, 'Small field')\nlarge_field = []\nsize = 16\nfor _ in range(size):",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "large_field",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "large_field = []\nsize = 16\nfor _ in range(size):\n    row = []\n    for _ in range(size):\n        row.append(round(random.random()*random.randint(1, 9), 3))\n    large_field.append(row\n    )\n# print_field(large_field, 'Large field')\n# Test 1 - Naive",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "size = 16\nfor _ in range(size):\n    row = []\n    for _ in range(size):\n        row.append(round(random.random()*random.randint(1, 9), 3))\n    large_field.append(row\n    )\n# print_field(large_field, 'Large field')\n# Test 1 - Naive\nprint('Starting test 1, naive approach...\\ncrossing small field...\\n')",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "start = time.time()\nprint(f'{naive_scavenging(small_field)}')\nprint(f'\\nResult calculated in {time.time()-start:.5f} seconds')\nprint('\\n--------------------------------\\n')\n# Test 2 - Naive\nprint('Starting test 2, naive approach...\\ncrossing large field...\\n')\nstart = time.time()\nprint(f'\\n{naive_scavenging(large_field)}')\nprint(f'\\nResult calculated in {time.time()-start:.5f} seconds')\nprint('\\n--------------------------------\\n')",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "start = time.time()\nprint(f'\\n{naive_scavenging(large_field)}')\nprint(f'\\nResult calculated in {time.time()-start:.5f} seconds')\nprint('\\n--------------------------------\\n')\n# Test 3 - Dynamic Programming\nprint('Starting test 3, dynamic programming...\\ncrossing small field...\\n')\nstart = time.time()\nprint(f'\\n{dp_scavenging(small_field)}')\nprint(f'\\nResult calculated in {time.time()-start:.5f} seconds')\nprint('\\n--------------------------------\\n')",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "start = time.time()\nprint(f'\\n{dp_scavenging(small_field)}')\nprint(f'\\nResult calculated in {time.time()-start:.5f} seconds')\nprint('\\n--------------------------------\\n')\n# Test 4 - Dynamic Programming\nprint('Starting test 4, dynamic programming...\\ncrossing large field...\\n')\nstart = time.time()\nprint(f'\\n{dp_scavenging(large_field)}')\nprint(f'\\nResult calculated in {time.time()-start:.5f} seconds')\nprint('\\n--------------------------------\\n')",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "description": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "peekOfCode": "start = time.time()\nprint(f'\\n{dp_scavenging(large_field)}')\nprint(f'\\nResult calculated in {time.time()-start:.5f} seconds')\nprint('\\n--------------------------------\\n')",
        "detail": "CSEUFLX_Algorithms_GP.04_better_solutions_pirates",
        "documentation": {}
    },
    {
        "label": "single_number",
        "kind": 2,
        "importPath": "CSEUFLX_Algorithms_GP.single_number",
        "description": "CSEUFLX_Algorithms_GP.single_number",
        "peekOfCode": "def single_number(arr): # time O(2n) # space O(n)\n    # set a new dictionary of counts\n    # figure out the counts\n    # iterate over the array / luist\n        # if the number is in counts\n            # increment the value at the key of number\n        # otherwise\n            # set the value at the key number to 1\n    # go over the counts dictionar and find the odd one out\n    # interate over the items in counts, extract num and item",
        "detail": "CSEUFLX_Algorithms_GP.single_number",
        "documentation": {}
    }
]